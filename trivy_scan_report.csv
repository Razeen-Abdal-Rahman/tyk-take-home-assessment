CVE ID,Package Name,Severity,Version,Fixed in version,Description,Source(image name)
CVE-2025-3576,libgssapi-krb5-2,MEDIUM,1.20.1-2+deb12u2,N/A,"A vulnerability in the MIT Kerberos implementation allows GSSAPI-protected messages using RC4-HMAC-MD5 to be spoofed due to weaknesses in the MD5 checksum design. If RC4 is preferred over stronger encryption types\, an attacker could exploit MD5 collisions to forge message integrity codes. This may lead to unauthorized message tampering.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57979,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  pps: Fix a use-after-free  On a board running ntpd and gpsd\, I'm seeing a consistent use-after-free in sys_exit() from gpsd when rebooting:      pps pps1: removed     ------------[ cut here ]------------     kobject: '(null)' (00000000db4bec24): is not initialized\, yet kobject_put() is being called.     WARNING: CPU: 2 PID: 440 at lib/kobject.c:734 kobject_put+0x120/0x150     CPU: 2 UID: 299 PID: 440 Comm: gpsd Not tainted 6.11.0-rc6-00308-gb31c44928842 #1     Hardware name: Raspberry Pi 4 Model B Rev 1.1 (DT)     pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)     pc : kobject_put+0x120/0x150     lr : kobject_put+0x120/0x150     sp : ffffffc0803d3ae0     x29: ffffffc0803d3ae0 x28: ffffff8042dc9738 x27: 0000000000000001     x26: 0000000000000000 x25: ffffff8042dc9040 x24: ffffff8042dc9440     x23: ffffff80402a4620 x22: ffffff8042ef4bd0 x21: ffffff80405cb600     x20: 000000000008001b x19: ffffff8040b3b6e0 x18: 0000000000000000     x17: 0000000000000000 x16: 0000000000000000 x15: 696e6920746f6e20     x14: 7369203a29343263 x13: 205d303434542020 x12: 0000000000000000     x11: 0000000000000000 x10: 0000000000000000 x9 : 0000000000000000     x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000000000     x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000000     x2 : 0000000000000000 x1 : 0000000000000000 x0 : 0000000000000000     Call trace:      kobject_put+0x120/0x150      cdev_put+0x20/0x3c      __fput+0x2c4/0x2d8      ____fput+0x1c/0x38      task_work_run+0x70/0xfc      do_exit+0x2a0/0x924      do_group_exit+0x34/0x90      get_signal+0x7fc/0x8c0      do_signal+0x128/0x13b4      do_notify_resume+0xdc/0x160      el0_svc+0xd4/0xf8      el0t_64_sync_handler+0x140/0x14c      el0t_64_sync+0x190/0x194     ---[ end trace 0000000000000000 ]---  ...followed by more symptoms of corruption\, with similar stacks:      refcount_t: underflow; use-after-free.     kernel BUG at lib/list_debug.c:62!     Kernel panic - not syncing: Oops - BUG: Fatal exception  This happens because pps_device_destruct() frees the pps_device with the embedded cdev immediately after calling cdev_del()\, but\, as the comment above cdev_del() notes\, fops for previously opened cdevs are still callable even after cdev_del() returns. I think this bug has always been there: I can't explain why it suddenly started happening every time I reboot this particular board.  In commit d953e0e837e6 (""pps: Fix a use-after free bug when unregistering a source."")\, George Spelvin suggested removing the embedded cdev. That seems like the simplest way to fix this\, so I've implemented his suggestion\, using __register_chrdev() with pps_idr becoming the source of truth for which minor corresponds to which device.  But now that pps_idr defines userspace visibility instead of cdev_add()\, we need to be sure the pps->dev refcount can't reach zero while userspace can still find it again. So\, the idr_remove() call moves to pps_unregister_cdev()\, and pps_idr now holds a reference to pps->dev.      pps_core: source serial1 got cdev (251:1)     <...>     pps pps1: removed     pps_core: unregistering pps1     pps_core: deallocating pps1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57978,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: imx-jpeg: Fix potential error pointer dereference in detach_pm()  The proble is on the first line:  \tif (jpeg->pd_dev[i] && !pm_runtime_suspended(jpeg->pd_dev[i]))  If jpeg->pd_dev[i] is an error pointer\, then passing it to pm_runtime_suspended() will lead to an Oops.  The other conditions check for both error pointers and NULL\, but it would be more clear to use the IS_ERR_OR_NULL() check for that.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-21264,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In multiple functions of mem_protect.c\, there is a possible way to access hypervisor memory due to a memory access check in the wrong place. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.  ",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57798,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/dp_mst: Ensure mst_primary pointer is valid in drm_dp_mst_handle_up_req()  While receiving an MST up request message from one thread in drm_dp_mst_handle_up_req()\, the MST topology could be removed from another thread via drm_dp_mst_topology_mgr_set_mst(false)\, freeing mst_primary and setting drm_dp_mst_topology_mgr::mst_primary to NULL. This could lead to a NULL deref/use-after-free of mst_primary in drm_dp_mst_handle_up_req().  Avoid the above by holding a reference for mst_primary in drm_dp_mst_handle_up_req() while it's used.  v2: Fix kfreeing the request if getting an mst_primary reference fails.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57973,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  rdma/cxgb4: Prevent potential integer overflow on 32bit  The ""gl->tot_len"" variable is controlled by the user.  It comes from process_responses().  On 32bit systems\, the ""gl->tot_len + sizeof(struct cpl_pass_accept_req) + sizeof(struct rss_header)"" addition could have an integer wrapping bug.  Use size_add() to prevent this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31081,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in drivers/media/test-drivers/vidtv/vidtv_bridge.c in the Linux kernel 6.2. There is a NULL pointer dereference in vidtv_mux_stop_thread. In vidtv_stop_streaming\, after dvb->mux=NULL occurs\, it executes vidtv_mux_stop_thread(dvb->mux).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57795,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/rxe: Remove the direct link to net_device  The similar patch in siw is in the link: https://git.kernel.org/rdma/rdma/c/16b87037b48889  This problem also occurred in RXE. The following analyze this problem. In the following Call Traces: "" BUG: KASAN: slab-use-after-free in dev_get_flags+0x188/0x1d0 net/core/dev.c:8782 Read of size 4 at addr ffff8880554640b0 by task kworker/1:4/5295  CPU: 1 UID: 0 PID: 5295 Comm: kworker/1:4 Not tainted 6.12.0-rc3-syzkaller-00399-g9197b73fd7bb #0 Hardware name: Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: infiniband ib_cache_event_task Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:377 [inline]  print_report+0x169/0x550 mm/kasan/report.c:488  kasan_report+0x143/0x180 mm/kasan/report.c:601  dev_get_flags+0x188/0x1d0 net/core/dev.c:8782  rxe_query_port+0x12d/0x260 drivers/infiniband/sw/rxe/rxe_verbs.c:60  __ib_query_port drivers/infiniband/core/device.c:2111 [inline]  ib_query_port+0x168/0x7d0 drivers/infiniband/core/device.c:2143  ib_cache_update+0x1a9/0xb80 drivers/infiniband/core/cache.c:1494  ib_cache_event_task+0xf3/0x1e0 drivers/infiniband/core/cache.c:1568  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa65/0x1850 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f2/0x390 kernel/kthread.c:389  ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK> ""  1). In the link [1]\,  ""  infiniband syz2: set down ""  This means that on 839.350575\, the event ib_cache_event_task was sent andi queued in ib_wq.  2). In the link [1]\,  ""  team0 (unregistering): Port device team_slave_0 removed ""  It indicates that before 843.251853\, the net device should be freed.  3). In the link [1]\,  ""  BUG: KASAN: slab-use-after-free in dev_get_flags+0x188/0x1d0 ""  This means that on 850.559070\, this slab-use-after-free problem occurred.  In all\, on 839.350575\, the event ib_cache_event_task was sent and queued in ib_wq\,  before 843.251853\, the net device veth was freed.  on 850.559070\, this event was executed\, and the mentioned freed net device was called. Thus\, the above call trace occurred.  [1] https://syzkaller.appspot.com/x/log.txt?x=12e7025f980000",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31082,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in drivers/tty/n_gsm.c in the Linux kernel 6.2. There is a sleeping function called from an invalid context in gsmld_write\, which will block the kernel. Note: This has been disputed by 3rd parties as not a valid vulnerability.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-18018,coreutils,LOW,9.1-1,N/A,"In GNU Coreutils through 8.29\, chown-core.c in chown and chgrp does not prevent replacement of a plain file with a symlink during use of the POSIX ""-R -L"" options\, which allows local users to modify the ownership of arbitrary files by leveraging a race condition.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57977,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  memcg: fix soft lockup in the OOM process  A soft lockup issue was found in the product with about 56\,000 tasks were in the OOM cgroup\, it was traversing them when the soft lockup was triggered.  watchdog: BUG: soft lockup - CPU#2 stuck for 23s! [VM Thread:1503066] CPU: 2 PID: 1503066 Comm: VM Thread Kdump: loaded Tainted: G Hardware name: Huawei Cloud OpenStack Nova\, BIOS RIP: 0010:console_unlock+0x343/0x540 RSP: 0000:ffffb751447db9a0 EFLAGS: 00000247 ORIG_RAX: ffffffffffffff13 RAX: 0000000000000001 RBX: 0000000000000000 RCX: 00000000ffffffff RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000247 RBP: ffffffffafc71f90 R08: 0000000000000000 R09: 0000000000000040 R10: 0000000000000080 R11: 0000000000000000 R12: ffffffffafc74bd0 R13: ffffffffaf60a220 R14: 0000000000000247 R15: 0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f2fe6ad91f0 CR3: 00000004b2076003 CR4: 0000000000360ee0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  vprintk_emit+0x193/0x280  printk+0x52/0x6e  dump_task+0x114/0x130  mem_cgroup_scan_tasks+0x76/0x100  dump_header+0x1fe/0x210  oom_kill_process+0xd1/0x100  out_of_memory+0x125/0x570  mem_cgroup_out_of_memory+0xb5/0xd0  try_charge+0x720/0x770  mem_cgroup_try_charge+0x86/0x180  mem_cgroup_try_charge_delay+0x1c/0x40  do_anonymous_page+0xb5/0x390  handle_mm_fault+0xc4/0x1f0  This is because thousands of processes are in the OOM cgroup\, it takes a long time to traverse all of them.  As a result\, this lead to soft lockup in the OOM process.  To fix this issue\, call 'cond_resched' in the 'mem_cgroup_scan_tasks' function per 1000 iterations.  For global OOM\, call 'touch_softlockup_watchdog' per 1000 iterations to avoid this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31085,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in drivers/mtd/ubi/cdev.c in the Linux kernel 6.2. There is a divide-by-zero error in do_div(sz\,mtd->erasesize)\, used indirectly by ctrl_cdev_ioctl\, when mtd->erasesize is 0.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2010-5321,linux-libc-dev,LOW,6.1.115-1,N/A,"Memory leak in drivers/media/video/videobuf-core.c in the videobuf subsystem in the Linux kernel 2.6.x through 4.x allows local users to cause a denial of service (memory consumption) by leveraging /dev/video access for a series of mmap calls that require new allocations\, a different vulnerability than CVE-2007-6761.  NOTE: as of 2016-06-18\, this affects only 11 drivers that have not been updated to use videobuf2 instead of videobuf.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57976,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: do proper folio cleanup when cow_file_range() failed  [BUG] When testing with COW fixup marked as BUG_ON() (this is involved with the new pin_user_pages*() change\, which should not result new out-of-band dirty pages)\, I hit a crash triggered by the BUG_ON() from hitting COW fixup path.  This BUG_ON() happens just after a failed btrfs_run_delalloc_range():    BTRFS error (device dm-2): failed to run delalloc range\, root 348 ino 405 folio 65536 submit_bitmap 6-15 start 90112 len 106496: -28   ------------[ cut here ]------------   kernel BUG at fs/btrfs/extent_io.c:1444!   Internal error: Oops - BUG: 00000000f2000800 [#1] SMP   CPU: 0 UID: 0 PID: 434621 Comm: kworker/u24:8 Tainted: G           OE      6.12.0-rc7-custom+ #86   Hardware name: QEMU KVM Virtual Machine\, BIOS unknown 2/2/2022   Workqueue: events_unbound btrfs_async_reclaim_data_space [btrfs]   pc : extent_writepage_io+0x2d4/0x308 [btrfs]   lr : extent_writepage_io+0x2d4/0x308 [btrfs]   Call trace:    extent_writepage_io+0x2d4/0x308 [btrfs]    extent_writepage+0x218/0x330 [btrfs]    extent_write_cache_pages+0x1d4/0x4b0 [btrfs]    btrfs_writepages+0x94/0x150 [btrfs]    do_writepages+0x74/0x190    filemap_fdatawrite_wbc+0x88/0xc8    start_delalloc_inodes+0x180/0x3b0 [btrfs]    btrfs_start_delalloc_roots+0x174/0x280 [btrfs]    shrink_delalloc+0x114/0x280 [btrfs]    flush_space+0x250/0x2f8 [btrfs]    btrfs_async_reclaim_data_space+0x180/0x228 [btrfs]    process_one_work+0x164/0x408    worker_thread+0x25c/0x388    kthread+0x100/0x118    ret_from_fork+0x10/0x20   Code: aa1403e1 9402f3ef aa1403e0 9402f36f (d4210000)   ---[ end trace 0000000000000000 ]---  [CAUSE] That failure is mostly from cow_file_range()\, where we can hit -ENOSPC.  Although the -ENOSPC is already a bug related to our space reservation code\, let's just focus on the error handling.  For example\, we have the following dirty range [0\, 64K) of an inode\, with 4K sector size and 4K page size:     0        16K        32K       48K       64K    |///////////////////////////////////////|    |#######################################|  Where |///| means page are still dirty\, and |###| means the extent io tree has EXTENT_DELALLOC flag.  - Enter extent_writepage() for page 0  - Enter btrfs_run_delalloc_range() for range [0\, 64K)  - Enter cow_file_range() for range [0\, 64K)  - Function btrfs_reserve_extent() only reserved one 16K extent   So we created extent map and ordered extent for range [0\, 16K)     0        16K        32K       48K       64K    |////////|//////////////////////////////|    |<- OE ->|##############################|     And range [0\, 16K) has its delalloc flag cleared.    But since we haven't yet submit any bio\, involved 4 pages are still    dirty.  - Function btrfs_reserve_extent() returns with -ENOSPC   Now we have to run error cleanup\, which will clear all   EXTENT_DELALLOC* flags and clear the dirty flags for the remaining   ranges:     0        16K        32K       48K       64K    |////////|                              |    |        |                              |    Note that range [0\, 16K) still has its pages dirty.  - Some time later\, writeback is triggered again for the range [0\, 16K)   since the page range still has dirty flags.  - btrfs_run_delalloc_range() will do nothing because there is no   EXTENT_DELALLOC flag.  - extent_writepage_io() finds page 0 has no ordered flag   Which falls into the COW fixup path\, triggering the BUG_ON().  Unfortunately this error handling bug dates back to the introduction of btrfs.  Thankfully with the abuse of COW fixup\, at least it won't crash the kernel.  [FIX] Instead of immediately unlocking the extent and folios\, we keep the extent and folios locked until either erroring out or the whole delalloc range finished.  When the whole delalloc range finished without error\, we just unlock the whole range with PAGE_SET_ORDERED (and PAGE_UNLOCK for !keep_locked cases) ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57792,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  power: supply: gpio-charger: Fix set charge current limits  Fix set charge current limits for devices which allow to set the lowest charge current limit to be greater zero. If requested charge current limit is below lowest limit\, the index equals current_limit_map_size which leads to accessing memory beyond allocated memory.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57975,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: do proper folio cleanup when run_delalloc_nocow() failed  [BUG] With CONFIG_DEBUG_VM set\, test case generic/476 has some chance to crash with the following VM_BUG_ON_FOLIO():    BTRFS error (device dm-3): cow_file_range failed\, start 1146880 end 1253375 len 106496 ret -28   BTRFS error (device dm-3): run_delalloc_nocow failed\, start 1146880 end 1253375 len 106496 ret -28   page: refcount:4 mapcount:0 mapping:00000000592787cc index:0x12 pfn:0x10664   aops:btrfs_aops [btrfs] ino:101 dentry name(?):""f1774""   flags: 0x2fffff80004028(uptodate|lru|private|node=0|zone=2|lastcpupid=0xfffff)   page dumped because: VM_BUG_ON_FOLIO(!folio_test_locked(folio))   ------------[ cut here ]------------   kernel BUG at mm/page-writeback.c:2992!   Internal error: Oops - BUG: 00000000f2000800 [#1] SMP   CPU: 2 UID: 0 PID: 3943513 Comm: kworker/u24:15 Tainted: G           OE      6.12.0-rc7-custom+ #87   Tainted: [O]=OOT_MODULE\, [E]=UNSIGNED_MODULE   Hardware name: QEMU KVM Virtual Machine\, BIOS unknown 2/2/2022   Workqueue: events_unbound btrfs_async_reclaim_data_space [btrfs]   pc : folio_clear_dirty_for_io+0x128/0x258   lr : folio_clear_dirty_for_io+0x128/0x258   Call trace:    folio_clear_dirty_for_io+0x128/0x258    btrfs_folio_clamp_clear_dirty+0x80/0xd0 [btrfs]    __process_folios_contig+0x154/0x268 [btrfs]    extent_clear_unlock_delalloc+0x5c/0x80 [btrfs]    run_delalloc_nocow+0x5f8/0x760 [btrfs]    btrfs_run_delalloc_range+0xa8/0x220 [btrfs]    writepage_delalloc+0x230/0x4c8 [btrfs]    extent_writepage+0xb8/0x358 [btrfs]    extent_write_cache_pages+0x21c/0x4e8 [btrfs]    btrfs_writepages+0x94/0x150 [btrfs]    do_writepages+0x74/0x190    filemap_fdatawrite_wbc+0x88/0xc8    start_delalloc_inodes+0x178/0x3a8 [btrfs]    btrfs_start_delalloc_roots+0x174/0x280 [btrfs]    shrink_delalloc+0x114/0x280 [btrfs]    flush_space+0x250/0x2f8 [btrfs]    btrfs_async_reclaim_data_space+0x180/0x228 [btrfs]    process_one_work+0x164/0x408    worker_thread+0x25c/0x388    kthread+0x100/0x118    ret_from_fork+0x10/0x20   Code: 910a8021 a90363f7 a9046bf9 94012379 (d4210000)   ---[ end trace 0000000000000000 ]---  [CAUSE] The first two lines of extra debug messages show the problem is caused by the error handling of run_delalloc_nocow().  E.g. we have the following dirtied range (4K blocksize 4K page size):      0                 16K                  32K     |//////////////////////////////////////|     |  Pre-allocated  |  And the range [0\, 16K) has a preallocated extent.  - Enter run_delalloc_nocow() for range [0\, 16K)   Which found range [0\, 16K) is preallocated\, can do the proper NOCOW   write.  - Enter fallback_to_fow() for range [16K\, 32K)   Since the range [16K\, 32K) is not backed by preallocated extent\, we   have to go COW.  - cow_file_range() failed for range [16K\, 32K)   So cow_file_range() will do the clean up by clearing folio dirty\,   unlock the folios.    Now the folios in range [16K\, 32K) is unlocked.  - Enter extent_clear_unlock_delalloc() from run_delalloc_nocow()   Which is called with PAGE_START_WRITEBACK to start page writeback.   But folios can only be marked writeback when it's properly locked\,   thus this triggered the VM_BUG_ON_FOLIO().  Furthermore there is another hidden but common bug that run_delalloc_nocow() is not clearing the folio dirty flags in its error handling path. This is the common bug shared between run_delalloc_nocow() and cow_file_range().  [FIX] - Clear folio dirty for range [@start\, @cur_offset)   Introduce a helper\, cleanup_dirty_folios()\, which   will find and lock the folio in the range\, clear the dirty flag and   start/end the writeback\, with the extra handling for the   @locked_folio.  - Introduce a helper to clear folio dirty\, start and end writeback  - Introduce a helper to record the last failed COW range end   This is to trace which range we should skip\, to avoid double   unlocking.  - Skip the failed COW range for the e ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57791,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: check return value of sock_recvmsg when draining clc data  When receiving clc msg\, the field length in smc_clc_msg_hdr indicates the length of msg should be received from network and the value should not be fully trusted as it is from the network. Once the value of length exceeds the value of buflen in function smc_clc_wait_msg it may run into deadloop when trying to drain the remaining data exceeding buflen.  This patch checks the return value of sock_recvmsg when draining data in case of deadloop in draining.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57974,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  udp: Deal with race between UDP socket address change and rehash  If a UDP socket changes its local address while it's receiving datagrams\, as a result of connect()\, there is a period during which a lookup operation might fail to find it\, after the address is changed but before the secondary hash (port and address) and the four-tuple hash (local and remote ports and addresses) are updated.  Secondary hash chains were introduced by commit 30fff9231fad (""udp: bind() optimisation"") and\, as a result\, a rehash operation became needed to make a bound socket reachable again after a connect().  This operation was introduced by commit 719f835853a9 (""udp: add rehash on connect()"") which isn't however a complete fix: the socket will be found once the rehashing completes\, but not while it's pending.  This is noticeable with a socat(1) server in UDP4-LISTEN mode\, and a client sending datagrams to it. After the server receives the first datagram (cf. _xioopen_ipdgram_listen())\, it issues a connect() to the address of the sender\, in order to set up a directed flow.  Now\, if the client\, running on a different CPU thread\, happens to send a (subsequent) datagram while the server's socket changes its address\, but is not rehashed yet\, this will result in a failed lookup and a port unreachable error delivered to the client\, as apparent from the following reproducer:    LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4))   dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in    while :; do   \ttaskset -c 1 socat UDP4-LISTEN:1337\,null-eof OPEN:tmp.out\,create\,trunc &   \tsleep 0.1 || sleep 1   \ttaskset -c 2 socat OPEN:tmp.in UDP4:localhost:1337\,shut-null   \twait   done  where the client will eventually get ECONNREFUSED on a write() (typically the second or third one of a given iteration):    2024/11/13 21:28:23 socat[46901] E write(6\, 0x556db2e3c000\, 8192): Connection refused  This issue was first observed as a seldom failure in Podman's tests checking UDP functionality while using pasta(1) to connect the container's network namespace\, which leads us to a reproducer with the lookup error resulting in an ICMP packet on a tap device:    LOCAL_ADDR=""$(ip -j -4 addr show|jq -rM '.[] | .addr_info[0] | select(.scope == ""global"").local')""    while :; do   \t./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN:1337\,null-eof OPEN:tmp.out\,create\,trunc &   \tsleep 0.2 || sleep 1   \tsocat OPEN:tmp.in UDP4:${LOCAL_ADDR}:1337\,shut-null   \twait   \tcmp tmp.in tmp.out   done  Once this fails:    tmp.in tmp.out differ: char 8193\, line 29  we can finally have a look at what's going on:    $ tshark -r pasta.pcap       1   0.000000           :: ? ff02::16     ICMPv6 110 Multicast Listener Report Message v2       2   0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192       3   0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192       4   0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192       5   0.168827 c6:47:05:8d:dc:04 ? Broadcast    ARP 42 Who has 88.198.0.161? Tell 88.198.0.164       6   0.168851 9a:55:9a:55:9a:55 ? c6:47:05:8d:dc:04 ARP 42 88.198.0.161 is at 9a:55:9a:55:9a:55       7   0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192       8   0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable)       9   0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192      10   0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192      11   0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096      12   0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0  On the third datagram received\, the network namespace of the container initiates an ARP lookup to deliver the ICMP message.  In another variant of this reproducer\, starting the client with:    strace -f pasta --config-net -u 1337 socat UDP4-LISTEN:1337\,null-eof OPEN:tmp.out\,create\,tru ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49996,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  cifs: Fix buffer overflow when parsing NFS reparse points  ReparseDataLength is sum of the InodeType size and DataBuffer size. So to get DataBuffer size it is needed to subtract InodeType's size from ReparseDataLength.  Function cifs_strndup_from_utf16() is currentlly accessing buf->DataBuffer at position after the end of the buffer because it does not subtract InodeType size from the length. Fix this problem and correctly subtract variable len.  Member InodeType is present only when reparse buffer is large enough. Check for ReparseDataLength before accessing InodeType to prevent another invalid memory access.  Major and minor rdev values are present also only when reparse buffer is large enough. Check for reparse buffer size before calling reparse_mkdev().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41045,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Defer work in bpf_timer_cancel_and_free  Currently\, the same case as previous patch (two timer callbacks trying to cancel each other) can be invoked through bpf_map_update_elem as well\, or more precisely\, freeing map elements containing timers. Since this relies on hrtimer_cancel as well\, it is prone to the same deadlock situation as the previous patch.  It would be sufficient to use hrtimer_try_to_cancel to fix this problem\, as the timer cannot be enqueued after async_cancel_and_free. Once async_cancel_and_free has been done\, the timer must be reinitialized before it can be armed again. The callback running in parallel trying to arm the timer will fail\, and freeing bpf_hrtimer without waiting is sufficient (given kfree_rcu)\, and bpf_timer_cb will return HRTIMER_NORESTART\, preventing the timer from being rearmed again.  However\, there exists a UAF scenario where the callback arms the timer before entering this function\, such that if cancellation fails (due to timer callback invoking this routine\, or the target timer callback running concurrently). In such a case\, if the timer expiration is significantly far in the future\, the RCU grace period expiration happening before it will free the bpf_hrtimer state and along with it the struct hrtimer\, that is enqueued.  Hence\, it is clear cancellation needs to occur after async_cancel_and_free\, and yet it cannot be done inline due to deadlock issues. We thus modify bpf_timer_cancel_and_free to defer work to the global workqueue\, adding a work_struct alongside rcu_head (both used at _different_ points of time\, so can share space).  Update existing code comments to reflect the new state of affairs.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22075,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rtnetlink: Allocate vfinfo size for VF GUIDs when supported  Commit 30aad41721e0 (""net/core: Add support for getting VF GUIDs"") added support for getting VF port and node GUIDs in netlink ifinfo messages\, but their size was not taken into consideration in the function that allocates the netlink message\, causing the following warning when a netlink message is filled with many VF port and node GUIDs:  # echo 64 > /sys/bus/pci/devices/0000\\:08\\:00.0/sriov_numvfs  # ip link show dev ib0  RTNETLINK answers: Message too long  Cannot send link get request: Message too long  Kernel warning:   ------------[ cut here ]------------  WARNING: CPU: 2 PID: 1930 at net/core/rtnetlink.c:4151 rtnl_getlink+0x586/0x5a0  Modules linked in: xt_conntrack xt_MASQUERADE nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter overlay mlx5_ib macsec mlx5_core tls rpcrdma rdma_ucm ib_uverbs ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm iw_cm ib_ipoib fuse ib_cm ib_core  CPU: 2 UID: 0 PID: 1930 Comm: ip Not tainted 6.14.0-rc2+ #1  Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014  RIP: 0010:rtnl_getlink+0x586/0x5a0  Code: cb 82 e8 3d af 0a 00 4d 85 ff 0f 84 08 ff ff ff 4c 89 ff 41 be ea ff ff ff e8 66 63 5b ff 49 c7 07 80 4f cb 82 e9 36 fc ff ff <0f> 0b e9 16 fe ff ff e8 de a0 56 00 66 66 2e 0f 1f 84 00 00 00 00  RSP: 0018:ffff888113557348 EFLAGS: 00010246  RAX: 00000000ffffffa6 RBX: ffff88817e87aa34 RCX: dffffc0000000000  RDX: 0000000000000003 RSI: 0000000000000000 RDI: ffff88817e87afb8  RBP: 0000000000000009 R08: ffffffff821f44aa R09: 0000000000000000  R10: ffff8881260f79a8 R11: ffff88817e87af00 R12: ffff88817e87aa00  R13: ffffffff8563d300 R14: 00000000ffffffa6 R15: 00000000ffffffff  FS:  00007f63a5dbf280(0000) GS:ffff88881ee00000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007f63a5ba4493 CR3: 00000001700fe002 CR4: 0000000000772eb0  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400  PKRU: 55555554  Call Trace:   <TASK>   ? __warn+0xa5/0x230   ? rtnl_getlink+0x586/0x5a0   ? report_bug+0x22d/0x240   ? handle_bug+0x53/0xa0   ? exc_invalid_op+0x14/0x50   ? asm_exc_invalid_op+0x16/0x20   ? skb_trim+0x6a/0x80   ? rtnl_getlink+0x586/0x5a0   ? __pfx_rtnl_getlink+0x10/0x10   ? rtnetlink_rcv_msg+0x1e5/0x860   ? __pfx___mutex_lock+0x10/0x10   ? rcu_is_watching+0x34/0x60   ? __pfx_lock_acquire+0x10/0x10   ? stack_trace_save+0x90/0xd0   ? filter_irq_stacks+0x1d/0x70   ? kasan_save_stack+0x30/0x40   ? kasan_save_stack+0x20/0x40   ? kasan_save_track+0x10/0x30   rtnetlink_rcv_msg+0x21c/0x860   ? entry_SYSCALL_64_after_hwframe+0x76/0x7e   ? __pfx_rtnetlink_rcv_msg+0x10/0x10   ? arch_stack_walk+0x9e/0xf0   ? rcu_is_watching+0x34/0x60   ? lock_acquire+0xd5/0x410   ? rcu_is_watching+0x34/0x60   netlink_rcv_skb+0xe0/0x210   ? __pfx_rtnetlink_rcv_msg+0x10/0x10   ? __pfx_netlink_rcv_skb+0x10/0x10   ? rcu_is_watching+0x34/0x60   ? __pfx___netlink_lookup+0x10/0x10   ? lock_release+0x62/0x200   ? netlink_deliver_tap+0xfd/0x290   ? rcu_is_watching+0x34/0x60   ? lock_release+0x62/0x200   ? netlink_deliver_tap+0x95/0x290   netlink_unicast+0x31f/0x480   ? __pfx_netlink_unicast+0x10/0x10   ? rcu_is_watching+0x34/0x60   ? lock_acquire+0xd5/0x410   netlink_sendmsg+0x369/0x660   ? lock_release+0x62/0x200   ? __pfx_netlink_sendmsg+0x10/0x10   ? import_ubuf+0xb9/0xf0   ? __import_iovec+0x254/0x2b0   ? lock_release+0x62/0x200   ? __pfx_netlink_sendmsg+0x10/0x10   ____sys_sendmsg+0x559/0x5a0   ? __pfx_____sys_sendmsg+0x10/0x10   ? __pfx_copy_msghdr_from_user+0x10/0x10   ? rcu_is_watching+0x34/0x60   ? do_read_fault+0x213/0x4a0   ? rcu_is_watching+0x34/0x60   ___sys_sendmsg+0xe4/0x150   ? __pfx____sys_sendmsg+0x10/0x10   ? do_fault+0x2cc/0x6f0   ? handle_pte_fault+0x2e3/0x3d0   ? __pfx_handle_pte_fault+0x10/0x10 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49994,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  block: fix integer overflow in BLKSECDISCARD  I independently rediscovered  \tcommit 22d24a544b0d49bbcbd61c8c0eaf77d3c9297155 \tblock: fix overflow in blk_ioctl_discard()  but for secure erase.  Same problem:  \tuint64_t r[2] = {512\, 18446744073709551104ULL}; \tioctl(fd\, BLKSECDISCARD\, r);  will enter near infinite loop inside blkdev_issue_secure_erase():  \ta.out: attempt to access beyond end of device \tloop0: rw=5\, sector=3399043073\, nr_sectors = 1024 limit=2048 \tbio_check_eod: 3286214 callbacks suppressed",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22073,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spufs: fix a leak on spufs_new_file() failure  It's called from spufs_fill_dir()\, and caller of that will do spufs_rmdir() in case of failure.  That does remove everything we'd managed to create\, but... the problem dentry is still negative.  IOW\, it needs to be explicitly dropped.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-3730,torch,MEDIUM,2.5.1,N/A,"A vulnerability\, which was classified as problematic\, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.",|tykio/smart-ner-redact|
CVE-2025-22072,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spufs: fix gang directory lifetimes  prior to ""[POWERPC] spufs: Fix gang destroy leaks"" we used to have a problem with gang lifetimes - creation of a gang returns opened gang directory\, which normally gets removed when that gets closed\, but if somebody has created a context belonging to that gang and kept it alive until the gang got closed\, removal failed and we ended up with a leak.  Unfortunately\, it had been fixed the wrong way.  Dentry of gang directory was no longer pinned\, and rmdir on close was gone. One problem was that failure of open kept calling simple_rmdir() as cleanup\, which meant an unbalanced dput().  Another bug was in the success case - gang creation incremented link count on root directory\, but that was no longer undone when gang got destroyed.  Fix consists of \t* reverting the commit in question \t* adding a counter to gang\, protected by ->i_rwsem of gang directory inode. \t* having it set to 1 at creation time\, dropped in both spufs_dir_close() and spufs_gang_close() and bumped in spufs_create_context()\, provided that it's not 0. \t* using simple_recursive_removal() to take the gang directory out when counter reaches zero.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22071,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spufs: fix a leak in spufs_create_context()  Leak fixes back in 2008 missed one case - if we are trying to set affinity and spufs_mkdir() fails\, we need to drop the reference to neighbor.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22070,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fs/9p: fix NULL pointer dereference on mkdir  When a 9p tree was mounted with option 'posixacl'\, parent directory had a default ACL set for its subdirectories\, e.g.:    setfacl -m default:group:simpsons:rwx parentdir  then creating a subdirectory crashed 9p client\, as v9fs_fid_add() call in function v9fs_vfs_mkdir_dotl() sets the passed 'fid' pointer to NULL (since dafbe689736) even though the subsequent v9fs_set_create_acl() call expects a valid non-NULL 'fid' pointer:    [   37.273191] BUG: kernel NULL pointer dereference\, address: 0000000000000000   ...   [   37.322338] Call Trace:   [   37.323043]  <TASK>   [   37.323621] ? __die (arch/x86/kernel/dumpstack.c:421 arch/x86/kernel/dumpstack.c:434)   [   37.324448] ? page_fault_oops (arch/x86/mm/fault.c:714)   [   37.325532] ? search_module_extables (kernel/module/main.c:3733)   [   37.326742] ? p9_client_walk (net/9p/client.c:1165) 9pnet   [   37.328006] ? search_bpf_extables (kernel/bpf/core.c:804)   [   37.329142] ? exc_page_fault (./arch/x86/include/asm/paravirt.h:686 arch/x86/mm/fault.c:1488 arch/x86/mm/fault.c:1538)   [   37.330196] ? asm_exc_page_fault (./arch/x86/include/asm/idtentry.h:574)   [   37.331330] ? p9_client_walk (net/9p/client.c:1165) 9pnet   [   37.332562] ? v9fs_fid_xattr_get (fs/9p/xattr.c:30) 9p   [   37.333824] v9fs_fid_xattr_set (fs/9p/fid.h:23 fs/9p/xattr.c:121) 9p   [   37.335077] v9fs_set_acl (fs/9p/acl.c:276) 9p   [   37.336112] v9fs_set_create_acl (fs/9p/acl.c:307) 9p   [   37.337326] v9fs_vfs_mkdir_dotl (fs/9p/vfs_inode_dotl.c:411) 9p   [   37.338590] vfs_mkdir (fs/namei.c:4313)   [   37.339535] do_mkdirat (fs/namei.c:4336)   [   37.340465] __x64_sys_mkdir (fs/namei.c:4354)   [   37.341455] do_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)   [   37.342447] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:130)  Fix this by simply swapping the sequence of these two calls in v9fs_vfs_mkdir_dotl()\, i.e. calling v9fs_set_create_acl() before v9fs_fid_add().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49991,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdkfd: amdkfd_free_gtt_mem clear the correct pointer  Pass pointer reference to amdgpu_bo_unref to clear the correct pointer\, otherwise amdgpu_bo_unref clear the local variable\, the original pointer not set to NULL\, this could cause use-after-free bug.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21865,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  gtp: Suppress list corruption splat in gtp_net_exit_batch_rtnl().  Brad Spengler reported the list_del() corruption splat in gtp_net_exit_batch_rtnl(). [0]  Commit eb28fd76c0a0 (""gtp: Destroy device along with udp socket's netns dismantle."") added the for_each_netdev() loop in gtp_net_exit_batch_rtnl() to destroy devices in each netns as done in geneve and ip tunnels.  However\, this could trigger ->dellink() twice for the same device during ->exit_batch_rtnl().  Say we have two netns A & B and gtp device B that resides in netns B but whose UDP socket is in netns A.    1. cleanup_net() processes netns A and then B.    2. gtp_net_exit_batch_rtnl() finds the device B while iterating      netns A's gn->gtp_dev_list and calls ->dellink().    [ device B is not yet unlinked from netns B     as unregister_netdevice_many() has not been called. ]    3. gtp_net_exit_batch_rtnl() finds the device B while iterating      netns B's for_each_netdev() and calls ->dellink().  gtp_dellink() cleans up the device's hash table\, unlinks the dev from gn->gtp_dev_list\, and calls unregister_netdevice_queue().  Basically\, calling gtp_dellink() multiple times is fine unless CONFIG_DEBUG_LIST is enabled.  Let's remove for_each_netdev() in gtp_net_exit_batch_rtnl() and delegate the destruction to default_device_exit_batch() as done in bareudp.  [0]: list_del corruption\, ffff8880aaa62c00->next (autoslab_size_M_dev_P_net_core_dev_11127_8_1328_8_S_4096_A_64_n_139+0xc00/0x1000 [slab object]) is LIST_POISON1 (ffffffffffffff02) (prev is 0xffffffffffffff04) kernel BUG at lib/list_debug.c:58! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN CPU: 1 UID: 0 PID: 1804 Comm: kworker/u8:7 Tainted: G                T   6.12.13-grsec-full-20250211091339 #1 Tainted: [T]=RANDSTRUCT Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014 Workqueue: netns cleanup_net RIP: 0010:[<ffffffff84947381>] __list_del_entry_valid_or_report+0x141/0x200 lib/list_debug.c:58 Code: c2 76 91 31 c0 e8 9f b1 f7 fc 0f 0b 4d 89 f0 48 c7 c1 02 ff ff ff 48 89 ea 48 89 ee 48 c7 c7 e0 c2 76 91 31 c0 e8 7f b1 f7 fc <0f> 0b 4d 89 e8 48 c7 c1 04 ff ff ff 48 89 ea 48 89 ee 48 c7 c7 60 RSP: 0018:fffffe8040b4fbd0 EFLAGS: 00010283 RAX: 00000000000000cc RBX: dffffc0000000000 RCX: ffffffff818c4054 RDX: ffffffff84947381 RSI: ffffffff818d1512 RDI: 0000000000000000 RBP: ffff8880aaa62c00 R08: 0000000000000001 R09: fffffbd008169f32 R10: fffffe8040b4f997 R11: 0000000000000001 R12: a1988d84f24943e4 R13: ffffffffffffff02 R14: ffffffffffffff04 R15: ffff8880aaa62c08 RBX: kasan shadow of 0x0 RCX: __wake_up_klogd.part.0+0x74/0xe0 kernel/printk/printk.c:4554 RDX: __list_del_entry_valid_or_report+0x141/0x200 lib/list_debug.c:58 RSI: vprintk+0x72/0x100 kernel/printk/printk_safe.c:71 RBP: autoslab_size_M_dev_P_net_core_dev_11127_8_1328_8_S_4096_A_64_n_139+0xc00/0x1000 [slab object] RSP: process kstack fffffe8040b4fbd0+0x7bd0/0x8000 [kworker/u8:7+netns 1804 ] R09: kasan shadow of process kstack fffffe8040b4f990+0x7990/0x8000 [kworker/u8:7+netns 1804 ] R10: process kstack fffffe8040b4f997+0x7997/0x8000 [kworker/u8:7+netns 1804 ] R15: autoslab_size_M_dev_P_net_core_dev_11127_8_1328_8_S_4096_A_64_n_139+0xc08/0x1000 [slab object] FS:  0000000000000000(0000) GS:ffff888116000000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000748f5372c000 CR3: 0000000015408000 CR4: 00000000003406f0 shadow CR4: 00000000003406f0 Stack:  0000000000000000 ffffffff8a0c35e7 ffffffff8a0c3603 ffff8880aaa62c00  ffff8880aaa62c00 0000000000000004 ffff88811145311c 0000000000000005  0000000000000001 ffff8880aaa62000 fffffe8040b4fd40 ffffffff8a0c360d Call Trace:  <TASK>  [<ffffffff8a0c360d>] __list_del_entry_valid include/linux/list.h:131 [inline] fffffe8040b4fc28  [<ffffffff8a0c360d>] __list_del_entry include/linux/list.h:248 [inline] fffffe8040b4fc28  [<ffffffff8a0c360d>] list_del include/linux/list.h:262 [inl ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-52332,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  igb: Fix potential invalid memory access in igb_init_module()  The pci_register_driver() can fail and when this happened\, the dca_notifier needs to be unregistered\, otherwise the dca_notifier can be called when igb fails to install\, resulting to invalid memory access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35951,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/panfrost: Fix the error path in panfrost_mmu_map_fault_addr()  Subject: [PATCH] drm/panfrost: Fix the error path in  panfrost_mmu_map_fault_addr()  If some the pages or sgt allocation failed\, we shouldn't release the pages ref we got earlier\, otherwise we will end up with unbalanced get/put_pages() calls. We should instead leave everything in place and let the BO release function deal with extra cleanup when the object is destroyed\, or let the fault handler try again next time it's called.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21864,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  tcp: drop secpath at the same time as we currently drop dst  Xiumei reported hitting the WARN in xfrm6_tunnel_net_exit while running tests that boil down to:  - create a pair of netns  - run a basic TCP test over ipcomp6  - delete the pair of netns  The xfrm_state found on spi_byaddr was not deleted at the time we delete the netns\, because we still have a reference on it. This lingering reference comes from a secpath (which holds a ref on the xfrm_state)\, which is still attached to an skb. This skb is not leaked\, it ends up on sk_receive_queue and then gets defer-free'd by skb_attempt_defer_free.  The problem happens when we defer freeing an skb (push it on one CPU's defer_list)\, and don't flush that list before the netns is deleted. In that case\, we still have a reference on the xfrm_state that we don't expect at this point.  We already drop the skb's dst in the TCP receive path when it's no longer needed\, so let's also drop the secpath. At this point\, tcp_filter has already called into the LSM hooks that may require the secpath\, so it should not be needed anymore. However\, in some of those places\, the MPTCP extension has just been attached to the skb\, so we cannot simply drop all extensions.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21867,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\, test_run: Fix use-after-free issue in eth_skb_pkt_type()  KMSAN reported a use-after-free issue in eth_skb_pkt_type()[1]. The cause of the issue was that eth_skb_pkt_type() accessed skb's data that didn't contain an Ethernet header. This occurs when bpf_prog_test_run_xdp() passes an invalid value as the user_data argument to bpf_test_init().  Fix this by returning an error when user_data is less than ETH_HLEN in bpf_test_init(). Additionally\, remove the check for ""if (user_size > size)"" as it is unnecessary.  [1] BUG: KMSAN: use-after-free in eth_skb_pkt_type include/linux/etherdevice.h:627 [inline] BUG: KMSAN: use-after-free in eth_type_trans+0x4ee/0x980 net/ethernet/eth.c:165  eth_skb_pkt_type include/linux/etherdevice.h:627 [inline]  eth_type_trans+0x4ee/0x980 net/ethernet/eth.c:165  __xdp_build_skb_from_frame+0x5a8/0xa50 net/core/xdp.c:635  xdp_recv_frames net/bpf/test_run.c:272 [inline]  xdp_test_run_batch net/bpf/test_run.c:361 [inline]  bpf_test_run_xdp_live+0x2954/0x3330 net/bpf/test_run.c:390  bpf_prog_test_run_xdp+0x148e/0x1b10 net/bpf/test_run.c:1318  bpf_prog_test_run+0x5b7/0xa30 kernel/bpf/syscall.c:4371  __sys_bpf+0x6a6/0xe20 kernel/bpf/syscall.c:5777  __do_sys_bpf kernel/bpf/syscall.c:5866 [inline]  __se_sys_bpf kernel/bpf/syscall.c:5864 [inline]  __x64_sys_bpf+0xa4/0xf0 kernel/bpf/syscall.c:5864  x64_sys_call+0x2ea0/0x3d90 arch/x86/include/generated/asm/syscalls_64.h:322  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xd9/0x1d0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Uninit was created at:  free_pages_prepare mm/page_alloc.c:1056 [inline]  free_unref_page+0x156/0x1320 mm/page_alloc.c:2657  __free_pages+0xa3/0x1b0 mm/page_alloc.c:4838  bpf_ringbuf_free kernel/bpf/ringbuf.c:226 [inline]  ringbuf_map_free+0xff/0x1e0 kernel/bpf/ringbuf.c:235  bpf_map_free kernel/bpf/syscall.c:838 [inline]  bpf_map_free_deferred+0x17c/0x310 kernel/bpf/syscall.c:862  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa2b/0x1b60 kernel/workqueue.c:3310  worker_thread+0xedf/0x1550 kernel/workqueue.c:3391  kthread+0x535/0x6b0 kernel/kthread.c:389  ret_from_fork+0x6e/0x90 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  CPU: 1 UID: 0 PID: 17276 Comm: syz.1.16450 Not tainted 6.12.0-05490-g9bb88c659673 #8 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-3.fc41 04/01/2014",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9113,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"There is a NULL pointer dereference in function imagetobmp of convertbmp.c:980 of OpenJPEG 2.1.2. image->comps[0].data is not assigned a value after initialization(NULL). Impact is Denial of Service.",|tykio/midsommar|
CVE-2025-21866,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/code-patching: Fix KASAN hit by not flagging text patching area as VM_ALLOC  Erhard reported the following KASAN hit while booting his PowerMac G4 with a KASAN-enabled kernel 6.13-rc6:    BUG: KASAN: vmalloc-out-of-bounds in copy_to_kernel_nofault+0xd8/0x1c8   Write of size 8 at addr f1000000 by task chronyd/1293    CPU: 0 UID: 123 PID: 1293 Comm: chronyd Tainted: G        W          6.13.0-rc6-PMacG4 #2   Tainted: [W]=WARN   Hardware name: PowerMac3\,6 7455 0x80010303 PowerMac   Call Trace:   [c2437590] [c1631a84] dump_stack_lvl+0x70/0x8c (unreliable)   [c24375b0] [c0504998] print_report+0xdc/0x504   [c2437610] [c050475c] kasan_report+0xf8/0x108   [c2437690] [c0505a3c] kasan_check_range+0x24/0x18c   [c24376a0] [c03fb5e4] copy_to_kernel_nofault+0xd8/0x1c8   [c24376c0] [c004c014] patch_instructions+0x15c/0x16c   [c2437710] [c00731a8] bpf_arch_text_copy+0x60/0x7c   [c2437730] [c0281168] bpf_jit_binary_pack_finalize+0x50/0xac   [c2437750] [c0073cf4] bpf_int_jit_compile+0xb30/0xdec   [c2437880] [c0280394] bpf_prog_select_runtime+0x15c/0x478   [c24378d0] [c1263428] bpf_prepare_filter+0xbf8/0xc14   [c2437990] [c12677ec] bpf_prog_create_from_user+0x258/0x2b4   [c24379d0] [c027111c] do_seccomp+0x3dc/0x1890   [c2437ac0] [c001d8e0] system_call_exception+0x2dc/0x420   [c2437f30] [c00281ac] ret_from_syscall+0x0/0x2c   --- interrupt: c00 at 0x5a1274   NIP:  005a1274 LR: 006a3b3c CTR: 005296c8   REGS: c2437f40 TRAP: 0c00   Tainted: G        W           (6.13.0-rc6-PMacG4)   MSR:  0200f932 <VEC\,EE\,PR\,FP\,ME\,IR\,DR\,RI>  CR: 24004422  XER: 00000000    GPR00: 00000166 af8f3fa0 a7ee3540 00000001 00000000 013b6500 005a5858 0200f932   GPR08: 00000000 00001fe9 013d5fc8 005296c8 2822244c 00b2fcd8 00000000 af8f4b57   GPR16: 00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000002   GPR24: 00afdbb0 00000000 00000000 00000000 006e0004 013ce060 006e7c1c 00000001   NIP [005a1274] 0x5a1274   LR [006a3b3c] 0x6a3b3c   --- interrupt: c00    The buggy address belongs to the virtual mapping at    [f1000000\, f1002000) created by:    text_area_cpu_up+0x20/0x190    The buggy address belongs to the physical page:   page: refcount:1 mapcount:0 mapping:00000000 index:0x0 pfn:0x76e30   flags: 0x80000000(zone=2)   raw: 80000000 00000000 00000122 00000000 00000000 00000000 ffffffff 00000001   raw: 00000000   page dumped because: kasan: bad access detected    Memory state around the buggy address:    f0ffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    f0ffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   >f1000000: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8              ^    f1000080: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8    f1000100: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8   ==================================================================  f8 corresponds to KASAN_VMALLOC_INVALID which means the area is not initialised hence not supposed to be used yet.  Powerpc text patching infrastructure allocates a virtual memory area using get_vm_area() and flags it as VM_ALLOC. But that flag is meant to be used for vmalloc() and vmalloc() allocated memory is not supposed to be used before a call to __vmalloc_node_range() which is never called for that area.  That went undetected until commit e4137f08816b (""mm\, kasan\, kmsan: instrument copy_from/to_kernel_nofault"")  The area allocated by text_area_cpu_up() is not vmalloc memory\, it is mapped directly on demand when needed by map_kernel_page(). There is no VM flag corresponding to such usage\, so just pass no flag. That way the area will be unpoisonned and usable immediately.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46860,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mt76: mt7921: fix NULL pointer access in mt7921_ipv6_addr_change  When disabling wifi mt7921_ipv6_addr_change() is called as a notifier. At this point mvif->phy is already NULL so we cannot use it here.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21861,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/migrate_device: don't add folio to be freed to LRU in migrate_device_finalize()  If migration succeeded\, we called folio_migrate_flags()->mem_cgroup_migrate() to migrate the memcg from the old to the new folio.  This will set memcg_data of the old folio to 0.  Similarly\, if migration failed\, memcg_data of the dst folio is left unset.  If we call folio_putback_lru() on such folios (memcg_data == 0)\, we will add the folio to be freed to the LRU\, making memcg code unhappy.  Running the hmm selftests:    # ./hmm-tests   ...   #  RUN           hmm.hmm_device_private.migrate ...   [  102.078007][T14893] page: refcount:1 mapcount:0 mapping:0000000000000000 index:0x7ff27d200 pfn:0x13cc00   [  102.079974][T14893] anon flags: 0x17ff00000020018(uptodate|dirty|swapbacked|node=0|zone=2|lastcpupid=0x7ff)   [  102.082037][T14893] raw: 017ff00000020018 dead000000000100 dead000000000122 ffff8881353896c9   [  102.083687][T14893] raw: 00000007ff27d200 0000000000000000 00000001ffffffff 0000000000000000   [  102.085331][T14893] page dumped because: VM_WARN_ON_ONCE_FOLIO(!memcg && !mem_cgroup_disabled())   [  102.087230][T14893] ------------[ cut here ]------------   [  102.088279][T14893] WARNING: CPU: 0 PID: 14893 at ./include/linux/memcontrol.h:726 folio_lruvec_lock_irqsave+0x10e/0x170   [  102.090478][T14893] Modules linked in:   [  102.091244][T14893] CPU: 0 UID: 0 PID: 14893 Comm: hmm-tests Not tainted 6.13.0-09623-g6c216bc522fd #151   [  102.093089][T14893] Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-2.fc40 04/01/2014   [  102.094848][T14893] RIP: 0010:folio_lruvec_lock_irqsave+0x10e/0x170   [  102.096104][T14893] Code: ...   [  102.099908][T14893] RSP: 0018:ffffc900236c37b0 EFLAGS: 00010293   [  102.101152][T14893] RAX: 0000000000000000 RBX: ffffea0004f30000 RCX: ffffffff8183f426   [  102.102684][T14893] RDX: ffff8881063cb880 RSI: ffffffff81b8117f RDI: ffff8881063cb880   [  102.104227][T14893] RBP: 0000000000000000 R08: 0000000000000005 R09: 0000000000000000   [  102.105757][T14893] R10: 0000000000000001 R11: 0000000000000002 R12: ffffc900236c37d8   [  102.107296][T14893] R13: ffff888277a2bcb0 R14: 000000000000001f R15: 0000000000000000   [  102.108830][T14893] FS:  00007ff27dbdd740(0000) GS:ffff888277a00000(0000) knlGS:0000000000000000   [  102.110643][T14893] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   [  102.111924][T14893] CR2: 00007ff27d400000 CR3: 000000010866e000 CR4: 0000000000750ef0   [  102.113478][T14893] PKRU: 55555554   [  102.114172][T14893] Call Trace:   [  102.114805][T14893]  <TASK>   [  102.115397][T14893]  ? folio_lruvec_lock_irqsave+0x10e/0x170   [  102.116547][T14893]  ? __warn.cold+0x110/0x210   [  102.117461][T14893]  ? folio_lruvec_lock_irqsave+0x10e/0x170   [  102.118667][T14893]  ? report_bug+0x1b9/0x320   [  102.119571][T14893]  ? handle_bug+0x54/0x90   [  102.120494][T14893]  ? exc_invalid_op+0x17/0x50   [  102.121433][T14893]  ? asm_exc_invalid_op+0x1a/0x20   [  102.122435][T14893]  ? __wake_up_klogd.part.0+0x76/0xd0   [  102.123506][T14893]  ? dump_page+0x4f/0x60   [  102.124352][T14893]  ? folio_lruvec_lock_irqsave+0x10e/0x170   [  102.125500][T14893]  folio_batch_move_lru+0xd4/0x200   [  102.126577][T14893]  ? __pfx_lru_add+0x10/0x10   [  102.127505][T14893]  __folio_batch_add_and_move+0x391/0x720   [  102.128633][T14893]  ? __pfx_lru_add+0x10/0x10   [  102.129550][T14893]  folio_putback_lru+0x16/0x80   [  102.130564][T14893]  migrate_device_finalize+0x9b/0x530   [  102.131640][T14893]  dmirror_migrate_to_device.constprop.0+0x7c5/0xad0   [  102.133047][T14893]  dmirror_fops_unlocked_ioctl+0x89b/0xc80  Likely\, nothing else goes wrong: putting the last folio reference will remove the folio from the LRU again.  So besides memcg complaining\, adding the folio to be freed to the LRU is just an unnecessary step.  The new flow resembles what we have in migrate_folio_move(): add the dst to the lru\, rem ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38541,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  of: module: add buffer overflow check in of_modalias()  In of_modalias()\, if the buffer happens to be too small even for the 1st snprintf() call\, the len parameter will become negative and str parameter (if not NULL initially) will point beyond the buffer's end. Add the buffer overflow check after the 1st snprintf() call and fix such check after the strlen() call (accounting for the terminating NUL char).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9115,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"Heap Buffer Over-read in function imagetotga of convert.c(jp2):942 in OpenJPEG 2.1.2. Impact is Denial of Service. Someone must open a crafted j2k file.",|tykio/midsommar|
CVE-2024-38540,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  bnxt_re: avoid shift undefined behavior in bnxt_qplib_alloc_init_hwq  Undefined behavior is triggered when bnxt_qplib_alloc_init_hwq is called with hwq_attr->aux_depth != 0 and hwq_attr->aux_stride == 0. In that case\, ""roundup_pow_of_two(hwq_attr->aux_stride)"" gets called. roundup_pow_of_two is documented as undefined for 0.  Fix it in the one caller that had this combination.  The undefined behavior was detected by UBSAN:   UBSAN: shift-out-of-bounds in ./include/linux/log2.h:57:13   shift exponent 64 is too large for 64-bit type 'long unsigned int'   CPU: 24 PID: 1075 Comm: (udev-worker) Not tainted 6.9.0-rc6+ #4   Hardware name: Abacus electric\, s.r.o. - servis@abacus.cz Super Server/H12SSW-iN\, BIOS 2.7 10/25/2023   Call Trace:    <TASK>    dump_stack_lvl+0x5d/0x80    ubsan_epilogue+0x5/0x30    __ubsan_handle_shift_out_of_bounds.cold+0x61/0xec    __roundup_pow_of_two+0x25/0x35 [bnxt_re]    bnxt_qplib_alloc_init_hwq+0xa1/0x470 [bnxt_re]    bnxt_qplib_create_qp+0x19e/0x840 [bnxt_re]    bnxt_re_create_qp+0x9b1/0xcd0 [bnxt_re]    ? srso_alias_return_thunk+0x5/0xfbef5    ? srso_alias_return_thunk+0x5/0xfbef5    ? __kmalloc+0x1b6/0x4f0    ? create_qp.part.0+0x128/0x1c0 [ib_core]    ? __pfx_bnxt_re_create_qp+0x10/0x10 [bnxt_re]    create_qp.part.0+0x128/0x1c0 [ib_core]    ib_create_qp_kernel+0x50/0xd0 [ib_core]    create_mad_qp+0x8e/0xe0 [ib_core]    ? __pfx_qp_event_handler+0x10/0x10 [ib_core]    ib_mad_init_device+0x2be/0x680 [ib_core]    add_client_context+0x10d/0x1a0 [ib_core]    enable_device_and_get+0xe0/0x1d0 [ib_core]    ib_register_device+0x53c/0x630 [ib_core]    ? srso_alias_return_thunk+0x5/0xfbef5    bnxt_re_probe+0xbd8/0xe50 [bnxt_re]    ? __pfx_bnxt_re_probe+0x10/0x10 [bnxt_re]    auxiliary_bus_probe+0x49/0x80    ? driver_sysfs_add+0x57/0xc0    really_probe+0xde/0x340    ? pm_runtime_barrier+0x54/0x90    ? __pfx___driver_attach+0x10/0x10    __driver_probe_device+0x78/0x110    driver_probe_device+0x1f/0xa0    __driver_attach+0xba/0x1c0    bus_for_each_dev+0x8f/0xe0    bus_add_driver+0x146/0x220    driver_register+0x72/0xd0    __auxiliary_driver_register+0x6e/0xd0    ? __pfx_bnxt_re_mod_init+0x10/0x10 [bnxt_re]    bnxt_re_mod_init+0x3e/0xff0 [bnxt_re]    ? __pfx_bnxt_re_mod_init+0x10/0x10 [bnxt_re]    do_one_initcall+0x5b/0x310    do_init_module+0x90/0x250    init_module_from_file+0x86/0xc0    idempotent_init_module+0x121/0x2b0    __x64_sys_finit_module+0x5e/0xb0    do_syscall_64+0x82/0x160    ? srso_alias_return_thunk+0x5/0xfbef5    ? syscall_exit_to_user_mode_prepare+0x149/0x170    ? srso_alias_return_thunk+0x5/0xfbef5    ? syscall_exit_to_user_mode+0x75/0x230    ? srso_alias_return_thunk+0x5/0xfbef5    ? do_syscall_64+0x8e/0x160    ? srso_alias_return_thunk+0x5/0xfbef5    ? __count_memcg_events+0x69/0x100    ? srso_alias_return_thunk+0x5/0xfbef5    ? count_memcg_events.constprop.0+0x1a/0x30    ? srso_alias_return_thunk+0x5/0xfbef5    ? handle_mm_fault+0x1f0/0x300    ? srso_alias_return_thunk+0x5/0xfbef5    ? do_user_addr_fault+0x34e/0x640    ? srso_alias_return_thunk+0x5/0xfbef5    ? srso_alias_return_thunk+0x5/0xfbef5    entry_SYSCALL_64_after_hwframe+0x76/0x7e   RIP: 0033:0x7f4e5132821d   Code: ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d e3 db 0c 00 f7 d8 64 89 01 48   RSP: 002b:00007ffca9c906a8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139   RAX: ffffffffffffffda RBX: 0000563ec8a8f130 RCX: 00007f4e5132821d   RDX: 0000000000000000 RSI: 00007f4e518fa07d RDI: 000000000000003b   RBP: 00007ffca9c90760 R08: 00007f4e513f6b20 R09: 00007ffca9c906f0   R10: 0000563ec8a8faa0 R11: 0000000000000246 R12: 00007f4e518fa07d   R13: 0000000000020000 R14: 0000563ec8409e90 R15: 0000563ec8a8fa60    </TASK>   ---[ end trace ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9114,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"There is a NULL Pointer Access in function imagetopnm of convert.c:1943(jp2) of OpenJPEG 2.1.2. image->comps[compno].data is not assigned a value after initialization(NULL). Impact is Denial of Service.",|tykio/midsommar|
CVE-2025-22079,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: validate l_tree_depth to avoid out-of-bounds access  The l_tree_depth field is 16-bit (__le16)\, but the actual maximum depth is limited to OCFS2_MAX_PATH_DEPTH.  Add a check to prevent out-of-bounds access if l_tree_depth has an invalid value\, which may occur when reading from a corrupted mounted disk [1].",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49998,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: dsa: improve shutdown sequence  Alexander Sverdlin presents 2 problems during shutdown with the lan9303 driver. One is specific to lan9303 and the other just happens to reproduce there.  The first problem is that lan9303 is unique among DSA drivers in that it calls dev_get_drvdata() at ""arbitrary runtime"" (not probe\, not shutdown\, not remove):  phy_state_machine() -> ...    -> dsa_user_phy_read()       -> ds->ops->phy_read()          -> lan9303_phy_read()             -> chip->ops->phy_read()                -> lan9303_mdio_phy_read()                   -> dev_get_drvdata()  But we never stop the phy_state_machine()\, so it may continue to run after dsa_switch_shutdown(). Our common pattern in all DSA drivers is to set drvdata to NULL to suppress the remove() method that may come afterwards. But in this case it will result in an NPD.  The second problem is that the way in which we set dp->conduit->dsa_ptr = NULL; is concurrent with receive packet processing. dsa_switch_rcv() checks once whether dev->dsa_ptr is NULL\, but afterwards\, rather than continuing to use that non-NULL value\, dev->dsa_ptr is dereferenced again and again without NULL checks: dsa_conduit_find_user() and many other places. In between dereferences\, there is no locking to ensure that what was valid once continues to be valid.  Both problems have the common aspect that closing the conduit interface solves them.  In the first case\, dev_close(conduit) triggers the NETDEV_GOING_DOWN event in dsa_user_netdevice_event() which closes user ports as well. dsa_port_disable_rt() calls phylink_stop()\, which synchronously stops the phylink state machine\, and ds->ops->phy_read() will thus no longer call into the driver after this point.  In the second case\, dev_close(conduit) should do this\, as per Documentation/networking/driver.rst:  | Quiescence | ---------- | | After the ndo_stop routine has been called\, the hardware must | not receive or transmit any data.  All in flight packets must | be aborted. If necessary\, poll or wait for completion of | any reset commands.  So it should be sufficient to ensure that later\, when we zeroize conduit->dsa_ptr\, there will be no concurrent dsa_switch_rcv() call on this conduit.  The addition of the netif_device_detach() function is to ensure that ioctls\, rtnetlinks and ethtool requests on the user ports no longer propagate down to the driver - we're no longer prepared to handle them.  The race condition actually did not exist when commit 0650bf52b31f (""net: dsa: be compatible with masters which unregister on shutdown"") first introduced dsa_switch_shutdown(). It was created later\, when we stopped unregistering the user interfaces from a bad spot\, and we just replaced that sequence with a racy zeroization of conduit->dsa_ptr (one which doesn't ensure that the interfaces aren't up).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21863,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring: prevent opcode speculation  sqe->opcode is used for different tables\, make sure we santitise it against speculations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9117,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"NULL Pointer Access in function imagetopnm of convert.c(jp2):1289 in OpenJPEG 2.1.2. Impact is Denial of Service. Someone must open a crafted j2k file.",|tykio/midsommar|
CVE-2025-21862,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drop_monitor: fix incorrect initialization order  Syzkaller reports the following bug:  BUG: spinlock bad magic on CPU#1\, syz-executor.0/7995  lock: 0xffff88805303f3e0\, .magic: 00000000\, .owner: <none>/-1\, .owner_cpu: 0 CPU: 1 PID: 7995 Comm: syz-executor.0 Tainted: G            E     5.10.209+ #1 Hardware name: VMware\, Inc. VMware Virtual Platform/440BX Desktop Reference Platform\, BIOS 6.00 11/12/2020 Call Trace:  __dump_stack lib/dump_stack.c:77 [inline]  dump_stack+0x119/0x179 lib/dump_stack.c:118  debug_spin_lock_before kernel/locking/spinlock_debug.c:83 [inline]  do_raw_spin_lock+0x1f6/0x270 kernel/locking/spinlock_debug.c:112  __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:117 [inline]  _raw_spin_lock_irqsave+0x50/0x70 kernel/locking/spinlock.c:159  reset_per_cpu_data+0xe6/0x240 [drop_monitor]  net_dm_cmd_trace+0x43d/0x17a0 [drop_monitor]  genl_family_rcv_msg_doit+0x22f/0x330 net/netlink/genetlink.c:739  genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]  genl_rcv_msg+0x341/0x5a0 net/netlink/genetlink.c:800  netlink_rcv_skb+0x14d/0x440 net/netlink/af_netlink.c:2497  genl_rcv+0x29/0x40 net/netlink/genetlink.c:811  netlink_unicast_kernel net/netlink/af_netlink.c:1322 [inline]  netlink_unicast+0x54b/0x800 net/netlink/af_netlink.c:1348  netlink_sendmsg+0x914/0xe00 net/netlink/af_netlink.c:1916  sock_sendmsg_nosec net/socket.c:651 [inline]  __sock_sendmsg+0x157/0x190 net/socket.c:663  ____sys_sendmsg+0x712/0x870 net/socket.c:2378  ___sys_sendmsg+0xf8/0x170 net/socket.c:2432  __sys_sendmsg+0xea/0x1b0 net/socket.c:2461  do_syscall_64+0x30/0x40 arch/x86/entry/common.c:46  entry_SYSCALL_64_after_hwframe+0x62/0xc7 RIP: 0033:0x7f3f9815aee9 Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48 RSP: 002b:00007f3f972bf0c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e RAX: ffffffffffffffda RBX: 00007f3f9826d050 RCX: 00007f3f9815aee9 RDX: 0000000020000000 RSI: 0000000020001300 RDI: 0000000000000007 RBP: 00007f3f981b63bd R08: 0000000000000000 R09: 0000000000000000 R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000 R13: 000000000000006e R14: 00007f3f9826d050 R15: 00007ffe01ee6768  If drop_monitor is built as a kernel module\, syzkaller may have time to send a netlink NET_DM_CMD_START message during the module loading. This will call the net_dm_monitor_start() function that uses a spinlock that has not yet been initialized.  To fix this\, let's place resource initialization above the registration of a generic netlink family.  Found by InfoTeCS on behalf of Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35956,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: qgroup: fix qgroup prealloc rsv leak in subvolume operations  Create subvolume\, create snapshot and delete subvolume all use btrfs_subvolume_reserve_metadata() to reserve metadata for the changes done to the parent subvolume's fs tree\, which cannot be mediated in the normal way via start_transaction. When quota groups (squota or qgroups) are enabled\, this reserves qgroup metadata of type PREALLOC. Once the operation is associated to a transaction\, we convert PREALLOC to PERTRANS\, which gets cleared in bulk at the end of the transaction.  However\, the error paths of these three operations were not implementing this lifecycle correctly. They unconditionally converted the PREALLOC to PERTRANS in a generic cleanup step regardless of errors or whether the operation was fully associated to a transaction or not. This resulted in error paths occasionally converting this rsv to PERTRANS without calling record_root_in_trans successfully\, which meant that unless that root got recorded in the transaction by some other thread\, the end of the transaction would not free that root's PERTRANS\, leaking it. Ultimately\, this resulted in hitting a WARN in CONFIG_BTRFS_DEBUG builds at unmount for the leaked reservation.  The fix is to ensure that every qgroup PREALLOC reservation observes the following properties:  1. any failure before record_root_in_trans is called successfully    results in freeing the PREALLOC reservation. 2. after record_root_in_trans\, we convert to PERTRANS\, and now the    transaction owns freeing the reservation.  This patch enforces those properties on the three operations. Without it\, generic/269 with squotas enabled at mkfs time would fail in ~5-10 runs on my system. With this patch\, it ran successfully 1000 times in a row.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9116,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"NULL Pointer Access in function imagetopnm of convert.c:2226(jp2) in OpenJPEG 2.1.2. Impact is Denial of Service. Someone must open a crafted j2k file.",|tykio/midsommar|
CVE-2024-56592,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Call free_htab_elem() after htab_unlock_bucket()  For htab of maps\, when the map is removed from the htab\, it may hold the last reference of the map. bpf_map_fd_put_ptr() will invoke bpf_map_free_id() to free the id of the removed map element. However\, bpf_map_fd_put_ptr() is invoked while holding a bucket lock (raw_spin_lock_t)\, and bpf_map_free_id() attempts to acquire map_idr_lock (spinlock_t)\, triggering the following lockdep warning:    =============================   [ BUG: Invalid wait context ]   6.11.0-rc4+ #49 Not tainted   -----------------------------   test_maps/4881 is trying to lock:   ffffffff84884578 (map_idr_lock){+...}-{3:3}\, at: bpf_map_free_id.part.0+0x21/0x70   other info that might help us debug this:   context-{5:5}   2 locks held by test_maps/4881:    #0: ffffffff846caf60 (rcu_read_lock){....}-{1:3}\, at: bpf_fd_htab_map_update_elem+0xf9/0x270    #1: ffff888149ced148 (&htab->lockdep_key#2){....}-{2:2}\, at: htab_map_update_elem+0x178/0xa80   stack backtrace:   CPU: 0 UID: 0 PID: 4881 Comm: test_maps Not tainted 6.11.0-rc4+ #49   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, ...   Call Trace:    <TASK>    dump_stack_lvl+0x6e/0xb0    dump_stack+0x10/0x20    __lock_acquire+0x73e/0x36c0    lock_acquire+0x182/0x450    _raw_spin_lock_irqsave+0x43/0x70    bpf_map_free_id.part.0+0x21/0x70    bpf_map_put+0xcf/0x110    bpf_map_fd_put_ptr+0x9a/0xb0    free_htab_elem+0x69/0xe0    htab_map_update_elem+0x50f/0xa80    bpf_fd_htab_map_update_elem+0x131/0x270    htab_map_update_elem+0x50f/0xa80    bpf_fd_htab_map_update_elem+0x131/0x270    bpf_map_update_value+0x266/0x380    __sys_bpf+0x21bb/0x36b0    __x64_sys_bpf+0x45/0x60    x64_sys_call+0x1b2a/0x20d0    do_syscall_64+0x5d/0x100    entry_SYSCALL_64_after_hwframe+0x76/0x7e  One way to fix the lockdep warning is using raw_spinlock_t for map_idr_lock as well. However\, bpf_map_alloc_id() invokes idr_alloc_cyclic() after acquiring map_idr_lock\, it will trigger a similar lockdep warning because the slab's lock (s->cpu_slab->lock) is still a spinlock.  Instead of changing map_idr_lock's type\, fix the issue by invoking htab_put_fd_value() after htab_unlock_bucket(). However\, only deferring the invocation of htab_put_fd_value() is not enough\, because the old map pointers in htab of maps can not be saved during batched deletion. Therefore\, also defer the invocation of free_htab_elem()\, so these to-be-freed elements could be linked together similar to lru map.  There are four callers for ->map_fd_put_ptr:  (1) alloc_htab_elem() (through htab_put_fd_value()) It invokes ->map_fd_put_ptr() under a raw_spinlock_t. The invocation of htab_put_fd_value() can not simply move after htab_unlock_bucket()\, because the old element has already been stashed in htab->extra_elems. It may be reused immediately after htab_unlock_bucket() and the invocation of htab_put_fd_value() after htab_unlock_bucket() may release the newly-added element incorrectly. Therefore\, saving the map pointer of the old element for htab of maps before unlocking the bucket and releasing the map_ptr after unlock. Beside the map pointer in the old element\, should do the same thing for the special fields in the old element as well.  (2) free_htab_elem() (through htab_put_fd_value()) Its caller includes __htab_map_lookup_and_delete_elem()\, htab_map_delete_elem() and __htab_map_lookup_and_delete_batch().  For htab_map_delete_elem()\, simply invoke free_htab_elem() after htab_unlock_bucket(). For __htab_map_lookup_and_delete_batch()\, just like lru map\, linking the to-be-freed element into node_to_free list and invoking free_htab_elem() for these element after unlock. It is safe to reuse batch_flink as the link for node_to_free\, because these elements have been removed from the hash llist.  Because htab of maps doesn't support lookup_and_delete operation\, __htab_map_lookup_and_delete_elem() doesn't have the problem\, so kept it as ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56593,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: brcmfmac: Fix oops due to NULL pointer dereference in brcmf_sdiod_sglist_rw()  This patch fixes a NULL pointer dereference bug in brcmfmac that occurs when a high 'sd_sgentry_align' value applies (e.g. 512) and a lot of queued SKBs are sent from the pkt queue.  The problem is the number of entries in the pre-allocated sgtable\, it is nents = max(rxglom_size\, txglom_size) + max(rxglom_size\, txglom_size) >> 4 + 1. Given the default [rt]xglom_size=32 it's actually 35 which is too small. Worst case\, the pkt queue can end up with 64 SKBs. This occurs when a new SKB is added for each original SKB if tailroom isn't enough to hold tail_pad. At least one sg entry is needed for each SKB. So\, eventually the ""skb_queue_walk loop"" in brcmf_sdiod_sglist_rw may run out of sg entries. This makes sg_next return NULL and this causes the oops.  The patch sets nents to max(rxglom_size\, txglom_size) * 2 to be able handle the worst-case. Btw. this requires only 64-35=29 * 16 (or 20 if CONFIG_NEED_SG_DMA_LENGTH) = 464 additional bytes of memory.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56590,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: hci_core: Fix not checking skb length on hci_acldata_packet  This fixes not checking if skb really contains an ACL header otherwise the code may attempt to access some uninitilized/invalid memory past the valid skb->data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57908,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: imu: kmx61: fix information leak in triggered buffer  The 'buffer' local array is used to push data to user space from a triggered buffer\, but it does not set values for inactive channels\, as it only uses iio_for_each_active_channel() to assign new values.  Initialize the array to zero before using it to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56591,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: hci_conn: Use disable_delayed_work_sync  This makes use of disable_delayed_work_sync instead cancel_delayed_work_sync as it not only cancel the ongoing work but also disables new submit which is disarable since the object holding the work is about to be freed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2008-2544,linux-libc-dev,LOW,6.1.115-1,N/A,"Mounting /proc filesystem via chroot command silently mounts it in read-write mode. The user could bypass the chroot environment and gain write access to files\, he would never have otherwise.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56596,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: fix array-index-out-of-bounds in jfs_readdir  The stbl might contain some invalid values. Added a check to return error code in that case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56597,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: fix shift-out-of-bounds in dbSplit  When dmt_budmin is less than zero\, it causes errors in the later stages. Added a check to return an error beforehand in dbAllocCtl itself.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56594,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: set the right AMDGPU sg segment limitation  The driver needs to set the correct max_segment_size; otherwise debug_dma_map_sg() will complain about the over-mapping of the AMDGPU sg length as following:  WARNING: CPU: 6 PID: 1964 at kernel/dma/debug.c:1178 debug_dma_map_sg+0x2dc/0x370 [  364.049444] Modules linked in: veth amdgpu(OE) amdxcp drm_exec gpu_sched drm_buddy drm_ttm_helper ttm(OE) drm_suballoc_helper drm_display_helper drm_kms_helper i2c_algo_bit rpcsec_gss_krb5 auth_rpcgss nfsv4 nfs lockd grace netfs xt_conntrack xt_MASQUERADE nf_conntrack_netlink xfrm_user xfrm_algo iptable_nat xt_addrtype iptable_filter br_netfilter nvme_fabrics overlay nfnetlink_cttimeout nfnetlink openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 libcrc32c bridge stp llc amd_atl intel_rapl_msr intel_rapl_common sunrpc sch_fq_codel snd_hda_codec_realtek snd_hda_codec_generic snd_hda_scodec_component snd_hda_codec_hdmi snd_hda_intel snd_intel_dspcfg edac_mce_amd binfmt_misc snd_hda_codec snd_pci_acp6x snd_hda_core snd_acp_config snd_hwdep snd_soc_acpi kvm_amd snd_pcm kvm snd_seq_midi snd_seq_midi_event crct10dif_pclmul ghash_clmulni_intel sha512_ssse3 snd_rawmidi sha256_ssse3 sha1_ssse3 aesni_intel snd_seq nls_iso8859_1 crypto_simd snd_seq_device cryptd snd_timer rapl input_leds snd [  364.049532]  ipmi_devintf wmi_bmof ccp serio_raw k10temp sp5100_tco soundcore ipmi_msghandler cm32181 industrialio mac_hid msr parport_pc ppdev lp parport drm efi_pstore ip_tables x_tables pci_stub crc32_pclmul nvme ahci libahci i2c_piix4 r8169 nvme_core i2c_designware_pci realtek i2c_ccgx_ucsi video wmi hid_generic cdc_ether usbnet usbhid hid r8152 mii [  364.049576] CPU: 6 PID: 1964 Comm: rocminfo Tainted: G           OE      6.10.0-custom #492 [  364.049579] Hardware name: AMD Majolica-RN/Majolica-RN\, BIOS RMJ1009A 06/13/2021 [  364.049582] RIP: 0010:debug_dma_map_sg+0x2dc/0x370 [  364.049585] Code: 89 4d b8 e8 36 b1 86 00 8b 4d b8 48 8b 55 b0 44 8b 45 a8 4c 8b 4d a0 48 89 c6 48 c7 c7 00 4b 74 bc 4c 89 4d b8 e8 b4 73 f3 ff <0f> 0b 4c 8b 4d b8 8b 15 c8 2c b8 01 85 d2 0f 85 ee fd ff ff 8b 05 [  364.049588] RSP: 0018:ffff9ca600b57ac0 EFLAGS: 00010286 [  364.049590] RAX: 0000000000000000 RBX: ffff88b7c132b0c8 RCX: 0000000000000027 [  364.049592] RDX: ffff88bb0f521688 RSI: 0000000000000001 RDI: ffff88bb0f521680 [  364.049594] RBP: ffff9ca600b57b20 R08: 000000000000006f R09: ffff9ca600b57930 [  364.049596] R10: ffff9ca600b57928 R11: ffffffffbcb46328 R12: 0000000000000000 [  364.049597] R13: 0000000000000001 R14: ffff88b7c19c0700 R15: ffff88b7c9059800 [  364.049599] FS:  00007fb2d3516e80(0000) GS:ffff88bb0f500000(0000) knlGS:0000000000000000 [  364.049601] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  364.049603] CR2: 000055610bd03598 CR3: 00000001049f6000 CR4: 0000000000350ef0 [  364.049605] Call Trace: [  364.049607]  <TASK> [  364.049609]  ? show_regs+0x6d/0x80 [  364.049614]  ? __warn+0x8c/0x140 [  364.049618]  ? debug_dma_map_sg+0x2dc/0x370 [  364.049621]  ? report_bug+0x193/0x1a0 [  364.049627]  ? handle_bug+0x46/0x80 [  364.049631]  ? exc_invalid_op+0x1d/0x80 [  364.049635]  ? asm_exc_invalid_op+0x1f/0x30 [  364.049642]  ? debug_dma_map_sg+0x2dc/0x370 [  364.049647]  __dma_map_sg_attrs+0x90/0xe0 [  364.049651]  dma_map_sgtable+0x25/0x40 [  364.049654]  amdgpu_bo_move+0x59a/0x850 [amdgpu] [  364.049935]  ? srso_return_thunk+0x5/0x5f [  364.049939]  ? amdgpu_ttm_tt_populate+0x5d/0xc0 [amdgpu] [  364.050095]  ttm_bo_handle_move_mem+0xc3/0x180 [ttm] [  364.050103]  ttm_bo_validate+0xc1/0x160 [ttm] [  364.050108]  ? amdgpu_ttm_tt_get_user_pages+0xe5/0x1b0 [amdgpu] [  364.050263]  amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu+0xa12/0xc90 [amdgpu] [  364.050473]  kfd_ioctl_alloc_memory_of_gpu+0x16b/0x3b0 [amdgpu] [  364.050680]  kfd_ioctl+0x3c2/0x530 [amdgpu] [  364.050866]  ? __pfx_kfd_ioctl_alloc_memory_of_gpu+0x10/0x10 [amdgpu] [  364.05105 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46748,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  cachefiles: Set the max subreq size for cache writes to MAX_RW_COUNT  Set the maximum size of a subrequest that writes to cachefiles to be MAX_RW_COUNT so that we don't overrun the maximum write we can make to the backing filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-10723,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 4.17.2. Since the page allocator does not yield CPU resources to the owner of the oom_lock mutex\, a local unprivileged user can trivially lock up the system forever by wasting CPU resources from the page allocator (e.g.\, via concurrent page fault events) when the global OOM killer is invoked. NOTE: the software maintainer has not accepted certain proposed patches\, in part because of a viewpoint that ""the underlying problem is non-trivial to handle.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56595,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: add a check to prevent array-index-out-of-bounds in dbAdjTree  When the value of lp is 0 at the beginning of the for loop\, it will become negative in the next assignment and we should bail out.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57902,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  af_packet: fix vlan_get_tci() vs MSG_PEEK  Blamed commit forgot MSG_PEEK case\, allowing a crash [1] as found by syzbot.  Rework vlan_get_tci() to not touch skb at all\, so that it can be used from many cpus on the same skb.  Add a const qualifier to skb argument.  [1] skbuff: skb_under_panic: text:ffffffff8a8da482 len:32 put:14 head:ffff88807a1d5800 data:ffff88807a1d5810 tail:0x14 end:0x140 dev:<NULL> ------------[ cut here ]------------  kernel BUG at net/core/skbuff.c:206 ! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 0 UID: 0 PID: 5880 Comm: syz-executor172 Not tainted 6.13.0-rc3-syzkaller-00762-g9268abe611b0 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024  RIP: 0010:skb_panic net/core/skbuff.c:206 [inline]  RIP: 0010:skb_under_panic+0x14b/0x150 net/core/skbuff.c:216 Code: 0b 8d 48 c7 c6 9e 6c 26 8e 48 8b 54 24 08 8b 0c 24 44 8b 44 24 04 4d 89 e9 50 41 54 41 57 41 56 e8 3a 5a 79 f7 48 83 c4 20 90 <0f> 0b 0f 1f 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 RSP: 0018:ffffc90003baf5b8 EFLAGS: 00010286 RAX: 0000000000000087 RBX: dffffc0000000000 RCX: 8565c1eec37aa000 RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000 RBP: ffff88802616fb50 R08: ffffffff817f0a4c R09: 1ffff92000775e50 R10: dffffc0000000000 R11: fffff52000775e51 R12: 0000000000000140 R13: ffff88807a1d5800 R14: ffff88807a1d5810 R15: 0000000000000014 FS:  00007fa03261f6c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007ffd65753000 CR3: 0000000031720000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   skb_push+0xe5/0x100 net/core/skbuff.c:2636   vlan_get_tci+0x272/0x550 net/packet/af_packet.c:565   packet_recvmsg+0x13c9/0x1ef0 net/packet/af_packet.c:3616   sock_recvmsg_nosec net/socket.c:1044 [inline]   sock_recvmsg+0x22f/0x280 net/socket.c:1066   ____sys_recvmsg+0x1c6/0x480 net/socket.c:2814   ___sys_recvmsg net/socket.c:2856 [inline]   do_recvmmsg+0x426/0xab0 net/socket.c:2951   __sys_recvmmsg net/socket.c:3025 [inline]   __do_sys_recvmmsg net/socket.c:3048 [inline]   __se_sys_recvmmsg net/socket.c:3041 [inline]   __x64_sys_recvmmsg+0x199/0x250 net/socket.c:3041   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57903,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: restrict SO_REUSEPORT to inet sockets  After blamed commit\, crypto sockets could accidentally be destroyed from RCU call back\, as spotted by zyzbot [1].  Trying to acquire a mutex in RCU callback is not allowed.  Restrict SO_REUSEPORT socket option to inet sockets.  v1 of this patch supported TCP\, UDP and SCTP sockets\, but fcnal-test.sh test needed RAW and ICMP support.  [1] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:562 in_atomic(): 1\, irqs_disabled(): 0\, non_block: 0\, pid: 24\, name: ksoftirqd/1 preempt_count: 100\, expected: 0 RCU nest depth: 0\, expected: 0 1 lock held by ksoftirqd/1/24:   #0: ffffffff8e937ba0 (rcu_callback){....}-{0:0}\, at: rcu_lock_acquire include/linux/rcupdate.h:337 [inline]   #0: ffffffff8e937ba0 (rcu_callback){....}-{0:0}\, at: rcu_do_batch kernel/rcu/tree.c:2561 [inline]   #0: ffffffff8e937ba0 (rcu_callback){....}-{0:0}\, at: rcu_core+0xa37/0x17a0 kernel/rcu/tree.c:2823 Preemption disabled at:  [<ffffffff8161c8c8>] softirq_handle_begin kernel/softirq.c:402 [inline]  [<ffffffff8161c8c8>] handle_softirqs+0x128/0x9b0 kernel/softirq.c:537 CPU: 1 UID: 0 PID: 24 Comm: ksoftirqd/1 Not tainted 6.13.0-rc3-syzkaller-00174-ga024e377efed #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:  <TASK>   __dump_stack lib/dump_stack.c:94 [inline]   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120   __might_resched+0x5d4/0x780 kernel/sched/core.c:8758   __mutex_lock_common kernel/locking/mutex.c:562 [inline]   __mutex_lock+0x131/0xee0 kernel/locking/mutex.c:735   crypto_put_default_null_skcipher+0x18/0x70 crypto/crypto_null.c:179   aead_release+0x3d/0x50 crypto/algif_aead.c:489   alg_do_release crypto/af_alg.c:118 [inline]   alg_sock_destruct+0x86/0xc0 crypto/af_alg.c:502   __sk_destruct+0x58/0x5f0 net/core/sock.c:2260   rcu_do_batch kernel/rcu/tree.c:2567 [inline]   rcu_core+0xaaa/0x17a0 kernel/rcu/tree.c:2823   handle_softirqs+0x2d4/0x9b0 kernel/softirq.c:561   run_ksoftirqd+0xca/0x130 kernel/softirq.c:950   smpboot_thread_fn+0x544/0xa30 kernel/smpboot.c:164   kthread+0x2f0/0x390 kernel/kthread.c:389   ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147   ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57900,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ila: serialize calls to nf_register_net_hooks()  syzbot found a race in ila_add_mapping() [1]  commit 031ae72825ce (""ila: call nf_unregister_net_hooks() sooner"") attempted to fix a similar issue.  Looking at the syzbot repro\, we have concurrent ILA_CMD_ADD commands.  Add a mutex to make sure at most one thread is calling nf_register_net_hooks().  [1]  BUG: KASAN: slab-use-after-free in rht_key_hashfn include/linux/rhashtable.h:159 [inline]  BUG: KASAN: slab-use-after-free in __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h:604 Read of size 4 at addr ffff888028f40008 by task dhcpcd/5501  CPU: 1 UID: 0 PID: 5501 Comm: dhcpcd Not tainted 6.13.0-rc4-syzkaller-00054-gd6ef8b40d075 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:  <IRQ>   __dump_stack lib/dump_stack.c:94 [inline]   dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120   print_address_description mm/kasan/report.c:378 [inline]   print_report+0xc3/0x620 mm/kasan/report.c:489   kasan_report+0xd9/0x110 mm/kasan/report.c:602   rht_key_hashfn include/linux/rhashtable.h:159 [inline]   __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h:604   rhashtable_lookup include/linux/rhashtable.h:646 [inline]   rhashtable_lookup_fast include/linux/rhashtable.h:672 [inline]   ila_lookup_wildcards net/ipv6/ila/ila_xlat.c:127 [inline]   ila_xlat_addr net/ipv6/ila/ila_xlat.c:652 [inline]   ila_nf_input+0x1ee/0x620 net/ipv6/ila/ila_xlat.c:185   nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]   nf_hook_slow+0xbb/0x200 net/netfilter/core.c:626   nf_hook.constprop.0+0x42e/0x750 include/linux/netfilter.h:269   NF_HOOK include/linux/netfilter.h:312 [inline]   ipv6_rcv+0xa4/0x680 net/ipv6/ip6_input.c:309   __netif_receive_skb_one_core+0x12e/0x1e0 net/core/dev.c:5672   __netif_receive_skb+0x1d/0x160 net/core/dev.c:5785   process_backlog+0x443/0x15f0 net/core/dev.c:6117   __napi_poll.constprop.0+0xb7/0x550 net/core/dev.c:6883   napi_poll net/core/dev.c:6952 [inline]   net_rx_action+0xa94/0x1010 net/core/dev.c:7074   handle_softirqs+0x213/0x8f0 kernel/softirq.c:561   __do_softirq kernel/softirq.c:595 [inline]   invoke_softirq kernel/softirq.c:435 [inline]   __irq_exit_rcu+0x109/0x170 kernel/softirq.c:662   irq_exit_rcu+0x9/0x30 kernel/softirq.c:678   instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1049 [inline]   sysvec_apic_timer_interrupt+0xa4/0xc0 arch/x86/kernel/apic/apic.c:1049",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56598,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: array-index-out-of-bounds fix in dtReadFirst  The value of stbl can be sometimes out of bounds due to a bad filesystem. Added a check with appopriate return of error code in that case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-35501,linux-libc-dev,LOW,6.1.115-1,N/A,"A flaw was found in the Linux kernels implementation of audit rules\, where a syscall can unexpectedly not be correctly not be logged by the audit subsystem",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57901,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  af_packet: fix vlan_get_protocol_dgram() vs MSG_PEEK  Blamed commit forgot MSG_PEEK case\, allowing a crash [1] as found by syzbot.  Rework vlan_get_protocol_dgram() to not touch skb at all\, so that it can be used from many cpus on the same skb.  Add a const qualifier to skb argument.  [1] skbuff: skb_under_panic: text:ffffffff8a8ccd05 len:29 put:14 head:ffff88807fc8e400 data:ffff88807fc8e3f4 tail:0x11 end:0x140 dev:<NULL> ------------[ cut here ]------------  kernel BUG at net/core/skbuff.c:206 ! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 1 UID: 0 PID: 5892 Comm: syz-executor883 Not tainted 6.13.0-rc4-syzkaller-00054-gd6ef8b40d075 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024  RIP: 0010:skb_panic net/core/skbuff.c:206 [inline]  RIP: 0010:skb_under_panic+0x14b/0x150 net/core/skbuff.c:216 Code: 0b 8d 48 c7 c6 86 d5 25 8e 48 8b 54 24 08 8b 0c 24 44 8b 44 24 04 4d 89 e9 50 41 54 41 57 41 56 e8 5a 69 79 f7 48 83 c4 20 90 <0f> 0b 0f 1f 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 RSP: 0018:ffffc900038d7638 EFLAGS: 00010282 RAX: 0000000000000087 RBX: dffffc0000000000 RCX: 609ffd18ea660600 RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000 RBP: ffff88802483c8d0 R08: ffffffff817f0a8c R09: 1ffff9200071ae60 R10: dffffc0000000000 R11: fffff5200071ae61 R12: 0000000000000140 R13: ffff88807fc8e400 R14: ffff88807fc8e3f4 R15: 0000000000000011 FS:  00007fbac5e006c0(0000) GS:ffff8880b8700000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fbac5e00d58 CR3: 000000001238e000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   skb_push+0xe5/0x100 net/core/skbuff.c:2636   vlan_get_protocol_dgram+0x165/0x290 net/packet/af_packet.c:585   packet_recvmsg+0x948/0x1ef0 net/packet/af_packet.c:3552   sock_recvmsg_nosec net/socket.c:1033 [inline]   sock_recvmsg+0x22f/0x280 net/socket.c:1055   ____sys_recvmsg+0x1c6/0x480 net/socket.c:2803   ___sys_recvmsg net/socket.c:2845 [inline]   do_recvmmsg+0x426/0xab0 net/socket.c:2940   __sys_recvmmsg net/socket.c:3014 [inline]   __do_sys_recvmmsg net/socket.c:3037 [inline]   __se_sys_recvmmsg net/socket.c:3030 [inline]   __x64_sys_recvmmsg+0x199/0x250 net/socket.c:3030   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56599,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath10k: avoid NULL pointer error during sdio remove  When running 'rmmod ath10k'\, ath10k_sdio_remove() will free sdio workqueue by destroy_workqueue(). But if CONFIG_INIT_ON_FREE_DEFAULT_ON is set to yes\, kernel panic will happen: Call trace:  destroy_workqueue+0x1c/0x258  ath10k_sdio_remove+0x84/0x94  sdio_bus_remove+0x50/0x16c  device_release_driver_internal+0x188/0x25c  device_driver_detach+0x20/0x2c  This is because during 'rmmod ath10k'\, ath10k_sdio_remove() will call ath10k_core_destroy() before destroy_workqueue(). wiphy_dev_release() will finally be called in ath10k_core_destroy(). This function will free struct cfg80211_registered_device *rdev and all its members\, including wiphy\, dev and the pointer of sdio workqueue. Then the pointer of sdio workqueue will be set to NULL due to CONFIG_INIT_ON_FREE_DEFAULT_ON.  After device release\, destroy_workqueue() will use NULL pointer then the kernel panic happen.  Call trace: ath10k_sdio_remove   ->ath10k_core_unregister     ……     ->ath10k_core_stop       ->ath10k_hif_stop         ->ath10k_sdio_irq_disable     ->ath10k_hif_power_down       ->del_timer_sync(&ar_sdio->sleep_timer)   ->ath10k_core_destroy     ->ath10k_mac_destroy       ->ieee80211_free_hw         ->wiphy_free     ……           ->wiphy_dev_release   ->destroy_workqueue  Need to call destroy_workqueue() before ath10k_core_destroy()\, free the work queue buffer first and then free pointer of work queue by ath10k_core_destroy(). This order matches the error path order in ath10k_sdio_probe().  No work will be queued on sdio workqueue between it is destroyed and ath10k_core_destroy() is called. Based on the call_stack above\, the reason is: Only ath10k_sdio_sleep_timer_handler()\, ath10k_sdio_hif_tx_sg() and ath10k_sdio_irq_disable() will queue work on sdio workqueue. Sleep timer will be deleted before ath10k_core_destroy() in ath10k_hif_power_down(). ath10k_sdio_irq_disable() only be called in ath10k_hif_stop(). ath10k_core_unregister() will call ath10k_hif_power_down() to stop hif bus\, so ath10k_sdio_hif_tx_sg() won't be called anymore.  Tested-on: QCA6174 hw3.2 SDIO WLAN.RMH.4.4.1-00189",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46742,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb/server: fix potential null-ptr-deref of lease_ctx_info in smb2_open()  null-ptr-deref will occur when (req_op_level == SMB2_OPLOCK_LEVEL_LEASE) and parse_lease_state() return NULL.  Fix this by check if 'lease_ctx_info' is NULL.  Additionally\, remove the redundant parentheses in parse_durable_handle_context().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57906,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: adc: ti-ads8688: fix information leak in triggered buffer  The 'buffer' local array is used to push data to user space from a triggered buffer\, but it does not set values for inactive channels\, as it only uses iio_for_each_active_channel() to assign new values.  Initialize the array to zero before using it to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57907,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: adc: rockchip_saradc: fix information leak in triggered buffer  The 'data' local struct is used to push data to user space from a triggered buffer\, but it does not set values for inactive channels\, as it only uses iio_for_each_active_channel() to assign new values.  Initialize the struct to zero before using it to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57904,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: adc: at91: call input_free_device() on allocated iio_dev  Current implementation of at91_ts_register() calls input_free_deivce() on st->ts_input\, however\, the err label can be reached before the allocated iio_dev is stored to st->ts_input. Thus call input_free_device() on input instead of st->ts_input.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47794,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Prevent tailcall infinite loop caused by freplace  There is a potential infinite loop issue that can occur when using a combination of tail calls and freplace.  In an upcoming selftest\, the attach target for entry_freplace of tailcall_freplace.c is subprog_tc of tc_bpf2bpf.c\, while the tail call in entry_freplace leads to entry_tc. This results in an infinite loop:  entry_tc -> subprog_tc -> entry_freplace --tailcall-> entry_tc.  The problem arises because the tail_call_cnt in entry_freplace resets to zero each time entry_freplace is executed\, causing the tail call mechanism to never terminate\, eventually leading to a kernel panic.  To fix this issue\, the solution is twofold:  1. Prevent updating a program extended by an freplace program to a    prog_array map. 2. Prevent extending a program that is already part of a prog_array map    with an freplace program.  This ensures that:  * If a program or its subprogram has been extended by an freplace program\,   it can no longer be updated to a prog_array map. * If a program has been added to a prog_array map\, neither it nor its   subprograms can be extended by an freplace program.  Moreover\, an extension program should not be tailcalled. As such\, return -EINVAL if the program has a type of BPF_PROG_TYPE_EXT when adding it to a prog_array map.  Additionally\, fix a minor code style issue by replacing eight spaces with a tab for proper formatting.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26930,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: qla2xxx: Fix double free of the ha->vp_map pointer  Coverity scan reported potential risk of double free of the pointer ha->vp_map.  ha->vp_map was freed in qla2x00_mem_alloc()\, and again freed in function qla2x00_mem_free(ha).  Assign NULL to vp_map and kfree take care of NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-37893,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: BPF: Fix off-by-one error in build_prologue()  Vincent reported that running BPF progs with tailcalls on LoongArch causes kernel hard lockup. Debugging the issues shows that the JITed image missing a jirl instruction at the end of the epilogue.  There are two passes in JIT compiling\, the first pass set the flags and the second pass generates JIT code based on those flags. With BPF progs mixing bpf2bpf and tailcalls\, build_prologue() generates N insns in the first pass and then generates N+1 insns in the second pass. This makes epilogue_offset off by one and we will jump to some unexpected insn and cause lockup. Fix this by inserting a nop insn.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57849,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  s390/cpum_sf: Handle CPU hotplug remove during sampling  CPU hotplug remove handling triggers the following function call sequence:     CPUHP_AP_PERF_S390_SF_ONLINE  --> s390_pmu_sf_offline_cpu()    ...    CPUHP_AP_PERF_ONLINE          --> perf_event_exit_cpu()  The s390 CPUMF sampling CPU hotplug handler invokes:   s390_pmu_sf_offline_cpu()  +-->  cpusf_pmu_setup()        +--> setup_pmc_cpu()             +--> deallocate_buffers()  This function de-allocates all sampling data buffers (SDBs) allocated for that CPU at event initialization. It also clears the PMU_F_RESERVED bit. The CPU is gone and can not be sampled.  With the event still being active on the removed CPU\, the CPU event hotplug support in kernel performance subsystem triggers the following function calls on the removed CPU:    perf_event_exit_cpu()   +--> perf_event_exit_cpu_context()        +--> __perf_event_exit_context() \t    +--> __perf_remove_from_context() \t         +--> event_sched_out() \t              +--> cpumsf_pmu_del() \t                   +--> cpumsf_pmu_stop()                                 +--> hw_perf_event_update()  to stop and remove the event. During removal of the event\, the sampling device driver tries to read out the remaining samples from the sample data buffers (SDBs). But they have already been freed (and may have been re-assigned). This may lead to a use after free situation in which case the samples are most likely invalid. In the best case the memory has not been reassigned and still contains valid data.  Remedy this situation and check if the CPU is still in reserved state (bit PMU_F_RESERVED set). In this case the SDBs have not been released an contain valid data. This is always the case when the event is removed (and no CPU hotplug off occured). If the PMU_F_RESERVED bit is not set\, the SDB buffers are gone.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-17977,linux-libc-dev,LOW,6.1.115-1,N/A,"The Linux kernel 4.14.67 mishandles certain interaction among XFRM Netlink messages\, IPPROTO_AH packets\, and IPPROTO_IP packets\, which allows local users to cause a denial of service (memory consumption and system hang) by leveraging root access to execute crafted applications\, as demonstrated on CentOS 7.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49571,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: check iparea_offset and ipv6_prefixes_cnt when receiving proposal msg  When receiving proposal msg in server\, the field iparea_offset and the field ipv6_prefixes_cnt in proposal msg are from the remote client and can not be fully trusted. Especially the field iparea_offset\, once exceed the max value\, there has the chance to access wrong address\, and crash may happen.  This patch checks iparea_offset and ipv6_prefixes_cnt before using them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46813,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check link_index before accessing dc->links[]  [WHY & HOW] dc->links[] has max size of MAX_LINKS and NULL is return when trying to access with out-of-bound index.  This fixes 3 OVERRUN and 1 RESOURCE_LEAK issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-3397,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A race condition occurred between the functions lmLogClose and txEnd in JFS\, in the Linux Kernel\, executed in different threads. This flaw allows a local attacker with normal user privileges to crash the system or leak internal kernel information.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46811,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix index may exceed array range within fpu_update_bw_bounding_box  [Why] Coverity reports OVERRUN warning. soc.num_states could be 40. But array range of bw_params->clk_table.entries is 8.  [How] Assert if soc.num_states greater than 8.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57843,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  virtio-net: fix overflow inside virtnet_rq_alloc  When the frag just got a page\, then may lead to regression on VM. Specially if the sysctl net.core.high_order_alloc_disable value is 1\, then the frag always get a page when do refill.  Which could see reliable crashes or scp failure (scp a file 100M in size to VM).  The issue is that the virtnet_rq_dma takes up 16 bytes at the beginning of a new frag. When the frag size is larger than PAGE_SIZE\, everything is fine. However\, if the frag is only one page and the total size of the buffer and virtnet_rq_dma is larger than one page\, an overflow may occur.  The commit f9dac92ba908 (""virtio_ring: enable premapped mode whatever use_dma_api"") introduced this problem. And we reverted some commits to fix this in last linux version. Now we try to enable it and fix this bug directly.  Here\, when the frag size is not enough\, we reduce the buffer len to fix this problem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46816,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Stop amdgpu_dm initialize when link nums greater than max_links  [Why] Coverity report OVERRUN warning. There are only max_links elements within dc->links. link count could up to AMDGPU_DM_MAX_DISPLAY_INDEX 31.  [How] Make sure link count less than max_links.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-3864,linux-libc-dev,HIGH,6.1.115-1,N/A,"A flaw was found in the way the dumpable flag setting was handled when certain SUID binaries executed its descendants. The prerequisite is a SUID binary that sets real UID equal to effective UID\, and real GID equal to effective GID. The descendant will then have a dumpable value set to 1. As a result\, if the descendant process crashes and core_pattern is set to a relative value\, its core dump is stored in the current directory with uid:gid permissions. An unprivileged local user with eligible root SUID binary could use this flaw to place core dumps into root-owned directories\, potentially resulting in escalation of privileges.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57841,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: fix memory leak in tcp_conn_request()  If inet_csk_reqsk_queue_hash_add() return false\, tcp_conn_request() will return without free the dst memory\, which allocated in af_ops->route_req.  Here is the kmemleak stack:  unreferenced object 0xffff8881198631c0 (size 240):   comm ""softirq""\, pid 0\, jiffies 4299266571 (age 1802.392s)   hex dump (first 32 bytes):     00 10 9b 03 81 88 ff ff 80 98 da bc ff ff ff ff  ................     81 55 18 bb ff ff ff ff 00 00 00 00 00 00 00 00  .U..............   backtrace:     [<ffffffffb93e8d4c>] kmem_cache_alloc+0x60c/0xa80     [<ffffffffba11b4c5>] dst_alloc+0x55/0x250     [<ffffffffba227bf6>] rt_dst_alloc+0x46/0x1d0     [<ffffffffba23050a>] __mkroute_output+0x29a/0xa50     [<ffffffffba23456b>] ip_route_output_key_hash+0x10b/0x240     [<ffffffffba2346bd>] ip_route_output_flow+0x1d/0x90     [<ffffffffba254855>] inet_csk_route_req+0x2c5/0x500     [<ffffffffba26b331>] tcp_conn_request+0x691/0x12c0     [<ffffffffba27bd08>] tcp_rcv_state_process+0x3c8/0x11b0     [<ffffffffba2965c6>] tcp_v4_do_rcv+0x156/0x3b0     [<ffffffffba299c98>] tcp_v4_rcv+0x1cf8/0x1d80     [<ffffffffba239656>] ip_protocol_deliver_rcu+0xf6/0x360     [<ffffffffba2399a6>] ip_local_deliver_finish+0xe6/0x1e0     [<ffffffffba239b8e>] ip_local_deliver+0xee/0x360     [<ffffffffba239ead>] ip_rcv+0xad/0x2f0     [<ffffffffba110943>] __netif_receive_skb_one_core+0x123/0x140  Call dst_release() to free the dst memory when inet_csk_reqsk_queue_hash_add() return false in tcp_conn_request().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21959,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nf_conncount: Fully initialize struct nf_conncount_tuple in insert_tree()  Since commit b36e4523d4d5 (""netfilter: nf_conncount: fix garbage collection confirm race"")\, `cpu` and `jiffies32` were introduced to the struct nf_conncount_tuple.  The commit made nf_conncount_add() initialize `conn->cpu` and `conn->jiffies32` when allocating the struct. In contrast\, count_tree() was not changed to initialize them.  By commit 34848d5c896e (""netfilter: nf_conncount: Split insert and traversal"")\, count_tree() was split and the relevant allocation code now resides in insert_tree(). Initialize `conn->cpu` and `conn->jiffies32` in insert_tree().  BUG: KMSAN: uninit-value in find_or_evict net/netfilter/nf_conncount.c:117 [inline] BUG: KMSAN: uninit-value in __nf_conncount_add+0xd9c/0x2850 net/netfilter/nf_conncount.c:143  find_or_evict net/netfilter/nf_conncount.c:117 [inline]  __nf_conncount_add+0xd9c/0x2850 net/netfilter/nf_conncount.c:143  count_tree net/netfilter/nf_conncount.c:438 [inline]  nf_conncount_count+0x82f/0x1e80 net/netfilter/nf_conncount.c:521  connlimit_mt+0x7f6/0xbd0 net/netfilter/xt_connlimit.c:72  __nft_match_eval net/netfilter/nft_compat.c:403 [inline]  nft_match_eval+0x1a5/0x300 net/netfilter/nft_compat.c:433  expr_call_ops_eval net/netfilter/nf_tables_core.c:240 [inline]  nft_do_chain+0x426/0x2290 net/netfilter/nf_tables_core.c:288  nft_do_chain_ipv4+0x1a5/0x230 net/netfilter/nft_chain_filter.c:23  nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]  nf_hook_slow+0xf4/0x400 net/netfilter/core.c:626  nf_hook_slow_list+0x24d/0x860 net/netfilter/core.c:663  NF_HOOK_LIST include/linux/netfilter.h:350 [inline]  ip_sublist_rcv+0x17b7/0x17f0 net/ipv4/ip_input.c:633  ip_list_rcv+0x9ef/0xa40 net/ipv4/ip_input.c:669  __netif_receive_skb_list_ptype net/core/dev.c:5936 [inline]  __netif_receive_skb_list_core+0x15c5/0x1670 net/core/dev.c:5983  __netif_receive_skb_list net/core/dev.c:6035 [inline]  netif_receive_skb_list_internal+0x1085/0x1700 net/core/dev.c:6126  netif_receive_skb_list+0x5a/0x460 net/core/dev.c:6178  xdp_recv_frames net/bpf/test_run.c:280 [inline]  xdp_test_run_batch net/bpf/test_run.c:361 [inline]  bpf_test_run_xdp_live+0x2e86/0x3480 net/bpf/test_run.c:390  bpf_prog_test_run_xdp+0xf1d/0x1ae0 net/bpf/test_run.c:1316  bpf_prog_test_run+0x5e5/0xa30 kernel/bpf/syscall.c:4407  __sys_bpf+0x6aa/0xd90 kernel/bpf/syscall.c:5813  __do_sys_bpf kernel/bpf/syscall.c:5902 [inline]  __se_sys_bpf kernel/bpf/syscall.c:5900 [inline]  __ia32_sys_bpf+0xa0/0xe0 kernel/bpf/syscall.c:5900  ia32_sys_call+0x394d/0x4180 arch/x86/include/generated/asm/syscalls_32.h:358  do_syscall_32_irqs_on arch/x86/entry/common.c:165 [inline]  __do_fast_syscall_32+0xb0/0x110 arch/x86/entry/common.c:387  do_fast_syscall_32+0x38/0x80 arch/x86/entry/common.c:412  do_SYSENTER_32+0x1f/0x30 arch/x86/entry/common.c:450  entry_SYSENTER_compat_after_hwframe+0x84/0x8e  Uninit was created at:  slab_post_alloc_hook mm/slub.c:4121 [inline]  slab_alloc_node mm/slub.c:4164 [inline]  kmem_cache_alloc_noprof+0x915/0xe10 mm/slub.c:4171  insert_tree net/netfilter/nf_conncount.c:372 [inline]  count_tree net/netfilter/nf_conncount.c:450 [inline]  nf_conncount_count+0x1415/0x1e80 net/netfilter/nf_conncount.c:521  connlimit_mt+0x7f6/0xbd0 net/netfilter/xt_connlimit.c:72  __nft_match_eval net/netfilter/nft_compat.c:403 [inline]  nft_match_eval+0x1a5/0x300 net/netfilter/nft_compat.c:433  expr_call_ops_eval net/netfilter/nf_tables_core.c:240 [inline]  nft_do_chain+0x426/0x2290 net/netfilter/nf_tables_core.c:288  nft_do_chain_ipv4+0x1a5/0x230 net/netfilter/nft_chain_filter.c:23  nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]  nf_hook_slow+0xf4/0x400 net/netfilter/core.c:626  nf_hook_slow_list+0x24d/0x860 net/netfilter/core.c:663  NF_HOOK_LIST include/linux/netfilter.h:350 [inline]  ip_sublist_rcv+0x17b7/0x17f0 net/ipv4/ip_input.c:633  ip_list_rcv+0x9ef/0xa40 net/ip ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21722,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: do not force clear folio if buffer is referenced  Patch series ""nilfs2: protect busy buffer heads from being force-cleared"".  This series fixes the buffer head state inconsistency issues reported by syzbot that occurs when the filesystem is corrupted and falls back to read-only\, and the associated buffer head use-after-free issue.   This patch (of 2):  Syzbot has reported that after nilfs2 detects filesystem corruption and falls back to read-only\, inconsistencies in the buffer state may occur.  One of the inconsistencies is that when nilfs2 calls mark_buffer_dirty() to set a data or metadata buffer as dirty\, but it detects that the buffer is not in the uptodate state:   WARNING: CPU: 0 PID: 6049 at fs/buffer.c:1177 mark_buffer_dirty+0x2e5/0x520   fs/buffer.c:1177  ...  Call Trace:   <TASK>   nilfs_palloc_commit_alloc_entry+0x4b/0x160 fs/nilfs2/alloc.c:598   nilfs_ifile_create_inode+0x1dd/0x3a0 fs/nilfs2/ifile.c:73   nilfs_new_inode+0x254/0x830 fs/nilfs2/inode.c:344   nilfs_mkdir+0x10d/0x340 fs/nilfs2/namei.c:218   vfs_mkdir+0x2f9/0x4f0 fs/namei.c:4257   do_mkdirat+0x264/0x3a0 fs/namei.c:4280   __do_sys_mkdirat fs/namei.c:4295 [inline]   __se_sys_mkdirat fs/namei.c:4293 [inline]   __x64_sys_mkdirat+0x87/0xa0 fs/namei.c:4293   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83   entry_SYSCALL_64_after_hwframe+0x77/0x7f  The other is when nilfs_btree_propagate()\, which propagates the dirty state to the ancestor nodes of a b-tree that point to a dirty buffer\, detects that the origin buffer is not dirty\, even though it should be:   WARNING: CPU: 0 PID: 5245 at fs/nilfs2/btree.c:2089   nilfs_btree_propagate+0xc79/0xdf0 fs/nilfs2/btree.c:2089  ...  Call Trace:   <TASK>   nilfs_bmap_propagate+0x75/0x120 fs/nilfs2/bmap.c:345   nilfs_collect_file_data+0x4d/0xd0 fs/nilfs2/segment.c:587   nilfs_segctor_apply_buffers+0x184/0x340 fs/nilfs2/segment.c:1006   nilfs_segctor_scan_file+0x28c/0xa50 fs/nilfs2/segment.c:1045   nilfs_segctor_collect_blocks fs/nilfs2/segment.c:1216 [inline]   nilfs_segctor_collect fs/nilfs2/segment.c:1540 [inline]   nilfs_segctor_do_construct+0x1c28/0x6b90 fs/nilfs2/segment.c:2115   nilfs_segctor_construct+0x181/0x6b0 fs/nilfs2/segment.c:2479   nilfs_segctor_thread_construct fs/nilfs2/segment.c:2587 [inline]   nilfs_segctor_thread+0x69e/0xe80 fs/nilfs2/segment.c:2701   kthread+0x2f0/0x390 kernel/kthread.c:389   ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147   ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244   </TASK>  Both of these issues are caused by the callbacks that handle the page/folio write requests\, forcibly clear various states\, including the working state of the buffers they hold\, at unexpected times when they detect read-only fallback.  Fix these issues by checking if the buffer is referenced before clearing the page/folio state\, and skipping the clear if it is.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53128,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sched/task_stack: fix object_is_on_stack() for KASAN tagged pointers  When CONFIG_KASAN_SW_TAGS and CONFIG_KASAN_STACK are enabled\, the object_is_on_stack() function may produce incorrect results due to the presence of tags in the obj pointer\, while the stack pointer does not have tags.  This discrepancy can lead to incorrect stack object detection and subsequently trigger warnings if CONFIG_DEBUG_OBJECTS is also enabled.  Example of the warning:  ODEBUG: object 3eff800082ea7bb0 is NOT on stack ffff800082ea0000\, but annotated. ------------[ cut here ]------------ WARNING: CPU: 0 PID: 1 at lib/debugobjects.c:557 __debug_object_init+0x330/0x364 Modules linked in: CPU: 0 UID: 0 PID: 1 Comm: swapper/0 Not tainted 6.12.0-rc5 #4 Hardware name: linux\,dummy-virt (DT) pstate: 600000c5 (nZCv daIF -PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : __debug_object_init+0x330/0x364 lr : __debug_object_init+0x330/0x364 sp : ffff800082ea7b40 x29: ffff800082ea7b40 x28: 98ff0000c0164518 x27: 98ff0000c0164534 x26: ffff800082d93ec8 x25: 0000000000000001 x24: 1cff0000c00172a0 x23: 0000000000000000 x22: ffff800082d93ed0 x21: ffff800081a24418 x20: 3eff800082ea7bb0 x19: efff800000000000 x18: 0000000000000000 x17: 00000000000000ff x16: 0000000000000047 x15: 206b63617473206e x14: 0000000000000018 x13: ffff800082ea7780 x12: 0ffff800082ea78e x11: 0ffff800082ea790 x10: 0ffff800082ea79d x9 : 34d77febe173e800 x8 : 34d77febe173e800 x7 : 0000000000000001 x6 : 0000000000000001 x5 : feff800082ea74b8 x4 : ffff800082870a90 x3 : ffff80008018d3c4 x2 : 0000000000000001 x1 : ffff800082858810 x0 : 0000000000000050 Call trace:  __debug_object_init+0x330/0x364  debug_object_init_on_stack+0x30/0x3c  schedule_hrtimeout_range_clock+0xac/0x26c  schedule_hrtimeout+0x1c/0x30  wait_task_inactive+0x1d4/0x25c  kthread_bind_mask+0x28/0x98  init_rescuer+0x1e8/0x280  workqueue_init+0x1a0/0x3cc  kernel_init_freeable+0x118/0x200  kernel_init+0x28/0x1f0  ret_from_fork+0x10/0x20 ---[ end trace 0000000000000000 ]--- ODEBUG: object 3eff800082ea7bb0 is NOT on stack ffff800082ea0000\, but annotated. ------------[ cut here ]------------",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43819,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  kvm: s390: Reject memory region operations for ucontrol VMs  This change rejects the KVM_SET_USER_MEMORY_REGION and KVM_SET_USER_MEMORY_REGION2 ioctls when called on a ucontrol VM. This is necessary since ucontrol VMs have kvm->arch.gmap set to 0 and would thus result in a null pointer dereference further in. Memory management needs to be performed in userspace and using the ioctls KVM_S390_UCAS_MAP and KVM_S390_UCAS_UNMAP.  Also improve s390 specific documentation for KVM_SET_USER_MEMORY_REGION and KVM_SET_USER_MEMORY_REGION2.  [frankja@linux.ibm.com: commit message spelling fix\, subject prefix fix]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21723,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: mpi3mr: Fix possible crash when setting up bsg fails  If bsg_setup_queue() fails\, the bsg_queue is assigned a non-NULL value. Consequently\, in mpi3mr_bsg_exit()\, the condition ""if(!mrioc->bsg_queue)"" will not be satisfied\, preventing execution from entering bsg_remove_queue()\, which could lead to the following crash:  BUG: kernel NULL pointer dereference\, address: 000000000000041c Call Trace:   <TASK>   mpi3mr_bsg_exit+0x1f/0x50 [mpi3mr]   mpi3mr_remove+0x6f/0x340 [mpi3mr]   pci_device_remove+0x3f/0xb0   device_release_driver_internal+0x19d/0x220   unbind_store+0xa4/0xb0   kernfs_fop_write_iter+0x11f/0x200   vfs_write+0x1fc/0x3e0   ksys_write+0x67/0xe0   do_syscall_64+0x38/0x80   entry_SYSCALL_64_after_hwframe+0x78/0xe2",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53129,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/rockchip: vop: Fix a dereferenced before check warning  The 'state' can't be NULL\, we should check crtc_state.  Fix warning: drivers/gpu/drm/rockchip/rockchip_drm_vop.c:1096 vop_plane_atomic_async_check() warn: variable dereferenced before check 'state' (see line 1077)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36479,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fpga: bridge: add owner module and take its refcount  The current implementation of the fpga bridge assumes that the low-level module registers a driver for the parent device and uses its owner pointer to take the module's refcount. This approach is problematic since it can lead to a null pointer dereference while attempting to get the bridge if the parent device does not have a driver.  To address this problem\, add a module owner pointer to the fpga_bridge struct and use it to take the module's refcount. Modify the function for registering a bridge to take an additional owner module parameter and rename it to avoid conflicts. Use the old function name for a helper macro that automatically sets the module that registers the bridge as the owner. This ensures compatibility with existing low-level control modules and reduces the chances of registering a bridge without setting the owner.  Also\, update the documentation to keep it consistent with the new interface for registering an fpga bridge.  Other changes: opportunistically move put_device() from __fpga_bridge_get() to fpga_bridge_get() and of_fpga_bridge_get() to improve code clarity since the bridge device is taken in these functions.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21721,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: handle errors that nilfs_prepare_chunk() may return  Patch series ""nilfs2: fix issues with rename operations"".  This series fixes BUG_ON check failures reported by syzbot around rename operations\, and a minor behavioral issue where the mtime of a child directory changes when it is renamed instead of moved.   This patch (of 2):  The directory manipulation routines nilfs_set_link() and nilfs_delete_entry() rewrite the directory entry in the folio/page previously read by nilfs_find_entry()\, so error handling is omitted on the assumption that nilfs_prepare_chunk()\, which prepares the buffer for rewriting\, will always succeed for these.  And if an error is returned\, it triggers the legacy BUG_ON() checks in each routine.  This assumption is wrong\, as proven by syzbot: the buffer layer called by nilfs_prepare_chunk() may call nilfs_get_block() if necessary\, which may fail due to metadata corruption or other reasons.  This has been there all along\, but improved sanity checks and error handling may have made it more reproducible in fuzzing tests.  Fix this issue by adding missing error paths in nilfs_set_link()\, nilfs_delete_entry()\, and their caller nilfs_rename().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36478,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  null_blk: fix null-ptr-dereference while configuring 'power' and 'submit_queues'  Writing 'power' and 'submit_queues' concurrently will trigger kernel panic:  Test script:  modprobe null_blk nr_devices=0 mkdir -p /sys/kernel/config/nullb/nullb0 while true; do echo 1 > submit_queues; echo 4 > submit_queues; done & while true; do echo 1 > power; echo 0 > power; done  Test result:  BUG: kernel NULL pointer dereference\, address: 0000000000000148 Oops: 0000 [#1] PREEMPT SMP RIP: 0010:__lock_acquire+0x41d/0x28f0 Call Trace:  <TASK>  lock_acquire+0x121/0x450  down_write+0x5f/0x1d0  simple_recursive_removal+0x12f/0x5c0  blk_mq_debugfs_unregister_hctxs+0x7c/0x100  blk_mq_update_nr_hw_queues+0x4a3/0x720  nullb_update_nr_hw_queues+0x71/0xf0 [null_blk]  nullb_device_submit_queues_store+0x79/0xf0 [null_blk]  configfs_write_iter+0x119/0x1e0  vfs_write+0x326/0x730  ksys_write+0x74/0x150  This is because del_gendisk() can concurrent with blk_mq_update_nr_hw_queues():  nullb_device_power_store\tnullb_apply_submit_queues  null_del_dev  del_gendisk \t\t\t\t nullb_update_nr_hw_queues \t\t\t\t  if (!dev->nullb) \t\t\t\t  // still set while gendisk is deleted \t\t\t\t   return 0 \t\t\t\t  blk_mq_update_nr_hw_queues  dev->nullb = NULL  Fix this problem by resuing the global mutex to protect nullb_device_power_store() and nullb_update_nr_hw_queues() from configfs.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27079,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  iommu/vt-d: Fix NULL domain on device release  In the kdump kernel\, the IOMMU operates in deferred_attach mode. In this mode\, info->domain may not yet be assigned by the time the release_device function is called. It leads to the following crash in the crash kernel:      BUG: kernel NULL pointer dereference\, address: 000000000000003c     ...     RIP: 0010:do_raw_spin_lock+0xa/0xa0     ...     _raw_spin_lock_irqsave+0x1b/0x30     intel_iommu_release_device+0x96/0x170     iommu_deinit_device+0x39/0xf0     __iommu_group_remove_device+0xa0/0xd0     iommu_bus_notifier+0x55/0xb0     notifier_call_chain+0x5a/0xd0     blocking_notifier_call_chain+0x41/0x60     bus_notify+0x34/0x50     device_del+0x269/0x3d0     pci_remove_bus_device+0x77/0x100     p2sb_bar+0xae/0x1d0     ...     i801_probe+0x423/0x740  Use the release_domain mechanism to fix it. The scalable mode context entry which is not part of release domain should be cleared in release_device().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21726,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  padata: avoid UAF for reorder_work  Although the previous patch can avoid ps and ps UAF for _do_serial\, it can not avoid potential UAF issue for reorder_work. This issue can happen just as below:  crypto_request\t\t\tcrypto_request\t\tcrypto_del_alg padata_do_serial   ...   padata_reorder     // processes all remaining     // requests then breaks     while (1) {       if (!padata)         break;       ...     }  \t\t\t\tpadata_do_serial \t\t\t\t  // new request added \t\t\t\t  list_add     // sees the new request     queue_work(reorder_work) \t\t\t\t  padata_reorder \t\t\t\t    queue_work_on(squeue->work) ...  \t\t\t\t<kworker context> \t\t\t\tpadata_serial_worker \t\t\t\t// completes new request\, \t\t\t\t// no more outstanding \t\t\t\t// requests  \t\t\t\t\t\t\tcrypto_del_alg \t\t\t\t\t\t\t  // free pd  <kworker context> invoke_padata_reorder   // UAF of pd  To avoid UAF for 'reorder_work'\, get 'pd' ref before put 'reorder_work' into the 'serial_wq' and put 'pd' ref until the 'serial_wq' finish.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52586,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/msm/dpu: Add mutex lock in control vblank irq  Add a mutex lock to control vblank irq to synchronize vblank enable/disable operations happening from different threads to prevent race conditions while registering/unregistering the vblank irq callback.  v4: -Removed vblank_ctl_lock from dpu_encoder_virt\, so it is only a     parameter of dpu_encoder_phys.     -Switch from atomic refcnt to a simple int counter as mutex has     now been added v3: Mistakenly did not change wording in last version. It is done now. v2: Slightly changed wording of commit message  Patchwork: https://patchwork.freedesktop.org/patch/571854/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-5388,libnss3,MEDIUM,2:3.87.1-1+deb12u1,N/A,"NSS was susceptible to a timing side-channel attack when performing RSA decryption. This attack could potentially allow an attacker to recover the private data. This vulnerability affects Firefox < 124\, Firefox ESR < 115.9\, and Thunderbird < 115.9.",|tykio/midsommar|
CVE-2025-21727,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  padata: fix UAF in padata_reorder  A bug was found when run ltp test:  BUG: KASAN: slab-use-after-free in padata_find_next+0x29/0x1a0 Read of size 4 at addr ffff88bbfe003524 by task kworker/u113:2/3039206  CPU: 0 PID: 3039206 Comm: kworker/u113:2 Kdump: loaded Not tainted 6.6.0+ Workqueue: pdecrypt_parallel padata_parallel_worker Call Trace: <TASK> dump_stack_lvl+0x32/0x50 print_address_description.constprop.0+0x6b/0x3d0 print_report+0xdd/0x2c0 kasan_report+0xa5/0xd0 padata_find_next+0x29/0x1a0 padata_reorder+0x131/0x220 padata_parallel_worker+0x3d/0xc0 process_one_work+0x2ec/0x5a0  If 'mdelay(10)' is added before calling 'padata_find_next' in the 'padata_reorder' function\, this issue could be reproduced easily with ltp test (pcrypt_aead01).  This can be explained as bellow:  pcrypt_aead_encrypt ... padata_do_parallel refcount_inc(&pd->refcnt); // add refcnt ... padata_do_serial padata_reorder // pd while (1) { padata_find_next(pd\, true); // using pd queue_work_on ... padata_serial_worker\t\t\t\tcrypto_del_alg padata_put_pd_cnt // sub refcnt \t\t\t\t\t\tpadata_free_shell \t\t\t\t\t\tpadata_put_pd(ps->pd); \t\t\t\t\t\t// pd is freed // loop again\, but pd is freed // call padata_find_next\, UAF }  In the padata_reorder function\, when it loops in 'while'\, if the alg is deleted\, the refcnt may be decreased to 0 before entering 'padata_find_next'\, which leads to UAF.  As mentioned in [1]\, do_serial is supposed to be called with BHs disabled and always happen under RCU protection\, to address this issue\, add synchronize_rcu() in 'padata_free_shell' wait for all _do_serial calls to finish.  [1] https://lore.kernel.org/all/20221028160401.cccypv4euxikusiq@parnassus.localdomain/ [2] https://lore.kernel.org/linux-kernel/jfjz5d7zwbytztackem7ibzalm5lnxldi2eofeiczqmqs2m7o6@fq426cwnjtkm/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21724,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  iommufd/iova_bitmap: Fix shift-out-of-bounds in iova_bitmap_offset_to_index()  Resolve a UBSAN shift-out-of-bounds issue in iova_bitmap_offset_to_index() where shifting the constant ""1"" (of type int) by bitmap->mapped.pgshift (an unsigned long value) could result in undefined behavior.  The constant ""1"" defaults to a 32-bit ""int""\, and when ""pgshift"" exceeds 31 (e.g.\, pgshift = 63) the shift operation overflows\, as the result cannot be represented in a 32-bit type.  To resolve this\, the constant is updated to ""1UL""\, promoting it to an unsigned long type to match the operand's type.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56688,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  sunrpc: clear XPRT_SOCK_UPD_TIMEOUT when reset transport  Since transport->sock has been set to NULL during reset transport\, XPRT_SOCK_UPD_TIMEOUT also needs to be cleared. Otherwise\, the xs_tcp_set_socket_timeouts() may be triggered in xs_tcp_send_request() to dereference the transport->sock that has been set to NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21725,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix oops due to unset link speed  It isn't guaranteed that NETWORK_INTERFACE_INFO::LinkSpeed will always be set by the server\, so the client must handle any values and then prevent oopses like below from happening:  Oops: divide error: 0000 [#1] PREEMPT SMP KASAN NOPTI CPU: 0 UID: 0 PID: 1323 Comm: cat Not tainted 6.13.0-rc7 #2 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-3.fc41 04/01/2014 RIP: 0010:cifs_debug_data_proc_show+0xa45/0x1460 [cifs] Code: 00 00 48 89 df e8 3b cd 1b c1 41 f6 44 24 2c 04 0f 84 50 01 00 00 48 89 ef e8 e7 d0 1b c1 49 8b 44 24 18 31 d2 49 8d 7c 24 28 <48> f7 74 24 18 48 89 c3 e8 6e cf 1b c1 41 8b 6c 24 28 49 8d 7c 24 RSP: 0018:ffffc90001817be0 EFLAGS: 00010246 RAX: 0000000000000000 RBX: ffff88811230022c RCX: ffffffffc041bd99 RDX: 0000000000000000 RSI: 0000000000000567 RDI: ffff888112300228 RBP: ffff888112300218 R08: fffff52000302f5f R09: ffffed1022fa58ac R10: ffff888117d2c566 R11: 00000000fffffffe R12: ffff888112300200 R13: 000000012a15343f R14: 0000000000000001 R15: ffff888113f2db58 FS: 00007fe27119e740(0000) GS:ffff888148600000(0000) knlGS:0000000000000000 CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fe2633c5000 CR3: 0000000124da0000 CR4: 0000000000750ef0 PKRU: 55555554 Call Trace:  <TASK>  ? __die_body.cold+0x19/0x27  ? die+0x2e/0x50  ? do_trap+0x159/0x1b0  ? cifs_debug_data_proc_show+0xa45/0x1460 [cifs]  ? do_error_trap+0x90/0x130  ? cifs_debug_data_proc_show+0xa45/0x1460 [cifs]  ? exc_divide_error+0x39/0x50  ? cifs_debug_data_proc_show+0xa45/0x1460 [cifs]  ? asm_exc_divide_error+0x1a/0x20  ? cifs_debug_data_proc_show+0xa39/0x1460 [cifs]  ? cifs_debug_data_proc_show+0xa45/0x1460 [cifs]  ? seq_read_iter+0x42e/0x790  seq_read_iter+0x19a/0x790  proc_reg_read_iter+0xbe/0x110  ? __pfx_proc_reg_read_iter+0x10/0x10  vfs_read+0x469/0x570  ? do_user_addr_fault+0x398/0x760  ? __pfx_vfs_read+0x10/0x10  ? find_held_lock+0x8a/0xa0  ? __pfx_lock_release+0x10/0x10  ksys_read+0xd3/0x170  ? __pfx_ksys_read+0x10/0x10  ? __rcu_read_unlock+0x50/0x270  ? mark_held_locks+0x1a/0x90  do_syscall_64+0xbb/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7fe271288911 Code: 00 48 8b 15 01 25 10 00 f7 d8 64 89 02 b8 ff ff ff ff eb bd e8 20 ad 01 00 f3 0f 1e fa 80 3d b5 a7 10 00 00 74 13 31 c0 0f 05 <48> 3d 00 f0 ff ff 77 4f c3 66 0f 1f 44 00 00 55 48 89 e5 48 83 ec RSP: 002b:00007ffe87c079d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000000 RAX: ffffffffffffffda RBX: 0000000000040000 RCX: 00007fe271288911 RDX: 0000000000040000 RSI: 00007fe2633c6000 RDI: 0000000000000003 RBP: 00007ffe87c07a00 R08: 0000000000000000 R09: 00007fe2713e6380 R10: 0000000000000022 R11: 0000000000000246 R12: 0000000000040000 R13: 00007fe2633c6000 R14: 0000000000000003 R15: 0000000000000000  </TASK>  Fix this by setting cifs_server_iface::speed to a sane value (1Gbps) by default when link speed is unset.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21951,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  bus: mhi: host: pci_generic: Use pci_try_reset_function() to avoid deadlock  There are multiple places from where the recovery work gets scheduled asynchronously. Also\, there are multiple places where the caller waits synchronously for the recovery to be completed. One such place is during the PM shutdown() callback.  If the device is not alive during recovery_work\, it will try to reset the device using pci_reset_function(). This function internally will take the device_lock() first before resetting the device. By this time\, if the lock has already been acquired\, then recovery_work will get stalled while waiting for the lock. And if the lock was already acquired by the caller which waits for the recovery_work to be completed\, it will lead to deadlock.  This is what happened on the X1E80100 CRD device when the device died before shutdown() callback. Driver core calls the driver's shutdown() callback while holding the device_lock() leading to deadlock.  And this deadlock scenario can occur on other paths as well\, like during the PM suspend() callback\, where the driver core would hold the device_lock() before calling driver's suspend() callback. And if the recovery_work was already started\, it could lead to deadlock. This is also observed on the X1E80100 CRD.  So to fix both issues\, use pci_try_reset_function() in recovery_work. This function first checks for the availability of the device_lock() before trying to reset the device. If the lock is available\, it will acquire it and reset the device. Otherwise\, it will return -EAGAIN. If that happens\, recovery_work will fail with the error message ""Recovery failed"" as not much could be done.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53120,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5e: CT: Fix null-ptr-deref in add rule err flow  In error flow of mlx5_tc_ct_entry_add_rule()\, in case ct_rule_add() callback returns error\, zone_rule->attr is used uninitiated. Fix it to use attr which has the needed pointer value.  Kernel log:  BUG: kernel NULL pointer dereference\, address: 0000000000000110  RIP: 0010:mlx5_tc_ct_entry_add_rule+0x2b1/0x2f0 [mlx5_core] …  Call Trace:   <TASK>   ? __die+0x20/0x70   ? page_fault_oops+0x150/0x3e0   ? exc_page_fault+0x74/0x140   ? asm_exc_page_fault+0x22/0x30   ? mlx5_tc_ct_entry_add_rule+0x2b1/0x2f0 [mlx5_core]   ? mlx5_tc_ct_entry_add_rule+0x1d5/0x2f0 [mlx5_core]   mlx5_tc_ct_block_flow_offload+0xc6a/0xf90 [mlx5_core]   ? nf_flow_offload_tuple+0xd8/0x190 [nf_flow_table]   nf_flow_offload_tuple+0xd8/0x190 [nf_flow_table]   flow_offload_work_handler+0x142/0x320 [nf_flow_table]   ? finish_task_switch.isra.0+0x15b/0x2b0   process_one_work+0x16c/0x320   worker_thread+0x28c/0x3a0   ? __pfx_worker_thread+0x10/0x10   kthread+0xb8/0xf0   ? __pfx_kthread+0x10/0x10   ret_from_fork+0x2d/0x50   ? __pfx_kthread+0x10/0x10   ret_from_fork_asm+0x1a/0x30   </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21950,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drivers: virt: acrn: hsm: Use kzalloc to avoid info leak in pmcmd_ioctl  In the ""pmcmd_ioctl"" function\, three memory objects allocated by kmalloc are initialized by ""hcall_get_cpu_state""\, which are then copied to user space. The initializer is indeed implemented in ""acrn_hypercall2"" (arch/x86/include/asm/acrn.h). There is a risk of information leakage due to uninitialized bytes.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56687,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: musb: Fix hardware lockup on first Rx endpoint request  There is a possibility that a request's callback could be invoked from usb_ep_queue() (call trace below\, supplemented with missing calls):  req->complete from usb_gadget_giveback_request \t(drivers/usb/gadget/udc/core.c:999) usb_gadget_giveback_request from musb_g_giveback \t(drivers/usb/musb/musb_gadget.c:147) musb_g_giveback from rxstate \t(drivers/usb/musb/musb_gadget.c:784) rxstate from musb_ep_restart \t(drivers/usb/musb/musb_gadget.c:1169) musb_ep_restart from musb_ep_restart_resume_work \t(drivers/usb/musb/musb_gadget.c:1176) musb_ep_restart_resume_work from musb_queue_resume_work \t(drivers/usb/musb/musb_core.c:2279) musb_queue_resume_work from musb_gadget_queue \t(drivers/usb/musb/musb_gadget.c:1241) musb_gadget_queue from usb_ep_queue \t(drivers/usb/gadget/udc/core.c:300)  According to the docstring of usb_ep_queue()\, this should not happen:  ""Note that @req's ->complete() callback must never be called from within usb_ep_queue() as that can create deadlock situations.""  In fact\, a hardware lockup might occur in the following sequence:  1. The gadget is initialized using musb_gadget_enable(). 2. Meanwhile\, a packet arrives\, and the RXPKTRDY flag is set\, raising an    interrupt. 3. If IRQs are enabled\, the interrupt is handled\, but musb_g_rx() finds an    empty queue (next_request() returns NULL). The interrupt flag has    already been cleared by the glue layer handler\, but the RXPKTRDY flag    remains set. 4. The first request is enqueued using usb_ep_queue()\, leading to the call    of req->complete()\, as shown in the call trace above. 5. If the callback enables IRQs and another packet is waiting\, step (3)    repeats. The request queue is empty because usb_g_giveback() removes the    request before invoking the callback. 6. The endpoint remains locked up\, as the interrupt triggered by hardware    setting the RXPKTRDY flag has been handled\, but the flag itself remains    set.  For this scenario to occur\, it is only necessary for IRQs to be enabled at some point during the complete callback. This happens with the USB Ethernet gadget\, whose rx_complete() callback calls netif_rx(). If called in the task context\, netif_rx() disables the bottom halves (BHs). When the BHs are re-enabled\, IRQs are also enabled to allow soft IRQs to be processed. The gadget itself is initialized at module load (or at boot if built-in)\, but the first request is enqueued when the network interface is brought up\, triggering rx_complete() in the task context via ioctl(). If a packet arrives while the interface is down\, it can prevent the interface from receiving any further packets from the USB host.  The situation is quite complicated with many parties involved. This particular issue can be resolved in several possible ways:  1. Ensure that callbacks never enable IRQs. This would be difficult to    enforce\, as discovering how netif_rx() interacts with interrupts was    already quite challenging and u_ether is not the only function driver.    Similar ""bugs"" could be hidden in other drivers as well. 2. Disable MUSB interrupts in musb_g_giveback() before calling the callback    and re-enable them afterwars (by calling musb_{dis\,en}able_interrupts()\,    for example). This would ensure that MUSB interrupts are not handled    during the callback\, even if IRQs are enabled. In fact\, it would allow    IRQs to be enabled when releasing the lock. However\, this feels like an    inelegant hack. 3. Modify the interrupt handler to clear the RXPKTRDY flag if the request    queue is empty. While this approach also feels like a hack\, it wastes    CPU time by attempting to handle incoming packets when the software is    not ready to process them. 4. Flush the Rx FIFO instead of calling rxstate() in musb_ep_restart().    This ensures that the hardware can receive packets when there is at    least one request in the queue. Once I ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53121,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: fs\, lock FTE when checking if active  The referenced commits introduced a two-step process for deleting FTEs:  - Lock the FTE\, delete it from hardware\, set the hardware deletion function   to NULL and unlock the FTE. - Lock the parent flow group\, delete the software copy of the FTE\, and   remove it from the xarray.  However\, this approach encounters a race condition if a rule with the same match value is added simultaneously. In this scenario\, fs_core may set the hardware deletion function to NULL prematurely\, causing a panic during subsequent rule deletions.  To prevent this\, ensure the active flag of the FTE is checked under a lock\, which will prevent the fs_core layer from attaching a new steering rule to an FTE that is in the process of deletion.  [  438.967589] MOSHE: 2496 mlx5_del_flow_rules del_hw_func [  438.968205] ------------[ cut here ]------------ [  438.968654] refcount_t: decrement hit 0; leaking memory. [  438.969249] WARNING: CPU: 0 PID: 8957 at lib/refcount.c:31 refcount_warn_saturate+0xfb/0x110 [  438.970054] Modules linked in: act_mirred cls_flower act_gact sch_ingress openvswitch nsh mlx5_vdpa vringh vhost_iotlb vdpa mlx5_ib mlx5_core xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm ib_ipoib iw_cm ib_cm ib_uverbs ib_core zram zsmalloc fuse [last unloaded: cls_flower] [  438.973288] CPU: 0 UID: 0 PID: 8957 Comm: tc Not tainted 6.12.0-rc1+ #8 [  438.973888] Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 [  438.974874] RIP: 0010:refcount_warn_saturate+0xfb/0x110 [  438.975363] Code: 40 66 3b 82 c6 05 16 e9 4d 01 01 e8 1f 7c a0 ff 0f 0b c3 cc cc cc cc 48 c7 c7 10 66 3b 82 c6 05 fd e8 4d 01 01 e8 05 7c a0 ff <0f> 0b c3 cc cc cc cc 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 90 [  438.976947] RSP: 0018:ffff888124a53610 EFLAGS: 00010286 [  438.977446] RAX: 0000000000000000 RBX: ffff888119d56de0 RCX: 0000000000000000 [  438.978090] RDX: ffff88852c828700 RSI: ffff88852c81b3c0 RDI: ffff88852c81b3c0 [  438.978721] RBP: ffff888120fa0e88 R08: 0000000000000000 R09: ffff888124a534b0 [  438.979353] R10: 0000000000000001 R11: 0000000000000001 R12: ffff888119d56de0 [  438.979979] R13: ffff888120fa0ec0 R14: ffff888120fa0ee8 R15: ffff888119d56de0 [  438.980607] FS:  00007fe6dcc0f800(0000) GS:ffff88852c800000(0000) knlGS:0000000000000000 [  438.983984] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  438.984544] CR2: 00000000004275e0 CR3: 0000000186982001 CR4: 0000000000372eb0 [  438.985205] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [  438.985842] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [  438.986507] Call Trace: [  438.986799]  <TASK> [  438.987070]  ? __warn+0x7d/0x110 [  438.987426]  ? refcount_warn_saturate+0xfb/0x110 [  438.987877]  ? report_bug+0x17d/0x190 [  438.988261]  ? prb_read_valid+0x17/0x20 [  438.988659]  ? handle_bug+0x53/0x90 [  438.989054]  ? exc_invalid_op+0x14/0x70 [  438.989458]  ? asm_exc_invalid_op+0x16/0x20 [  438.989883]  ? refcount_warn_saturate+0xfb/0x110 [  438.990348]  mlx5_del_flow_rules+0x2f7/0x340 [mlx5_core] [  438.990932]  __mlx5_eswitch_del_rule+0x49/0x170 [mlx5_core] [  438.991519]  ? mlx5_lag_is_sriov+0x3c/0x50 [mlx5_core] [  438.992054]  ? xas_load+0x9/0xb0 [  438.992407]  mlx5e_tc_rule_unoffload+0x45/0xe0 [mlx5_core] [  438.993037]  mlx5e_tc_del_fdb_flow+0x2a6/0x2e0 [mlx5_core] [  438.993623]  mlx5e_flow_put+0x29/0x60 [mlx5_core] [  438.994161]  mlx5e_delete_flower+0x261/0x390 [mlx5_core] [  438.994728]  tc_setup_cb_destroy+0xb9/0x190 [  438.995150]  fl_hw_destroy_filter+0x94/0xc0 [cls_flower] [  438.995650]  fl_change+0x11a4/0x13c0 [cls_flower] [  438.996105]  tc_new_tfilter+0x347/0xbc0 [  438.996503]  ? __ ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21728,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Send signals asynchronously if !preemptible  BPF programs can execute in all kinds of contexts and when a program running in a non-preemptible context uses the bpf_send_signal() kfunc\, it will cause issues because this kfunc can sleep. Change `irqs_disabled()` to `!preemptible()`.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53122,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: cope racing subflow creation in mptcp_rcv_space_adjust  Additional active subflows - i.e. created by the in kernel path manager - are included into the subflow list before starting the 3whs.  A racing recvmsg() spooling data received on an already established subflow would unconditionally call tcp_cleanup_rbuf() on all the current subflows\, potentially hitting a divide by zero error on the newly created ones.  Explicitly check that the subflow is in a suitable state before invoking tcp_cleanup_rbuf().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36949,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  amd/amdkfd: sync all devices to wait all processes being evicted  If there are more than one device doing reset in parallel\, the first device will call kfd_suspend_all_processes() to evict all processes on all devices\, this call takes time to finish. other device will start reset and recover without waiting. if the process has not been evicted before doing recover\, it will be restored\, then caused page fault.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36022,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Init zone device and drm client after mode-1 reset on reload  In passthrough environment\, when amdgpu is reloaded after unload\, mode-1 is triggered after initializing the necessary IPs\, That init does not include KFD\, and KFD init waits until the reset is completed. KFD init is called in the reset handler\, but in this case\, the zone device and drm client is not initialized\, causing app to create kernel panic.  v2: Removing the init KFD condition from amdgpu_amdkfd_drm_client_create. As the previous version has the potential of creating DRM client twice.  v3: v2 patch results in SDMA engine hung as DRM open causes VM clear to SDMA before SDMA init. Adding the condition to in drm client creation\, on top of v1\, to guard against drm client creation call multiple times.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21729,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw89: fix race between cancel_hw_scan and hw_scan completion  The rtwdev->scanning flag isn't protected by mutex originally\, so cancel_hw_scan can pass the condition\, but suddenly hw_scan completion unset the flag and calls ieee80211_scan_completed() that will free local->hw_scan_req. Then\, cancel_hw_scan raises null-ptr-deref and use-after-free. Fix it by moving the check condition to where protected by mutex.   KASAN: null-ptr-deref in range [0x0000000000000088-0x000000000000008f]  CPU: 2 PID: 6922 Comm: kworker/2:2 Tainted: G           OE  Hardware name: LENOVO 2356AD1/2356AD1\, BIOS G7ETB6WW (2.76 ) 09/10/2019  Workqueue: events cfg80211_conn_work [cfg80211]  RIP: 0010:rtw89_fw_h2c_scan_offload_be+0xc33/0x13c3 [rtw89_core]  Code: 00 45 89 6c 24 1c 0f 85 23 01 00 00 48 8b 85 20 ff ff ff 48 8d  RSP: 0018:ffff88811fd9f068 EFLAGS: 00010206  RAX: dffffc0000000000 RBX: ffff88811fd9f258 RCX: 0000000000000001  RDX: 0000000000000011 RSI: 0000000000000001 RDI: 0000000000000089  RBP: ffff88811fd9f170 R08: 0000000000000000 R09: 0000000000000000  R10: ffff88811fd9f108 R11: 0000000000000000 R12: ffff88810e47f960  R13: 0000000000000000 R14: 000000000000ffff R15: 0000000000000000  FS:  0000000000000000(0000) GS:ffff8881d6f00000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007531dfca55b0 CR3: 00000001be296004 CR4: 00000000001706e0  Call Trace:   <TASK>   ? show_regs+0x61/0x73   ? __die_body+0x20/0x73   ? die_addr+0x4f/0x7b   ? exc_general_protection+0x191/0x1db   ? asm_exc_general_protection+0x27/0x30   ? rtw89_fw_h2c_scan_offload_be+0xc33/0x13c3 [rtw89_core]   ? rtw89_fw_h2c_scan_offload_be+0x458/0x13c3 [rtw89_core]   ? __pfx_rtw89_fw_h2c_scan_offload_be+0x10/0x10 [rtw89_core]   ? do_raw_spin_lock+0x75/0xdb   ? __pfx_do_raw_spin_lock+0x10/0x10   rtw89_hw_scan_offload+0xb5e/0xbf7 [rtw89_core]   ? _raw_spin_unlock+0xe/0x24   ? __mutex_lock.constprop.0+0x40c/0x471   ? __pfx_rtw89_hw_scan_offload+0x10/0x10 [rtw89_core]   ? __mutex_lock_slowpath+0x13/0x1f   ? mutex_lock+0xa2/0xdc   ? __pfx_mutex_lock+0x10/0x10   rtw89_hw_scan_abort+0x58/0xb7 [rtw89_core]   rtw89_ops_cancel_hw_scan+0x120/0x13b [rtw89_core]   ieee80211_scan_cancel+0x468/0x4d0 [mac80211]   ieee80211_prep_connection+0x858/0x899 [mac80211]   ieee80211_mgd_auth+0xbea/0xdde [mac80211]   ? __pfx_ieee80211_mgd_auth+0x10/0x10 [mac80211]   ? cfg80211_find_elem+0x15/0x29 [cfg80211]   ? is_bss+0x1b7/0x1d7 [cfg80211]   ieee80211_auth+0x18/0x27 [mac80211]   cfg80211_mlme_auth+0x3bb/0x3e7 [cfg80211]   cfg80211_conn_do_work+0x410/0xb81 [cfg80211]   ? __pfx_cfg80211_conn_do_work+0x10/0x10 [cfg80211]   ? __kasan_check_read+0x11/0x1f   ? psi_group_change+0x8bc/0x944   ? __kasan_check_write+0x14/0x22   ? mutex_lock+0x8e/0xdc   ? __pfx_mutex_lock+0x10/0x10   ? __pfx___radix_tree_lookup+0x10/0x10   cfg80211_conn_work+0x245/0x34d [cfg80211]   ? __pfx_cfg80211_conn_work+0x10/0x10 [cfg80211]   ? update_cfs_rq_load_avg+0x3bc/0x3d7   ? sched_clock_noinstr+0x9/0x1a   ? sched_clock+0x10/0x24   ? sched_clock_cpu+0x7e/0x42e   ? newidle_balance+0x796/0x937   ? __pfx_sched_clock_cpu+0x10/0x10   ? __pfx_newidle_balance+0x10/0x10   ? __kasan_check_read+0x11/0x1f   ? psi_group_change+0x8bc/0x944   ? _raw_spin_unlock+0xe/0x24   ? raw_spin_rq_unlock+0x47/0x54   ? raw_spin_rq_unlock_irq+0x9/0x1f   ? finish_task_switch.isra.0+0x347/0x586   ? __schedule+0x27bf/0x2892   ? mutex_unlock+0x80/0xd0   ? do_raw_spin_lock+0x75/0xdb   ? __pfx___schedule+0x10/0x10   process_scheduled_works+0x58c/0x821   worker_thread+0x4c7/0x586   ? __kasan_check_read+0x11/0x1f   kthread+0x285/0x294   ? __pfx_worker_thread+0x10/0x10   ? __pfx_kthread+0x10/0x10   ret_from_fork+0x29/0x6f   ? __pfx_kthread+0x10/0x10   ret_from_fork_asm+0x1b/0x30   </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53123,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: error out earlier on disconnect  Eric reported a division by zero splat in the MPTCP protocol:  Oops: divide error: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 1 UID: 0 PID: 6094 Comm: syz-executor317 Not tainted 6.12.0-rc5-syzkaller-00291-g05b92660cdfe #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 RIP: 0010:__tcp_select_window+0x5b4/0x1310 net/ipv4/tcp_output.c:3163 Code: f6 44 01 e3 89 df e8 9b 75 09 f8 44 39 f3 0f 8d 11 ff ff ff e8 0d 74 09 f8 45 89 f4 e9 04 ff ff ff e8 00 74 09 f8 44 89 f0 99 <f7> 7c 24 14 41 29 d6 45 89 f4 e9 ec fe ff ff e8 e8 73 09 f8 48 89 RSP: 0018:ffffc900041f7930 EFLAGS: 00010293 RAX: 0000000000017e67 RBX: 0000000000017e67 RCX: ffffffff8983314b RDX: 0000000000000000 RSI: ffffffff898331b0 RDI: 0000000000000004 RBP: 00000000005d6000 R08: 0000000000000004 R09: 0000000000017e67 R10: 0000000000003e80 R11: 0000000000000000 R12: 0000000000003e80 R13: ffff888031d9b440 R14: 0000000000017e67 R15: 00000000002eb000 FS: 00007feb5d7f16c0(0000) GS:ffff8880b8700000(0000) knlGS:0000000000000000 CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007feb5d8adbb8 CR3: 0000000074e4c000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace: <TASK> __tcp_cleanup_rbuf+0x3e7/0x4b0 net/ipv4/tcp.c:1493 mptcp_rcv_space_adjust net/mptcp/protocol.c:2085 [inline] mptcp_recvmsg+0x2156/0x2600 net/mptcp/protocol.c:2289 inet_recvmsg+0x469/0x6a0 net/ipv4/af_inet.c:885 sock_recvmsg_nosec net/socket.c:1051 [inline] sock_recvmsg+0x1b2/0x250 net/socket.c:1073 __sys_recvfrom+0x1a5/0x2e0 net/socket.c:2265 __do_sys_recvfrom net/socket.c:2283 [inline] __se_sys_recvfrom net/socket.c:2279 [inline] __x64_sys_recvfrom+0xe0/0x1c0 net/socket.c:2279 do_syscall_x64 arch/x86/entry/common.c:52 [inline] do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83 entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7feb5d857559 Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 51 18 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48 RSP: 002b:00007feb5d7f1208 EFLAGS: 00000246 ORIG_RAX: 000000000000002d RAX: ffffffffffffffda RBX: 00007feb5d8e1318 RCX: 00007feb5d857559 RDX: 000000800000000e RSI: 0000000000000000 RDI: 0000000000000003 RBP: 00007feb5d8e1310 R08: 0000000000000000 R09: ffffffff81000000 R10: 0000000000000100 R11: 0000000000000246 R12: 00007feb5d8e131c R13: 00007feb5d8ae074 R14: 000000800000000e R15: 00000000fffffdef  and provided a nice reproducer.  The root cause is the current bad handling of racing disconnect. After the blamed commit below\, sk_wait_data() can return (with error) with the underlying socket disconnected and a zero rcv_mss.  Catch the error and return without performing any additional operations on the current socket.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21955,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: prevent connection release during oplock break notification  ksmbd_work could be freed when after connection release. Increment r_count of ksmbd_conn to indicate that requests are not finished yet and to not release the connection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53124,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: fix data-races around sk->sk_forward_alloc  Syzkaller reported this warning:  ------------[ cut here ]------------  WARNING: CPU: 0 PID: 16 at net/ipv4/af_inet.c:156 inet_sock_destruct+0x1c5/0x1e0  Modules linked in:  CPU: 0 UID: 0 PID: 16 Comm: ksoftirqd/0 Not tainted 6.12.0-rc5 #26  Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014  RIP: 0010:inet_sock_destruct+0x1c5/0x1e0  Code: 24 12 4c 89 e2 5b 48 c7 c7 98 ec bb 82 41 5c e9 d1 18 17 ff 4c 89 e6 5b 48 c7 c7 d0 ec bb 82 41 5c e9 bf 18 17 ff 0f 0b eb 83 <0f> 0b eb 97 0f 0b eb 87 0f 0b e9 68 ff ff ff 66 66 2e 0f 1f 84 00  RSP: 0018:ffffc9000008bd90 EFLAGS: 00010206  RAX: 0000000000000300 RBX: ffff88810b172a90 RCX: 0000000000000007  RDX: 0000000000000002 RSI: 0000000000000300 RDI: ffff88810b172a00  RBP: ffff88810b172a00 R08: ffff888104273c00 R09: 0000000000100007  R10: 0000000000020000 R11: 0000000000000006 R12: ffff88810b172a00  R13: 0000000000000004 R14: 0000000000000000 R15: ffff888237c31f78  FS:  0000000000000000(0000) GS:ffff888237c00000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007ffc63fecac8 CR3: 000000000342e000 CR4: 00000000000006f0  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400  Call Trace:   <TASK>   ? __warn+0x88/0x130   ? inet_sock_destruct+0x1c5/0x1e0   ? report_bug+0x18e/0x1a0   ? handle_bug+0x53/0x90   ? exc_invalid_op+0x18/0x70   ? asm_exc_invalid_op+0x1a/0x20   ? inet_sock_destruct+0x1c5/0x1e0   __sk_destruct+0x2a/0x200   rcu_do_batch+0x1aa/0x530   ? rcu_do_batch+0x13b/0x530   rcu_core+0x159/0x2f0   handle_softirqs+0xd3/0x2b0   ? __pfx_smpboot_thread_fn+0x10/0x10   run_ksoftirqd+0x25/0x30   smpboot_thread_fn+0xdd/0x1d0   kthread+0xd3/0x100   ? __pfx_kthread+0x10/0x10   ret_from_fork+0x34/0x50   ? __pfx_kthread+0x10/0x10   ret_from_fork_asm+0x1a/0x30   </TASK>  ---[ end trace 0000000000000000 ]---  Its possible that two threads call tcp_v6_do_rcv()/sk_forward_alloc_add() concurrently when sk->sk_state == TCP_LISTEN with sk->sk_lock unlocked\, which triggers a data-race around sk->sk_forward_alloc: tcp_v6_rcv     tcp_v6_do_rcv         skb_clone_and_charge_r             sk_rmem_schedule                 __sk_mem_schedule                     sk_forward_alloc_add()             skb_set_owner_r                 sk_mem_charge                     sk_forward_alloc_add()         __kfree_skb             skb_release_all                 skb_release_head_state                     sock_rfree                         sk_mem_uncharge                             sk_forward_alloc_add()                             sk_mem_reclaim                                 // set local var reclaimable                                 __sk_mem_reclaim                                     sk_forward_alloc_add()  In this syzkaller testcase\, two threads call tcp_v6_do_rcv() with skb->truesize=768\, the sk_forward_alloc changes like this:  (cpu 1)             | (cpu 2)             | sk_forward_alloc  ...                 | ...                 | 0  __sk_mem_schedule() |                     | +4096 = 4096                      | __sk_mem_schedule() | +4096 = 8192  sk_mem_charge()     |                     | -768  = 7424                      | sk_mem_charge()     | -768  = 6656  ...                 |    ...              |  sk_mem_uncharge()   |                     | +768  = 7424  reclaimable=7424    |                     |                      | sk_mem_uncharge()   | +768  = 8192                      | reclaimable=8192    |  __sk_mem_reclaim()  |                     | -4096 = 4096                      | __sk_mem_reclaim()  | -8192 = -4096 != 0  The skb_clone_and_charge_r() should not be called in tcp_v6_do_rcv() when sk->sk_state is TCP_LISTEN\, it happens later in tcp_v6_syn_recv_sock(). Fix the same issue in dccp_v6_do_rcv().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36024,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Disable idle reallow as part of command/gpint execution  [Why] Workaroud for a race condition where DMCUB is in the process of committing to IPS1 during the handshake causing us to miss the transition into IPS2 and touch the INBOX1 RPTR causing a HW hang.  [How] Disable the reallow to ensure that we have enough of a gap between entry and exit and we're not seeing back-to-back wake_and_executes.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56683,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/vc4: hdmi: Avoid hang with debug registers when suspended  Trying to read /sys/kernel/debug/dri/1/hdmi1_regs when the hdmi is disconnected results in a fatal system hang.  This is due to the pm suspend code disabling the dvp clock. That is just a gate of the 108MHz clock in DVP_HT_RPI_MISC_CONFIG\, which results in accesses hanging AXI bus.  Protect against this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53125,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: sync_linked_regs() must preserve subreg_def  Range propagation must not affect subreg_def marks\, otherwise the following example is rewritten by verifier incorrectly when BPF_F_TEST_RND_HI32 flag is set:    0: call bpf_ktime_get_ns                   call bpf_ktime_get_ns   1: r0 &= 0x7fffffff       after verifier   r0 &= 0x7fffffff   2: w1 = w0                rewrites         w1 = w0   3: if w0 < 10 goto +0     -------------->  r11 = 0x2f5674a6     (r)   4: r1 >>= 32                               r11 <<= 32           (r)   5: r0 = r1                                 r1 |= r11            (r)   6: exit;                                   if w0 < 0xa goto pc+0                                              r1 >>= 32                                              r0 = r1                                              exit  (or zero extension of w1 at (2) is missing for architectures that  require zero extension for upper register half).  The following happens w/o this patch: - r0 is marked as not a subreg at (0); - w1 is marked as subreg at (2); - w1 subreg_def is overridden at (3) by copy_register_state(); - w1 is read at (5) but mark_insn_zext() does not mark (2)   for zero extension\, because w1 subreg_def is not set; - because of BPF_F_TEST_RND_HI32 flag verifier inserts random   value for hi32 bits of (2) (marked (r)); - this random value is read at (5).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36476,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/rtrs: Ensure 'ib_sge list' is accessible  Move the declaration of the 'ib_sge list' variable outside the 'always_invalidate' block to ensure it remains accessible for use throughout the function.  Previously\, 'ib_sge list' was declared within the 'always_invalidate' block\, limiting its accessibility\, then caused a 'BUG: kernel NULL pointer dereference'[1].  ? __die_body.cold+0x19/0x27  ? page_fault_oops+0x15a/0x2d0  ? search_module_extables+0x19/0x60  ? search_bpf_extables+0x5f/0x80  ? exc_page_fault+0x7e/0x180  ? asm_exc_page_fault+0x26/0x30  ? memcpy_orig+0xd5/0x140  rxe_mr_copy+0x1c3/0x200 [rdma_rxe]  ? rxe_pool_get_index+0x4b/0x80 [rdma_rxe]  copy_data+0xa5/0x230 [rdma_rxe]  rxe_requester+0xd9b/0xf70 [rdma_rxe]  ? finish_task_switch.isra.0+0x99/0x2e0  rxe_sender+0x13/0x40 [rdma_rxe]  do_task+0x68/0x1e0 [rdma_rxe]  process_one_work+0x177/0x330  worker_thread+0x252/0x390  ? __pfx_worker_thread+0x10/0x10  This change ensures the variable is available for subsequent operations that require it.  [1] https://lore.kernel.org/linux-rdma/6a1f3e8f-deb0-49f9-bc69-a9b03ecfcda7@fujitsu.com/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21957,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: qla1280: Fix kernel oops when debug level > 2  A null dereference or oops exception will eventually occur when qla1280.c driver is compiled with DEBUG_QLA1280 enabled and ql_debug_level > 2.  I think its clear from the code that the intention here is sg_dma_len(s) not length of sg_next(s) when printing the debug info.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21956,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Assign normalized_pix_clk when color depth = 14  [WHY & HOW] A warning message ""WARNING: CPU: 4 PID: 459 at ... /dc_resource.c:3397 calculate_phy_pix_clks+0xef/0x100 [amdgpu]"" occurs because the display_color_depth == COLOR_DEPTH_141414 is not handled. This is observed in Radeon RX 6600 XT.  It is fixed by assigning pix_clk * (14 * 3) / 24 - same as the rests.  Also fixes the indentation in get_norm_pix_clk.  (cherry picked from commit 274a87eb389f58eddcbc5659ab0b180b37e92775)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56681,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  crypto: bcm - add error check in the ahash_hmac_init function  The ahash_init functions may return fails. The ahash_hmac_init should not return ok when ahash_init returns error. For an example\, ahash_init will return -ENOMEM when allocation memory is error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53127,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  Revert ""mmc: dw_mmc: Fix IDMAC operation with pages bigger than 4K""  The commit 8396c793ffdf (""mmc: dw_mmc: Fix IDMAC operation with pages bigger than 4K"") increased the max_req_size\, even for 4K pages\, causing various issues: - Panic booting the kernel/rootfs from an SD card on Rockchip RK3566 - Panic booting the kernel/rootfs from an SD card on StarFive JH7100 - ""swiotlb buffer is full"" and data corruption on StarFive JH7110  At this stage no fix have been found\, so it's probably better to just revert the change.  This reverts commit 8396c793ffdf28bb8aee7cfe0891080f8cab7890.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47666,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: pm80xx: Set phy->enable_completion only when we wait for it  pm8001_phy_control() populates the enable_completion pointer with a stack address\, sends a PHY_LINK_RESET / PHY_HARD_RESET\, waits 300 ms\, and returns. The problem arises when a phy control response comes late.  After 300 ms the pm8001_phy_control() function returns and the passed enable_completion stack address is no longer valid. Late phy control response invokes complete() on a dangling enable_completion pointer which leads to a kernel crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42139,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ice: Fix improper extts handling  Extts events are disabled and enabled by the application ts2phc. However\, in case where the driver is removed when the application is running\, a specific extts event remains enabled and can cause a kernel crash. As a side effect\, when the driver is reloaded and application is started again\, remaining extts event for the channel from a previous run will keep firing and the message ""extts on unexpected channel"" might be printed to the user.  To avoid that\, extts events shall be disabled when PTP is released.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-53034,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ntb_hw_switchtec: Fix shift-out-of-bounds in switchtec_ntb_mw_set_trans  There is a kernel API ntb_mw_clear_trans() would pass 0 to both addr and size. This would make xlate_pos negative.  [   23.734156] switchtec switchtec0: MW 0: part 0 addr 0x0000000000000000 size 0x0000000000000000 [   23.734158] ================================================================================ [   23.734172] UBSAN: shift-out-of-bounds in drivers/ntb/hw/mscc/ntb_hw_switchtec.c:293:7 [   23.734418] shift exponent -1 is negative  Ensuring xlate_pos is a positive or zero before BIT.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47664,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spi: hisi-kunpeng: Add verification for the max_frequency provided by the firmware  If the value of max_speed_hz is 0\, it may cause a division by zero error in hisi_calc_effective_speed(). The value of max_speed_hz is provided by firmware. Firmware is generally considered as a trusted domain. However\, as division by zero errors can cause system failure\, for defense measure\, the value of max_speed is validated here. So 0 is regarded as invalid and an error code is returned.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-3640,linux-libc-dev,LOW,6.1.115-1,N/A,"A possible unauthorized memory access flaw was found in the Linux kernel's cpu_entry_area mapping of X86 CPU data to memory\, where a user may guess the location of exception stacks or other important data. Based on the previous CVE-2023-0597\, the 'Randomize per-cpu entry area' feature was implemented in /arch/x86/mm/cpu_entry_area.c\, which works through the init_cea_offsets() function when KASLR is enabled. However\, despite this feature\, there is still a risk of per-cpu entry area leaks. This issue could allow a local user to gain access to some important data with memory in an expected location and potentially escalate their privileges on the system.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58020,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: multitouch: Add NULL check in mt_input_configured  devm_kasprintf() can return a NULL pointer on failure\,but this returned value in mt_input_configured() is not checked. Add NULL check in mt_input_configured()\, to handle kernel NULL pointer dereference error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47662,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Remove register from DCN35 DMCUB diagnostic collection  [Why] These registers should not be read from driver and triggering the security violation when DMCUB work times out and diagnostics are collected blocks Z8 entry.  [How] Remove the register read from DCN35.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53229,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/rxe: Fix the qp flush warnings in req  When the qp is in error state\, the status of WQEs in the queue should be set to error. Or else the following will appear.  [  920.617269] WARNING: CPU: 1 PID: 21 at drivers/infiniband/sw/rxe/rxe_comp.c:756 rxe_completer+0x989/0xcc0 [rdma_rxe] [  920.617744] Modules linked in: rnbd_client(O) rtrs_client(O) rtrs_core(O) rdma_ucm rdma_cm iw_cm ib_cm crc32_generic rdma_rxe ip6_udp_tunnel udp_tunnel ib_uverbs ib_core loop brd null_blk ipv6 [  920.618516] CPU: 1 PID: 21 Comm: ksoftirqd/1 Tainted: G           O       6.1.113-storage+ #65 [  920.618986] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014 [  920.619396] RIP: 0010:rxe_completer+0x989/0xcc0 [rdma_rxe] [  920.619658] Code: 0f b6 84 24 3a 02 00 00 41 89 84 24 44 04 00 00 e9 2a f7 ff ff 39 ca bb 03 00 00 00 b8 0e 00 00 00 48 0f 45 d8 e9 15 f7 ff ff <0f> 0b e9 cb f8 ff ff 41 bf f5 ff ff ff e9 08 f8 ff ff 49 8d bc 24 [  920.620482] RSP: 0018:ffff97b7c00bbc38 EFLAGS: 00010246 [  920.620817] RAX: 0000000000000000 RBX: 000000000000000c RCX: 0000000000000008 [  920.621183] RDX: ffff960dc396ebc0 RSI: 0000000000005400 RDI: ffff960dc4e2fbac [  920.621548] RBP: 0000000000000000 R08: 0000000000000001 R09: ffffffffac406450 [  920.621884] R10: ffffffffac4060c0 R11: 0000000000000001 R12: ffff960dc4e2f800 [  920.622254] R13: ffff960dc4e2f928 R14: ffff97b7c029c580 R15: 0000000000000000 [  920.622609] FS:  0000000000000000(0000) GS:ffff960ef7d00000(0000) knlGS:0000000000000000 [  920.622979] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  920.623245] CR2: 00007fa056965e90 CR3: 00000001107f1000 CR4: 00000000000006e0 [  920.623680] Call Trace: [  920.623815]  <TASK> [  920.623933]  ? __warn+0x79/0xc0 [  920.624116]  ? rxe_completer+0x989/0xcc0 [rdma_rxe] [  920.624356]  ? report_bug+0xfb/0x150 [  920.624594]  ? handle_bug+0x3c/0x60 [  920.624796]  ? exc_invalid_op+0x14/0x70 [  920.624976]  ? asm_exc_invalid_op+0x16/0x20 [  920.625203]  ? rxe_completer+0x989/0xcc0 [rdma_rxe] [  920.625474]  ? rxe_completer+0x329/0xcc0 [rdma_rxe] [  920.625749]  rxe_do_task+0x80/0x110 [rdma_rxe] [  920.626037]  rxe_requester+0x625/0xde0 [rdma_rxe] [  920.626310]  ? rxe_cq_post+0xe2/0x180 [rdma_rxe] [  920.626583]  ? do_complete+0x18d/0x220 [rdma_rxe] [  920.626812]  ? rxe_completer+0x1a3/0xcc0 [rdma_rxe] [  920.627050]  rxe_do_task+0x80/0x110 [rdma_rxe] [  920.627285]  tasklet_action_common.constprop.0+0xa4/0x120 [  920.627522]  handle_softirqs+0xc2/0x250 [  920.627728]  ? sort_range+0x20/0x20 [  920.627942]  run_ksoftirqd+0x1f/0x30 [  920.628158]  smpboot_thread_fn+0xc7/0x1b0 [  920.628334]  kthread+0xd6/0x100 [  920.628504]  ? kthread_complete_and_exit+0x20/0x20 [  920.628709]  ret_from_fork+0x1f/0x30 [  920.628892]  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47661,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Avoid overflow from uint32_t to uint8_t  [WHAT & HOW] dmub_rb_cmd's ramping_boundary has size of uint8_t and it is assigned 0xFFFF. Fix it by changing it to uint8_t with value of 0xFF.  This fixes 2 INTEGER_OVERFLOW issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53227,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: bfa: Fix use-after-free in bfad_im_module_exit()  BUG: KASAN: slab-use-after-free in __lock_acquire+0x2aca/0x3a20 Read of size 8 at addr ffff8881082d80c8 by task modprobe/25303  Call Trace:  <TASK>  dump_stack_lvl+0x95/0xe0  print_report+0xcb/0x620  kasan_report+0xbd/0xf0  __lock_acquire+0x2aca/0x3a20  lock_acquire+0x19b/0x520  _raw_spin_lock+0x2b/0x40  attribute_container_unregister+0x30/0x160  fc_release_transport+0x19/0x90 [scsi_transport_fc]  bfad_im_module_exit+0x23/0x60 [bfa]  bfad_init+0xdb/0xff0 [bfa]  do_one_initcall+0xdc/0x550  do_init_module+0x22d/0x6b0  load_module+0x4e96/0x5ff0  init_module_from_file+0xcd/0x130  idempotent_init_module+0x330/0x620  __x64_sys_finit_module+0xb3/0x110  do_syscall_64+0xc1/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  </TASK>  Allocated by task 25303:  kasan_save_stack+0x24/0x50  kasan_save_track+0x14/0x30  __kasan_kmalloc+0x7f/0x90  fc_attach_transport+0x4f/0x4740 [scsi_transport_fc]  bfad_im_module_init+0x17/0x80 [bfa]  bfad_init+0x23/0xff0 [bfa]  do_one_initcall+0xdc/0x550  do_init_module+0x22d/0x6b0  load_module+0x4e96/0x5ff0  init_module_from_file+0xcd/0x130  idempotent_init_module+0x330/0x620  __x64_sys_finit_module+0xb3/0x110  do_syscall_64+0xc1/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Freed by task 25303:  kasan_save_stack+0x24/0x50  kasan_save_track+0x14/0x30  kasan_save_free_info+0x3b/0x60  __kasan_slab_free+0x38/0x50  kfree+0x212/0x480  bfad_im_module_init+0x7e/0x80 [bfa]  bfad_init+0x23/0xff0 [bfa]  do_one_initcall+0xdc/0x550  do_init_module+0x22d/0x6b0  load_module+0x4e96/0x5ff0  init_module_from_file+0xcd/0x130  idempotent_init_module+0x330/0x620  __x64_sys_finit_module+0xb3/0x110  do_syscall_64+0xc1/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Above issue happens as follows:  bfad_init   error = bfad_im_module_init()     fc_release_transport(bfad_im_scsi_transport_template);   if (error)     goto ext;  ext:   bfad_im_module_exit();     fc_release_transport(bfad_im_scsi_transport_template);     --> Trigger double release  Don't call bfad_im_module_exit() if bfad_im_module_init() failed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22090,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/mm/pat: Fix VM_PAT handling when fork() fails in copy_page_range()  If track_pfn_copy() fails\, we already added the dst VMA to the maple tree. As fork() fails\, we'll cleanup the maple tree\, and stumble over the dst VMA for which we neither performed any reservation nor copied any page tables.  Consequently untrack_pfn() will see VM_PAT and try obtaining the PAT information from the page table -- which fails because the page table was not copied.  The easiest fix would be to simply clear the VM_PAT flag of the dst VMA if track_pfn_copy() fails. However\, the whole thing is about ""simply"" clearing the VM_PAT flag is shaky as well: if we passed track_pfn_copy() and performed a reservation\, but copying the page tables fails\, we'll simply clear the VM_PAT flag\, not properly undoing the reservation ... which is also wrong.  So let's fix it properly: set the VM_PAT flag only if the reservation succeeded (leaving it clear initially)\, and undo the reservation if anything goes wrong while copying the page tables: clearing the VM_PAT flag after undoing the reservation.  Note that any copied page table entries will get zapped when the VMA will get removed later\, after copy_page_range() succeeded; as VM_PAT is not set then\, we won't try cleaning VM_PAT up once more and untrack_pfn() will be happy. Note that leaving these page tables in place without a reservation is not a problem\, as we are aborting fork(); this process will never run.  A reproducer can trigger this usually at the first try:    https://gitlab.com/davidhildenbrand/scratchspace/-/raw/main/reproducers/pat_fork.c    WARNING: CPU: 26 PID: 11650 at arch/x86/mm/pat/memtype.c:983 get_pat_info+0xf6/0x110   Modules linked in: ...   CPU: 26 UID: 0 PID: 11650 Comm: repro3 Not tainted 6.12.0-rc5+ #92   Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-2.fc40 04/01/2014   RIP: 0010:get_pat_info+0xf6/0x110   ...   Call Trace:    <TASK>    ...    untrack_pfn+0x52/0x110    unmap_single_vma+0xa6/0xe0    unmap_vmas+0x105/0x1f0    exit_mmap+0xf6/0x460    __mmput+0x4b/0x120    copy_process+0x1bf6/0x2aa0    kernel_clone+0xab/0x440    __do_sys_clone+0x66/0x90    do_syscall_64+0x95/0x180  Likely this case was missed in:    d155df53f310 (""x86/mm/pat: clear VM_PAT if copy_p4d_range failed"")  ... and instead of undoing the reservation we simply cleared the VM_PAT flag.  Keep the documentation of these functions in include/linux/pgtable.h\, one place is more than sufficient -- we should clean that up for the other functions like track_pfn_remap/untrack_pfn separately.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53226,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/hns: Fix NULL pointer derefernce in hns_roce_map_mr_sg()  ib_map_mr_sg() allows ULPs to specify NULL as the sg_offset argument. The driver needs to check whether it is a NULL pointer before dereferencing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22093,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: avoid NPD when ASIC does not support DMUB  ctx->dmub_srv will de NULL if the ASIC does not support DMUB\, which is tested in dm_dmub_sw_init.  However\, it will be dereferenced in dmub_hw_lock_mgr_cmd if should_use_dmub_lock returns true.  This has been the case since dmub support has been added for PSR1.  Fix this by checking for dmub_srv in should_use_dmub_lock.  [   37.440832] BUG: kernel NULL pointer dereference\, address: 0000000000000058 [   37.447808] #PF: supervisor read access in kernel mode [   37.452959] #PF: error_code(0x0000) - not-present page [   37.458112] PGD 0 P4D 0 [   37.460662] Oops: Oops: 0000 [#1] PREEMPT SMP NOPTI [   37.465553] CPU: 2 UID: 1000 PID: 1745 Comm: DrmThread Not tainted 6.14.0-rc1-00003-gd62e938120f0 #23 99720e1cb1e0fc4773b8513150932a07de3c6e88 [   37.478324] Hardware name: Google Morphius/Morphius\, BIOS Google_Morphius.13434.858.0 10/26/2023 [   37.487103] RIP: 0010:dmub_hw_lock_mgr_cmd+0x77/0xb0 [   37.492074] Code: 44 24 0e 00 00 00 00 48 c7 04 24 45 00 00 0c 40 88 74 24 0d 0f b6 02 88 44 24 0c 8b 01 89 44 24 08 85 f6 75 05 c6 44 24 0e 01 <48> 8b 7f 58 48 89 e6 ba 01 00 00 00 e8 08 3c 2a 00 65 48 8b 04 5 [   37.510822] RSP: 0018:ffff969442853300 EFLAGS: 00010202 [   37.516052] RAX: 0000000000000000 RBX: ffff92db03000000 RCX: ffff969442853358 [   37.523185] RDX: ffff969442853368 RSI: 0000000000000001 RDI: 0000000000000000 [   37.530322] RBP: 0000000000000001 R08: 00000000000004a7 R09: 00000000000004a5 [   37.537453] R10: 0000000000000476 R11: 0000000000000062 R12: ffff92db0ade8000 [   37.544589] R13: ffff92da01180ae0 R14: ffff92da011802a8 R15: ffff92db03000000 [   37.551725] FS:  0000784a9cdfc6c0(0000) GS:ffff92db2af00000(0000) knlGS:0000000000000000 [   37.559814] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [   37.565562] CR2: 0000000000000058 CR3: 0000000112b1c000 CR4: 00000000003506f0 [   37.572697] Call Trace: [   37.575152]  <TASK> [   37.577258]  ? __die_body+0x66/0xb0 [   37.580756]  ? page_fault_oops+0x3e7/0x4a0 [   37.584861]  ? exc_page_fault+0x3e/0xe0 [   37.588706]  ? exc_page_fault+0x5c/0xe0 [   37.592550]  ? asm_exc_page_fault+0x22/0x30 [   37.596742]  ? dmub_hw_lock_mgr_cmd+0x77/0xb0 [   37.601107]  dcn10_cursor_lock+0x1e1/0x240 [   37.605211]  program_cursor_attributes+0x81/0x190 [   37.609923]  commit_planes_for_stream+0x998/0x1ef0 [   37.614722]  update_planes_and_stream_v2+0x41e/0x5c0 [   37.619703]  dc_update_planes_and_stream+0x78/0x140 [   37.624588]  amdgpu_dm_atomic_commit_tail+0x4362/0x49f0 [   37.629832]  ? srso_return_thunk+0x5/0x5f [   37.633847]  ? mark_held_locks+0x6d/0xd0 [   37.637774]  ? _raw_spin_unlock_irq+0x24/0x50 [   37.642135]  ? srso_return_thunk+0x5/0x5f [   37.646148]  ? lockdep_hardirqs_on+0x95/0x150 [   37.650510]  ? srso_return_thunk+0x5/0x5f [   37.654522]  ? _raw_spin_unlock_irq+0x2f/0x50 [   37.658883]  ? srso_return_thunk+0x5/0x5f [   37.662897]  ? wait_for_common+0x186/0x1c0 [   37.666998]  ? srso_return_thunk+0x5/0x5f [   37.671009]  ? drm_crtc_next_vblank_start+0xc3/0x170 [   37.675983]  commit_tail+0xf5/0x1c0 [   37.679478]  drm_atomic_helper_commit+0x2a2/0x2b0 [   37.684186]  drm_atomic_commit+0xd6/0x100 [   37.688199]  ? __cfi___drm_printfn_info+0x10/0x10 [   37.692911]  drm_atomic_helper_update_plane+0xe5/0x130 [   37.698054]  drm_mode_cursor_common+0x501/0x670 [   37.702600]  ? __cfi_drm_mode_cursor_ioctl+0x10/0x10 [   37.707572]  drm_mode_cursor_ioctl+0x48/0x70 [   37.711851]  drm_ioctl_kernel+0xf2/0x150 [   37.715781]  drm_ioctl+0x363/0x590 [   37.719189]  ? __cfi_drm_mode_cursor_ioctl+0x10/0x10 [   37.724165]  amdgpu_drm_ioctl+0x41/0x80 [   37.728013]  __se_sys_ioctl+0x7f/0xd0 [   37.731685]  do_syscall_64+0x87/0x100 [   37.735355]  ? vma_end_read+0x12/0xe0 [   37.739024]  ? srso_return_thunk+0x5/0x5f [   37.743041]  ? find_held_lock+0x47/0xf0 [   37.746884]  ? vma_end_read+0x12/0xe0 [   37.750552]  ? srso_return_thunk+0x5/0 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53224,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Move events notifier registration to be after device registration  Move pkey change work initialization and cleanup from device resources stage to notifier stage\, since this is the stage which handles this work events.  Fix a race between the device deregistration and pkey change work by moving MLX5_IB_STAGE_DEVICE_NOTIFIER to be after MLX5_IB_STAGE_IB_REG in order to ensure that the notifier is deregistered before the device during cleanup. Which ensures there are no works that are being executed after the device has already unregistered which can cause the panic below.  BUG: kernel NULL pointer dereference\, address: 0000000000000000 PGD 0 P4D 0 Oops: 0000 [#1] PREEMPT SMP PTI CPU: 1 PID: 630071 Comm: kworker/1:2 Kdump: loaded Tainted: G W OE --------- --- 5.14.0-162.6.1.el9_1.x86_64 #1 Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine\, BIOS 090008 02/27/2023 Workqueue: events pkey_change_handler [mlx5_ib] RIP: 0010:setup_qp+0x38/0x1f0 [mlx5_ib] Code: ee 41 54 45 31 e4 55 89 f5 53 48 89 fb 48 83 ec 20 8b 77 08 65 48 8b 04 25 28 00 00 00 48 89 44 24 18 48 8b 07 48 8d 4c 24 16 <4c> 8b 38 49 8b 87 80 0b 00 00 4c 89 ff 48 8b 80 08 05 00 00 8b 40 RSP: 0018:ffffbcc54068be20 EFLAGS: 00010282 RAX: 0000000000000000 RBX: ffff954054494128 RCX: ffffbcc54068be36 RDX: ffff954004934000 RSI: 0000000000000001 RDI: ffff954054494128 RBP: 0000000000000023 R08: ffff954001be2c20 R09: 0000000000000001 R10: ffff954001be2c20 R11: ffff9540260133c0 R12: 0000000000000000 R13: 0000000000000023 R14: 0000000000000000 R15: ffff9540ffcb0905 FS: 0000000000000000(0000) GS:ffff9540ffc80000(0000) knlGS:0000000000000000 CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000000000000000 CR3: 000000010625c001 CR4: 00000000003706e0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace: mlx5_ib_gsi_pkey_change+0x20/0x40 [mlx5_ib] process_one_work+0x1e8/0x3c0 worker_thread+0x50/0x3b0 ? rescuer_thread+0x380/0x380 kthread+0x149/0x170 ? set_kthread_struct+0x50/0x50 ret_from_fork+0x22/0x30 Modules linked in: rdma_ucm(OE) rdma_cm(OE) iw_cm(OE) ib_ipoib(OE) ib_cm(OE) ib_umad(OE) mlx5_ib(OE) mlx5_fwctl(OE) fwctl(OE) ib_uverbs(OE) mlx5_core(OE) mlxdevm(OE) ib_core(OE) mlx_compat(OE) psample mlxfw(OE) tls knem(OE) netconsole nfsv3 nfs_acl nfs lockd grace fscache netfs qrtr rfkill sunrpc intel_rapl_msr intel_rapl_common rapl hv_balloon hv_utils i2c_piix4 pcspkr joydev fuse ext4 mbcache jbd2 sr_mod sd_mod cdrom t10_pi sg ata_generic pci_hyperv pci_hyperv_intf hyperv_drm drm_shmem_helper drm_kms_helper hv_storvsc syscopyarea hv_netvsc sysfillrect sysimgblt hid_hyperv fb_sys_fops scsi_transport_fc hyperv_keyboard drm ata_piix crct10dif_pclmul crc32_pclmul crc32c_intel libata ghash_clmulni_intel hv_vmbus serio_raw [last unloaded: ib_core] CR2: 0000000000000000 ---[ end trace f6f8be4eae12f7bc ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43904,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null checks for 'stream' and 'plane' before dereferencing  This commit adds null checks for the 'stream' and 'plane' variables in the dcn30_apply_idle_power_optimizations function. These variables were previously assumed to be null at line 922\, but they were used later in the code without checking if they were null. This could potentially lead to a null pointer dereference\, which would cause a crash.  The null checks ensure that 'stream' and 'plane' are not null before they are used\, preventing potential crashes.  Fixes the below static smatch checker: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn30/dcn30_hwseq.c:938 dcn30_apply_idle_power_optimizations() error: we previously assumed 'stream' could be null (see line 922) drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn30/dcn30_hwseq.c:940 dcn30_apply_idle_power_optimizations() error: we previously assumed 'plane' could be null (see line 922)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22095,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: brcmstb: Fix error path after a call to regulator_bulk_get()  If the regulator_bulk_get() returns an error and no regulators are created\, we need to set their number to zero.  If we don't do this and the PCIe link up fails\, a call to the regulator_bulk_free() will result in a kernel panic.  While at it\, print the error value\, as we cannot return an error upwards as the kernel will WARN() on an error from add_bus().  [kwilczynski: commit log\, use comma in the message to match style with other similar messages]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42135,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  vhost_task: Handle SIGKILL by flushing work and exiting  Instead of lingering until the device is closed\, this has us handle SIGKILL by:  1. marking the worker as killed so we no longer try to use it with    new virtqueues and new flush operations. 2. setting the virtqueue to worker mapping so no new works are queued. 3. running all the exiting works.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22097,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/vkms: Fix use after free and double free on init error  If the driver initialization fails\, the vkms_exit() function might access an uninitialized or freed default_config pointer and it might double free it.  Fix both possible errors by initializing default_config only when the driver initialization succeeded.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53221,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix null-ptr-deref in f2fs_submit_page_bio()  There's issue as follows when concurrently installing the f2fs.ko module and mounting the f2fs file system: KASAN: null-ptr-deref in range [0x0000000000000020-0x0000000000000027] RIP: 0010:__bio_alloc+0x2fb/0x6c0 [f2fs] Call Trace:  <TASK>  f2fs_submit_page_bio+0x126/0x8b0 [f2fs]  __get_meta_page+0x1d4/0x920 [f2fs]  get_checkpoint_version.constprop.0+0x2b/0x3c0 [f2fs]  validate_checkpoint+0xac/0x290 [f2fs]  f2fs_get_valid_checkpoint+0x207/0x950 [f2fs]  f2fs_fill_super+0x1007/0x39b0 [f2fs]  mount_bdev+0x183/0x250  legacy_get_tree+0xf4/0x1e0  vfs_get_tree+0x88/0x340  do_new_mount+0x283/0x5e0  path_mount+0x2b2/0x15b0  __x64_sys_mount+0x1fe/0x270  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Above issue happens as the biset of the f2fs file system is not initialized before register ""f2fs_fs_type"". To address above issue just register ""f2fs_fs_type"" at the last in init_f2fs_fs(). Ensure that all f2fs file system resources are initialized.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43901,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix NULL pointer dereference for DTN log in DCN401  When users run the command:  cat /sys/kernel/debug/dri/0/amdgpu_dm_dtn_log  The following NULL pointer dereference happens:  [  +0.000003] BUG: kernel NULL pointer dereference\, address: NULL [  +0.000005] #PF: supervisor instruction fetch in kernel mode [  +0.000002] #PF: error_code(0x0010) - not-present page [  +0.000002] PGD 0 P4D 0 [  +0.000004] Oops: 0010 [#1] PREEMPT SMP NOPTI [  +0.000003] RIP: 0010:0x0 [  +0.000008] Code: Unable to access opcode bytes at 0xffffffffffffffd6. [...] [  +0.000002] PKRU: 55555554 [  +0.000002] Call Trace: [  +0.000002]  <TASK> [  +0.000003]  ? show_regs+0x65/0x70 [  +0.000006]  ? __die+0x24/0x70 [  +0.000004]  ? page_fault_oops+0x160/0x470 [  +0.000006]  ? do_user_addr_fault+0x2b5/0x690 [  +0.000003]  ? prb_read_valid+0x1c/0x30 [  +0.000005]  ? exc_page_fault+0x8c/0x1a0 [  +0.000005]  ? asm_exc_page_fault+0x27/0x30 [  +0.000012]  dcn10_log_color_state+0xf9/0x510 [amdgpu] [  +0.000306]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000003]  ? vsnprintf+0x2fb/0x600 [  +0.000009]  dcn10_log_hw_state+0xfd0/0xfe0 [amdgpu] [  +0.000218]  ? __mod_memcg_lruvec_state+0xe8/0x170 [  +0.000008]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000002]  ? debug_smp_processor_id+0x17/0x20 [  +0.000003]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000002]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000002]  ? set_ptes.isra.0+0x2b/0x90 [  +0.000004]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000002]  ? _raw_spin_unlock+0x19/0x40 [  +0.000004]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000002]  ? do_anonymous_page+0x337/0x700 [  +0.000004]  dtn_log_read+0x82/0x120 [amdgpu] [  +0.000207]  full_proxy_read+0x66/0x90 [  +0.000007]  vfs_read+0xb0/0x340 [  +0.000005]  ? __count_memcg_events+0x79/0xe0 [  +0.000002]  ? srso_alias_return_thunk+0x5/0xfbef5 [  +0.000003]  ? count_memcg_events.constprop.0+0x1e/0x40 [  +0.000003]  ? handle_mm_fault+0xb2/0x370 [  +0.000003]  ksys_read+0x6b/0xf0 [  +0.000004]  __x64_sys_read+0x19/0x20 [  +0.000003]  do_syscall_64+0x60/0x130 [  +0.000004]  entry_SYSCALL_64_after_hwframe+0x6e/0x76 [  +0.000003] RIP: 0033:0x7fdf32f147e2 [...]  This error happens when the color log tries to read the gamut remap information from DCN401 which is not initialized in the dcn401_dpp_funcs which leads to a null pointer dereference. This commit addresses this issue by adding a proper guard to access the gamut_remap callback in case the specific ASIC did not implement this function.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53220,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to account dirty data in __get_secs_required()  It will trigger system panic w/ testcase in [1]:  ------------[ cut here ]------------ kernel BUG at fs/f2fs/segment.c:2752! RIP: 0010:new_curseg+0xc81/0x2110 Call Trace:  f2fs_allocate_data_block+0x1c91/0x4540  do_write_page+0x163/0xdf0  f2fs_outplace_write_data+0x1aa/0x340  f2fs_do_write_data_page+0x797/0x2280  f2fs_write_single_data_page+0x16cd/0x2190  f2fs_write_cache_pages+0x994/0x1c80  f2fs_write_data_pages+0x9cc/0xea0  do_writepages+0x194/0x7a0  filemap_fdatawrite_wbc+0x12b/0x1a0  __filemap_fdatawrite_range+0xbb/0xf0  file_write_and_wait_range+0xa1/0x110  f2fs_do_sync_file+0x26f/0x1c50  f2fs_sync_file+0x12b/0x1d0  vfs_fsync_range+0xfa/0x230  do_fsync+0x3d/0x80  __x64_sys_fsync+0x37/0x50  x64_sys_call+0x1e88/0x20d0  do_syscall_64+0x4b/0x110  entry_SYSCALL_64_after_hwframe+0x76/0x7e  The root cause is if checkpoint_disabling and lfs_mode are both on\, it will trigger OPU for all overwritten data\, it may cost more free segment than expected\, so f2fs must account those data correctly to calculate cosumed free segments later\, and return ENOSPC earlier to avoid run out of free segment during block allocation.  [1] https://lore.kernel.org/fstests/20241015025106.3203676-1-chao@kernel.org/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53177,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: prevent use-after-free due to open_cached_dir error paths  If open_cached_dir() encounters an error parsing the lease from the server\, the error handling may race with receiving a lease break\, resulting in open_cached_dir() freeing the cfid while the queued work is pending.  Update open_cached_dir() to drop refs rather than directly freeing the cfid.  Have cached_dir_lease_break()\, cfids_laundromat_worker()\, and invalidate_all_cached_dirs() clear has_lease immediately while still holding cfids->cfid_list_lock\, and then use this to also simplify the reference counting in cfids_laundromat_worker() and invalidate_all_cached_dirs().  Fixes this KASAN splat (which manually injects an error and lease break in open_cached_dir()):  ================================================================== BUG: KASAN: slab-use-after-free in smb2_cached_lease_break+0x27/0xb0 Read of size 8 at addr ffff88811cc24c10 by task kworker/3:1/65  CPU: 3 UID: 0 PID: 65 Comm: kworker/3:1 Not tainted 6.12.0-rc6-g255cf264e6e5-dirty #87 Hardware name: VMware\, Inc. VMware Virtual Platform/440BX Desktop Reference Platform\, BIOS 6.00 11/12/2020 Workqueue: cifsiod smb2_cached_lease_break Call Trace:  <TASK>  dump_stack_lvl+0x77/0xb0  print_report+0xce/0x660  kasan_report+0xd3/0x110  smb2_cached_lease_break+0x27/0xb0  process_one_work+0x50a/0xc50  worker_thread+0x2ba/0x530  kthread+0x17c/0x1c0  ret_from_fork+0x34/0x60  ret_from_fork_asm+0x1a/0x30  </TASK>  Allocated by task 2464:  kasan_save_stack+0x33/0x60  kasan_save_track+0x14/0x30  __kasan_kmalloc+0xaa/0xb0  open_cached_dir+0xa7d/0x1fb0  smb2_query_path_info+0x43c/0x6e0  cifs_get_fattr+0x346/0xf10  cifs_get_inode_info+0x157/0x210  cifs_revalidate_dentry_attr+0x2d1/0x460  cifs_getattr+0x173/0x470  vfs_statx_path+0x10f/0x160  vfs_statx+0xe9/0x150  vfs_fstatat+0x5e/0xc0  __do_sys_newfstatat+0x91/0xf0  do_syscall_64+0x95/0x1a0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 2464:  kasan_save_stack+0x33/0x60  kasan_save_track+0x14/0x30  kasan_save_free_info+0x3b/0x60  __kasan_slab_free+0x51/0x70  kfree+0x174/0x520  open_cached_dir+0x97f/0x1fb0  smb2_query_path_info+0x43c/0x6e0  cifs_get_fattr+0x346/0xf10  cifs_get_inode_info+0x157/0x210  cifs_revalidate_dentry_attr+0x2d1/0x460  cifs_getattr+0x173/0x470  vfs_statx_path+0x10f/0x160  vfs_statx+0xe9/0x150  vfs_fstatat+0x5e/0xc0  __do_sys_newfstatat+0x91/0xf0  do_syscall_64+0x95/0x1a0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Last potentially related work creation:  kasan_save_stack+0x33/0x60  __kasan_record_aux_stack+0xad/0xc0  insert_work+0x32/0x100  __queue_work+0x5c9/0x870  queue_work_on+0x82/0x90  open_cached_dir+0x1369/0x1fb0  smb2_query_path_info+0x43c/0x6e0  cifs_get_fattr+0x346/0xf10  cifs_get_inode_info+0x157/0x210  cifs_revalidate_dentry_attr+0x2d1/0x460  cifs_getattr+0x173/0x470  vfs_statx_path+0x10f/0x160  vfs_statx+0xe9/0x150  vfs_fstatat+0x5e/0xc0  __do_sys_newfstatat+0x91/0xf0  do_syscall_64+0x95/0x1a0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  The buggy address belongs to the object at ffff88811cc24c00  which belongs to the cache kmalloc-1k of size 1024 The buggy address is located 16 bytes inside of  freed 1024-byte region [ffff88811cc24c00\, ffff88811cc25000)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26670,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  arm64: entry: fix ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD  Currently the ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD workaround isn't quite right\, as it is supposed to be applied after the last explicit memory access\, but is immediately followed by an LDR.  The ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD workaround is used to handle Cortex-A520 erratum 2966298 and Cortex-A510 erratum 3117295\, which are described in:  * https://developer.arm.com/documentation/SDEN2444153/0600/?lang=en * https://developer.arm.com/documentation/SDEN1873361/1600/?lang=en  In both cases the workaround is described as:  | If pagetable isolation is disabled\, the context switch logic in the | kernel can be updated to execute the following sequence on affected | cores before exiting to EL0\, and after all explicit memory accesses: | | 1. A non-shareable TLBI to any context and/or address\, including |    unused contexts or addresses\, such as a `TLBI VALE1 Xzr`. | | 2. A DSB NSH to guarantee completion of the TLBI.  The important part being that the TLBI+DSB must be placed ""after all explicit memory accesses"".  Unfortunately\, as-implemented\, the TLBI+DSB is immediately followed by an LDR\, as we have:  | alternative_if ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD | \ttlbi\tvale1\, xzr | \tdsb\tnsh | alternative_else_nop_endif | alternative_if_not ARM64_UNMAP_KERNEL_AT_EL0 | \tldr\tlr\, [sp\, #S_LR] | \tadd\tsp\, sp\, #PT_REGS_SIZE\t\t// restore sp | \teret | alternative_else_nop_endif | | [ ... KPTI exception return path ... ]  This patch fixes this by reworking the logic to place the TLBI+DSB immediately before the ERET\, after all explicit memory accesses.  The ERET is currently in a separate alternative block\, and alternatives cannot be nested. To account for this\, the alternative block for ARM64_UNMAP_KERNEL_AT_EL0 is replaced with a single alternative branch to skip the KPTI logic\, with the new shape of the logic being:  | alternative_insn ""b .L_skip_tramp_exit_\\@""\, nop\, ARM64_UNMAP_KERNEL_AT_EL0 | \t[ ... KPTI exception return path ... ] | .L_skip_tramp_exit_\\@: | | \tldr\tlr\, [sp\, #S_LR] | \tadd\tsp\, sp\, #PT_REGS_SIZE\t\t// restore sp | | alternative_if ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD | \ttlbi\tvale1\, xzr | \tdsb\tnsh | alternative_else_nop_endif | \teret  The new structure means that the workaround is only applied when KPTI is not in use; this is fine as noted in the documented implications of the erratum:  | Pagetable isolation between EL0 and higher level ELs prevents the | issue from occurring.  ... and as per the workaround description quoted above\, the workaround is only necessary ""If pagetable isolation is disabled"".",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53176,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: During unmount\, ensure all cached dir instances drop their dentry  The unmount process (cifs_kill_sb() calling close_all_cached_dirs()) can race with various cached directory operations\, which ultimately results in dentries not being dropped and these kernel BUGs:  BUG: Dentry ffff88814f37e358{i=1000000000080\,n=/}  still in use (2) [unmount of cifs cifs] VFS: Busy inodes after unmount of cifs (cifs) ------------[ cut here ]------------ kernel BUG at fs/super.c:661!  This happens when a cfid is in the process of being cleaned up when\, and has been removed from the cfids->entries list\, including:  - Receiving a lease break from the server - Server reconnection triggers invalidate_all_cached_dirs()\, which   removes all the cfids from the list - The laundromat thread decides to expire an old cfid.  To solve these problems\, dropping the dentry is done in queued work done in a newly-added cfid_put_wq workqueue\, and close_all_cached_dirs() flushes that workqueue after it drops all the dentries of which it's aware. This is a global workqueue (rather than scoped to a mount)\, but the queued work is minimal.  The final cleanup work for cleaning up a cfid is performed via work queued in the serverclose_wq workqueue; this is done separate from dropping the dentries so that close_all_cached_dirs() doesn't block on any server operations.  Both of these queued works expect to invoked with a cfid reference and a tcon reference to avoid those objects from being freed while the work is ongoing.  While we're here\, add proper locking to close_all_cached_dirs()\, and locking around the freeing of cfid->dentry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-1972,binutils,LOW,2.40-2,N/A,"A potential heap based buffer overflow was found in _bfd_elf_slurp_version_tables() in bfd/elf.c. This may lead to loss of availability.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53175,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipc: fix memleak if msg_init_ns failed in create_ipc_ns  Percpu memory allocation may failed during create_ipc_ns however this fail is not handled properly since ipc sysctls and mq sysctls is not released properly. Fix this by release these two resource when failure.  Here is the kmemleak stack when percpu failed:  unreferenced object 0xffff88819de2a600 (size 512):   comm ""shmem_2nstest""\, pid 120711\, jiffies 4300542254   hex dump (first 32 bytes):     60 aa 9d 84 ff ff ff ff fc 18 48 b2 84 88 ff ff  `.........H.....     04 00 00 00 a4 01 00 00 20 e4 56 81 ff ff ff ff  ........ .V.....   backtrace (crc be7cba35):     [<ffffffff81b43f83>] __kmalloc_node_track_caller_noprof+0x333/0x420     [<ffffffff81a52e56>] kmemdup_noprof+0x26/0x50     [<ffffffff821b2f37>] setup_mq_sysctls+0x57/0x1d0     [<ffffffff821b29cc>] copy_ipcs+0x29c/0x3b0     [<ffffffff815d6a10>] create_new_namespaces+0x1d0/0x920     [<ffffffff815d7449>] copy_namespaces+0x2e9/0x3e0     [<ffffffff815458f3>] copy_process+0x29f3/0x7ff0     [<ffffffff8154b080>] kernel_clone+0xc0/0x650     [<ffffffff8154b6b1>] __do_sys_clone+0xa1/0xe0     [<ffffffff843df8ff>] do_syscall_64+0xbf/0x1c0     [<ffffffff846000b0>] entry_SYSCALL_64_after_hwframe+0x4b/0x53",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26672,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Fix variable 'mca_funcs' dereferenced before NULL check in 'amdgpu_mca_smu_get_mca_entry()'  Fixes the below:  drivers/gpu/drm/amd/amdgpu/amdgpu_mca.c:377 amdgpu_mca_smu_get_mca_entry() warn: variable dereferenced before check 'mca_funcs' (see line 368)  357 int amdgpu_mca_smu_get_mca_entry(struct amdgpu_device *adev\, \t\t\t\t     enum amdgpu_mca_error_type type\, 358                                  int idx\, struct mca_bank_entry *entry) 359 { 360         const struct amdgpu_mca_smu_funcs *mca_funcs = \t\t\t\t\t\tadev->mca.mca_funcs; 361         int count; 362 363         switch (type) { 364         case AMDGPU_MCA_ERROR_TYPE_UE: 365                 count = mca_funcs->max_ue_count;  mca_funcs is dereferenced here.  366                 break; 367         case AMDGPU_MCA_ERROR_TYPE_CE: 368                 count = mca_funcs->max_ce_count;  mca_funcs is dereferenced here.  369                 break; 370         default: 371                 return -EINVAL; 372         } 373 374         if (idx >= count) 375                 return -EINVAL; 376 377         if (mca_funcs && mca_funcs->mca_get_mca_entry) \t        ^^^^^^^^^  Checked too late!",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53174,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  SUNRPC: make sure cache entry active before cache_show  The function `c_show` was called with protection from RCU. This only ensures that `cp` will not be freed. Therefore\, the reference count for `cp` can drop to zero\, which will trigger a refcount use-after-free warning when `cache_get` is called. To resolve this issue\, use `cache_get_rcu` to ensure that `cp` remains active.  ------------[ cut here ]------------ refcount_t: addition on 0; use-after-free. WARNING: CPU: 7 PID: 822 at lib/refcount.c:25 refcount_warn_saturate+0xb1/0x120 CPU: 7 UID: 0 PID: 822 Comm: cat Not tainted 6.12.0-rc3+ #1 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.1-2.fc37 04/01/2014 RIP: 0010:refcount_warn_saturate+0xb1/0x120  Call Trace:  <TASK>  c_show+0x2fc/0x380 [sunrpc]  seq_read_iter+0x589/0x770  seq_read+0x1e5/0x270  proc_reg_read+0xe1/0x140  vfs_read+0x125/0x530  ksys_read+0xc1/0x160  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53173,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFSv4.0: Fix a use-after-free problem in the asynchronous open()  Yang Erkun reports that when two threads are opening files at the same time\, and are forced to abort before a reply is seen\, then the call to nfs_release_seqid() in nfs4_opendata_free() can result in a use-after-free of the pointer to the defunct rpc task of the other thread. The fix is to ensure that if the RPC call is aborted before the call to nfs_wait_on_sequence() is complete\, then we must call nfs_release_seqid() in nfs4_open_release() before the rpc_task is freed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35887,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ax25: fix use-after-free bugs caused by ax25_ds_del_timer  When the ax25 device is detaching\, the ax25_dev_device_down() calls ax25_ds_del_timer() to cleanup the slave_timer. When the timer handler is running\, the ax25_ds_del_timer() that calls del_timer() in it will return directly. As a result\, the use-after-free bugs could happen\, one of the scenarios is shown below:        (Thread 1)          |      (Thread 2)                           | ax25_ds_timeout() ax25_dev_device_down()    |   ax25_ds_del_timer()     |     del_timer()           |   ax25_dev_put() //FREE   |                           |  ax25_dev-> //USE  In order to mitigate bugs\, when the device is detaching\, use timer_shutdown_sync() to stop the timer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-55916,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Drivers: hv: util: Avoid accessing a ringbuffer not initialized yet  If the KVP (or VSS) daemon starts before the VMBus channel's ringbuffer is fully initialized\, we can hit the panic below:  hv_utils: Registering HyperV Utility Driver hv_vmbus: registering driver hv_utils ... BUG: kernel NULL pointer dereference\, address: 0000000000000000 CPU: 44 UID: 0 PID: 2552 Comm: hv_kvp_daemon Tainted: G E 6.11.0-rc3+ #1 RIP: 0010:hv_pkt_iter_first+0x12/0xd0 Call Trace: ...  vmbus_recvpacket  hv_kvp_onchannelcallback  vmbus_on_event  tasklet_action_common  tasklet_action  handle_softirqs  irq_exit_rcu  sysvec_hyperv_stimer0  </IRQ>  <TASK>  asm_sysvec_hyperv_stimer0 ...  kvp_register_done  hvt_op_read  vfs_read  ksys_read  __x64_sys_read  This can happen because the KVP/VSS channel callback can be invoked even before the channel is fully opened: 1) as soon as hv_kvp_init() -> hvutil_transport_init() creates /dev/vmbus/hv_kvp\, the kvp daemon can open the device file immediately and register itself to the driver by writing a message KVP_OP_REGISTER1 to the file (which is handled by kvp_on_msg() ->kvp_handle_handshake()) and reading the file for the driver's response\, which is handled by hvt_op_read()\, which calls hvt->on_read()\, i.e. kvp_register_done().  2) the problem with kvp_register_done() is that it can cause the channel callback to be called even before the channel is fully opened\, and when the channel callback is starting to run\, util_probe()-> vmbus_open() may have not initialized the ringbuffer yet\, so the callback can hit the panic of NULL pointer dereference.  To reproduce the panic consistently\, we can add a ""ssleep(10)"" for KVP in __vmbus_open()\, just before the first hv_ringbuffer_init()\, and then we unload and reload the driver hv_utils\, and run the daemon manually within the 10 seconds.  Fix the panic by reordering the steps in util_probe() so the char dev entry used by the KVP or VSS daemon is not created until after vmbus_open() has completed. This reordering prevents the race condition from happening.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53172,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ubi: fastmap: Fix duplicate slab cache names while attaching  Since commit 4c39529663b9 (""slab: Warn on duplicate cache names when DEBUG_VM=y"")\, the duplicate slab cache names can be detected and a kernel WARNING is thrown out. In UBI fast attaching process\, alloc_ai() could be invoked twice with the same slab cache name 'ubi_aeb_slab_cache'\, which will trigger following warning messages:  kmem_cache of name 'ubi_aeb_slab_cache' already exists  WARNING: CPU: 0 PID: 7519 at mm/slab_common.c:107           __kmem_cache_create_args+0x100/0x5f0  Modules linked in: ubi(+) nandsim [last unloaded: nandsim]  CPU: 0 UID: 0 PID: 7519 Comm: modprobe Tainted: G 6.12.0-rc2  RIP: 0010:__kmem_cache_create_args+0x100/0x5f0  Call Trace:    __kmem_cache_create_args+0x100/0x5f0    alloc_ai+0x295/0x3f0 [ubi]    ubi_attach+0x3c3/0xcc0 [ubi]    ubi_attach_mtd_dev+0x17cf/0x3fa0 [ubi]    ubi_init+0x3fb/0x800 [ubi]    do_init_module+0x265/0x7d0    __x64_sys_finit_module+0x7a/0xc0  The problem could be easily reproduced by loading UBI device by fastmap with CONFIG_DEBUG_VM=y. Fix it by using different slab names for alloc_ai() callers.",|tykio/ner-redact||tykio/smart-ner-redact|
TEMP-0290435-0B57B5,tar,LOW,1.34+dfsg-1.2+deb12u1,N/A,"No description",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53171,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ubifs: authentication: Fix use-after-free in ubifs_tnc_end_commit  After an insertion in TNC\, the tree might split and cause a node to change its `znode->parent`. A further deletion of other nodes in the tree (which also could free the nodes)\, the aforementioned node's `znode->cparent` could still point to a freed node. This `znode->cparent` may not be updated when getting nodes to commit in `ubifs_tnc_start_commit()`. This could then trigger a use-after-free when accessing the `znode->cparent` in `write_index()` in `ubifs_tnc_end_commit()`.  This can be triggered by running    rm -f /etc/test-file.bin   dd if=/dev/urandom of=/etc/test-file.bin bs=1M count=60 conv=fsync  in a loop\, and with `CONFIG_UBIFS_FS_AUTHENTICATION`. KASAN then reports:    BUG: KASAN: use-after-free in ubifs_tnc_end_commit+0xa5c/0x1950   Write of size 32 at addr ffffff800a3af86c by task ubifs_bgt0_20/153    Call trace:    dump_backtrace+0x0/0x340    show_stack+0x18/0x24    dump_stack_lvl+0x9c/0xbc    print_address_description.constprop.0+0x74/0x2b0    kasan_report+0x1d8/0x1f0    kasan_check_range+0xf8/0x1a0    memcpy+0x84/0xf4    ubifs_tnc_end_commit+0xa5c/0x1950    do_commit+0x4e0/0x1340    ubifs_bg_thread+0x234/0x2e0    kthread+0x36c/0x410    ret_from_fork+0x10/0x20    Allocated by task 401:    kasan_save_stack+0x38/0x70    __kasan_kmalloc+0x8c/0xd0    __kmalloc+0x34c/0x5bc    tnc_insert+0x140/0x16a4    ubifs_tnc_add+0x370/0x52c    ubifs_jnl_write_data+0x5d8/0x870    do_writepage+0x36c/0x510    ubifs_writepage+0x190/0x4dc    __writepage+0x58/0x154    write_cache_pages+0x394/0x830    do_writepages+0x1f0/0x5b0    filemap_fdatawrite_wbc+0x170/0x25c    file_write_and_wait_range+0x140/0x190    ubifs_fsync+0xe8/0x290    vfs_fsync_range+0xc0/0x1e4    do_fsync+0x40/0x90    __arm64_sys_fsync+0x34/0x50    invoke_syscall.constprop.0+0xa8/0x260    do_el0_svc+0xc8/0x1f0    el0_svc+0x34/0x70    el0t_64_sync_handler+0x108/0x114    el0t_64_sync+0x1a4/0x1a8    Freed by task 403:    kasan_save_stack+0x38/0x70    kasan_set_track+0x28/0x40    kasan_set_free_info+0x28/0x4c    __kasan_slab_free+0xd4/0x13c    kfree+0xc4/0x3a0    tnc_delete+0x3f4/0xe40    ubifs_tnc_remove_range+0x368/0x73c    ubifs_tnc_remove_ino+0x29c/0x2e0    ubifs_jnl_delete_inode+0x150/0x260    ubifs_evict_inode+0x1d4/0x2e4    evict+0x1c8/0x450    iput+0x2a0/0x3c4    do_unlinkat+0x2cc/0x490    __arm64_sys_unlinkat+0x90/0x100    invoke_syscall.constprop.0+0xa8/0x260    do_el0_svc+0xc8/0x1f0    el0_svc+0x34/0x70    el0t_64_sync_handler+0x108/0x114    el0t_64_sync+0x1a4/0x1a8  The offending `memcpy()` in `ubifs_copy_hash()` has a use-after-free when a node becomes root in TNC but still has a `cparent` to an already freed node. More specifically\, consider the following TNC:           zroot          /         /       zp1       /      /     zn  Inserting a new node `zn_new` with a key smaller then `zn` will trigger a split in `tnc_insert()` if `zp1` is full:           zroot          /   \\         /     \\       zp1     zp2       /         \\      /           \\   zn_new          zn  `zn->parent` has now been moved to `zp2`\, *but* `zn->cparent` still points to `zp1`.  Now\, consider a removal of all the nodes _except_ `zn`. Just when `tnc_delete()` is about to delete `zroot` and `zp2`:           zroot              \\               \\               zp2                 \\                  \\                  zn  `zroot` and `zp2` get freed and the tree collapses:             zn  `zn` now becomes the new `zroot`.  `get_znodes_to_commit()` will now only find `zn`\, the new `zroot`\, and `write_index()` will check its `znode->cparent` that wrongly points to the already freed `zp1`. `ubifs_copy_hash()` thus gets wrongly called with `znode->cparent->zbranch[znode->iip].hash` that triggers the use-after-free!  Fix this by explicitly setting `znode->cparent` to `NULL` in `get_znodes_to_commit()` for the root node. The search for the dirty nodes ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26677,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rxrpc: Fix delayed ACKs to not set the reference serial number  Fix the construction of delayed ACKs to not set the reference serial number as they can't be used as an RTT reference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53170,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  block: fix uaf for flush rq while iterating tags  blk_mq_clear_flush_rq_mapping() is not called during scsi probe\, by checking blk_queue_init_done(). However\, QUEUE_FLAG_INIT_DONE is cleared in del_gendisk by commit aec89dc5d421 (""block: keep q_usage_counter in atomic mode after del_gendisk"")\, hence for disk like scsi\, following blk_mq_destroy_queue() will not clear flush rq from tags->rqs[] as well\, cause following uaf that is found by our syzkaller for v6.6:  ================================================================== BUG: KASAN: slab-use-after-free in blk_mq_find_and_get_req+0x16e/0x1a0 block/blk-mq-tag.c:261 Read of size 4 at addr ffff88811c969c20 by task kworker/1:2H/224909  CPU: 1 PID: 224909 Comm: kworker/1:2H Not tainted 6.6.0-ga836a5060850 #32 Workqueue: kblockd blk_mq_timeout_work Call Trace:  __dump_stack lib/dump_stack.c:88 [inline] dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106 print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364 print_report+0x3e/0x70 mm/kasan/report.c:475 kasan_report+0xb8/0xf0 mm/kasan/report.c:588 blk_mq_find_and_get_req+0x16e/0x1a0 block/blk-mq-tag.c:261 bt_iter block/blk-mq-tag.c:288 [inline] __sbitmap_for_each_set include/linux/sbitmap.h:295 [inline] sbitmap_for_each_set include/linux/sbitmap.h:316 [inline] bt_for_each+0x455/0x790 block/blk-mq-tag.c:325 blk_mq_queue_tag_busy_iter+0x320/0x740 block/blk-mq-tag.c:534 blk_mq_timeout_work+0x1a3/0x7b0 block/blk-mq.c:1673 process_one_work+0x7c4/0x1450 kernel/workqueue.c:2631 process_scheduled_works kernel/workqueue.c:2704 [inline] worker_thread+0x804/0xe40 kernel/workqueue.c:2785 kthread+0x346/0x450 kernel/kthread.c:388 ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147 ret_from_fork_asm+0x1b/0x30 arch/x86/entry/entry_64.S:293  Allocated by task 942: kasan_save_stack+0x22/0x50 mm/kasan/common.c:45 kasan_set_track+0x25/0x30 mm/kasan/common.c:52 ____kasan_kmalloc mm/kasan/common.c:374 [inline] __kasan_kmalloc mm/kasan/common.c:383 [inline] __kasan_kmalloc+0xaa/0xb0 mm/kasan/common.c:380 kasan_kmalloc include/linux/kasan.h:198 [inline] __do_kmalloc_node mm/slab_common.c:1007 [inline] __kmalloc_node+0x69/0x170 mm/slab_common.c:1014 kmalloc_node include/linux/slab.h:620 [inline] kzalloc_node include/linux/slab.h:732 [inline] blk_alloc_flush_queue+0x144/0x2f0 block/blk-flush.c:499 blk_mq_alloc_hctx+0x601/0x940 block/blk-mq.c:3788 blk_mq_alloc_and_init_hctx+0x27f/0x330 block/blk-mq.c:4261 blk_mq_realloc_hw_ctxs+0x488/0x5e0 block/blk-mq.c:4294 blk_mq_init_allocated_queue+0x188/0x860 block/blk-mq.c:4350 blk_mq_init_queue_data block/blk-mq.c:4166 [inline] blk_mq_init_queue+0x8d/0x100 block/blk-mq.c:4176 scsi_alloc_sdev+0x843/0xd50 drivers/scsi/scsi_scan.c:335 scsi_probe_and_add_lun+0x77c/0xde0 drivers/scsi/scsi_scan.c:1189 __scsi_scan_target+0x1fc/0x5a0 drivers/scsi/scsi_scan.c:1727 scsi_scan_channel drivers/scsi/scsi_scan.c:1815 [inline] scsi_scan_channel+0x14b/0x1e0 drivers/scsi/scsi_scan.c:1791 scsi_scan_host_selected+0x2fe/0x400 drivers/scsi/scsi_scan.c:1844 scsi_scan+0x3a0/0x3f0 drivers/scsi/scsi_sysfs.c:151 store_scan+0x2a/0x60 drivers/scsi/scsi_sysfs.c:191 dev_attr_store+0x5c/0x90 drivers/base/core.c:2388 sysfs_kf_write+0x11c/0x170 fs/sysfs/file.c:136 kernfs_fop_write_iter+0x3fc/0x610 fs/kernfs/file.c:338 call_write_iter include/linux/fs.h:2083 [inline] new_sync_write+0x1b4/0x2d0 fs/read_write.c:493 vfs_write+0x76c/0xb00 fs/read_write.c:586 ksys_write+0x127/0x250 fs/read_write.c:639 do_syscall_x64 arch/x86/entry/common.c:51 [inline] do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81 entry_SYSCALL_64_after_hwframe+0x78/0xe2  Freed by task 244687: kasan_save_stack+0x22/0x50 mm/kasan/common.c:45 kasan_set_track+0x25/0x30 mm/kasan/common.c:52 kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522 ____kasan_slab_free mm/kasan/common.c:236 [inline] __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244 kasan_slab_free include/linux/kasan.h:164 [in ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38630,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  watchdog: cpu5wdt.c: Fix use-after-free bug caused by cpu5wdt_trigger  When the cpu5wdt module is removing\, the origin code uses del_timer() to de-activate the timer. If the timer handler is running\, del_timer() could not stop it and will return directly. If the port region is released by release_region() and then the timer handler cpu5wdt_trigger() calls outb() to write into the region that is released\, the use-after-free bug will happen.  Change del_timer() to timer_shutdown_sync() in order that the timer handler could be finished before the port region is released.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-11725,linux-libc-dev,LOW,6.1.115-1,N/A,"snd_ctl_elem_add in sound/core/control.c in the Linux kernel through 5.6.3 has a count=info->owner line\, which later affects a private_size*count multiplication for unspecified ""interesting side effects."" NOTE: kernel engineers dispute this finding\, because it could be relevant only if new callers were added that were unfamiliar with the misuse of the info->owner field to represent data unrelated to the ""owner"" concept. The existing callers\, SNDRV_CTL_IOCTL_ELEM_ADD and SNDRV_CTL_IOCTL_ELEM_REPLACE\, have been designed to misuse the info->owner field in a safe way",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47736,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  erofs: handle overlapped pclusters out of crafted images properly  syzbot reported a task hang issue due to a deadlock case where it is waiting for the folio lock of a cached folio that will be used for cache I/Os.  After looking into the crafted fuzzed image\, I found it's formed with several overlapped big pclusters as below:   Ext:   logical offset   |  length :     physical offset    |  length    0:        0..   16384 |   16384 :     151552..    167936 |   16384    1:    16384..   32768 |   16384 :     155648..    172032 |   16384    2:    32768..   49152 |   16384 :  537223168.. 537239552 |   16384 ...  Here\, extent 0/1 are physically overlapped although it's entirely _impossible_ for normal filesystem images generated by mkfs.  First\, managed folios containing compressed data will be marked as up-to-date and then unlocked immediately (unlike in-place folios) when compressed I/Os are complete.  If physical blocks are not submitted in the incremental order\, there should be separate BIOs to avoid dependency issues.  However\, the current code mis-arranges z_erofs_fill_bio_vec() and BIO submission which causes unexpected BIO waits.  Second\, managed folios will be connected to their own pclusters for efficient inter-queries.  However\, this is somewhat hard to implement easily if overlapped big pclusters exist.  Again\, these only appear in fuzzed images so let's simply fall back to temporary short-lived pages for correctness.  Additionally\, it justifies that referenced managed folios cannot be truncated for now and reverts part of commit 2080ca1ed3e4 (""erofs: tidy up `struct z_erofs_bvec`"") for simplicity although it shouldn't be any difference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26595,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mlxsw: spectrum_acl_tcam: Fix NULL pointer dereference in error path  When calling mlxsw_sp_acl_tcam_region_destroy() from an error path after failing to attach the region to an ACL group\, we hit a NULL pointer dereference upon 'region->group->tcam' [1].  Fix by retrieving the 'tcam' pointer using mlxsw_sp_acl_to_tcam().  [1] BUG: kernel NULL pointer dereference\, address: 0000000000000000 [...] RIP: 0010:mlxsw_sp_acl_tcam_region_destroy+0xa0/0xd0 [...] Call Trace:  mlxsw_sp_acl_tcam_vchunk_get+0x88b/0xa20  mlxsw_sp_acl_tcam_ventry_add+0x25/0xe0  mlxsw_sp_acl_rule_add+0x47/0x240  mlxsw_sp_flower_replace+0x1a9/0x1d0  tc_setup_cb_add+0xdc/0x1c0  fl_hw_replace_filter+0x146/0x1f0  fl_change+0xc17/0x1360  tc_new_tfilter+0x472/0xb90  rtnetlink_rcv_msg+0x313/0x3b0  netlink_rcv_skb+0x58/0x100  netlink_unicast+0x244/0x390  netlink_sendmsg+0x1e4/0x440  ____sys_sendmsg+0x164/0x260  ___sys_sendmsg+0x9a/0xe0  __sys_sendmsg+0x7a/0xc0  do_syscall_64+0x40/0xe0  entry_SYSCALL_64_after_hwframe+0x63/0x6b",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53179,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix use-after-free of signing key  Customers have reported use-after-free in @ses->auth_key.response with SMB2.1 + sign mounts which occurs due to following race:  task A                         task B cifs_mount()  dfs_mount_share()   get_session()    cifs_mount_get_session()    cifs_send_recv()     cifs_get_smb_ses()          compound_send_recv()      cifs_setup_session()        smb2_setup_request()       kfree_sensitive()           smb2_calc_signature()                                    crypto_shash_setkey() *UAF*  Fix this by ensuring that we have a valid @ses->auth_key.response by checking whether @ses->ses_status is SES_GOOD or SES_EXITING with @ses->ses_lock held.  After commit 24a9799aa8ef (""smb: client: fix UAF in smb2_reconnect_server()"")\, we made sure to call ->logoff() only when @ses was known to be good (e.g. valid ->auth_key.response)\, so it's safe to access signing key when @ses->ses_status == SES_EXITING.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53178,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: Don't leak cfid when reconnect races with open_cached_dir  open_cached_dir() may either race with the tcon reconnection even before compound_send_recv() or directly trigger a reconnection via SMB2_open_init() or SMB_query_info_init().  The reconnection process invokes invalidate_all_cached_dirs() via cifs_mark_open_files_invalid()\, which removes all cfids from the cfids->entries list but doesn't drop a ref if has_lease isn't true. This results in the currently-being-constructed cfid not being on the list\, but still having a refcount of 2. It leaks if returned from open_cached_dir().  Fix this by setting cfid->has_lease when the ref is actually taken; the cfid will not be used by other threads until it has a valid time.  Addresses these kmemleaks:  unreferenced object 0xffff8881090c4000 (size 1024):   comm ""bash""\, pid 1860\, jiffies 4295126592   hex dump (first 32 bytes):     00 01 00 00 00 00 ad de 22 01 00 00 00 00 ad de  ........"".......     00 ca 45 22 81 88 ff ff f8 dc 4f 04 81 88 ff ff  ..E""......O.....   backtrace (crc 6f58c20f):     [<ffffffff8b895a1e>] __kmalloc_cache_noprof+0x2be/0x350     [<ffffffff8bda06e3>] open_cached_dir+0x993/0x1fb0     [<ffffffff8bdaa750>] cifs_readdir+0x15a0/0x1d50     [<ffffffff8b9a853f>] iterate_dir+0x28f/0x4b0     [<ffffffff8b9a9aed>] __x64_sys_getdents64+0xfd/0x200     [<ffffffff8cf6da05>] do_syscall_64+0x95/0x1a0     [<ffffffff8d00012f>] entry_SYSCALL_64_after_hwframe+0x76/0x7e unreferenced object 0xffff8881044fdcf8 (size 8):   comm ""bash""\, pid 1860\, jiffies 4295126592   hex dump (first 8 bytes):     00 cc cc cc cc cc cc cc                          ........   backtrace (crc 10c106a9):     [<ffffffff8b89a3d3>] __kmalloc_node_track_caller_noprof+0x363/0x480     [<ffffffff8b7d7256>] kstrdup+0x36/0x60     [<ffffffff8bda0700>] open_cached_dir+0x9b0/0x1fb0     [<ffffffff8bdaa750>] cifs_readdir+0x15a0/0x1d50     [<ffffffff8b9a853f>] iterate_dir+0x28f/0x4b0     [<ffffffff8b9a9aed>] __x64_sys_getdents64+0xfd/0x200     [<ffffffff8cf6da05>] do_syscall_64+0x95/0x1a0     [<ffffffff8d00012f>] entry_SYSCALL_64_after_hwframe+0x76/0x7e  And addresses these BUG splats when unmounting the SMB filesystem:  BUG: Dentry ffff888140590ba0{i=1000000000080\,n=/}  still in use (2) [unmount of cifs cifs] WARNING: CPU: 3 PID: 3433 at fs/dcache.c:1536 umount_check+0xd0/0x100 Modules linked in: CPU: 3 UID: 0 PID: 3433 Comm: bash Not tainted 6.12.0-rc4-g850925a8133c-dirty #49 Hardware name: VMware\, Inc. VMware Virtual Platform/440BX Desktop Reference Platform\, BIOS 6.00 11/12/2020 RIP: 0010:umount_check+0xd0/0x100 Code: 8d 7c 24 40 e8 31 5a f4 ff 49 8b 54 24 40 41 56 49 89 e9 45 89 e8 48 89 d9 41 57 48 89 de 48 c7 c7 80 e7 db ac e8 f0 72 9a ff <0f> 0b 58 31 c0 5a 5b 5d 41 5c 41 5d 41 5e 41 5f e9 2b e5 5d 01 41 RSP: 0018:ffff88811cc27978 EFLAGS: 00010286 RAX: 0000000000000000 RBX: ffff888140590ba0 RCX: ffffffffaaf20bae RDX: dffffc0000000000 RSI: 0000000000000008 RDI: ffff8881f6fb6f40 RBP: ffff8881462ec000 R08: 0000000000000001 R09: ffffed1023984ee3 R10: ffff88811cc2771f R11: 00000000016cfcc0 R12: ffff888134383e08 R13: 0000000000000002 R14: ffff8881462ec668 R15: ffffffffaceab4c0 FS:  00007f23bfa98740(0000) GS:ffff8881f6f80000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000556de4a6f808 CR3: 0000000123c80000 CR4: 0000000000350ef0 Call Trace:  <TASK>  d_walk+0x6a/0x530  shrink_dcache_for_umount+0x6a/0x200  generic_shutdown_super+0x52/0x2a0  kill_anon_super+0x22/0x40  cifs_kill_sb+0x159/0x1e0  deactivate_locked_super+0x66/0xe0  cleanup_mnt+0x140/0x210  task_work_run+0xfb/0x170  syscall_exit_to_user_mode+0x29f/0x2b0  do_syscall_64+0xa1/0x1a0  entry_SYSCALL_64_after_hwframe+0x76/0x7e RIP: 0033:0x7f23bfb93ae7 Code: ff ff ff ff c3 66 0f 1f 44 00 00 48 8b 0d 11 93 0d 00 f7 d8 64 89 01 b8 ff ff ff ff eb bf 0f 1f 44 00 00 b8 50 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d e9 92 0d 00 f7 d8 64 89  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26596,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: dsa: fix netdev_priv() dereference before check on non-DSA netdevice events  After the blamed commit\, we started doing this dereference for every NETDEV_CHANGEUPPER and NETDEV_PRECHANGEUPPER event in the system.  static inline struct dsa_port *dsa_user_to_port(const struct net_device *dev) { \tstruct dsa_user_priv *p = netdev_priv(dev);  \treturn p->dp; }  Which is obviously bogus\, because not all net_devices have a netdev_priv() of type struct dsa_user_priv. But struct dsa_user_priv is fairly small\, and p->dp means dereferencing 8 bytes starting with offset 16. Most drivers allocate that much private memory anyway\, making our access not fault\, and we discard the bogus data quickly afterwards\, so this wasn't caught.  But the dummy interface is somewhat special in that it calls alloc_netdev() with a priv size of 0. So every netdev_priv() dereference is invalid\, and we get this when we emit a NETDEV_PRECHANGEUPPER event with a VLAN as its new upper:  $ ip link add dummy1 type dummy $ ip link add link dummy1 name dummy1.100 type vlan id 100 [   43.309174] ================================================================== [   43.316456] BUG: KASAN: slab-out-of-bounds in dsa_user_prechangeupper+0x30/0xe8 [   43.323835] Read of size 8 at addr ffff3f86481d2990 by task ip/374 [   43.330058] [   43.342436] Call trace: [   43.366542]  dsa_user_prechangeupper+0x30/0xe8 [   43.371024]  dsa_user_netdevice_event+0xb38/0xee8 [   43.375768]  notifier_call_chain+0xa4/0x210 [   43.379985]  raw_notifier_call_chain+0x24/0x38 [   43.384464]  __netdev_upper_dev_link+0x3ec/0x5d8 [   43.389120]  netdev_upper_dev_link+0x70/0xa8 [   43.393424]  register_vlan_dev+0x1bc/0x310 [   43.397554]  vlan_newlink+0x210/0x248 [   43.401247]  rtnl_newlink+0x9fc/0xe30 [   43.404942]  rtnetlink_rcv_msg+0x378/0x580  Avoid the kernel oops by dereferencing after the type check\, as customary.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-45853,zlib1g,CRITICAL,1:1.2.13.dfsg-1,N/A,"MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename\, comment\, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version\, and exposes the applicable MiniZip code through its compress API.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-19070,linux-libc-dev,LOW,6.1.115-1,N/A,"A memory leak in the spi_gpio_probe() function in drivers/spi/spi-gpio.c in the Linux kernel through 5.3.11 allows attackers to cause a denial of service (memory consumption) by triggering devm_add_action_or_reset() failures\, aka CID-d3b0ffa1d75d. NOTE: third parties dispute the relevance of this because the system must have already been out of memory before the probe began",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22028,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  media: vimc: skip .s_stream() for stopped entities  Syzbot reported [1] a warning prompted by a check in call_s_stream() that checks whether .s_stream() operation is warranted for unstarted or stopped subdevs.  Add a simple fix in vimc_streamer_pipeline_terminate() ensuring that entities skip a call to .s_stream() unless they have been previously properly started.  [1] Syzbot report: ------------[ cut here ]------------ WARNING: CPU: 0 PID: 5933 at drivers/media/v4l2-core/v4l2-subdev.c:460 call_s_stream+0x2df/0x350 drivers/media/v4l2-core/v4l2-subdev.c:460 Modules linked in: CPU: 0 UID: 0 PID: 5933 Comm: syz-executor330 Not tainted 6.13.0-rc2-syzkaller-00362-g2d8308bf5b67 #0 ... Call Trace:  <TASK>  vimc_streamer_pipeline_terminate+0x218/0x320 drivers/media/test-drivers/vimc/vimc-streamer.c:62  vimc_streamer_pipeline_init drivers/media/test-drivers/vimc/vimc-streamer.c:101 [inline]  vimc_streamer_s_stream+0x650/0x9a0 drivers/media/test-drivers/vimc/vimc-streamer.c:203  vimc_capture_start_streaming+0xa1/0x130 drivers/media/test-drivers/vimc/vimc-capture.c:256  vb2_start_streaming+0x15f/0x5a0 drivers/media/common/videobuf2/videobuf2-core.c:1789  vb2_core_streamon+0x2a7/0x450 drivers/media/common/videobuf2/videobuf2-core.c:2348  vb2_streamon drivers/media/common/videobuf2/videobuf2-v4l2.c:875 [inline]  vb2_ioctl_streamon+0xf4/0x170 drivers/media/common/videobuf2/videobuf2-v4l2.c:1118  __video_do_ioctl+0xaf0/0xf00 drivers/media/v4l2-core/v4l2-ioctl.c:3122  video_usercopy+0x4d2/0x1620 drivers/media/v4l2-core/v4l2-ioctl.c:3463  v4l2_ioctl+0x1ba/0x250 drivers/media/v4l2-core/v4l2-dev.c:366  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:906 [inline]  __se_sys_ioctl fs/ioctl.c:892 [inline]  __x64_sys_ioctl+0x190/0x200 fs/ioctl.c:892  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7f2b85c01b19 ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52920,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: support non-r10 register spill/fill to/from stack in precision tracking  Use instruction (jump) history to record instructions that performed register spill/fill to/from stack\, regardless if this was done through read-only r10 register\, or any other register after copying r10 into it *and* potentially adjusting offset.  To make this work reliably\, we push extra per-instruction flags into instruction history\, encoding stack slot index (spi) and stack frame number in extra 10 bit flags we take away from prev_idx in instruction history. We don't touch idx field for maximum performance\, as it's checked most frequently during backtracking.  This change removes basically the last remaining practical limitation of precision backtracking logic in BPF verifier. It fixes known deficiencies\, but also opens up new opportunities to reduce number of verified states\, explored in the subsequent patches.  There are only three differences in selftests' BPF object files according to veristat\, all in the positive direction (less states).  File                                    Program        Insns (A)  Insns (B)  Insns  (DIFF)  States (A)  States (B)  States (DIFF) --------------------------------------  -------------  ---------  ---------  -------------  ----------  ----------  ------------- test_cls_redirect_dynptr.bpf.linked3.o  cls_redirect        2987       2864  -123 (-4.12%)         240         231    -9 (-3.75%) xdp_synproxy_kern.bpf.linked3.o         syncookie_tc       82848      82661  -187 (-0.23%)        5107        5073   -34 (-0.67%) xdp_synproxy_kern.bpf.linked3.o         syncookie_xdp      85116      84964  -152 (-0.18%)        5162        5130   -32 (-0.62%)  Note\, I avoided renaming jmp_history to more generic insn_hist to minimize number of lines changed and potential merge conflicts between bpf and bpf-next trees.  Notice also cur_hist_entry pointer reset to NULL at the beginning of instruction verification loop. This pointer avoids the problem of relying on last jump history entry's insn_idx to determine whether we already have entry for current instruction or not. It can happen that we added jump history entry because current instruction is_jmp_point()\, but also we need to add instruction flags for stack access. In this case\, we don't want to entries\, so we need to reuse last added entry\, if it is present.  Relying on insn_idx comparison has the same ambiguity problem as the one that was fixed recently in [0]\, so we avoid that.    [0] https://patchwork.kernel.org/project/netdevbpf/patch/20231110002638.4168352-3-andrii@kernel.org/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26461,libgssapi-krb5-2,LOW,1.20.1-2+deb12u2,N/A,"Kerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/lib/gssapi/krb5/k5sealv3.c.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22029,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  exec: fix the racy usage of fs_struct->in_exec  check_unsafe_exec() sets fs->in_exec under cred_guard_mutex\, then execve() paths clear fs->in_exec lockless. This is fine if exec succeeds\, but if it fails we have the following race:  \tT1 sets fs->in_exec = 1\, fails\, drops cred_guard_mutex  \tT2 sets fs->in_exec = 1  \tT1 clears fs->in_exec  \tT2 continues with fs->in_exec == 0  Change fs/exec.c to clear fs->in_exec with cred_guard_mutex held.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26962,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dm-raid456\, md/raid456: fix a deadlock for dm-raid456 while io concurrent with reshape  For raid456\, if reshape is still in progress\, then IO across reshape position will wait for reshape to make progress. However\, for dm-raid\, in following cases reshape will never make progress hence IO will hang:  1) the array is read-only; 2) MD_RECOVERY_WAIT is set; 3) MD_RECOVERY_FROZEN is set;  After commit c467e97f079f (""md/raid6: use valid sector values to determine if an I/O should wait on the reshape"") fix the problem that IO across reshape position doesn't wait for reshape\, the dm-raid test shell/lvconvert-raid-reshape.sh start to hang:  [root@fedora ~]# cat /proc/979/stack [<0>] wait_woken+0x7d/0x90 [<0>] raid5_make_request+0x929/0x1d70 [raid456] [<0>] md_handle_request+0xc2/0x3b0 [md_mod] [<0>] raid_map+0x2c/0x50 [dm_raid] [<0>] __map_bio+0x251/0x380 [dm_mod] [<0>] dm_submit_bio+0x1f0/0x760 [dm_mod] [<0>] __submit_bio+0xc2/0x1c0 [<0>] submit_bio_noacct_nocheck+0x17f/0x450 [<0>] submit_bio_noacct+0x2bc/0x780 [<0>] submit_bio+0x70/0xc0 [<0>] mpage_readahead+0x169/0x1f0 [<0>] blkdev_readahead+0x18/0x30 [<0>] read_pages+0x7c/0x3b0 [<0>] page_cache_ra_unbounded+0x1ab/0x280 [<0>] force_page_cache_ra+0x9e/0x130 [<0>] page_cache_sync_ra+0x3b/0x110 [<0>] filemap_get_pages+0x143/0xa30 [<0>] filemap_read+0xdc/0x4b0 [<0>] blkdev_read_iter+0x75/0x200 [<0>] vfs_read+0x272/0x460 [<0>] ksys_read+0x7a/0x170 [<0>] __x64_sys_read+0x1c/0x30 [<0>] do_syscall_64+0xc6/0x230 [<0>] entry_SYSCALL_64_after_hwframe+0x6c/0x74  This is because reshape can't make progress.  For md/raid\, the problem doesn't exist because register new sync_thread doesn't rely on the IO to be done any more:  1) If array is read-only\, it can switch to read-write by ioctl/sysfs; 2) md/raid never set MD_RECOVERY_WAIT; 3) If MD_RECOVERY_FROZEN is set\, mddev_suspend() doesn't hold    'reconfig_mutex'\, hence it can be cleared and reshape can continue by    sysfs api 'sync_action'.  However\, I'm not sure yet how to avoid the problem in dm-raid yet. This patch on the one hand make sure raid_message() can't change sync_thread() through raid_message() after presuspend()\, on the other hand detect the above 3 cases before wait for IO do be done in dm_suspend()\, and let dm-raid requeue those IO.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26462,libgssapi-krb5-2,MEDIUM,1.20.1-2+deb12u2,N/A,"Kerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/kdc/ndr.c.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41935,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to shrink read extent node in batches  We use rwlock to protect core structure data of extent tree during its shrink\, however\, if there is a huge number of extent nodes in extent tree\, during shrink of extent tree\, it may hold rwlock for a very long time\, which may trigger kernel hang issue.  This patch fixes to shrink read extent node in batches\, so that\, critical region of the rwlock can be shrunk to avoid its extreme long time hold.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52926,linux-libc-dev,LOW,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  IORING_OP_READ did not correctly consume the provided buffer list when read i/o returned < 0 (except for -EAGAIN and -EIOCBQUEUED return). This can lead to a potential use-after-free when the completion via io_rw_done runs at separate context.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21838,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: core: flush gadget workqueue after device removal  device_del() can lead to new work being scheduled in gadget->work workqueue. This is observed\, for example\, with the dwc3 driver with the following call stack:   device_del()     gadget_unbind_driver()       usb_gadget_disconnect_locked()         dwc3_gadget_pullup() \t  dwc3_gadget_soft_disconnect() \t    usb_gadget_set_state() \t      schedule_work(&gadget->work)  Move flush_work() after device_del() to ensure the workqueue is cleaned up.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21839,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: x86: Load DR6 with guest value only before entering .vcpu_run() loop  Move the conditional loading of hardware DR6 with the guest's DR6 value out of the core .vcpu_run() loop to fix a bug where KVM can load hardware with a stale vcpu->arch.dr6.  When the guest accesses a DR and host userspace isn't debugging the guest\, KVM disables DR interception and loads the guest's values into hardware on VM-Enter and saves them on VM-Exit.  This allows the guest to access DRs at will\, e.g. so that a sequence of DR accesses to configure a breakpoint only generates one VM-Exit.  For DR0-DR3\, the logic/behavior is identical between VMX and SVM\, and also identical between KVM_DEBUGREG_BP_ENABLED (userspace debugging the guest) and KVM_DEBUGREG_WONT_EXIT (guest using DRs)\, and so KVM handles loading DR0-DR3 in common code\, _outside_ of the core kvm_x86_ops.vcpu_run() loop.  But for DR6\, the guest's value doesn't need to be loaded into hardware for KVM_DEBUGREG_BP_ENABLED\, and SVM provides a dedicated VMCB field whereas VMX requires software to manually load the guest value\, and so loading the guest's value into DR6 is handled by {svm\,vmx}_vcpu_run()\, i.e. is done _inside_ the core run loop.  Unfortunately\, saving the guest values on VM-Exit is initiated by common x86\, again outside of the core run loop.  If the guest modifies DR6 (in hardware\, when DR interception is disabled)\, and then the next VM-Exit is a fastpath VM-Exit\, KVM will reload hardware DR6 with vcpu->arch.dr6 and clobber the guest's actual value.  The bug shows up primarily with nested VMX because KVM handles the VMX preemption timer in the fastpath\, and the window between hardware DR6 being modified (in guest context) and DR6 being read by guest software is orders of magnitude larger in a nested setup.  E.g. in non-nested\, the VMX preemption timer would need to fire precisely between #DB injection and the #DB handler's read of DR6\, whereas with a KVM-on-KVM setup\, the window where hardware DR6 is ""dirty"" extends all the way from L1 writing DR6 to VMRESUME (in L1).      L1's view:     ==========     <L1 disables DR interception>            CPU 0/KVM-7289    [023] d....  2925.640961: kvm_entry: vcpu 0  A:  L1 Writes DR6            CPU 0/KVM-7289    [023] d....  2925.640963: <hack>: Set DRs\, DR6 = 0xffff0ff1   B:        CPU 0/KVM-7289    [023] d....  2925.640967: kvm_exit: vcpu 0 reason EXTERNAL_INTERRUPT intr_info 0x800000ec   D: L1 reads DR6\, arch.dr6 = 0            CPU 0/KVM-7289    [023] d....  2925.640969: <hack>: Sync DRs\, DR6 = 0xffff0ff0             CPU 0/KVM-7289    [023] d....  2925.640976: kvm_entry: vcpu 0     L2 reads DR6\, L1 disables DR interception            CPU 0/KVM-7289    [023] d....  2925.640980: kvm_exit: vcpu 0 reason DR_ACCESS info1 0x0000000000000216            CPU 0/KVM-7289    [023] d....  2925.640983: kvm_entry: vcpu 0             CPU 0/KVM-7289    [023] d....  2925.640983: <hack>: Set DRs\, DR6 = 0xffff0ff0      L2 detects failure            CPU 0/KVM-7289    [023] d....  2925.640987: kvm_exit: vcpu 0 reason HLT     L1 reads DR6 (confirms failure)            CPU 0/KVM-7289    [023] d....  2925.640990: <hack>: Sync DRs\, DR6 = 0xffff0ff0      L0's view:     ==========     L2 reads DR6\, arch.dr6 = 0           CPU 23/KVM-5046    [001] d....  3410.005610: kvm_exit: vcpu 23 reason DR_ACCESS info1 0x0000000000000216           CPU 23/KVM-5046    [001] .....  3410.005610: kvm_nested_vmexit: vcpu 23 reason DR_ACCESS info1 0x0000000000000216      L2 => L1 nested VM-Exit           CPU 23/KVM-5046    [001] .....  3410.005610: kvm_nested_vmexit_inject: reason: DR_ACCESS ext_inf1: 0x0000000000000216            CPU 23/KVM-5046    [001] d....  3410.005610: kvm_entry: vcpu 23           CPU 23/KVM-5046    [001] d....  3410.005611: kvm_exit: vcpu 23 reason VMREAD           CPU 23/KVM-5046    [001] d....  3410.005611: kvm_entry: vcpu 23           CPU 23/KVM-5046    [001] d....  3410. ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52927,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: allow exp not to be removed in nf_ct_find_expectation  Currently nf_conntrack_in() calling nf_ct_find_expectation() will remove the exp from the hash table. However\, in some scenario\, we expect the exp not to be removed when the created ct will not be confirmed\, like in OVS and TC conntrack in the following patches.  This patch allows exp not to be removed by setting IPS_CONFIRMED in the status of the tmpl.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2008-4609,linux-libc-dev,LOW,6.1.115-1,N/A,"The TCP implementation in (1) Linux\, (2) platforms based on BSD Unix\, (3) Microsoft Windows\, (4) Cisco products\, and probably other operating systems allows remote attackers to cause a denial of service (connection queue exhaustion) via multiple vectors that manipulate information in the TCP state table\, as demonstrated by sockstress.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22020,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  memstick: rtsx_usb_ms: Fix slab-use-after-free in rtsx_usb_ms_drv_remove  This fixes the following crash:  ================================================================== BUG: KASAN: slab-use-after-free in rtsx_usb_ms_poll_card+0x159/0x200 [rtsx_usb_ms] Read of size 8 at addr ffff888136335380 by task kworker/6:0/140241  CPU: 6 UID: 0 PID: 140241 Comm: kworker/6:0 Kdump: loaded Tainted: G            E      6.14.0-rc6+ #1 Tainted: [E]=UNSIGNED_MODULE Hardware name: LENOVO 30FNA1V7CW/1057\, BIOS S0EKT54A 07/01/2024 Workqueue: events rtsx_usb_ms_poll_card [rtsx_usb_ms] Call Trace:  <TASK>  dump_stack_lvl+0x51/0x70  print_address_description.constprop.0+0x27/0x320  ? rtsx_usb_ms_poll_card+0x159/0x200 [rtsx_usb_ms]  print_report+0x3e/0x70  kasan_report+0xab/0xe0  ? rtsx_usb_ms_poll_card+0x159/0x200 [rtsx_usb_ms]  rtsx_usb_ms_poll_card+0x159/0x200 [rtsx_usb_ms]  ? __pfx_rtsx_usb_ms_poll_card+0x10/0x10 [rtsx_usb_ms]  ? __pfx___schedule+0x10/0x10  ? kick_pool+0x3b/0x270  process_one_work+0x357/0x660  worker_thread+0x390/0x4c0  ? __pfx_worker_thread+0x10/0x10  kthread+0x190/0x1d0  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x2d/0x50  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK>  Allocated by task 161446:  kasan_save_stack+0x20/0x40  kasan_save_track+0x10/0x30  __kasan_kmalloc+0x7b/0x90  __kmalloc_noprof+0x1a7/0x470  memstick_alloc_host+0x1f/0xe0 [memstick]  rtsx_usb_ms_drv_probe+0x47/0x320 [rtsx_usb_ms]  platform_probe+0x60/0xe0  call_driver_probe+0x35/0x120  really_probe+0x123/0x410  __driver_probe_device+0xc7/0x1e0  driver_probe_device+0x49/0xf0  __device_attach_driver+0xc6/0x160  bus_for_each_drv+0xe4/0x160  __device_attach+0x13a/0x2b0  bus_probe_device+0xbd/0xd0  device_add+0x4a5/0x760  platform_device_add+0x189/0x370  mfd_add_device+0x587/0x5e0  mfd_add_devices+0xb1/0x130  rtsx_usb_probe+0x28e/0x2e0 [rtsx_usb]  usb_probe_interface+0x15c/0x460  call_driver_probe+0x35/0x120  really_probe+0x123/0x410  __driver_probe_device+0xc7/0x1e0  driver_probe_device+0x49/0xf0  __device_attach_driver+0xc6/0x160  bus_for_each_drv+0xe4/0x160  __device_attach+0x13a/0x2b0  rebind_marked_interfaces.isra.0+0xcc/0x110  usb_reset_device+0x352/0x410  usbdev_do_ioctl+0xe5c/0x1860  usbdev_ioctl+0xa/0x20  __x64_sys_ioctl+0xc5/0xf0  do_syscall_64+0x59/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 161506:  kasan_save_stack+0x20/0x40  kasan_save_track+0x10/0x30  kasan_save_free_info+0x36/0x60  __kasan_slab_free+0x34/0x50  kfree+0x1fd/0x3b0  device_release+0x56/0xf0  kobject_cleanup+0x73/0x1c0  rtsx_usb_ms_drv_remove+0x13d/0x220 [rtsx_usb_ms]  platform_remove+0x2f/0x50  device_release_driver_internal+0x24b/0x2e0  bus_remove_device+0x124/0x1d0  device_del+0x239/0x530  platform_device_del.part.0+0x19/0xe0  platform_device_unregister+0x1c/0x40  mfd_remove_devices_fn+0x167/0x170  device_for_each_child_reverse+0xc9/0x130  mfd_remove_devices+0x6e/0xa0  rtsx_usb_disconnect+0x2e/0xd0 [rtsx_usb]  usb_unbind_interface+0xf3/0x3f0  device_release_driver_internal+0x24b/0x2e0  proc_disconnect_claim+0x13d/0x220  usbdev_do_ioctl+0xb5e/0x1860  usbdev_ioctl+0xa/0x20  __x64_sys_ioctl+0xc5/0xf0  do_syscall_64+0x59/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Last potentially related work creation:  kasan_save_stack+0x20/0x40  kasan_record_aux_stack+0x85/0x90  insert_work+0x29/0x100  __queue_work+0x34a/0x540  call_timer_fn+0x2a/0x160  expire_timers+0x5f/0x1f0  __run_timer_base.part.0+0x1b6/0x1e0  run_timer_softirq+0x8b/0xe0  handle_softirqs+0xf9/0x360  __irq_exit_rcu+0x114/0x130  sysvec_apic_timer_interrupt+0x72/0x90  asm_sysvec_apic_timer_interrupt+0x16/0x20  Second to last potentially related work creation:  kasan_save_stack+0x20/0x40  kasan_record_aux_stack+0x85/0x90  insert_work+0x29/0x100  __queue_work+0x34a/0x540  call_timer_fn+0x2a/0x160  expire_timers+0x5f/0x1f0  __run_timer_base.part.0+0x1b6/0x1e0  run_timer_softirq+0x8b/0xe0  handle_softirqs+0xf9/0x ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21836,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring/kbuf: reallocate buf lists on upgrade  IORING_REGISTER_PBUF_RING can reuse an old struct io_buffer_list if it was created for legacy selected buffer and has been emptied. It violates the requirement that most of the field should stay stable after publish. Always reallocate it instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22021,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: socket: Lookup orig tuple for IPv6 SNAT  nf_sk_lookup_slow_v4 does the conntrack lookup for IPv4 packets to restore the original 5-tuple in case of SNAT\, to be able to find the right socket (if any). Then socket_match() can correctly check whether the socket was transparent.  However\, the IPv6 counterpart (nf_sk_lookup_slow_v6) lacks this conntrack lookup\, making xt_socket fail to match on the socket when the packet was SNATed. Add the same logic to nf_sk_lookup_slow_v6.  IPv6 SNAT is used in Kubernetes clusters for pod-to-world packets\, as pods' addresses are in the fd00::/8 ULA subnet and need to be replaced with the node's external address. Cilium leverages Envoy to enforce L7 policies\, and Envoy uses transparent sockets. Cilium inserts an iptables prerouting rule that matches on `-m socket --transparent` and redirects the packets to localhost\, but it fails to match SNATed IPv6 packets due to that missing conntrack lookup.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22022,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usb: xhci: Apply the link chain quirk on NEC isoc endpoints  Two clearly different specimens of NEC uPD720200 (one with start/stop bug\, one without) were seen to cause IOMMU faults after some Missed Service Errors. Faulting address is immediately after a transfer ring segment and patched dynamic debug messages revealed that the MSE was received when waiting for a TD near the end of that segment:  [ 1.041954] xhci_hcd: Miss service interval error for slot 1 ep 2 expected TD DMA ffa08fe0 [ 1.042120] xhci_hcd: AMD-Vi: Event logged [IO_PAGE_FAULT domain=0x0005 address=0xffa09000 flags=0x0000] [ 1.042146] xhci_hcd: AMD-Vi: Event logged [IO_PAGE_FAULT domain=0x0005 address=0xffa09040 flags=0x0000]  It gets even funnier if the next page is a ring segment accessible to the HC. Below\, it reports MSE in segment at ff1e8000\, plows through a zero-filled page at ff1e9000 and starts reporting events for TRBs in page at ff1ea000 every microframe\, instead of jumping to seg ff1e6000.  [ 7.041671] xhci_hcd: Miss service interval error for slot 1 ep 2 expected TD DMA ff1e8fe0 [ 7.041999] xhci_hcd: Miss service interval error for slot 1 ep 2 expected TD DMA ff1e8fe0 [ 7.042011] xhci_hcd: WARN: buffer overrun event for slot 1 ep 2 on endpoint [ 7.042028] xhci_hcd: All TDs skipped for slot 1 ep 2. Clear skip flag. [ 7.042134] xhci_hcd: WARN: buffer overrun event for slot 1 ep 2 on endpoint [ 7.042138] xhci_hcd: ERROR Transfer event TRB DMA ptr not part of current TD ep_index 2 comp_code 31 [ 7.042144] xhci_hcd: Looking for event-dma 00000000ff1ea040 trb-start 00000000ff1e6820 trb-end 00000000ff1e6820 [ 7.042259] xhci_hcd: WARN: buffer overrun event for slot 1 ep 2 on endpoint [ 7.042262] xhci_hcd: ERROR Transfer event TRB DMA ptr not part of current TD ep_index 2 comp_code 31 [ 7.042266] xhci_hcd: Looking for event-dma 00000000ff1ea050 trb-start 00000000ff1e6820 trb-end 00000000ff1e6820  At some point completion events change from Isoch Buffer Overrun to Short Packet and the HC finally finds cycle bit mismatch in ff1ec000.  [ 7.098130] xhci_hcd: ERROR Transfer event TRB DMA ptr not part of current TD ep_index 2 comp_code 13 [ 7.098132] xhci_hcd: Looking for event-dma 00000000ff1ecc50 trb-start 00000000ff1e6820 trb-end 00000000ff1e6820 [ 7.098254] xhci_hcd: ERROR Transfer event TRB DMA ptr not part of current TD ep_index 2 comp_code 13 [ 7.098256] xhci_hcd: Looking for event-dma 00000000ff1ecc60 trb-start 00000000ff1e6820 trb-end 00000000ff1e6820 [ 7.098379] xhci_hcd: Overrun event on slot 1 ep 2  It's possible that data from the isochronous device were written to random buffers of pending TDs on other endpoints (either IN or OUT)\, other devices or even other HCs in the same IOMMU domain.  Lastly\, an error from a different USB device on another HC. Was it caused by the above? I don't know\, but it may have been. The disk was working without any other issues and generated PCIe traffic to starve the NEC of upstream BW and trigger those MSEs. The two HCs shared one x1 slot by means of a commercial ""PCIe splitter"" board.  [ 7.162604] usb 10-2: reset SuperSpeed USB device number 3 using xhci_hcd [ 7.178990] sd 9:0:0:0: [sdb] tag#0 UNKNOWN(0x2003) Result: hostbyte=0x07 driverbyte=DRIVER_OK cmd_age=0s [ 7.179001] sd 9:0:0:0: [sdb] tag#0 CDB: opcode=0x28 28 00 04 02 ae 00 00 02 00 00 [ 7.179004] I/O error\, dev sdb\, sector 67284480 op 0x0:(READ) flags 0x80700 phys_seg 5 prio class 0  Fortunately\, it appears that this ridiculous bug is avoided by setting the chain bit of Link TRBs on isochronous rings. Other ancient HCs are known which also expect the bit to be set and they ignore Link TRBs if it's not. Reportedly\, 0.95 spec guaranteed that the bit is set.  The bandwidth-starved NEC HC running a 32KB/uframe UVC endpoint reports tens of MSEs per second and runs into the bug within seconds. Chaining Link TRBs allows the same workload to run for many minutes\, many times.  No ne ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21835,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: f_midi: fix MIDI Streaming descriptor lengths  While the MIDI jacks are configured correctly\, and the MIDIStreaming endpoint descriptors are filled with the correct information\, bNumEmbMIDIJack and bLength are set incorrectly in these descriptors.  This does not matter when the numbers of in and out ports are equal\, but when they differ the host will receive broken descriptors with uninitialized stack memory leaking into the descriptor for whichever value is smaller.  The precise meaning of ""in"" and ""out"" in the port counts is not clearly defined and can be confusing.  But elsewhere the driver consistently uses this to match the USB meaning of IN and OUT viewed from the host\, so that ""in"" ports send data to the host and ""out"" ports receive data from it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21832,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  block: don't revert iter for -EIOCBQUEUED  blkdev_read_iter() has a few odd checks\, like gating the position and count adjustment on whether or not the result is bigger-than-or-equal to zero (where bigger than makes more sense)\, and not checking the return value of blkdev_direct_IO() before doing an iov_iter_revert(). The latter can lead to attempting to revert with a negative value\, which when passed to iov_iter_revert() as an unsigned value will lead to throwing a WARN_ON() because unroll is bigger than MAX_RW_COUNT.  Be sane and don't revert for -EIOCBQUEUED\, like what is done in other spots.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22025,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: put dl_stid if fail to queue dl_recall  Before calling nfsd4_run_cb to queue dl_recall to the callback_wq\, we increment the reference count of dl_stid. We expect that after the corresponding work_struct is processed\, the reference count of dl_stid will be decremented through the callback function nfsd4_cb_recall_release. However\, if the call to nfsd4_run_cb fails\, the incremented reference count of dl_stid will not be decremented correspondingly\, leading to the following nfs4_stid leak: unreferenced object 0xffff88812067b578 (size 344):   comm ""nfsd""\, pid 2761\, jiffies 4295044002 (age 5541.241s)   hex dump (first 32 bytes):     01 00 00 00 6b 6b 6b 6b b8 02 c0 e2 81 88 ff ff  ....kkkk........     00 6b 6b 6b 6b 6b 6b 6b 00 00 00 00 ad 4e ad de  .kkkkkkk.....N..   backtrace:     kmem_cache_alloc+0x4b9/0x700     nfsd4_process_open1+0x34/0x300     nfsd4_open+0x2d1/0x9d0     nfsd4_proc_compound+0x7a2/0xe30     nfsd_dispatch+0x241/0x3e0     svc_process_common+0x5d3/0xcc0     svc_process+0x2a3/0x320     nfsd+0x180/0x2e0     kthread+0x199/0x1d0     ret_from_fork+0x30/0x50     ret_from_fork_asm+0x1b/0x30 unreferenced object 0xffff8881499f4d28 (size 368):   comm ""nfsd""\, pid 2761\, jiffies 4295044005 (age 5541.239s)   hex dump (first 32 bytes):     01 00 00 00 00 00 00 00 30 4d 9f 49 81 88 ff ff  ........0M.I....     30 4d 9f 49 81 88 ff ff 20 00 00 00 01 00 00 00  0M.I.... .......   backtrace:     kmem_cache_alloc+0x4b9/0x700     nfs4_alloc_stid+0x29/0x210     alloc_init_deleg+0x92/0x2e0     nfs4_set_delegation+0x284/0xc00     nfs4_open_delegation+0x216/0x3f0     nfsd4_process_open2+0x2b3/0xee0     nfsd4_open+0x770/0x9d0     nfsd4_proc_compound+0x7a2/0xe30     nfsd_dispatch+0x241/0x3e0     svc_process_common+0x5d3/0xcc0     svc_process+0x2a3/0x320     nfsd+0x180/0x2e0     kthread+0x199/0x1d0     ret_from_fork+0x30/0x50     ret_from_fork_asm+0x1b/0x30 Fix it by checking the result of nfsd4_run_cb and call nfs4_put_stid if fail to queue dl_recall.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21833,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  iommu/vt-d: Avoid use of NULL after WARN_ON_ONCE  There is a WARN_ON_ONCE to catch an unlikely situation when domain_remove_dev_pasid can't find the `pasid`. In case it nevertheless happens we must avoid using a NULL pointer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22026,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: don't ignore the return code of svc_proc_register()  Currently\, nfsd_proc_stat_init() ignores the return value of svc_proc_register(). If the procfile creation fails\, then the kernel will WARN when it tries to remove the entry later.  Fix nfsd_proc_stat_init() to return the same type of pointer as svc_proc_register()\, and fix up nfsd_net_init() to check that and fail the nfsd_net construction if it occurs.  svc_proc_register() can fail if the dentry can't be allocated\, or if an identical dentry already exists. The second case is pretty unlikely in the nfsd_net construction codepath\, so if this happens\, return -ENOMEM.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21830,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  landlock: Handle weird files  A corrupted filesystem (e.g. bcachefs) might return weird files. Instead of throwing a warning and allowing access to such file\, treat them as regular files.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22027,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  media: streamzap: fix race between device disconnection and urb callback  Syzkaller has reported a general protection fault at function ir_raw_event_store_with_filter(). This crash is caused by a NULL pointer dereference of dev->raw pointer\, even though it is checked for NULL in the same function\, which means there is a race condition. It occurs due to the incorrect order of actions in the streamzap_disconnect() function: rc_unregister_device() is called before usb_kill_urb(). The dev->raw pointer is freed and set to NULL in rc_unregister_device()\, and only after that usb_kill_urb() waits for in-progress requests to finish.  If rc_unregister_device() is called while streamzap_callback() handler is not finished\, this can lead to accessing freed resources. Thus rc_unregister_device() should be called after usb_kill_urb().  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21831,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: Avoid putting some root ports into D3 on TUXEDO Sirius Gen1  commit 9d26d3a8f1b0 (""PCI: Put PCIe ports into D3 during suspend"") sets the policy that all PCIe ports are allowed to use D3.  When the system is suspended if the port is not power manageable by the platform and won't be used for wakeup via a PME this sets up the policy for these ports to go into D3hot.  This policy generally makes sense from an OSPM perspective but it leads to problems with wakeup from suspend on the TUXEDO Sirius 16 Gen 1 with a specific old BIOS. This manifests as a system hang.  On the affected Device + BIOS combination\, add a quirk for the root port of the problematic controller to ensure that these root ports are not put into D3hot at suspend.  This patch is based on    https://lore.kernel.org/linux-pci/20230708214457.1229-2-mario.limonciello@amd.com  but with the added condition both in the documentation and in the code to apply only to the TUXEDO Sirius 16 Gen 1 with a specific old BIOS and only the affected root ports.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56776,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/sti: avoid potential dereference of error pointers  The return value of drm_atomic_get_crtc_state() needs to be checked. To avoid use of error pointer 'crtc_state' in case of the failure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-20673,binutils,LOW,2.40-2,N/A,"The demangle_template function in cplus-dem.c in GNU libiberty\, as distributed in GNU Binutils 2.31.1\, contains an integer overflow vulnerability (for ""Create an array for saving the template argument values"") that can trigger a heap-based buffer overflow\, as demonstrated by nm.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56777,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/sti: avoid potential dereference of error pointers in sti_gdp_atomic_check  The return value of drm_atomic_get_crtc_state() needs to be checked. To avoid use of error pointer 'crtc_state' in case of the failure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56774,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: add a sanity check for btrfs root in btrfs_search_slot()  Syzbot reports a null-ptr-deref in btrfs_search_slot().  The reproducer is using rescue=ibadroots\, and the extent tree root is corrupted thus the extent tree is NULL.  When scrub tries to search the extent tree to gather the needed extent info\, btrfs_search_slot() doesn't check if the target root is NULL or not\, resulting the null-ptr-deref.  Add sanity check for btrfs root before using it in btrfs_search_slot().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56775,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix handling of plane refcount  [Why] The mechanism to backup and restore plane states doesn't maintain refcount\, which can cause issues if the refcount of the plane changes in between backup and restore operations\, such as memory leaks if the refcount was supposed to go down\, or double frees / invalid memory accesses if the refcount was supposed to go up.  [How] Cache and re-apply current refcount when restoring plane states.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27408,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dmaengine: dw-edma: eDMA: Add sync read before starting the DMA transfer in remote setup  The Linked list element and pointer are not stored in the same memory as the eDMA controller register. If the doorbell register is toggled before the full write of the linked list a race condition error will occur. In remote setup we can only use a readl to the memory to assure the full write has occurred.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-6240,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A Marvin vulnerability side-channel leakage was found in the RSA decryption operation in the Linux Kernel. This issue may allow a network attacker to decrypt ciphertexts or forge signatures\, limiting the services that use that private key.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2013-4472,libpoppler126,LOW,22.12.0-2+b1,N/A,"The openTempFile function in goo/gfile.cc in Xpdf and Poppler 0.24.3 and earlier\, when running on a system other than Unix\, allows local users to overwrite arbitrary files via a symlink attack on temporary files with predictable names.",|tykio/midsommar|
CVE-2024-56770,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: netem: account for backlog updates from child qdisc  In general\, 'qlen' of any classful qdisc should keep track of the number of packets that the qdisc itself and all of its children holds. In case of netem\, 'qlen' only accounts for the packets in its internal tfifo. When netem is used with a child qdisc\, the child qdisc can use 'qdisc_tree_reduce_backlog' to inform its parent\, netem\, about created or dropped SKBs. This function updates 'qlen' and the backlog statistics of netem\, but netem does not account for changes made by a child qdisc. 'qlen' then indicates the wrong number of packets in the tfifo. If a child qdisc creates new SKBs during enqueue and informs its parent about this\, netem's 'qlen' value is increased. When netem dequeues the newly created SKBs from the child\, the 'qlen' in netem is not updated. If 'qlen' reaches the configured sch->limit\, the enqueue function stops working\, even though the tfifo is not full.  Reproduce the bug: Ensure that the sender machine has GSO enabled. Configure netem as root qdisc and tbf as its child on the outgoing interface of the machine as follows: $ tc qdisc add dev <oif> root handle 1: netem delay 100ms limit 100 $ tc qdisc add dev <oif> parent 1:0 tbf rate 50Mbit burst 1542 latency 50ms  Send bulk TCP traffic out via this interface\, e.g.\, by running an iPerf3 client on the machine. Check the qdisc statistics: $ tc -s qdisc show dev <oif>  Statistics after 10s of iPerf3 TCP test before the fix (note that netem's backlog > limit\, netem stopped accepting packets): qdisc netem 1: root refcnt 2 limit 1000 delay 100ms  Sent 2767766 bytes 1848 pkt (dropped 652\, overlimits 0 requeues 0)  backlog 4294528236b 1155p requeues 0 qdisc tbf 10: parent 1:1 rate 50Mbit burst 1537b lat 50ms  Sent 2767766 bytes 1848 pkt (dropped 327\, overlimits 7601 requeues 0)  backlog 0b 0p requeues 0  Statistics after the fix: qdisc netem 1: root refcnt 2 limit 1000 delay 100ms  Sent 37766372 bytes 24974 pkt (dropped 9\, overlimits 0 requeues 0)  backlog 0b 0p requeues 0 qdisc tbf 10: parent 1:1 rate 50Mbit burst 1537b lat 50ms  Sent 37766372 bytes 24974 pkt (dropped 327\, overlimits 96017 requeues 0)  backlog 0b 0p requeues 0  tbf segments the GSO SKBs (tbf_segment) and updates the netem's 'qlen'. The interface fully stops transferring packets and ""locks"". In this case\, the child qdisc and tfifo are empty\, but 'qlen' indicates the tfifo is at its limit and no more packets are accepted.  This patch adds a counter for the entries in the tfifo. Netem's 'qlen' is only decreased when a packet is returned by its dequeue function\, and not during enqueuing into the child qdisc. External updates to 'qlen' are thus accounted for and only the behavior of the backlog statistics changes. As in other qdiscs\, 'qlen' then keeps track of  how many packets are held in netem and all of its children. As before\, sch->limit remains as the maximum number of packets in the tfifo. The same applies to netem's backlog statistics.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49918,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null check for head_pipe in dcn32_acquire_idle_pipe_for_head_pipe_in_layer  This commit addresses a potential null pointer dereference issue in the `dcn32_acquire_idle_pipe_for_head_pipe_in_layer` function. The issue could occur when `head_pipe` is null.  The fix adds a check to ensure `head_pipe` is not null before asserting it. If `head_pipe` is null\, the function returns NULL to prevent a potential null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/resource/dcn32/dcn32_resource.c:2690 dcn32_acquire_idle_pipe_for_head_pipe_in_layer() error: we previously assumed 'head_pipe' could be null (see line 2681)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49919,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null check for head_pipe in dcn201_acquire_free_pipe_for_layer  This commit addresses a potential null pointer dereference issue in the `dcn201_acquire_free_pipe_for_layer` function. The issue could occur when `head_pipe` is null.  The fix adds a check to ensure `head_pipe` is not null before asserting it. If `head_pipe` is null\, the function returns NULL to prevent a potential null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/resource/dcn201/dcn201_resource.c:1016 dcn201_acquire_free_pipe_for_layer() error: we previously assumed 'head_pipe' could be null (see line 1010)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-6952,patch,LOW,2.7.6-7,N/A,"A double free exists in the another_hunk function in pch.c in GNU patch through 2.7.6.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49916,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for clk_mgr and clk_mgr->funcs in dcn401_init_hw  This commit addresses a potential null pointer dereference issue in the `dcn401_init_hw` function. The issue could occur when `dc->clk_mgr` or `dc->clk_mgr->funcs` is null.  The fix adds a check to ensure `dc->clk_mgr` and `dc->clk_mgr->funcs` is not null before accessing its functions. This prevents a potential null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn401/dcn401_hwseq.c:416 dcn401_init_hw() error: we previously assumed 'dc->clk_mgr' could be null (see line 225)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49917,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for clk_mgr and clk_mgr->funcs in dcn30_init_hw  This commit addresses a potential null pointer dereference issue in the `dcn30_init_hw` function. The issue could occur when `dc->clk_mgr` or `dc->clk_mgr->funcs` is null.  The fix adds a check to ensure `dc->clk_mgr` and `dc->clk_mgr->funcs` is not null before accessing its functions. This prevents a potential null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn30/dcn30_hwseq.c:789 dcn30_init_hw() error: we previously assumed 'dc->clk_mgr' could be null (see line 628)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-9996,binutils,LOW,2.40-2,N/A,"An issue was discovered in cplus-dem.c in GNU libiberty\, as distributed in GNU Binutils 2.30. Stack Exhaustion occurs in the C++ demangling functions provided by libiberty\, and there are recursive stack frames: demangle_template_value_parm\, demangle_integral_value\, and demangle_expression.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49914,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null check for pipe_ctx->plane_state in dcn20_program_pipe  This commit addresses a null pointer dereference issue in the `dcn20_program_pipe` function. The issue could occur when `pipe_ctx->plane_state` is null.  The fix adds a check to ensure `pipe_ctx->plane_state` is not null before accessing. This prevents a null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn20/dcn20_hwseq.c:1925 dcn20_program_pipe() error: we previously assumed 'pipe_ctx->plane_state' could be null (see line 1877)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-6951,patch,LOW,2.7.6-7,N/A,"An issue was discovered in GNU patch through 2.7.6. There is a segmentation fault\, associated with a NULL pointer dereference\, leading to a denial of service in the intuit_diff_type function in pch.c\, aka a ""mangled rename"" issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49915,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for clk_mgr in dcn32_init_hw  This commit addresses a potential null pointer dereference issue in the `dcn32_init_hw` function. The issue could occur when `dc->clk_mgr` is null.  The fix adds a check to ensure `dc->clk_mgr` is not null before accessing its functions. This prevents a potential null pointer dereference.  Reported by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn32/dcn32_hwseq.c:961 dcn32_init_hw() error: we previously assumed 'dc->clk_mgr' could be null (see line 782)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27407,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Fixed overflow check in mi_enum_attr()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56778,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/sti: avoid potential dereference of error pointers in sti_hqvdp_atomic_check  The return value of drm_atomic_get_crtc_state() needs to be checked. To avoid use of error pointer 'crtc_state' in case of the failure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49910,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for function pointer in dcn401_set_output_transfer_func  This commit adds a null check for the set_output_gamma function pointer in the dcn401_set_output_transfer_func function. Previously\, set_output_gamma was being checked for null\, but then it was being dereferenced without any null check. This could lead to a null pointer dereference if set_output_gamma is null.  To fix this\, we now ensure that set_output_gamma is not null before dereferencing it. We do this by adding a null check for set_output_gamma before the call to set_output_gamma.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56779,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: fix nfs4_openowner leak when concurrent nfsd4_open occur  The action force umount(umount -f) will attempt to kill all rpc_task even umount operation may ultimately fail if some files remain open. Consequently\, if an action attempts to open a file\, it can potentially send two rpc_task to nfs server.                     NFS CLIENT thread1                             thread2 open(""file"") ... nfs4_do_open  _nfs4_do_open   _nfs4_open_and_get_state    _nfs4_proc_open     nfs4_run_open_task      /* rpc_task1 */      rpc_run_task      rpc_wait_for_completion_task                                      umount -f                                     nfs_umount_begin                                      rpc_killall_tasks                                       rpc_signal_task      rpc_task1 been wakeup      and return -512  _nfs4_do_open // while loop     ...     nfs4_run_open_task      /* rpc_task2 */      rpc_run_task      rpc_wait_for_completion_task  While processing an open request\, nfsd will first attempt to find or allocate an nfs4_openowner. If it finds an nfs4_openowner that is not marked as NFS4_OO_CONFIRMED\, this nfs4_openowner will released. Since two rpc_task can attempt to open the same file simultaneously from the client to server\, and because two instances of nfsd can run concurrently\, this situation can lead to lots of memory leak. Additionally\, when we echo 0 to /proc/fs/nfsd/threads\, warning will be triggered.                      NFS SERVER nfsd1                  nfsd2       echo 0 > /proc/fs/nfsd/threads  nfsd4_open  nfsd4_process_open1   find_or_alloc_open_stateowner    // alloc oo1\, stateid1                        nfsd4_open                         nfsd4_process_open1                         find_or_alloc_open_stateowner                         // find oo1\, without NFS4_OO_CONFIRMED                          release_openowner                           unhash_openowner_locked                           list_del_init(&oo->oo_perclient)                           // cannot find this oo                           // from client\, LEAK!!!                          alloc_stateowner // alloc oo2   nfsd4_process_open2   init_open_stateid   // associate oo1   // with stateid1\, stateid1 LEAK!!!   nfs4_get_vfs_file   // alloc nfsd_file1 and nfsd_file_mark1   // all LEAK!!!                           nfsd4_process_open2                          ...                                      write_threads                                      ...                                      nfsd_destroy_serv                                       nfsd_shutdown_net                                        nfs4_state_shutdown_net                                         nfs4_state_destroy_net                                          destroy_client                                           __destroy_client                                           // won't find oo1!!!                                      nfsd_shutdown_generic                                       nfsd_file_cache_shutdown                                        kmem_cache_destroy                                        for nfsd_file_slab                                        and nfsd_file_mark_slab                                        // bark since nfsd_file1                                        // and nfsd_file_mark1                                        // still alive  ======================================================================= BUG nfsd_file (Not tainted): Objects remaining in nfsd_file on __kmem_cache_shutdown() -----------------------------------------------------------------------  Slab 0xffd4000004438a80 objects=34 used=1 fp=0xff11000110e2ad28 flags=0x17ffffc0000240(workingset|head|node=0|zone=2|lastcpupid=0x1fffff) CPU: 4 UID: 0 PID: 757 Comm: sh Not tainted 6.12.0-rc6+ #19 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.1-2.fc37 04/01/2014 Call Trace:  <TASK>  dum ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49911,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for function pointer in dcn20_set_output_transfer_func  This commit adds a null check for the set_output_gamma function pointer in the dcn20_set_output_transfer_func function. Previously\, set_output_gamma was being checked for null at line 1030\, but then it was being dereferenced without any null check at line 1048. This could potentially lead to a null pointer dereference error if set_output_gamma is null.  To fix this\, we now ensure that set_output_gamma is not null before dereferencing it. We do this by adding a null check for set_output_gamma before the call to set_output_gamma at line 1048.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-25269,libheif1,LOW,1.15.1-1+deb12u1,N/A,"libheif <= 1.17.6 contains a memory leak in the function JpegEncoder::Encode. This flaw allows an attacker to cause a denial of service attack.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50226,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  cxl/port: Fix use-after-free\, permit out-of-order decoder shutdown  In support of investigating an initialization failure report [1]\, cxl_test was updated to register mock memory-devices after the mock root-port/bus device had been registered. That led to cxl_test crashing with a use-after-free bug with the following signature:      cxl_port_attach_region: cxl region3: cxl_host_bridge.0:port3 decoder3.0 add: mem0:decoder7.0 @ 0 next: cxl_switch_uport.0 nr_eps: 1 nr_targets: 1     cxl_port_attach_region: cxl region3: cxl_host_bridge.0:port3 decoder3.0 add: mem4:decoder14.0 @ 1 next: cxl_switch_uport.0 nr_eps: 2 nr_targets: 1     cxl_port_setup_targets: cxl region3: cxl_switch_uport.0:port6 target[0] = cxl_switch_dport.0 for mem0:decoder7.0 @ 0 1)  cxl_port_setup_targets: cxl region3: cxl_switch_uport.0:port6 target[1] = cxl_switch_dport.4 for mem4:decoder14.0 @ 1     [..]     cxld_unregister: cxl decoder14.0:     cxl_region_decode_reset: cxl_region region3:     mock_decoder_reset: cxl_port port3: decoder3.0 reset 2)  mock_decoder_reset: cxl_port port3: decoder3.0: out of order reset\, expected decoder3.1     cxl_endpoint_decoder_release: cxl decoder14.0:     [..]     cxld_unregister: cxl decoder7.0: 3)  cxl_region_decode_reset: cxl_region region3:     Oops: general protection fault\, probably for non-canonical address 0x6b6b6b6b6b6b6bc3: 0000 [#1] PREEMPT SMP PTI     [..]     RIP: 0010:to_cxl_port+0x8/0x60 [cxl_core]     [..]     Call Trace:      <TASK>      cxl_region_decode_reset+0x69/0x190 [cxl_core]      cxl_region_detach+0xe8/0x210 [cxl_core]      cxl_decoder_kill_region+0x27/0x40 [cxl_core]      cxld_unregister+0x5d/0x60 [cxl_core]  At 1) a region has been established with 2 endpoint decoders (7.0 and 14.0). Those endpoints share a common switch-decoder in the topology (3.0). At teardown\, 2)\, decoder14.0 is the first to be removed and hits the ""out of order reset case"" in the switch decoder. The effect though is that region3 cleanup is aborted leaving it in-tact and referencing decoder14.0. At 3) the second attempt to teardown region3 trips over the stale decoder14.0 object which has long since been deleted.  The fix here is to recognize that the CXL specification places no mandate on in-order shutdown of switch-decoders\, the driver enforces in-order allocation\, and hardware enforces in-order commit. So\, rather than fail and leave objects dangling\, always remove them.  In support of making cxl_region_decode_reset() always succeed\, cxl_region_invalidate_memregion() failures are turned into warnings. Crashing the kernel is ok there since system integrity is at risk if caches cannot be managed around physical address mutation events like CXL region destruction.  A new device_for_each_child_reverse_from() is added to cleanup port->commit_end after all dependent decoders have been disabled. In other words if decoders are allocated 0->1->2 and disabled 1->2->0 then port->commit_end only decrements from 2 after 2 has been disabled\, and it decrements all the way to zero since 1 was disabled previously.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50014,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: fix access to uninitialised lock in fc replay path  The following kernel trace can be triggered with fstest generic/629 when executed against a filesystem with fast-commit feature enabled:  INFO: trying to register non-static key. The code is fine but needs lockdep annotation\, or maybe you didn't initialize this object before use? turning off the locking correctness validator. CPU: 0 PID: 866 Comm: mount Not tainted 6.10.0+ #11 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.2-3-gd478f380-prebuilt.qemu.org 04/01/2014 Call Trace:  <TASK>  dump_stack_lvl+0x66/0x90  register_lock_class+0x759/0x7d0  __lock_acquire+0x85/0x2630  ? __find_get_block+0xb4/0x380  lock_acquire+0xd1/0x2d0  ? __ext4_journal_get_write_access+0xd5/0x160  _raw_spin_lock+0x33/0x40  ? __ext4_journal_get_write_access+0xd5/0x160  __ext4_journal_get_write_access+0xd5/0x160  ext4_reserve_inode_write+0x61/0xb0  __ext4_mark_inode_dirty+0x79/0x270  ? ext4_ext_replay_set_iblocks+0x2f8/0x450  ext4_ext_replay_set_iblocks+0x330/0x450  ext4_fc_replay+0x14c8/0x1540  ? jread+0x88/0x2e0  ? rcu_is_watching+0x11/0x40  do_one_pass+0x447/0xd00  jbd2_journal_recover+0x139/0x1b0  jbd2_journal_load+0x96/0x390  ext4_load_and_init_journal+0x253/0xd40  ext4_fill_super+0x2cc6/0x3180 ...  In the replay path there's an attempt to lock sbi->s_bdev_wb_lock in function ext4_check_bdev_write_error().  Unfortunately\, at this point this spinlock has not been initialized yet.  Moving it's initialization to an earlier point in __ext4_fill_super() fixes this splat.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50017,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/mm/ident_map: Use gbpages only where full GB page should be mapped.  When ident_pud_init() uses only GB pages to create identity maps\, large ranges of addresses not actually requested can be included in the resulting table; a 4K request will map a full GB.  This can include a lot of extra address space past that requested\, including areas marked reserved by the BIOS.  That allows processor speculation into reserved regions\, that on UV systems can cause system halts.  Only use GB pages when map creation requests include the full GB page of space.  Fall back to using smaller 2M pages when only portions of a GB page are included in the request.  No attempt is made to coalesce mapping requests. If a request requires a map entry at the 2M (pmd) level\, subsequent mapping requests within the same 1G region will also be at the pmd level\, even if adjacent or overlapping such requests could have been combined to map a full GB page. Existing usage starts with larger regions and then adds smaller regions\, so this should not have any great consequence.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56201,Jinja2,MEDIUM,3.1.4,3.1.5,"Jinja is an extensible templating engine. In versions on the 3.x branch prior to 3.1.5\, a bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code\, regardless of if Jinja's sandbox is used. To exploit the vulnerability\, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename. This vulnerability is fixed in 3.1.5.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50016,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Avoid overflow assignment in link_dp_cts  sampling_rate is an uint8_t but is assigned an unsigned int\, and thus it can overflow. As a result\, sampling_rate is changed to uint32_t.  Similarly\, LINK_QUAL_PATTERN_SET has a size of 2 bits\, and it should only be assigned to a value less or equal than 4.  This fixes 2 INTEGER_OVERFLOW issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26869,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to truncate meta inode pages forcely  Below race case can cause data corruption:  Thread A\t\t\t\tGC thread \t\t\t\t\t- gc_data_segment \t\t\t\t\t - ra_data_block \t\t\t\t\t  - locked meta_inode page - f2fs_inplace_write_data  - invalidate_mapping_pages  : fail to invalidate meta_inode page    due to lock failure or dirty|writeback    status  - f2fs_submit_page_bio  : write last dirty data to old blkaddr \t\t\t\t\t - move_data_block \t\t\t\t\t  - load old data from meta_inode page \t\t\t\t\t  - f2fs_submit_page_write \t\t\t\t\t  : write old data to new blkaddr  Because invalidate_mapping_pages() will skip invalidating page which has unclear status including locked\, dirty\, writeback and so on\, so we need to use truncate_inode_pages_range() instead of invalidate_mapping_pages() to make sure meta_inode page will be dropped.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53690,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: prevent use of deleted inode  syzbot reported a WARNING in nilfs_rmdir. [1]  Because the inode bitmap is corrupted\, an inode with an inode number that should exist as a "".nilfs"" file was reassigned by nilfs_mkdir for ""file0""\, causing an inode duplication during execution.  And this causes an underflow of i_nlink in rmdir operations.  The inode is used twice by the same task to unmount and remove directories "".nilfs"" and ""file0""\, it trigger warning in nilfs_rmdir.  Avoid to this issue\, check i_nlink in nilfs_iget()\, if it is 0\, it means that this inode has been deleted\, and iput is executed to reclaim it.  [1] WARNING: CPU: 1 PID: 5824 at fs/inode.c:407 drop_nlink+0xc4/0x110 fs/inode.c:407 ... Call Trace:  <TASK>  nilfs_rmdir+0x1b0/0x250 fs/nilfs2/namei.c:342  vfs_rmdir+0x3a3/0x510 fs/namei.c:4394  do_rmdir+0x3b5/0x580 fs/namei.c:4453  __do_sys_rmdir fs/namei.c:4472 [inline]  __se_sys_rmdir fs/namei.c:4470 [inline]  __x64_sys_rmdir+0x47/0x50 fs/namei.c:4470  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50012,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  cpufreq: Avoid a bad reference count on CPU node  In the parse_perf_domain function\, if the call to of_parse_phandle_with_args returns an error\, then the reference to the CPU device node that was acquired at the start of the function would not be properly decremented.  Address this by declaring the variable with the __free(device_node) cleanup attribute.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-4641,login,MEDIUM,1:4.13+dfsg1-1+b1,N/A,"A flaw was found in shadow-utils. When asking for a new password\, shadow-utils asks the password twice. If the password fails on the second attempt\, shadow-utils fails in cleaning the buffer used to store the first entry. This may allow an attacker with enough access to retrieve the password from the memory.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31484,perl-base,HIGH,5.36.0-7+deb12u1,N/A,"CPAN.pm before 2.35 does not verify TLS certificates when downloading distributions over HTTPS.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46681,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  pktgen: use cpus_read_lock() in pg_net_init()  I have seen the WARN_ON(smp_processor_id() != cpu) firing in pktgen_thread_worker() during tests.  We must use cpus_read_lock()/cpus_read_unlock() around the for_each_online_cpu(cpu) loop.  While we are at it use WARN_ON_ONCE() to avoid a possible syslog flood.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31486,perl-base,LOW,5.36.0-7+deb12u1,N/A,"HTTP::Tiny before 0.083\, a Perl core module since 5.13.9 and available standalone on CPAN\, has an insecure default TLS configuration where users must opt in to verify certificates.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-9545,libpoppler126,LOW,22.12.0-2+b1,N/A,"An issue was discovered in Poppler 0.74.0. A recursive function call\, in JBIG2Stream::readTextRegion() located in JBIG2Stream.cc\, can be triggered by sending a crafted pdf file to (for example) the pdfimages binary. It allows an attacker to cause Denial of Service (Segmentation fault) or possibly have unspecified other impact. This is related to JBIG2Bitmap::clearToZero.",|tykio/midsommar|
CVE-2024-50135,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-pci: fix race condition between reset and nvme_dev_disable()  nvme_dev_disable() modifies the dev->online_queues field\, therefore nvme_pci_update_nr_queues() should avoid racing against it\, otherwise we could end up passing invalid values to blk_mq_update_nr_hw_queues().   WARNING: CPU: 39 PID: 61303 at drivers/pci/msi/api.c:347           pci_irq_get_affinity+0x187/0x210  Workqueue: nvme-reset-wq nvme_reset_work [nvme]  RIP: 0010:pci_irq_get_affinity+0x187/0x210  Call Trace:   <TASK>   ? blk_mq_pci_map_queues+0x87/0x3c0   ? pci_irq_get_affinity+0x187/0x210   blk_mq_pci_map_queues+0x87/0x3c0   nvme_pci_map_queues+0x189/0x460 [nvme]   blk_mq_update_nr_hw_queues+0x2a/0x40   nvme_reset_work+0x1be/0x2a0 [nvme]  Fix the bug by locking the shutdown_lock mutex before using dev->online_queues. Give up if nvme_dev_disable() is running or if it has been executed already.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26866,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spi: lpspi: Avoid potential use-after-free in probe()  fsl_lpspi_probe() is allocating/disposing memory manually with spi_alloc_host()/spi_alloc_target()\, but uses devm_spi_register_controller(). In case of error after the latter call the memory will be explicitly freed in the probe function by spi_controller_put() call\, but used afterwards by ""devm"" management outside probe() (spi_unregister_controller() <- devm_spi_unregister() below).  Unable to handle kernel NULL pointer dereference at virtual address 0000000000000070 ... Call trace:  kernfs_find_ns  kernfs_find_and_get_ns  sysfs_remove_group  sysfs_remove_groups  device_remove_attrs  device_del  spi_unregister_controller  devm_spi_unregister  release_nodes  devres_release_all  really_probe  driver_probe_device  __device_attach_driver  bus_for_each_drv  __device_attach  device_initial_probe  bus_probe_device  deferred_probe_work_func  process_one_work  worker_thread  kthread  ret_from_fork",|tykio/ner-redact||tykio/smart-ner-redact|
TEMP-0628843-DBAD28,login,LOW,1:4.13+dfsg1-1+b1,N/A,"No description",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-9543,libpoppler126,LOW,22.12.0-2+b1,N/A,"An issue was discovered in Poppler 0.74.0. A recursive function call\, in JBIG2Stream::readGenericBitmap() located in JBIG2Stream.cc\, can be triggered by sending a crafted pdf file to (for example) the pdfseparate binary. It allows an attacker to cause Denial of Service (Segmentation fault) or possibly have unspecified other impact. This is related to JArithmeticDecoder::decodeBit.",|tykio/midsommar|
CVE-2024-40918,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  parisc: Try to fix random segmentation faults in package builds  PA-RISC systems with PA8800 and PA8900 processors have had problems with random segmentation faults for many years.  Systems with earlier processors are much more stable.  Systems with PA8800 and PA8900 processors have a large L2 cache which needs per page flushing for decent performance when a large range is flushed. The combined cache in these systems is also more sensitive to non-equivalent aliases than the caches in earlier systems.  The majority of random segmentation faults that I have looked at appear to be memory corruption in memory allocated using mmap and malloc.  My first attempt at fixing the random faults didn't work. On reviewing the cache code\, I realized that there were two issues which the existing code didn't handle correctly. Both relate to cache move-in. Another issue is that the present bit in PTEs is racy.  1) PA-RISC caches have a mind of their own and they can speculatively load data and instructions for a page as long as there is a entry in the TLB for the page which allows move-in. TLBs are local to each CPU. Thus\, the TLB entry for a page must be purged before flushing the page. This is particularly important on SMP systems.  In some of the flush routines\, the flush routine would be called and then the TLB entry would be purged. This was because the flush routine needed the TLB entry to do the flush.  2) My initial approach to trying the fix the random faults was to try and use flush_cache_page_if_present for all flush operations. This actually made things worse and led to a couple of hardware lockups. It finally dawned on me that some lines weren't being flushed because the pte check code was racy. This resulted in random inequivalent mappings to physical pages.  The __flush_cache_page tmpalias flush sets up its own TLB entry and it doesn't need the existing TLB entry. As long as we can find the pte pointer for the vm page\, we can get the pfn and physical address of the page. We can also purge the TLB entry for the page before doing the flush. Further\, __flush_cache_page uses a special TLB entry that inhibits cache move-in.  When switching page mappings\, we need to ensure that lines are removed from the cache.  It is not sufficient to just flush the lines to memory as they may come back.  This made it clear that we needed to implement all the required flush operations using tmpalias routines. This includes flushes for user and kernel pages.  After modifying the code to use tmpalias flushes\, it became clear that the random segmentation faults were not fully resolved. The frequency of faults was worse on systems with a 64 MB L2 (PA8900) and systems with more CPUs (rp4440).  The warning that I added to flush_cache_page_if_present to detect pages that couldn't be flushed triggered frequently on some systems.  Helge and I looked at the pages that couldn't be flushed and found that the PTE was either cleared or for a swap page. Ignoring pages that were swapped out seemed okay but pages with cleared PTEs seemed problematic.  I looked at routines related to pte_clear and noticed ptep_clear_flush. The default implementation just flushes the TLB entry. However\, it was obvious that on parisc we need to flush the cache page as well. If we don't flush the cache page\, stale lines will be left in the cache and cause random corruption. Once a PTE is cleared\, there is no way to find the physical address associated with the PTE and flush the associated page at a later time.  I implemented an updated change with a parisc specific version of ptep_clear_flush. It fixed the random data corruption on Helge's rp4440 and rp3440\, as well as on my c8000.  At this point\, I realized that I could restore the code where we only flush in flush_cache_page_if_present if the page has been accessed. However\, for this\, we also need to flush the cache when the accessed bit is cleared in ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-16376,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"An issue was discovered in OpenJPEG 2.3.0. A heap-based buffer overflow was discovered in the function t2_encode_packet in lib/openmj2/t2.c. The vulnerability causes an out-of-bounds write\, which may lead to remote denial of service or possibly unspecified other impact.",|tykio/midsommar|
CVE-2018-16375,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"An issue was discovered in OpenJPEG 2.3.0. Missing checks for header_info.height and header_info.width in the function pnmtoimage in bin/jpwl/convert.c can lead to a heap-based buffer overflow.",|tykio/midsommar|
CVE-2024-50229,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix potential deadlock with newly created symlinks  Syzbot reported that page_symlink()\, called by nilfs_symlink()\, triggers memory reclamation involving the filesystem layer\, which can result in circular lock dependencies among the reader/writer semaphore nilfs->ns_segctor_sem\, s_writers percpu_rwsem (intwrite) and the fs_reclaim pseudo lock.  This is because after commit 21fc61c73c39 (""don't put symlink bodies in pagecache into highmem"")\, the gfp flags of the page cache for symbolic links are overwritten to GFP_KERNEL via inode_nohighmem().  This is not a problem for symlinks read from the backing device\, because the __GFP_FS flag is dropped after inode_nohighmem() is called.  However\, when a new symlink is created with nilfs_symlink()\, the gfp flags remain overwritten to GFP_KERNEL.  Then\, memory allocation called from page_symlink() etc.  triggers memory reclamation including the FS layer\, which may call nilfs_evict_inode() or nilfs_dirty_inode().  And these can cause a deadlock if they are called while nilfs->ns_segctor_sem is held:  Fix this issue by dropping the __GFP_FS flag from the page cache GFP flags of newly created symlinks in the same way that nilfs_new_inode() and __nilfs_read_inode() do\, as a workaround until we adopt nofs allocation scope consistently or improve the locking constraints.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56725,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in otx2_dcbnl.c  Add error pointer check after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21753,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix use-after-free when attempting to join an aborted transaction  When we are trying to join the current transaction and if it's aborted\, we read its 'aborted' field after unlocking fs_info->trans_lock and without holding any extra reference count on it. This means that a concurrent task that is aborting the transaction may free the transaction before we read its 'aborted' field\, leading to a use-after-free.  Fix this by reading the 'aborted' field while holding fs_info->trans_lock since any freeing task must first acquire that lock and set fs_info->running_transaction to NULL before freeing the transaction.  This was reported by syzbot and Dmitry with the following stack traces from KASAN:     ==================================================================    BUG: KASAN: slab-use-after-free in join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c:278    Read of size 4 at addr ffff888011839024 by task kworker/u4:9/1128     CPU: 0 UID: 0 PID: 1128 Comm: kworker/u4:9 Not tainted 6.13.0-rc7-syzkaller-00019-gc45323b7560e #0    Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014    Workqueue: events_unbound btrfs_async_reclaim_data_space    Call Trace:     <TASK>     __dump_stack lib/dump_stack.c:94 [inline]     dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120     print_address_description mm/kasan/report.c:378 [inline]     print_report+0x169/0x550 mm/kasan/report.c:489     kasan_report+0x143/0x180 mm/kasan/report.c:602     join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c:278     start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c:697     flush_space+0x448/0xcf0 fs/btrfs/space-info.c:803     btrfs_async_reclaim_data_space+0x159/0x510 fs/btrfs/space-info.c:1321     process_one_work kernel/workqueue.c:3236 [inline]     process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3317     worker_thread+0x870/0xd30 kernel/workqueue.c:3398     kthread+0x2f0/0x390 kernel/kthread.c:389     ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147     ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244     </TASK>     Allocated by task 5315:     kasan_save_stack mm/kasan/common.c:47 [inline]     kasan_save_track+0x3f/0x80 mm/kasan/common.c:68     poison_kmalloc_redzone mm/kasan/common.c:377 [inline]     __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:394     kasan_kmalloc include/linux/kasan.h:260 [inline]     __kmalloc_cache_noprof+0x243/0x390 mm/slub.c:4329     kmalloc_noprof include/linux/slab.h:901 [inline]     join_transaction+0x144/0xda0 fs/btrfs/transaction.c:308     start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c:697     btrfs_create_common+0x1b2/0x2e0 fs/btrfs/inode.c:6572     lookup_open fs/namei.c:3649 [inline]     open_last_lookups fs/namei.c:3748 [inline]     path_openat+0x1c03/0x3590 fs/namei.c:3984     do_filp_open+0x27f/0x4e0 fs/namei.c:4014     do_sys_openat2+0x13e/0x1d0 fs/open.c:1402     do_sys_open fs/open.c:1417 [inline]     __do_sys_creat fs/open.c:1495 [inline]     __se_sys_creat fs/open.c:1489 [inline]     __x64_sys_creat+0x123/0x170 fs/open.c:1489     do_syscall_x64 arch/x86/entry/common.c:52 [inline]     do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83     entry_SYSCALL_64_after_hwframe+0x77/0x7f     Freed by task 5336:     kasan_save_stack mm/kasan/common.c:47 [inline]     kasan_save_track+0x3f/0x80 mm/kasan/common.c:68     kasan_save_free_info+0x40/0x50 mm/kasan/generic.c:582     poison_slab_object mm/kasan/common.c:247 [inline]     __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264     kasan_slab_free include/linux/kasan.h:233 [inline]     slab_free_hook mm/slub.c:2353 [inline]     slab_free mm/slub.c:4613 [inline]     kfree+0x196/0x430 mm/slub.c:4761     cleanup_transaction fs/btrfs/transaction.c:2063 [inline]     btrfs_commit_transaction+0x2c97/0x3720 fs/btrfs/transaction.c:2598     insert_balance_item+0x1284/0x20b0 fs/btrfs/volumes.c:3757     btrfs_balance+0x992/ ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2005-3660,linux-libc-dev,LOW,6.1.115-1,N/A,"Linux kernel 2.4 and 2.6 allows attackers to cause a denial of service (memory exhaustion and panic) by creating a large number of connected file descriptors or socketpairs and setting a large data transfer buffer\, then preventing Linux from being able to finish the transfer by causing the process to become a zombie\, or closing the file descriptor without closing an associated reference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21891,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipvlan: ensure network headers are in skb linear part  syzbot found that ipvlan_process_v6_outbound() was assuming the IPv6 network header isis present in skb->head [1]  Add the needed pskb_network_may_pull() calls for both IPv4 and IPv6 handlers.  [1] BUG: KMSAN: uninit-value in __ipv6_addr_type+0xa2/0x490 net/ipv6/addrconf_core.c:47   __ipv6_addr_type+0xa2/0x490 net/ipv6/addrconf_core.c:47   ipv6_addr_type include/net/ipv6.h:555 [inline]   ip6_route_output_flags_noref net/ipv6/route.c:2616 [inline]   ip6_route_output_flags+0x51/0x720 net/ipv6/route.c:2651   ip6_route_output include/net/ip6_route.h:93 [inline]   ipvlan_route_v6_outbound+0x24e/0x520 drivers/net/ipvlan/ipvlan_core.c:476   ipvlan_process_v6_outbound drivers/net/ipvlan/ipvlan_core.c:491 [inline]   ipvlan_process_outbound drivers/net/ipvlan/ipvlan_core.c:541 [inline]   ipvlan_xmit_mode_l3 drivers/net/ipvlan/ipvlan_core.c:605 [inline]   ipvlan_queue_xmit+0xd72/0x1780 drivers/net/ipvlan/ipvlan_core.c:671   ipvlan_start_xmit+0x5b/0x210 drivers/net/ipvlan/ipvlan_main.c:223   __netdev_start_xmit include/linux/netdevice.h:5150 [inline]   netdev_start_xmit include/linux/netdevice.h:5159 [inline]   xmit_one net/core/dev.c:3735 [inline]   dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3751   sch_direct_xmit+0x399/0xd40 net/sched/sch_generic.c:343   qdisc_restart net/sched/sch_generic.c:408 [inline]   __qdisc_run+0x14da/0x35d0 net/sched/sch_generic.c:416   qdisc_run+0x141/0x4d0 include/net/pkt_sched.h:127   net_tx_action+0x78b/0x940 net/core/dev.c:5484   handle_softirqs+0x1a0/0x7c0 kernel/softirq.c:561   __do_softirq+0x14/0x1a kernel/softirq.c:595   do_softirq+0x9a/0x100 kernel/softirq.c:462   __local_bh_enable_ip+0x9f/0xb0 kernel/softirq.c:389   local_bh_enable include/linux/bottom_half.h:33 [inline]   rcu_read_unlock_bh include/linux/rcupdate.h:919 [inline]   __dev_queue_xmit+0x2758/0x57d0 net/core/dev.c:4611   dev_queue_xmit include/linux/netdevice.h:3311 [inline]   packet_xmit+0x9c/0x6c0 net/packet/af_packet.c:276   packet_snd net/packet/af_packet.c:3132 [inline]   packet_sendmsg+0x93e0/0xa7e0 net/packet/af_packet.c:3164   sock_sendmsg_nosec net/socket.c:718 [inline]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56724,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mfd: intel_soc_pmic_bxtwc: Use IRQ domain for TMU device  While design wise the idea of converting the driver to use the hierarchy of the IRQ chips is correct\, the implementation has (inherited) flaws. This was unveiled when platform_get_irq() had started WARN() on IRQ 0 that is supposed to be a Linux IRQ number (also known as vIRQ).  Rework the driver to respect IRQ domain when creating each MFD device separately\, as the domain is not the same for all of them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53198,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  xen: Fix the issue of resource not being properly released in xenbus_dev_probe()  This patch fixes an issue in the function xenbus_dev_probe(). In the xenbus_dev_probe() function\, within the if (err) branch at line 313\, the program incorrectly returns err directly without releasing the resources allocated by err = drv->probe(dev\, id). As the return value is non-zero\, the upper layers assume the processing logic has failed. However\, the probe operation was performed earlier without a corresponding remove operation. Since the probe actually allocates resources\, failing to perform the remove operation could lead to problems.  To fix this issue\, we followed the resource release logic of the xenbus_dev_remove() function by adding a new block fail_remove before the fail_put block. After entering the branch if (err) at line 313\, the function will use a goto statement to jump to the fail_remove block\, ensuring that the previously acquired resources are correctly released\, thus preventing the reference count leak.  This bug was identified by an experimental static analysis tool developed by our team. The tool specializes in analyzing reference count operations and detecting potential issues where resources are not properly managed. In this case\, the tool flagged the missing release operation as a potential problem\, which led to the development of this patch.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21892,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Fix the recovery flow of the UMR QP  This patch addresses an issue in the recovery flow of the UMR QP\, ensuring tasks do not get stuck\, as highlighted by the call trace [1].  During recovery\, before transitioning the QP to the RESET state\, the software must wait for all outstanding WRs to complete.  Failing to do so can cause the firmware to skip sending some flushed CQEs with errors and simply discard them upon the RESET\, as per the IB specification.  This race condition can result in lost CQEs and tasks becoming stuck.  To resolve this\, the patch sends a final WR which serves only as a barrier before moving the QP state to RESET.  Once a CQE is received for that final WR\, it guarantees that no outstanding WRs remain\, making it safe to transition the QP to RESET and subsequently back to RTS\, restoring proper functionality.  Note: For the barrier WR\, we simply reuse the failed and ready WR. Since the QP is in an error state\, it will only receive IB_WC_WR_FLUSH_ERR. However\, as it serves only as a barrier we don't care about its status.  [1] INFO: task rdma_resource_l:1922 blocked for more than 120 seconds. Tainted: G        W          6.12.0-rc7+ #1626 ""echo 0 > /proc/sys/kernel/hung_task_timeout_secs"" disables this message. task:rdma_resource_l state:D stack:0  pid:1922 tgid:1922  ppid:1369      flags:0x00004004 Call Trace: <TASK> __schedule+0x420/0xd30 schedule+0x47/0x130 schedule_timeout+0x280/0x300 ? mark_held_locks+0x48/0x80 ? lockdep_hardirqs_on_prepare+0xe5/0x1a0 wait_for_completion+0x75/0x130 mlx5r_umr_post_send_wait+0x3c2/0x5b0 [mlx5_ib] ? __pfx_mlx5r_umr_done+0x10/0x10 [mlx5_ib] mlx5r_umr_revoke_mr+0x93/0xc0 [mlx5_ib] __mlx5_ib_dereg_mr+0x299/0x520 [mlx5_ib] ? _raw_spin_unlock_irq+0x24/0x40 ? wait_for_completion+0xfe/0x130 ? rdma_restrack_put+0x63/0xe0 [ib_core] ib_dereg_mr_user+0x5f/0x120 [ib_core] ? lock_release+0xc6/0x280 destroy_hw_idr_uobject+0x1d/0x60 [ib_uverbs] uverbs_destroy_uobject+0x58/0x1d0 [ib_uverbs] uobj_destroy+0x3f/0x70 [ib_uverbs] ib_uverbs_cmd_verbs+0x3e4/0xbb0 [ib_uverbs] ? __pfx_uverbs_destroy_def_handler+0x10/0x10 [ib_uverbs] ? __lock_acquire+0x64e/0x2080 ? mark_held_locks+0x48/0x80 ? find_held_lock+0x2d/0xa0 ? lock_acquire+0xc1/0x2f0 ? ib_uverbs_ioctl+0xcb/0x170 [ib_uverbs] ? __fget_files+0xc3/0x1b0 ib_uverbs_ioctl+0xe7/0x170 [ib_uverbs] ? ib_uverbs_ioctl+0xcb/0x170 [ib_uverbs] __x64_sys_ioctl+0x1b0/0xa70 do_syscall_64+0x6b/0x140 entry_SYSCALL_64_after_hwframe+0x76/0x7e RIP: 0033:0x7f99c918b17b RSP: 002b:00007ffc766d0468 EFLAGS: 00000246 ORIG_RAX:      0000000000000010 RAX: ffffffffffffffda RBX: 00007ffc766d0578 RCX:      00007f99c918b17b RDX: 00007ffc766d0560 RSI: 00000000c0181b01 RDI:      0000000000000003 RBP: 00007ffc766d0540 R08: 00007f99c8f99010 R09:      000000000000bd7e R10: 00007f99c94c1c70 R11: 0000000000000246 R12:      00007ffc766d0530 R13: 000000000000001c R14: 0000000040246a80 R15:      0000000000000000 </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21751,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: HWS\, change error flow on matcher disconnect  Currently\, when firmware failure occurs during matcher disconnect flow\, the error flow of the function reconnects the matcher back and returns an error\, which continues running the calling function and eventually frees the matcher that is being disconnected. This leads to a case where we have a freed matcher on the matchers list\, which in turn leads to use-after-free and eventual crash.  This patch fixes that by not trying to reconnect the matcher back when some FW command fails during disconnect.  Note that we're dealing here with FW error. We can't overcome this problem. This might lead to bad steering state (e.g. wrong connection between matchers)\, and will also lead to resource leakage\, as it is the case with any other error handling during resource destruction.  However\, the goal here is to allow the driver to continue and not crash the machine with use-after-free error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56727,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in otx2_flows.c  Adding error pointer check after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21750,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: brcmfmac: Check the return value of of_property_read_string_index()  Somewhen between 6.10 and 6.11 the driver started to crash on my MacBookPro14\,3. The property doesn't exist and 'tmp' remains uninitialized\, so we pass a random pointer to devm_kstrdup().  The crash I am getting looks like this:  BUG: unable to handle page fault for address: 00007f033c669379 PF: supervisor read access in kernel mode PF: error_code(0x0001) - permissions violation PGD 8000000101341067 P4D 8000000101341067 PUD 101340067 PMD 1013bb067 PTE 800000010aee9025 Oops: Oops: 0001 [#1] SMP PTI CPU: 4 UID: 0 PID: 827 Comm: (udev-worker) Not tainted 6.11.8-gentoo #1 Hardware name: Apple Inc. MacBookPro14\,3/Mac-551B86E5744E2388\, BIOS 529.140.2.0.0 06/23/2024 RIP: 0010:strlen+0x4/0x30 Code: f7 75 ec 31 c0 c3 cc cc cc cc 48 89 f8 c3 cc cc cc cc 0f 1f 40 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 0f 1e fa <80> 3f 00 74 14 48 89 f8 48 83 c0 01 80 38 00 75 f7 48 29 f8 c3 cc RSP: 0018:ffffb4aac0683ad8 EFLAGS: 00010202 RAX: 00000000ffffffea RBX: 00007f033c669379 RCX: 0000000000000001 RDX: 0000000000000cc0 RSI: 00007f033c669379 RDI: 00007f033c669379 RBP: 00000000ffffffea R08: 0000000000000000 R09: 00000000c0ba916a R10: ffffffffffffffff R11: ffffffffb61ea260 R12: ffff91f7815b50c8 R13: 0000000000000cc0 R14: ffff91fafefffe30 R15: ffffb4aac0683b30 FS:  00007f033ccbe8c0(0000) GS:ffff91faeed00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f033c669379 CR3: 0000000107b1e004 CR4: 00000000003706f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  ? __die+0x23/0x70  ? page_fault_oops+0x149/0x4c0  ? raw_spin_rq_lock_nested+0xe/0x20  ? sched_balance_newidle+0x22b/0x3c0  ? update_load_avg+0x78/0x770  ? exc_page_fault+0x6f/0x150  ? asm_exc_page_fault+0x26/0x30  ? __pfx_pci_conf1_write+0x10/0x10  ? strlen+0x4/0x30  devm_kstrdup+0x25/0x70  brcmf_of_probe+0x273/0x350 [brcmfmac]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56726,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in cn10k.c  Add error pointer check after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21894,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: enetc: VFs do not support HWTSTAMP_TX_ONESTEP_SYNC  Actually ENETC VFs do not support HWTSTAMP_TX_ONESTEP_SYNC because only ENETC PF can access PMa_SINGLE_STEP registers. And there will be a crash if VFs are used to test one-step timestamp\, the crash log as follows.  [  129.110909] Unable to handle kernel paging request at virtual address 00000000000080c0 [  129.287769] Call trace: [  129.290219]  enetc_port_mac_wr+0x30/0xec (P) [  129.294504]  enetc_start_xmit+0xda4/0xe74 [  129.298525]  enetc_xmit+0x70/0xec [  129.301848]  dev_hard_start_xmit+0x98/0x118",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-34872,libpoppler126,MEDIUM,22.12.0-2+b1,N/A,"A vulnerability in Outline.cc for Poppler prior to 23.06.0 allows a remote attacker to cause a Denial of Service (DoS) (crash) via a crafted PDF file in OutlineItem::open.",|tykio/midsommar|
CVE-2025-21756,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  vsock: Keep the binding until socket destruction  Preserve sockets bindings; this includes both resulting from an explicit bind() and those implicitly bound through autobind during connect().  Prevents socket unbinding during a transport reassignment\, which fixes a use-after-free:      1. vsock_create() (refcnt=1) calls vsock_insert_unbound() (refcnt=2)     2. transport->release() calls vsock_remove_bound() without checking if        sk was bound and moved to bound list (refcnt=1)     3. vsock_bind() assumes sk is in unbound list and before        __vsock_insert_bound(vsock_bound_sockets()) calls        __vsock_remove_bound() which does:            list_del_init(&vsk->bound_table); // nop            sock_put(&vsk->sk);               // refcnt=0  BUG: KASAN: slab-use-after-free in __vsock_bind+0x62e/0x730 Read of size 4 at addr ffff88816b46a74c by task a.out/2057  dump_stack_lvl+0x68/0x90  print_report+0x174/0x4f6  kasan_report+0xb9/0x190  __vsock_bind+0x62e/0x730  vsock_bind+0x97/0xe0  __sys_bind+0x154/0x1f0  __x64_sys_bind+0x6e/0xb0  do_syscall_64+0x93/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Allocated by task 2057:  kasan_save_stack+0x1e/0x40  kasan_save_track+0x10/0x30  __kasan_slab_alloc+0x85/0x90  kmem_cache_alloc_noprof+0x131/0x450  sk_prot_alloc+0x5b/0x220  sk_alloc+0x2c/0x870  __vsock_create.constprop.0+0x2e/0xb60  vsock_create+0xe4/0x420  __sock_create+0x241/0x650  __sys_socket+0xf2/0x1a0  __x64_sys_socket+0x6e/0xb0  do_syscall_64+0x93/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 2057:  kasan_save_stack+0x1e/0x40  kasan_save_track+0x10/0x30  kasan_save_free_info+0x37/0x60  __kasan_slab_free+0x4b/0x70  kmem_cache_free+0x1a1/0x590  __sk_destruct+0x388/0x5a0  __vsock_bind+0x5e1/0x730  vsock_bind+0x97/0xe0  __sys_bind+0x154/0x1f0  __x64_sys_bind+0x6e/0xb0  do_syscall_64+0x93/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  refcount_t: addition on 0; use-after-free. WARNING: CPU: 7 PID: 2057 at lib/refcount.c:25 refcount_warn_saturate+0xce/0x150 RIP: 0010:refcount_warn_saturate+0xce/0x150  __vsock_bind+0x66d/0x730  vsock_bind+0x97/0xe0  __sys_bind+0x154/0x1f0  __x64_sys_bind+0x6e/0xb0  do_syscall_64+0x93/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e  refcount_t: underflow; use-after-free. WARNING: CPU: 7 PID: 2057 at lib/refcount.c:28 refcount_warn_saturate+0xee/0x150 RIP: 0010:refcount_warn_saturate+0xee/0x150  vsock_remove_bound+0x187/0x1e0  __vsock_release+0x383/0x4a0  vsock_release+0x90/0x120  __sock_release+0xa3/0x250  sock_close+0x14/0x20  __fput+0x359/0xa80  task_work_run+0x107/0x1d0  do_exit+0x847/0x2560  do_group_exit+0xb8/0x250  __x64_sys_exit_group+0x3a/0x50  x64_sys_call+0xfec/0x14f0  do_syscall_64+0x93/0x1b0  entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56720,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\, sockmap: Several fixes to bpf_msg_pop_data  Several fixes to bpf_msg_pop_data\, 1. In sk_msg_shift_left\, we should put_page 2. if (len == 0)\, return early is better 3. pop the entire sk_msg (last == msg->sg.size) should be supported 4. Fix for the value of variable ""a"" 5. In sk_msg_shift_left\, after shifting\, i has already pointed to the next element. Addtional sk_msg_iter_var_next may result in BUG.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56723,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mfd: intel_soc_pmic_bxtwc: Use IRQ domain for PMIC devices  While design wise the idea of converting the driver to use the hierarchy of the IRQ chips is correct\, the implementation has (inherited) flaws. This was unveiled when platform_get_irq() had started WARN() on IRQ 0 that is supposed to be a Linux IRQ number (also known as vIRQ).  Rework the driver to respect IRQ domain when creating each MFD device separately\, as the domain is not the same for all of them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56679,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in otx2_common.c  Add error pointer check after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2011-3374,apt,LOW,2.6.1,N/A,"It was found that apt-key in apt\, all versions\, do not correctly validate gpg keys with the master keyring\, leading to a potential man-in-the-middle attack.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56722,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/hns: Fix cpu stuck caused by printings during reset  During reset\, cmd to destroy resources such as qp\, cq\, and mr may fail\, and error logs will be printed. When a large number of resources are destroyed\, there will be lots of printings\, and it may lead to a cpu stuck.  Delete some unnecessary printings and replace other printing functions in these paths with the ratelimited version.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56678,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/mm/fault: Fix kfence page fault reporting  copy_from_kernel_nofault() can be called when doing read of /proc/kcore. /proc/kcore can have some unmapped kfence objects which when read via copy_from_kernel_nofault() can cause page faults. Since *_nofault() functions define their own fixup table for handling fault\, use that instead of asking kfence to handle such faults.  Hence we search the exception tables for the nip which generated the fault. If there is an entry then we let the fixup table handler handle the page fault by returning an error from within ___do_page_fault().  This can be easily triggered if someone tries to do dd from /proc/kcore. eg. dd if=/proc/kcore of=/dev/null bs=1M  Some example false negatives:    ===============================   BUG: KFENCE: invalid read in copy_from_kernel_nofault+0x9c/0x1a0   Invalid read at 0xc0000000fdff0000:    copy_from_kernel_nofault+0x9c/0x1a0    0xc00000000665f950    read_kcore_iter+0x57c/0xa04    proc_reg_read_iter+0xe4/0x16c    vfs_read+0x320/0x3ec    ksys_read+0x90/0x154    system_call_exception+0x120/0x310    system_call_vectored_common+0x15c/0x2ec    BUG: KFENCE: use-after-free read in copy_from_kernel_nofault+0x9c/0x1a0   Use-after-free read at 0xc0000000fe050000 (in kfence-#2):    copy_from_kernel_nofault+0x9c/0x1a0    0xc00000000665f950    read_kcore_iter+0x57c/0xa04    proc_reg_read_iter+0xe4/0x16c    vfs_read+0x320/0x3ec    ksys_read+0x90/0x154    system_call_exception+0x120/0x310    system_call_vectored_common+0x15c/0x2ec",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21898,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ftrace: Avoid potential division by zero in function_stat_show()  Check whether denominator expression x * (x - 1) * 1000 mod {2^32\, 2^64} produce zero and skip stddev computation in that case.  For now don't care about rec->counter * rec->counter overflow because rec->time * rec->time overflow will likely happen earlier.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56677,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/fadump: Move fadump_cma_init to setup_arch() after initmem_init()  During early init CMA_MIN_ALIGNMENT_BYTES can be PAGE_SIZE\, since pageblock_order is still zero and it gets initialized later during initmem_init() e.g. setup_arch() -> initmem_init() -> sparse_init() -> set_pageblock_order()  One such use case where this causes issue is - early_setup() -> early_init_devtree() -> fadump_reserve_mem() -> fadump_cma_init()  This causes CMA memory alignment check to be bypassed in cma_init_reserved_mem(). Then later cma_activate_area() can hit a VM_BUG_ON_PAGE(pfn & ((1 << order) - 1)) if the reserved memory area was not pageblock_order aligned.  Fix it by moving the fadump_cma_init() after initmem_init()\, where other such cma reservations also gets called.  <stack trace> ============== page: refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x10010 flags: 0x13ffff800000000(node=1|zone=0|lastcpupid=0x7ffff) CMA raw: 013ffff800000000 5deadbeef0000100 5deadbeef0000122 0000000000000000 raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000 page dumped because: VM_BUG_ON_PAGE(pfn & ((1 << order) - 1)) ------------[ cut here ]------------ kernel BUG at mm/page_alloc.c:778!  Call Trace: __free_one_page+0x57c/0x7b0 (unreliable) free_pcppages_bulk+0x1a8/0x2c8 free_unref_page_commit+0x3d4/0x4e4 free_unref_page+0x458/0x6d0 init_cma_reserved_pageblock+0x114/0x198 cma_init_reserved_areas+0x270/0x3e0 do_one_initcall+0x80/0x2f8 kernel_init_freeable+0x33c/0x530 kernel_init+0x34/0x26c ret_from_kernel_user_thread+0x14/0x1c",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49945,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/ncsi: Disable the ncsi work before freeing the associated structure  The work function can run after the ncsi device is freed\, resulting in use-after-free bugs or kernel panic.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21899,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  tracing: Fix bad hist from corrupting named_triggers list  The following commands causes a crash:   ~# cd /sys/kernel/tracing/events/rcu/rcu_callback  ~# echo 'hist:name=bad:keys=common_pid:onmax(bogus).save(common_pid)' > trigger  bash: echo: write error: Invalid argument  ~# echo 'hist:name=bad:keys=common_pid' > trigger  Because the following occurs:  event_trigger_write() {   trigger_process_regex() {     event_hist_trigger_parse() {        data = event_trigger_alloc(..);        event_trigger_register(..\, data) {         cmd_ops->reg(..\, data\, ..) [hist_register_trigger()] {           data->ops->init() [event_hist_trigger_init()] {             save_named_trigger(name\, data) {               list_add(&data->named_list\, &named_triggers);             }           }         }       }        ret = create_actions(); (return -EINVAL)       if (ret)         goto out_unreg; [..]       ret = hist_trigger_enable(data\, ...) {         list_add_tail_rcu(&data->list\, &file->triggers); <<<---- SKIPPED!!! (this is important!) [..]  out_unreg:       event_hist_unregister(..\, data) {         cmd_ops->unreg(..\, data\, ..) [hist_unregister_trigger()] {           list_for_each_entry(iter\, &file->triggers\, list) {             if (!hist_trigger_match(data\, iter\, named_data\, false))   <- never matches                 continue;             [..]             test = iter;           }           if (test && test->ops->free) <<<-- test is NULL              test->ops->free(test) [event_hist_trigger_free()] {               [..]               if (data->name)                 del_named_trigger(data) {                   list_del(&data->named_list);  <<<<-- NEVER gets removed!                 }               }            }          }           [..]          kfree(data); <<<-- frees item but it is still on list  The next time a hist with name is registered\, it causes an u-a-f bug and the kernel can crash.  Move the code around such that if event_trigger_register() succeeds\, the next thing called is hist_trigger_enable() which adds it to the list.  A bunch of actions is called if get_named_trigger_data() returns false. But that doesn't need to be called after event_trigger_register()\, so it can be moved up\, allowing event_trigger_register() to be called just before hist_trigger_enable() keeping them together and allowing the file->triggers to be properly populated.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53190,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtlwifi: Drastically reduce the attempts to read efuse in case of failures  Syzkaller reported a hung task with uevent_show() on stack trace. That specific issue was addressed by another commit [0]\, but even with that fix applied (for example\, running v6.12-rc5) we face another type of hung task that comes from the same reproducer [1]. By investigating that\, we could narrow it to the following path:  (a) Syzkaller emulates a Realtek USB WiFi adapter using raw-gadget and dummy_hcd infrastructure.  (b) During the probe of rtl8192cu\, the driver ends-up performing an efuse read procedure (which is related to EEPROM load IIUC)\, and here lies the issue: the function read_efuse() calls read_efuse_byte() many times\, as loop iterations depending on the efuse size (in our example\, 512 in total).  This procedure for reading efuse bytes relies in a loop that performs an I/O read up to *10k* times in case of failures. We measured the time of the loop inside read_efuse_byte() alone\, and in this reproducer (which involves the dummy_hcd emulation layer)\, it takes 15 seconds each. As a consequence\, we have the driver stuck in its probe routine for big time\, exposing a stack trace like below if we attempt to reboot the system\, for example:  task:kworker/0:3 state:D stack:0 pid:662 tgid:662 ppid:2 flags:0x00004000 Workqueue: usb_hub_wq hub_event Call Trace:  __schedule+0xe22/0xeb6  schedule_timeout+0xe7/0x132  __wait_for_common+0xb5/0x12e  usb_start_wait_urb+0xc5/0x1ef  ? usb_alloc_urb+0x95/0xa4  usb_control_msg+0xff/0x184  _usbctrl_vendorreq_sync+0xa0/0x161  _usb_read_sync+0xb3/0xc5  read_efuse_byte+0x13c/0x146  read_efuse+0x351/0x5f0  efuse_read_all_map+0x42/0x52  rtl_efuse_shadow_map_update+0x60/0xef  rtl_get_hwinfo+0x5d/0x1c2  rtl92cu_read_eeprom_info+0x10a/0x8d5  ? rtl92c_read_chip_version+0x14f/0x17e  rtl_usb_probe+0x323/0x851  usb_probe_interface+0x278/0x34b  really_probe+0x202/0x4a4  __driver_probe_device+0x166/0x1b2  driver_probe_device+0x2f/0xd8  [...]  We propose hereby to drastically reduce the attempts of doing the I/O reads in case of failures\, restricted to USB devices (given that they're inherently slower than PCIe ones). By retrying up to 10 times (instead of 10000)\, we got reponsiveness in the reproducer\, while seems reasonable to believe that there's no sane USB device implementation in the field requiring this amount of retries at every I/O read in order to properly work. Based on that assumption\, it'd be good to have it backported to stable but maybe not since driver implementation (the 10k number comes from day 0)\, perhaps up to 6.x series makes sense.  [0] Commit 15fffc6a5624 (""driver core: Fix uevent_show() vs driver detach race"")  [1] A note about that: this syzkaller report presents multiple reproducers that differs by the type of emulated USB device. For this specific case\, check the entry from 2024/08/08 06:23 in the list of crashes; the C repro is available at https://syzkaller.appspot.com/text?tag=ReproC&x=1521fc83980000.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21759,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: mcast: extend RCU protection in igmp6_send()  igmp6_send() can be called without RTNL or RCU being held.  Extend RCU protection so that we can safely fetch the net pointer and avoid a potential UAF.  Note that we no longer can use sock_alloc_send_skb() because ipv6.igmp_sk uses GFP_KERNEL allocations which can sleep.  Instead use alloc_skb() and charge the net->ipv6.igmp_sk socket under RCU protection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56675,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix UAF via mismatching bpf_prog/attachment RCU flavors  Uprobes always use bpf_prog_run_array_uprobe() under tasks-trace-RCU protection. But it is possible to attach a non-sleepable BPF program to a uprobe\, and non-sleepable BPF programs are freed via normal RCU (see __bpf_prog_put_noref()). This leads to UAF of the bpf_prog because a normal RCU grace period does not imply a tasks-trace-RCU grace period.  Fix it by explicitly waiting for a tasks-trace-RCU grace period after removing the attachment of a bpf_prog to a perf_event.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21758,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: mcast: add RCU protection to mld_newpack()  mld_newpack() can be called without RTNL or RCU being held.  Note that we no longer can use sock_alloc_send_skb() because ipv6.igmp_sk uses GFP_KERNEL allocations which can sleep.  Instead use alloc_skb() and charge the net->ipv6.igmp_sk socket under RCU protection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-29088,libsqlite3-0,MEDIUM,3.40.1-2+deb12u1,N/A,"In SQLite 3.49.0 before 3.49.1\, certain argument values to sqlite3_db_config (in the C-language API) can cause a denial of service (application crash). An sz*nBig multiplication is not cast to a 64-bit integer\, and consequently some memory allocations may be incorrect.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56729,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: Initialize cfid->tcon before performing network ops  Avoid leaking a tcon ref when a lease break races with opening the cached directory. Processing the leak break might take a reference to the tcon in cached_dir_lease_break() and then fail to release the ref in cached_dir_offload_close\, since cfid->tcon is still NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53195,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: arm64: Get rid of userspace_irqchip_in_use  Improper use of userspace_irqchip_in_use led to syzbot hitting the following WARN_ON() in kvm_timer_update_irq():  WARNING: CPU: 0 PID: 3281 at arch/arm64/kvm/arch_timer.c:459 kvm_timer_update_irq+0x21c/0x394 Call trace:   kvm_timer_update_irq+0x21c/0x394 arch/arm64/kvm/arch_timer.c:459   kvm_timer_vcpu_reset+0x158/0x684 arch/arm64/kvm/arch_timer.c:968   kvm_reset_vcpu+0x3b4/0x560 arch/arm64/kvm/reset.c:264   kvm_vcpu_set_target arch/arm64/kvm/arm.c:1553 [inline]   kvm_arch_vcpu_ioctl_vcpu_init arch/arm64/kvm/arm.c:1573 [inline]   kvm_arch_vcpu_ioctl+0x112c/0x1b3c arch/arm64/kvm/arm.c:1695   kvm_vcpu_ioctl+0x4ec/0xf74 virt/kvm/kvm_main.c:4658   vfs_ioctl fs/ioctl.c:51 [inline]   __do_sys_ioctl fs/ioctl.c:907 [inline]   __se_sys_ioctl fs/ioctl.c:893 [inline]   __arm64_sys_ioctl+0x108/0x184 fs/ioctl.c:893   __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]   invoke_syscall+0x78/0x1b8 arch/arm64/kernel/syscall.c:49   el0_svc_common+0xe8/0x1b0 arch/arm64/kernel/syscall.c:132   do_el0_svc+0x40/0x50 arch/arm64/kernel/syscall.c:151   el0_svc+0x54/0x14c arch/arm64/kernel/entry-common.c:712   el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:730   el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:598  The following sequence led to the scenario:  - Userspace creates a VM and a vCPU.  - The vCPU is initialized with KVM_ARM_VCPU_PMU_V3 during    KVM_ARM_VCPU_INIT.  - Without any other setup\, such as vGIC or vPMU\, userspace issues    KVM_RUN on the vCPU. Since the vPMU is requested\, but not setup\,    kvm_arm_pmu_v3_enable() fails in kvm_arch_vcpu_run_pid_change().    As a result\, KVM_RUN returns after enabling the timer\, but before    incrementing 'userspace_irqchip_in_use':    kvm_arch_vcpu_run_pid_change()        ret = kvm_arm_pmu_v3_enable()            if (!vcpu->arch.pmu.created)                return -EINVAL;        if (ret)            return ret;        [...]        if (!irqchip_in_kernel(kvm))            static_branch_inc(&userspace_irqchip_in_use);  - Userspace ignores the error and issues KVM_ARM_VCPU_INIT again.    Since the timer is already enabled\, control moves through the    following flow\, ultimately hitting the WARN_ON():    kvm_timer_vcpu_reset()        if (timer->enabled)           kvm_timer_update_irq()               if (!userspace_irqchip())                   ret = kvm_vgic_inject_irq()                       ret = vgic_lazy_init()                           if (unlikely(!vgic_initialized(kvm)))                               if (kvm->arch.vgic.vgic_model !=                                   KVM_DEV_TYPE_ARM_VGIC_V2)                                       return -EBUSY;                   WARN_ON(ret);  Theoretically\, since userspace_irqchip_in_use's functionality can be simply replaced by '!irqchip_in_kernel()'\, get rid of the static key to avoid the mismanagement\, which also helps with the syzbot issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56728,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in otx2_ethtool.c  Add error pointer check after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53194,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: Fix use-after-free of slot->bus on hot remove  Dennis reports a boot crash on recent Lenovo laptops with a USB4 dock.  Since commit 0fc70886569c (""thunderbolt: Reset USB4 v2 host router"") and commit 59a54c5f3dbd (""thunderbolt: Reset topology created by the boot firmware"")\, USB4 v2 and v1 Host Routers are reset on probe of the thunderbolt driver.  The reset clears the Presence Detect State and Data Link Layer Link Active bits at the USB4 Host Router's Root Port and thus causes hot removal of the dock.  The crash occurs when pciehp is unbound from one of the dock's Downstream Ports:  pciehp creates a pci_slot on bind and destroys it on unbind.  The pci_slot contains a pointer to the pci_bus below the Downstream Port\, but a reference on that pci_bus is never acquired.  The pci_bus is destroyed before the pci_slot\, so a use-after-free ensues when pci_slot_release() accesses slot->bus.  In principle this should not happen because pci_stop_bus_device() unbinds pciehp (and therefore destroys the pci_slot) before the pci_bus is destroyed by pci_remove_bus_device().  However the stacktrace provided by Dennis shows that pciehp is unbound from pci_remove_bus_device() instead of pci_stop_bus_device().  To understand the significance of this\, one needs to know that the PCI core uses a two step process to remove a portion of the hierarchy:  It first unbinds all drivers in the sub-hierarchy in pci_stop_bus_device() and then actually removes the devices in pci_remove_bus_device().  There is no precaution to prevent driver binding in-between pci_stop_bus_device() and pci_remove_bus_device().  In Dennis' case\, it seems removal of the hierarchy by pciehp races with driver binding by pci_bus_add_devices().  pciehp is bound to the Downstream Port after pci_stop_bus_device() has run\, so it is unbound by pci_remove_bus_device() instead of pci_stop_bus_device().  Because the pci_bus has already been destroyed at that point\, accesses to it result in a use-after-free.  One might conclude that driver binding needs to be prevented after pci_stop_bus_device() has run.  However it seems risky that pci_slot points to pci_bus without holding a reference.  Solely relying on correct ordering of driver unbind versus pci_bus destruction is certainly not defensive programming.  If pci_slot has a need to access data in pci_bus\, it ought to acquire a reference.  Amend pci_create_slot() accordingly.  Dennis reports that the crash is not reproducible with this change.  Abridged stacktrace:    pcieport 0000:00:07.0: PME: Signaling with IRQ 156   pcieport 0000:00:07.0: pciehp: Slot #12 AttnBtn- PwrCtrl- MRL- AttnInd- PwrInd- HotPlug+ Surprise+ Interlock- NoCompl+ IbPresDis- LLActRep+   pci_bus 0000:20: dev 00\, created physical slot 12   pcieport 0000:00:07.0: pciehp: Slot(12): Card not present   ...   pcieport 0000:21:02.0: pciehp: pcie_disable_notification: SLOTCTRL d8 write cmd 0   Oops: general protection fault\, probably for non-canonical address 0x6b6b6b6b6b6b6b6b: 0000 [#1] PREEMPT SMP NOPTI   CPU: 13 UID: 0 PID: 134 Comm: irq/156-pciehp Not tainted 6.11.0-devel+ #1   RIP: 0010:dev_driver_string+0x12/0x40   pci_destroy_slot   pciehp_remove   pcie_port_remove_service   device_release_driver_internal   bus_remove_device   device_del   device_unregister   remove_iter   device_for_each_child   pcie_portdrv_remove   pci_device_remove   device_release_driver_internal   bus_remove_device   device_del   pci_remove_bus_device (recursive invocation)   pci_remove_bus_device   pciehp_unconfigure_device   pciehp_disable_slot   pciehp_handle_presence_or_link_change   pciehp_ist",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49940,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  l2tp: prevent possible tunnel refcount underflow  When a session is created\, it sets a backpointer to its tunnel. When the session refcount drops to 0\, l2tp_session_free drops the tunnel refcount if session->tunnel is non-NULL. However\, session->tunnel is set in l2tp_session_create\, before the tunnel refcount is incremented by l2tp_session_register\, which leaves a small window where session->tunnel is non-NULL when the tunnel refcount hasn't been bumped.  Moving the assignment to l2tp_session_register is trivial but l2tp_session_create calls l2tp_session_set_header_len which uses session->tunnel to get the tunnel's encap. Add an encap arg to l2tp_session_set_header_len to avoid using session->tunnel.  If l2tpv3 sessions have colliding IDs\, it is possible for l2tp_v3_session_get to race with l2tp_session_register and fetch a session which doesn't yet have session->tunnel set. Add a check for this case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56672,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  blk-cgroup: Fix UAF in blkcg_unpin_online()  blkcg_unpin_online() walks up the blkcg hierarchy putting the online pin. To walk up\, it uses blkcg_parent(blkcg) but it was calling that after blkcg_destroy_blkgs(blkcg) which could free the blkcg\, leading to the following UAF:    ==================================================================   BUG: KASAN: slab-use-after-free in blkcg_unpin_online+0x15a/0x270   Read of size 8 at addr ffff8881057678c0 by task kworker/9:1/117    CPU: 9 UID: 0 PID: 117 Comm: kworker/9:1 Not tainted 6.13.0-rc1-work-00182-gb8f52214c61a-dirty #48   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS unknown 02/02/2022   Workqueue: cgwb_release cgwb_release_workfn   Call Trace:    <TASK>    dump_stack_lvl+0x27/0x80    print_report+0x151/0x710    kasan_report+0xc0/0x100    blkcg_unpin_online+0x15a/0x270    cgwb_release_workfn+0x194/0x480    process_scheduled_works+0x71b/0xe20    worker_thread+0x82a/0xbd0    kthread+0x242/0x2c0    ret_from_fork+0x33/0x70    ret_from_fork_asm+0x1a/0x30    </TASK>   ...   Freed by task 1944:    kasan_save_track+0x2b/0x70    kasan_save_free_info+0x3c/0x50    __kasan_slab_free+0x33/0x50    kfree+0x10c/0x330    css_free_rwork_fn+0xe6/0xb30    process_scheduled_works+0x71b/0xe20    worker_thread+0x82a/0xbd0    kthread+0x242/0x2c0    ret_from_fork+0x33/0x70    ret_from_fork_asm+0x1a/0x30  Note that the UAF is not easy to trigger as the free path is indirected behind a couple RCU grace periods and a work item execution. I could only trigger it with artifical msleep() injected in blkcg_unpin_online().  Fix it by reading the parent pointer before destroying the blkcg's blkg's.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-11191,linux-libc-dev,LOW,6.1.115-1,N/A,"The Linux kernel through 5.0.7\, when CONFIG_IA32_AOUT is enabled and ia32_aout is loaded\, allows local users to bypass ASLR on setuid a.out programs (if any exist) because install_exec_creds() is called too late in load_aout_binary() in fs/binfmt_aout.c\, and thus the ptrace_may_access() check has a race condition when reading /proc/pid/stat. NOTE: the software maintainer disputes that this is a vulnerability because ASLR for a.out format executables has never been supported",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53197,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: usb-audio: Fix potential out-of-bound accesses for Extigy and Mbox devices  A bogus device can provide a bNumConfigurations value that exceeds the initial value used in usb_get_configuration for allocating dev->config.  This can lead to out-of-bounds accesses later\, e.g. in usb_destroy_configuration.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56670,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: u_serial: Fix the issue that gs_start_io crashed due to accessing null pointer  Considering that in some extreme cases\, when u_serial driver is accessed by multiple threads\, Thread A is executing the open operation and calling the gs_open\, Thread B is executing the disconnect operation and calling the gserial_disconnect function\,The port->port_usb pointer will be set to NULL.  E.g.     Thread A                                 Thread B     gs_open()                                gadget_unbind_driver()     gs_start_io()                            composite_disconnect()     gs_start_rx()                            gserial_disconnect()     ...                                      ...     spin_unlock(&port->port_lock)     status = usb_ep_queue()                  spin_lock(&port->port_lock)     spin_lock(&port->port_lock)              port->port_usb = NULL     gs_free_requests(port->port_usb->in)     spin_unlock(&port->port_lock)     Crash  This causes thread A to access a null pointer (port->port_usb is null) when calling the gs_free_requests function\, causing a crash.  If port_usb is NULL\, the release request will be skipped as it will be done by gserial_disconnect.  So add a null pointer check to gs_start_io before attempting to access the value of the pointer port->port_usb.  Call trace:  gs_start_io+0x164/0x25c  gs_open+0x108/0x13c  tty_open+0x314/0x638  chrdev_open+0x1b8/0x258  do_dentry_open+0x2c4/0x700  vfs_open+0x2c/0x3c  path_openat+0xa64/0xc60  do_filp_open+0xb8/0x164  do_sys_openat2+0x84/0xf0  __arm64_sys_openat+0x70/0x9c  invoke_syscall+0x58/0x114  el0_svc_common+0x80/0xe0  do_el0_svc+0x1c/0x28  el0_svc+0x38/0x68",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53196,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: arm64: Don't retire aborted MMIO instruction  Returning an abort to the guest for an unsupported MMIO access is a documented feature of the KVM UAPI. Nevertheless\, it's clear that this plumbing has seen limited testing\, since userspace can trivially cause a WARN in the MMIO return:    WARNING: CPU: 0 PID: 30558 at arch/arm64/include/asm/kvm_emulate.h:536 kvm_handle_mmio_return+0x46c/0x5c4 arch/arm64/include/asm/kvm_emulate.h:536   Call trace:    kvm_handle_mmio_return+0x46c/0x5c4 arch/arm64/include/asm/kvm_emulate.h:536    kvm_arch_vcpu_ioctl_run+0x98/0x15b4 arch/arm64/kvm/arm.c:1133    kvm_vcpu_ioctl+0x75c/0xa78 virt/kvm/kvm_main.c:4487    __do_sys_ioctl fs/ioctl.c:51 [inline]    __se_sys_ioctl fs/ioctl.c:893 [inline]    __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:893    __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]    invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:49    el0_svc_common+0x1e0/0x23c arch/arm64/kernel/syscall.c:132    do_el0_svc+0x48/0x58 arch/arm64/kernel/syscall.c:151    el0_svc+0x38/0x68 arch/arm64/kernel/entry-common.c:712    el0t_64_sync_handler+0x90/0xfc arch/arm64/kernel/entry-common.c:730    el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:598  The splat is complaining that KVM is advancing PC while an exception is pending\, i.e. that KVM is retiring the MMIO instruction despite a pending synchronous external abort. Womp womp.  Fix the glaring UAPI bug by skipping over all the MMIO emulation in case there is a pending synchronous exception. Note that while userspace is capable of pending an asynchronous exception (SError\, IRQ\, or FIQ)\, it is still safe to retire the MMIO instruction in this case as (1) they are by definition asynchronous\, and (2) KVM relies on hardware support for pending/delivering these exceptions instead of the software state machine for advancing PC.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21649,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: hns3: fix kernel crash when 1588 is sent on HIP08 devices  Currently\, HIP08 devices does not register the ptp devices\, so the hdev->ptp is NULL. But the tx process would still try to set hardware time stamp info with SKBTX_HW_TSTAMP flag and cause a kernel crash.  [  128.087798] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000018 ... [  128.280251] pc : hclge_ptp_set_tx_info+0x2c/0x140 [hclge] [  128.286600] lr : hclge_ptp_set_tx_info+0x20/0x140 [hclge] [  128.292938] sp : ffff800059b93140 [  128.297200] x29: ffff800059b93140 x28: 0000000000003280 [  128.303455] x27: ffff800020d48280 x26: ffff0cb9dc814080 [  128.309715] x25: ffff0cb9cde93fa0 x24: 0000000000000001 [  128.315969] x23: 0000000000000000 x22: 0000000000000194 [  128.322219] x21: ffff0cd94f986000 x20: 0000000000000000 [  128.328462] x19: ffff0cb9d2a166c0 x18: 0000000000000000 [  128.334698] x17: 0000000000000000 x16: ffffcf1fc523ed24 [  128.340934] x15: 0000ffffd530a518 x14: 0000000000000000 [  128.347162] x13: ffff0cd6bdb31310 x12: 0000000000000368 [  128.353388] x11: ffff0cb9cfbc7070 x10: ffff2cf55dd11e02 [  128.359606] x9 : ffffcf1f85a212b4 x8 : ffff0cd7cf27dab0 [  128.365831] x7 : 0000000000000a20 x6 : ffff0cd7cf27d000 [  128.372040] x5 : 0000000000000000 x4 : 000000000000ffff [  128.378243] x3 : 0000000000000400 x2 : ffffcf1f85a21294 [  128.384437] x1 : ffff0cb9db520080 x0 : ffff0cb9db500080 [  128.390626] Call trace: [  128.393964]  hclge_ptp_set_tx_info+0x2c/0x140 [hclge] [  128.399893]  hns3_nic_net_xmit+0x39c/0x4c4 [hns3] [  128.405468]  xmit_one.constprop.0+0xc4/0x200 [  128.410600]  dev_hard_start_xmit+0x54/0xf0 [  128.415556]  sch_direct_xmit+0xe8/0x634 [  128.420246]  __dev_queue_xmit+0x224/0xc70 [  128.425101]  dev_queue_xmit+0x1c/0x40 [  128.429608]  ovs_vport_send+0xac/0x1a0 [openvswitch] [  128.435409]  do_output+0x60/0x17c [openvswitch] [  128.440770]  do_execute_actions+0x898/0x8c4 [openvswitch] [  128.446993]  ovs_execute_actions+0x64/0xf0 [openvswitch] [  128.453129]  ovs_dp_process_packet+0xa0/0x224 [openvswitch] [  128.459530]  ovs_vport_receive+0x7c/0xfc [openvswitch] [  128.465497]  internal_dev_xmit+0x34/0xb0 [openvswitch] [  128.471460]  xmit_one.constprop.0+0xc4/0x200 [  128.476561]  dev_hard_start_xmit+0x54/0xf0 [  128.481489]  __dev_queue_xmit+0x968/0xc70 [  128.486330]  dev_queue_xmit+0x1c/0x40 [  128.490856]  ip_finish_output2+0x250/0x570 [  128.495810]  __ip_finish_output+0x170/0x1e0 [  128.500832]  ip_finish_output+0x3c/0xf0 [  128.505504]  ip_output+0xbc/0x160 [  128.509654]  ip_send_skb+0x58/0xd4 [  128.513892]  udp_send_skb+0x12c/0x354 [  128.518387]  udp_sendmsg+0x7a8/0x9c0 [  128.522793]  inet_sendmsg+0x4c/0x8c [  128.527116]  __sock_sendmsg+0x48/0x80 [  128.531609]  __sys_sendto+0x124/0x164 [  128.536099]  __arm64_sys_sendto+0x30/0x5c [  128.540935]  invoke_syscall+0x50/0x130 [  128.545508]  el0_svc_common.constprop.0+0x10c/0x124 [  128.551205]  do_el0_svc+0x34/0xdc [  128.555347]  el0_svc+0x20/0x30 [  128.559227]  el0_sync_handler+0xb8/0xc0 [  128.563883]  el0_sync+0x160/0x180",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58095,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: add check read-only before txBeginAnon() call  Added a read-only check before calling `txBeginAnon` in `extAlloc` and `extRecord`. This prevents modification attempts on a read-only mounted filesystem\, avoiding potential errors or crashes.  Call trace:  txBeginAnon+0xac/0x154  extAlloc+0xe8/0xdec fs/jfs/jfs_extent.c:78  jfs_get_block+0x340/0xb98 fs/jfs/inode.c:248  __block_write_begin_int+0x580/0x166c fs/buffer.c:2128  __block_write_begin fs/buffer.c:2177 [inline]  block_write_begin+0x98/0x11c fs/buffer.c:2236  jfs_write_begin+0x44/0x88 fs/jfs/inode.c:299",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53061,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: s5p-jpeg: prevent buffer overflows  The current logic allows word to be less than 2. If this happens\, there will be buffer overflows\, as reported by smatch. Add extra checks to prevent it.  While here\, remove an unused word = 0 assignment.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50275,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  arm64/sve: Discard stale CPU state when handling SVE traps  The logic for handling SVE traps manipulates saved FPSIMD/SVE state incorrectly\, and a race with preemption can result in a task having TIF_SVE set and TIF_FOREIGN_FPSTATE clear even though the live CPU state is stale (e.g. with SVE traps enabled). This has been observed to result in warnings from do_sve_acc() where SVE traps are not expected while TIF_SVE is set:  |         if (test_and_set_thread_flag(TIF_SVE)) |                 WARN_ON(1); /* SVE access shouldn't have trapped */  Warnings of this form have been reported intermittently\, e.g.    https://lore.kernel.org/linux-arm-kernel/CA+G9fYtEGe_DhY2Ms7+L7NKsLYUomGsgqpdBj+QwDLeSg=JhGg@mail.gmail.com/   https://lore.kernel.org/linux-arm-kernel/000000000000511e9a060ce5a45c@google.com/  The race can occur when the SVE trap handler is preempted before and after manipulating the saved FPSIMD/SVE state\, starting and ending on the same CPU\, e.g.  | void do_sve_acc(unsigned long esr\, struct pt_regs *regs) | { |         // Trap on CPU 0 with TIF_SVE clear\, SVE traps enabled |         // task->fpsimd_cpu is 0. |         // per_cpu_ptr(&fpsimd_last_state\, 0) is task. | |         ... | |         // Preempted; migrated from CPU 0 to CPU 1. |         // TIF_FOREIGN_FPSTATE is set. | |         get_cpu_fpsimd_context(); | |         if (test_and_set_thread_flag(TIF_SVE)) |                 WARN_ON(1); /* SVE access shouldn't have trapped */ | |         sve_init_regs() { |                 if (!test_thread_flag(TIF_FOREIGN_FPSTATE)) { |                         ... |                 } else { |                         fpsimd_to_sve(current); |                         current->thread.fp_type = FP_STATE_SVE; |                 } |         } | |         put_cpu_fpsimd_context(); | |         // Preempted; migrated from CPU 1 to CPU 0. |         // task->fpsimd_cpu is still 0 |         // If per_cpu_ptr(&fpsimd_last_state\, 0) is still task then: |         // - Stale HW state is reused (with SVE traps enabled) |         // - TIF_FOREIGN_FPSTATE is cleared |         // - A return to userspace skips HW state restore | }  Fix the case where the state is not live and TIF_FOREIGN_FPSTATE is set by calling fpsimd_flush_task_state() to detach from the saved CPU state. This ensures that a subsequent context switch will not reuse the stale CPU state\, and will instead set TIF_FOREIGN_FPSTATE\, forcing the new state to be reloaded from memory prior to a return to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58094,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: add check read-only before truncation in jfs_truncate_nolock()  Added a check for ""read-only"" mode in the `jfs_truncate_nolock` function to avoid errors related to writing to a read-only filesystem.  Call stack:  block_write_begin() {   jfs_write_failed() {     jfs_truncate() {       jfs_truncate_nolock() {         txEnd() {           ...           log = JFS_SBI(tblk->sb)->log;           // (log == NULL)  If the `isReadOnly(ip)` condition is triggered in `jfs_truncate_nolock`\, the function execution will stop\, and no further data modification will occur. Instead\, the `xtTruncate` function will be called with the ""COMMIT_WMAP"" flag\, preventing modifications in ""read-only"" mode.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53060,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: prevent NULL pointer dereference if ATIF is not supported  acpi_evaluate_object() may return AE_NOT_FOUND (failure)\, which would result in dereferencing buffer.pointer (obj) while being NULL.  Although this case may be unrealistic for the current code\, it is still better to protect against possible bugs.  Bail out also when status is AE_NOT_FOUND.  This fixes 1 FORWARD_NULL issue reported by Coverity Report: CID 1600951:  Null pointer dereferences  (FORWARD_NULL)  (cherry picked from commit 91c9e221fe2553edf2db71627d8453f083de87a1)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21648,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: conntrack: clamp maximum hashtable size to INT_MAX  Use INT_MAX as maximum size for the conntrack hashtable. Otherwise\, it is possible to hit WARN_ON_ONCE in __kvmalloc_node_noprof() when resizing hashtable because __GFP_NOWARN is unset. See:    0708a0afe291 (""mm: Consider __GFP_NOWARN flag for oversized kvmalloc() calls"")  Note: hashtable resize is only possible from init_netns.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58097,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath11k: fix RCU stall while reaping monitor destination ring  While processing the monitor destination ring\, MSDUs are reaped from the link descriptor based on the corresponding buf_id.  However\, sometimes the driver cannot obtain a valid buffer corresponding to the buf_id received from the hardware. This causes an infinite loop in the destination processing\, resulting in a kernel crash.  kernel log: ath11k_pci 0000:58:00.0: data msdu_pop: invalid buf_id 309 ath11k_pci 0000:58:00.0: data dp_rx_monitor_link_desc_return failed ath11k_pci 0000:58:00.0: data msdu_pop: invalid buf_id 309 ath11k_pci 0000:58:00.0: data dp_rx_monitor_link_desc_return failed  Fix this by skipping the problematic buf_id and reaping the next entry\, replacing the break with the next MSDU processing.  Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3.6510.30 Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53063,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: dvbdev: prevent the risk of out of memory access  The dvbdev contains a static variable used to store dvb minors.  The behavior of it depends if CONFIG_DVB_DYNAMIC_MINORS is set or not. When not set\, dvb_register_device() won't check for boundaries\, as it will rely that a previous call to dvb_register_adapter() would already be enforcing it.  On a similar way\, dvb_device_open() uses the assumption that the register functions already did the needed checks.  This can be fragile if some device ends using different calls. This also generate warnings on static check analysers like Coverity.  So\, add explicit guards to prevent potential risk of OOM issues.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50277,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dm: fix a crash if blk_alloc_disk fails  If blk_alloc_disk fails\, the variable md->disk is set to an error value. cleanup_mapped_device will see that md->disk is non-NULL and it will attempt to access it\, causing a crash on this statement ""md->disk->private_data = NULL;"".",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56378,libpoppler126,MEDIUM,22.12.0-2+b1,N/A,"libpoppler.so in Poppler through 24.12.0 has an out-of-bounds read vulnerability within the JBIG2Bitmap::combine function in JBIG2Stream.cc.",|tykio/midsommar|
CVE-2024-58096,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath11k: add srng->lock for ath11k_hal_srng_* in monitor mode  ath11k_hal_srng_* should be used with srng->lock to protect srng data.  For ath11k_dp_rx_mon_dest_process() and ath11k_dp_full_mon_process_rx()\, they use ath11k_hal_srng_* for many times but never call srng->lock.  So when running (full) monitor mode\, warning will occur: RIP: 0010:ath11k_hal_srng_dst_peek+0x18/0x30 [ath11k] Call Trace:  ? ath11k_hal_srng_dst_peek+0x18/0x30 [ath11k]  ath11k_dp_rx_process_mon_status+0xc45/0x1190 [ath11k]  ? idr_alloc_u32+0x97/0xd0  ath11k_dp_rx_process_mon_rings+0x32a/0x550 [ath11k]  ath11k_dp_service_srng+0x289/0x5a0 [ath11k]  ath11k_pcic_ext_grp_napi_poll+0x30/0xd0 [ath11k]  __napi_poll+0x30/0x1f0  net_rx_action+0x198/0x320  __do_softirq+0xdd/0x319  So add srng->lock for them to avoid such warnings.  Inorder to fetch the srng->lock\, should change srng's definition from 'void' to 'struct hal_srng'. And initialize them elsewhere to prevent one line of code from being too long. This is consistent with other ring process functions\, such as ath11k_dp_process_rx().  Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3.6510.30 Tested-on: QCN9074 hw1.0 PCI WLAN.HK.2.7.0.1-01744-QCAHKSWPL_SILICONZ-1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50276,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: vertexcom: mse102x: Fix possible double free of TX skb  The scope of the TX skb is wider than just mse102x_tx_frame_spi()\, so in case the TX skb room needs to be expanded\, we should free the the temporary skb instead of the original skb. Otherwise the original TX skb pointer would be freed again in mse102x_tx_work()\, which leads to crashes:    Internal error: Oops: 0000000096000004 [#2] PREEMPT SMP   CPU: 0 PID: 712 Comm: kworker/0:1 Tainted: G      D            6.6.23   Hardware name: chargebyte Charge SOM DC-ONE (DT)   Workqueue: events mse102x_tx_work [mse102x]   pstate: 20400009 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : skb_release_data+0xb8/0x1d8   lr : skb_release_data+0x1ac/0x1d8   sp : ffff8000819a3cc0   x29: ffff8000819a3cc0 x28: ffff0000046daa60 x27: ffff0000057f2dc0   x26: ffff000005386c00 x25: 0000000000000002 x24: 00000000ffffffff   x23: 0000000000000000 x22: 0000000000000001 x21: ffff0000057f2e50   x20: 0000000000000006 x19: 0000000000000000 x18: ffff00003fdacfcc   x17: e69ad452d0c49def x16: 84a005feff870102 x15: 0000000000000000   x14: 000000000000024a x13: 0000000000000002 x12: 0000000000000000   x11: 0000000000000400 x10: 0000000000000930 x9 : ffff00003fd913e8   x8 : fffffc00001bc008   x7 : 0000000000000000 x6 : 0000000000000008   x5 : ffff00003fd91340 x4 : 0000000000000000 x3 : 0000000000000009   x2 : 00000000fffffffe x1 : 0000000000000000 x0 : 0000000000000000   Call trace:    skb_release_data+0xb8/0x1d8    kfree_skb_reason+0x48/0xb0    mse102x_tx_work+0x164/0x35c [mse102x]    process_one_work+0x138/0x260    worker_thread+0x32c/0x438    kthread+0x118/0x11c    ret_from_fork+0x10/0x20   Code: aa1303e0 97fffab6 72001c1f 54000141 (f9400660)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50271,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  signal: restore the override_rlimit logic  Prior to commit d64696905554 (""Reimplement RLIMIT_SIGPENDING on top of ucounts"") UCOUNT_RLIMIT_SIGPENDING rlimit was not enforced for a class of signals.  However now it's enforced unconditionally\, even if override_rlimit is set.  This behavior change caused production issues.    For example\, if the limit is reached and a process receives a SIGSEGV signal\, sigqueue_alloc fails to allocate the necessary resources for the signal delivery\, preventing the signal from being delivered with siginfo.  This prevents the process from correctly identifying the fault address and handling the error.  From the user-space perspective\, applications are unaware that the limit has been reached and that the siginfo is effectively 'corrupted'.  This can lead to unpredictable behavior and crashes\, as we observed with java applications.  Fix this by passing override_rlimit into inc_rlimit_get_ucounts() and skip the comparison to max there if override_rlimit is set.  This effectively restores the old behavior.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58090,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  sched/core: Prevent rescheduling when interrupts are disabled  David reported a warning observed while loop testing kexec jump:    Interrupts enabled after irqrouter_resume+0x0/0x50   WARNING: CPU: 0 PID: 560 at drivers/base/syscore.c:103 syscore_resume+0x18a/0x220    kernel_kexec+0xf6/0x180    __do_sys_reboot+0x206/0x250    do_syscall_64+0x95/0x180  The corresponding interrupt flag trace:    hardirqs last  enabled at (15573): [<ffffffffa8281b8e>] __up_console_sem+0x7e/0x90   hardirqs last disabled at (15580): [<ffffffffa8281b73>] __up_console_sem+0x63/0x90  That means __up_console_sem() was invoked with interrupts enabled. Further instrumentation revealed that in the interrupt disabled section of kexec jump one of the syscore_suspend() callbacks woke up a task\, which set the NEED_RESCHED flag. A later callback in the resume path invoked cond_resched() which in turn led to the invocation of the scheduler:    __cond_resched+0x21/0x60   down_timeout+0x18/0x60   acpi_os_wait_semaphore+0x4c/0x80   acpi_ut_acquire_mutex+0x3d/0x100   acpi_ns_get_node+0x27/0x60   acpi_ns_evaluate+0x1cb/0x2d0   acpi_rs_set_srs_method_data+0x156/0x190   acpi_pci_link_set+0x11c/0x290   irqrouter_resume+0x54/0x60   syscore_resume+0x6a/0x200   kernel_kexec+0x145/0x1c0   __do_sys_reboot+0xeb/0x240   do_syscall_64+0x95/0x180  This is a long standing problem\, which probably got more visible with the recent printk changes. Something does a task wakeup and the scheduler sets the NEED_RESCHED flag. cond_resched() sees it set and invokes schedule() from a completely bogus context. The scheduler enables interrupts after context switching\, which causes the above warning at the end.  Quite some of the code paths in syscore_suspend()/resume() can result in triggering a wakeup with the exactly same consequences. They might not have done so yet\, but as they share a lot of code with normal operations it's just a question of time.  The problem only affects the PREEMPT_NONE and PREEMPT_VOLUNTARY scheduling models. Full preemption is not affected as cond_resched() is disabled and the preemption check preemptible() takes the interrupt disabled flag into account.  Cure the problem by adding a corresponding check into cond_resched().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58093,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI/ASPM: Fix link state exit during switch upstream function removal  Before 456d8aa37d0f (""PCI/ASPM: Disable ASPM on MFD function removal to avoid use-after-free"")\, we would free the ASPM link only after the last function on the bus pertaining to the given link was removed.  That was too late. If function 0 is removed before sibling function\, link->downstream would point to free'd memory after.  After above change\, we freed the ASPM parent link state upon any function removal on the bus pertaining to a given link.  That is too early. If the link is to a PCIe switch with MFD on the upstream port\, then removing functions other than 0 first would free a link which still remains parent_link to the remaining downstream ports.  The resulting GPFs are especially frequent during hot-unplug\, because pciehp removes devices on the link bus in reverse order.  On that switch\, function 0 is the virtual P2P bridge to the internal bus. Free exactly when function 0 is removed -- before the parent link is obsolete\, but after all subordinate links are gone.  [kwilczynski: commit log]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50273,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: reinitialize delayed ref list after deleting it from the list  At insert_delayed_ref() if we need to update the action of an existing ref to BTRFS_DROP_DELAYED_REF\, we delete the ref from its ref head's ref_add_list using list_del()\, which leaves the ref's add_list member not reinitialized\, as list_del() sets the next and prev members of the list to LIST_POISON1 and LIST_POISON2\, respectively.  If later we end up calling drop_delayed_ref() against the ref\, which can happen during merging or when destroying delayed refs due to a transaction abort\, we can trigger a crash since at drop_delayed_ref() we call list_empty() against the ref's add_list\, which returns false since the list was not reinitialized after the list_del() and as a consequence we call list_del() again at drop_delayed_ref(). This results in an invalid list access since the next and prev members are set to poison pointers\, resulting in a splat if CONFIG_LIST_HARDENED and CONFIG_DEBUG_LIST are set or invalid poison pointer dereferences otherwise.  So fix this by deleting from the list with list_del_init() instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53066,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfs: Fix KMSAN warning in decode_getfattr_attrs()  Fix the following KMSAN warning:  CPU: 1 UID: 0 PID: 7651 Comm: cp Tainted: G    B Tainted: [B]=BAD_PAGE Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009) ===================================================== ===================================================== BUG: KMSAN: uninit-value in decode_getfattr_attrs+0x2d6d/0x2f90  decode_getfattr_attrs+0x2d6d/0x2f90  decode_getfattr_generic+0x806/0xb00  nfs4_xdr_dec_getattr+0x1de/0x240  rpcauth_unwrap_resp_decode+0xab/0x100  rpcauth_unwrap_resp+0x95/0xc0  call_decode+0x4ff/0xb50  __rpc_execute+0x57b/0x19d0  rpc_execute+0x368/0x5e0  rpc_run_task+0xcfe/0xee0  nfs4_proc_getattr+0x5b5/0x990  __nfs_revalidate_inode+0x477/0xd00  nfs_access_get_cached+0x1021/0x1cc0  nfs_do_access+0x9f/0xae0  nfs_permission+0x1e4/0x8c0  inode_permission+0x356/0x6c0  link_path_walk+0x958/0x1330  path_lookupat+0xce/0x6b0  filename_lookup+0x23e/0x770  vfs_statx+0xe7/0x970  vfs_fstatat+0x1f2/0x2c0  __se_sys_newfstatat+0x67/0x880  __x64_sys_newfstatat+0xbd/0x120  x64_sys_call+0x1826/0x3cf0  do_syscall_64+0xd0/0x1b0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  The KMSAN warning is triggered in decode_getfattr_attrs()\, when calling decode_attr_mdsthreshold(). It appears that fattr->mdsthreshold is not initialized.  Fix the issue by initializing fattr->mdsthreshold to NULL in nfs_fattr_init().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50272,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  filemap: Fix bounds checking in filemap_read()  If the caller supplies an iocb->ki_pos value that is close to the filesystem upper limit\, and an iterator with a count that causes us to overflow that limit\, then filemap_read() enters an infinite loop.  This behaviour was discovered when testing xfstests generic/525 with the ""localio"" optimisation for loopback NFS mounts.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1180,binutils,LOW,2.40-2,N/A,"A vulnerability classified as problematic has been found in GNU Binutils 2.43. This affects the function _bfd_elf_write_section_eh_frame of the file bfd/elf-eh-frame.c of the component ld. The manipulation leads to memory corruption. It is possible to initiate the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21640,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: sysctl: cookie_hmac_alg: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The 'net' structure can be obtained from the table->data using container_of().  Note that table->data could also be used directly\, as this is the only member needed from the 'net' structure\, but that would increase the size of this fix\, to use '*data' everywhere 'net->sctp.sctp_hmac_alg' is used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53068,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  firmware: arm_scmi: Fix slab-use-after-free in scmi_bus_notifier()  The scmi_dev->name is released prematurely in __scmi_device_destroy()\, which causes slab-use-after-free when accessing scmi_dev->name in scmi_bus_notifier(). So move the release of scmi_dev->name to scmi_device_release() to avoid slab-use-after-free.    |  BUG: KASAN: slab-use-after-free in strncmp+0xe4/0xec   |  Read of size 1 at addr ffffff80a482bcc0 by task swapper/0/1   |   |  CPU: 1 PID: 1 Comm: swapper/0 Not tainted 6.6.38-debug #1   |  Hardware name: Qualcomm Technologies\, Inc. SA8775P Ride (DT)   |  Call trace:   |   dump_backtrace+0x94/0x114   |   show_stack+0x18/0x24   |   dump_stack_lvl+0x48/0x60   |   print_report+0xf4/0x5b0   |   kasan_report+0xa4/0xec   |   __asan_report_load1_noabort+0x20/0x2c   |   strncmp+0xe4/0xec   |   scmi_bus_notifier+0x5c/0x54c   |   notifier_call_chain+0xb4/0x31c   |   blocking_notifier_call_chain+0x68/0x9c   |   bus_notify+0x54/0x78   |   device_del+0x1bc/0x840   |   device_unregister+0x20/0xb4   |   __scmi_device_destroy+0xac/0x280   |   scmi_device_destroy+0x94/0xd0   |   scmi_chan_setup+0x524/0x750   |   scmi_probe+0x7fc/0x1508   |   platform_probe+0xc4/0x19c   |   really_probe+0x32c/0x99c   |   __driver_probe_device+0x15c/0x3c4   |   driver_probe_device+0x5c/0x170   |   __driver_attach+0x1c8/0x440   |   bus_for_each_dev+0xf4/0x178   |   driver_attach+0x3c/0x58   |   bus_add_driver+0x234/0x4d4   |   driver_register+0xf4/0x3c0   |   __platform_driver_register+0x60/0x88   |   scmi_driver_init+0xb0/0x104   |   do_one_initcall+0xb4/0x664   |   kernel_init_freeable+0x3c8/0x894   |   kernel_init+0x24/0x1e8   |   ret_from_fork+0x10/0x20   |   |  Allocated by task 1:   |   kasan_save_stack+0x2c/0x54   |   kasan_set_track+0x2c/0x40   |   kasan_save_alloc_info+0x24/0x34   |   __kasan_kmalloc+0xa0/0xb8   |   __kmalloc_node_track_caller+0x6c/0x104   |   kstrdup+0x48/0x84   |   kstrdup_const+0x34/0x40   |   __scmi_device_create.part.0+0x8c/0x408   |   scmi_device_create+0x104/0x370   |   scmi_chan_setup+0x2a0/0x750   |   scmi_probe+0x7fc/0x1508   |   platform_probe+0xc4/0x19c   |   really_probe+0x32c/0x99c   |   __driver_probe_device+0x15c/0x3c4   |   driver_probe_device+0x5c/0x170   |   __driver_attach+0x1c8/0x440   |   bus_for_each_dev+0xf4/0x178   |   driver_attach+0x3c/0x58   |   bus_add_driver+0x234/0x4d4   |   driver_register+0xf4/0x3c0   |   __platform_driver_register+0x60/0x88   |   scmi_driver_init+0xb0/0x104   |   do_one_initcall+0xb4/0x664   |   kernel_init_freeable+0x3c8/0x894   |   kernel_init+0x24/0x1e8   |   ret_from_fork+0x10/0x20   |   |  Freed by task 1:   |   kasan_save_stack+0x2c/0x54   |   kasan_set_track+0x2c/0x40   |   kasan_save_free_info+0x38/0x5c   |   __kasan_slab_free+0xe8/0x164   |   __kmem_cache_free+0x11c/0x230   |   kfree+0x70/0x130   |   kfree_const+0x20/0x40   |   __scmi_device_destroy+0x70/0x280   |   scmi_device_destroy+0x94/0xd0   |   scmi_chan_setup+0x524/0x750   |   scmi_probe+0x7fc/0x1508   |   platform_probe+0xc4/0x19c   |   really_probe+0x32c/0x99c   |   __driver_probe_device+0x15c/0x3c4   |   driver_probe_device+0x5c/0x170   |   __driver_attach+0x1c8/0x440   |   bus_for_each_dev+0xf4/0x178   |   driver_attach+0x3c/0x58   |   bus_add_driver+0x234/0x4d4   |   driver_register+0xf4/0x3c0   |   __platform_driver_register+0x60/0x88   |   scmi_driver_init+0xb0/0x104   |   do_one_initcall+0xb4/0x664   |   kernel_init_freeable+0x3c8/0x894   |   kernel_init+0x24/0x1e8   |   ret_from_fork+0x10/0x20",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50164,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix overloading of MEM_UNINIT's meaning  Lonial reported an issue in the BPF verifier where check_mem_size_reg() has the following code:      if (!tnum_is_const(reg->var_off))         /* For unprivileged variable accesses\, disable raw          * mode so that the program is required to          * initialize all the memory that the helper could          * just partially fill up.          */          meta = NULL;  This means that writes are not checked when the register containing the size of the passed buffer has not a fixed size. Through this bug\, a BPF program can write to a map which is marked as read-only\, for example\, .rodata global maps.  The problem is that MEM_UNINIT's initial meaning that ""the passed buffer to the BPF helper does not need to be initialized"" which was added back in commit 435faee1aae9 (""bpf\, verifier: add ARG_PTR_TO_RAW_STACK type"") got overloaded over time with ""the passed buffer is being written to"".  The problem however is that checks such as the above which were added later via 06c1c049721a (""bpf: allow helpers access to variable memory"") set meta to NULL in order force the user to always initialize the passed buffer to the helper. Due to the current double meaning of MEM_UNINIT\, this bypasses verifier write checks to the memory (not boundary checks though) and only assumes the latter memory is read instead.  Fix this by reverting MEM_UNINIT back to its original meaning\, and having MEM_WRITE as an annotation to BPF helpers in order to then trigger the BPF verifier checks for writing to memory.  Some notes: check_arg_pair_ok() ensures that for ARG_CONST_SIZE{\,_OR_ZERO} we can access fn->arg_type[arg - 1] since it must contain a preceding ARG_PTR_TO_MEM. For check_mem_reg() the meta argument can be removed altogether since we do check both BPF_READ and BPF_WRITE. Same for the equivalent check_kfunc_mem_size_reg().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1181,binutils,LOW,2.40-2,N/A,"A vulnerability classified as critical was found in GNU Binutils 2.43. This vulnerability affects the function _bfd_elf_gc_mark_rsec of the file bfd/elflink.c of the component ld. The manipulation leads to memory corruption. The attack can be initiated remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. The name of the patch is 931494c9a89558acb36a03a340c01726545eef24. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1182,binutils,LOW,2.40-2,N/A,"A vulnerability\, which was classified as critical\, was found in GNU Binutils 2.43. Affected is the function bfd_elf_reloc_symbol_deleted_p of the file bfd/elflink.c of the component ld. The manipulation leads to memory corruption. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. The patch is identified as b425859021d17adf62f06fb904797cf8642986ad. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50166,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fsl/fman: Fix refcount handling of fman-related devices  In mac_probe() there are multiple calls to of_find_device_by_node()\, fman_bind() and fman_port_bind() which takes references to of_dev->dev. Not all references taken by these calls are released later on error path in mac_probe() and in mac_remove() which lead to reference leaks.  Add references release.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21645,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86/amd/pmc: Only disable IRQ1 wakeup where i8042 actually enabled it  Wakeup for IRQ1 should be disabled only in cases where i8042 had actually enabled it\, otherwise ""wake_depth"" for this IRQ will try to drop below zero and there will be an unpleasant WARN() logged:  kernel: atkbd serio0: Disabling IRQ1 wakeup source to avoid platform firmware bug kernel: ------------[ cut here ]------------ kernel: Unbalanced IRQ 1 wake disable kernel: WARNING: CPU: 10 PID: 6431 at kernel/irq/manage.c:920 irq_set_irq_wake+0x147/0x1a0  The PMC driver uses DEFINE_SIMPLE_DEV_PM_OPS() to define its dev_pm_ops which sets amd_pmc_suspend_handler() to the .suspend\, .freeze\, and .poweroff handlers. i8042_pm_suspend()\, however\, is only set as the .suspend handler.  Fix the issue by call PMC suspend handler only from the same set of dev_pm_ops handlers as i8042_pm_suspend()\, which currently means just the .suspend handler.  To reproduce this issue try hibernating (S4) the machine after a fresh boot without putting it into s2idle first.  [ij: edited the commit message.]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50279,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  dm cache: fix out-of-bounds access to the dirty bitset when resizing  dm-cache checks the dirty bits of the cache blocks to be dropped when shrinking the fast device\, but an index bug in bitset iteration causes out-of-bounds access.  Reproduce steps:  1. create a cache device of 1024 cache blocks (128 bytes dirty bitset)  dmsetup create cmeta --table ""0 8192 linear /dev/sdc 0"" dmsetup create cdata --table ""0 131072 linear /dev/sdc 8192"" dmsetup create corig --table ""0 524288 linear /dev/sdc 262144"" dd if=/dev/zero of=/dev/mapper/cmeta bs=4k count=1 oflag=direct dmsetup create cache --table ""0 524288 cache /dev/mapper/cmeta \\ /dev/mapper/cdata /dev/mapper/corig 128 2 metadata2 writethrough smq 0""  2. shrink the fast device to 512 cache blocks\, triggering out-of-bounds    access to the dirty bitset (offset 0x80)  dmsetup suspend cache dmsetup reload cdata --table ""0 65536 linear /dev/sdc 8192"" dmsetup resume cdata dmsetup resume cache  KASAN reports:    BUG: KASAN: vmalloc-out-of-bounds in cache_preresume+0x269/0x7b0   Read of size 8 at addr ffffc900000f3080 by task dmsetup/131    (...snip...)   The buggy address belongs to the virtual mapping at    [ffffc900000f3000\, ffffc900000f5000) created by:    cache_ctr+0x176a/0x35f0    (...snip...)   Memory state around the buggy address:    ffffc900000f2f80: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8    ffffc900000f3000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   >ffffc900000f3080: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8                      ^    ffffc900000f3100: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8    ffffc900000f3180: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8  Fix by making the index post-incremented.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-24106,libpoppler126,LOW,22.12.0-2+b1,N/A,"In Xpdf prior to 4.04\, the DCT (JPEG) decoder was incorrectly allowing the 'interleaved' flag to be changed after the first scan of the image\, leading to an unknown integer-related vulnerability in Stream.cc.",|tykio/midsommar|
CVE-2024-50278,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  dm cache: fix potential out-of-bounds access on the first resume  Out-of-bounds access occurs if the fast device is expanded unexpectedly before the first-time resume of the cache table. This happens because expanding the fast device requires reloading the cache table for cache_create to allocate new in-core data structures that fit the new size\, and the check in cache_preresume is not performed during the first resume\, leading to the issue.  Reproduce steps:  1. prepare component devices:  dmsetup create cmeta --table ""0 8192 linear /dev/sdc 0"" dmsetup create cdata --table ""0 65536 linear /dev/sdc 8192"" dmsetup create corig --table ""0 524288 linear /dev/sdc 262144"" dd if=/dev/zero of=/dev/mapper/cmeta bs=4k count=1 oflag=direct  2. load a cache table of 512 cache blocks\, and deliberately expand the    fast device before resuming the cache\, making the in-core data    structures inadequate.  dmsetup create cache --notable dmsetup reload cache --table ""0 524288 cache /dev/mapper/cmeta \\ /dev/mapper/cdata /dev/mapper/corig 128 2 metadata2 writethrough smq 0"" dmsetup reload cdata --table ""0 131072 linear /dev/sdc 8192"" dmsetup resume cdata dmsetup resume cache  3. suspend the cache to write out the in-core dirty bitset and hint    array\, leading to out-of-bounds access to the dirty bitset at offset    0x40:  dmsetup suspend cache  KASAN reports:    BUG: KASAN: vmalloc-out-of-bounds in is_dirty_callback+0x2b/0x80   Read of size 8 at addr ffffc90000085040 by task dmsetup/90    (...snip...)   The buggy address belongs to the virtual mapping at    [ffffc90000085000\, ffffc90000087000) created by:    cache_ctr+0x176a/0x35f0    (...snip...)   Memory state around the buggy address:    ffffc90000084f00: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8    ffffc90000084f80: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8   >ffffc90000085000: 00 00 00 00 00 00 00 00 f8 f8 f8 f8 f8 f8 f8 f8                                              ^    ffffc90000085080: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8    ffffc90000085100: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8  Fix by checking the size change on the first resume.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21647,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sched: sch_cake: add bounds checks to host bulk flow fairness counts  Even though we fixed a logic error in the commit cited below\, syzbot still managed to trigger an underflow of the per-host bulk flow counters\, leading to an out of bounds memory access.  To avoid any such logic errors causing out of bounds memory accesses\, this commit factors out all accesses to the per-host bulk flow counters to a series of helpers that perform bounds-checking before any increments and decrements. This also has the benefit of improving readability by moving the conditional checks for the flow mode into these helpers\, instead of having them spread out throughout the code (which was the cause of the original logic error).  As part of this change\, the flow quantum calculation is consolidated into a helper function\, which means that the dithering applied to the ost load scaling is now applied both in the DRR rotation and when a sparse flow's quantum is first initiated. The only user-visible effect of this is that the maximum packet size that can be sent while a flow stays sparse will now vary with +/- one byte in some cases. This should not make a noticeable difference in practice\, and thus it's not worth complicating the code to preserve the old behaviour.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21646,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  afs: Fix the maximum cell name length  The kafs filesystem limits the maximum length of a cell to 256 bytes\, but a problem occurs if someone actually does that: kafs tries to create a directory under /proc/net/afs/ with the name of the cell\, but that fails with a warning:          WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405  because procfs limits the maximum filename length to 255.  However\, the DNS limits the maximum lookup length and\, by extension\, the maximum cell name\, to 255 less two (length count and trailing NUL).  Fix this by limiting the maximum acceptable cellname length to 253.  This also allows us to be sure we can create the ""/afs/.<cell>/"" mountpoint too.  Further\, split the YFS VL record cell name maximum to be the 256 allowed by the protocol and ignore the record retrieved by YFSVL.GetCellName if it exceeds 253.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-8176,libexpat1,HIGH,2.5.0-1+deb12u1,N/A,"A stack overflow vulnerability exists in the libexpat library due to the way it handles recursive entity expansion in XML documents. When parsing an XML document with deeply nested entity references\, libexpat can be forced to recurse indefinitely\, exhausting the stack space and causing a crash. This issue could lead to denial of service (DoS) or\, in some cases\, exploitable memory corruption\, depending on the environment and library usage.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57924,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fs: relax assertions on failure to encode file handles  Encoding file handles is usually performed by a filesystem >encode_fh() method that may fail for various reasons.  The legacy users of exportfs_encode_fh()\, namely\, nfsd and name_to_handle_at(2) syscall are ready to cope with the possibility of failure to encode a file handle.  There are a few other users of exportfs_encode_{fh\,fid}() that currently have a WARN_ON() assertion when ->encode_fh() fails. Relax those assertions because they are wrong.  The second linked bug report states commit 16aac5ad1fa9 (""ovl: support encoding non-decodable file handles"") in v6.6 as the regressing commit\, but this is not accurate.  The aforementioned commit only increases the chances of the assertion and allows triggering the assertion with the reproducer using overlayfs\, inotify and drop_caches.  Triggering this assertion was always possible with other filesystems and other reasons of ->encode_fh() failures and more particularly\, it was also possible with the exact same reproducer using overlayfs that is mounted with options index=on\,nfs_export=on also on kernels < v6.6. Therefore\, I am not listing the aforementioned commit as a Fixes commit.  Backport hint: this patch will have a trivial conflict applying to v6.6.y\, and other trivial conflicts applying to stable kernels < v6.6.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57925,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix a missing return value check bug  In the smb2_send_interim_resp()\, if ksmbd_alloc_work_struct() fails to allocate a node\, it returns a NULL pointer to the in_work pointer. This can lead to an illegal memory write of in_work->response_buf when allocate_interim_rsp_buf() attempts to perform a kzalloc() on it.  To address this issue\, incorporating a check for the return value of ksmbd_alloc_work_struct() ensures that the function returns immediately upon allocation failure\, thereby preventing the aforementioned illegal memory access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-12133,libtasn1-6,MEDIUM,4.19.0-2,4.19.0-2+deb12u1,"A flaw in libtasn1 causes inefficient handling of specific certificate data. When processing a large number of elements in a certificate\, libtasn1 takes much longer than expected\, which can slow down or even crash the system. This flaw allows an attacker to send a specially crafted certificate\, causing a denial of service attack.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-27144,github.com/go-jose/go-jose/v3,MEDIUM,v3.0.3,3.0.4,"Go JOSE provides an implementation of the Javascript Object Signing and Encryption set of standards in Go\, including support for JSON Web Encryption (JWE)\, JSON Web Signature (JWS)\, and JSON Web Token (JWT) standards. In versions on the 4.x branch prior to version 4.0.5\, when parsing compact JWS or JWE input\, Go JOSE could use excessive memory. The code used strings.Split(token\, ""."") to split JWT tokens\, which is vulnerable to excessive memory consumption when processing maliciously crafted tokens with a large number of `.` characters.  An attacker could exploit this by sending numerous malformed tokens\, leading to memory exhaustion and a Denial of Service. Version 4.0.5 fixes this issue. As a workaround\, applications could pre-validate that payloads passed to Go JOSE do not contain an excessive number of `.` characters.",|tykio/midsommar|
CVE-2024-57922,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add check for granularity in dml ceil/floor helpers  [Why] Wrapper functions for dcn_bw_ceil2() and dcn_bw_floor2() should check for granularity is non zero to avoid assert and divide-by-zero error in dcn_bw_ functions.  [How] Add check for granularity 0.  (cherry picked from commit f6e09701c3eb2ccb8cb0518e0b67f1c69742a4ec)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46760,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw88: usb: schedule rx work after everything is set up  Right now it's possible to hit NULL pointer dereference in rtw_rx_fill_rx_status on hw object and/or its fields because initialization routine can start getting USB replies before rtw_dev is fully setup.  The stack trace looks like this:  rtw_rx_fill_rx_status rtw8821c_query_rx_desc rtw_usb_rx_handler ... queue_work rtw_usb_read_port_complete ... usb_submit_urb rtw_usb_rx_resubmit rtw_usb_init_rx rtw_usb_probe  So while we do the async stuff rtw_usb_probe continues and calls rtw_register_hw\, which does all kinds of initialization (e.g. via ieee80211_register_hw) that rtw_rx_fill_rx_status relies on.  Fix this by moving the first usb_submit_urb after everything is set up.  For me\, this bug manifested as: [    8.893177] rtw_8821cu 1-1:1.2: band wrong\, packet dropped [    8.910904] rtw_8821cu 1-1:1.2: hw->conf.chandef.chan NULL in rtw_rx_fill_rx_status because I'm using Larry's backport of rtw88 driver with the NULL checks in rtw_rx_fill_rx_status.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-3238,linux-libc-dev,LOW,6.1.115-1,N/A,"A double-free flaw was found in the Linux kernel’s NTFS3 subsystem in how a user triggers remount and umount simultaneously. This flaw allows a local user to crash or potentially escalate their privileges on the system.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46762,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  xen: privcmd: Fix possible access to a freed kirqfd instance  Nothing prevents simultaneous ioctl calls to privcmd_irqfd_assign() and privcmd_irqfd_deassign(). If that happens\, it is possible that a kirqfd created and added to the irqfds_list by privcmd_irqfd_assign() may get removed by another thread executing privcmd_irqfd_deassign()\, while the former is still using it after dropping the locks.  This can lead to a situation where an already freed kirqfd instance may be accessed and cause kernel oops.  Use SRCU locking to prevent the same\, as is done for the KVM implementation for irqfds.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26953,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: esp: fix bad handling of pages from page_pool  When the skb is reorganized during esp_output (!esp->inline)\, the pages coming from the original skb fragments are supposed to be released back to the system through put_page. But if the skb fragment pages are originating from a page_pool\, calling put_page on them will trigger a page_pool leak which will eventually result in a crash.  This leak can be easily observed when using CONFIG_DEBUG_VM and doing ipsec + gre (non offloaded) forwarding:    BUG: Bad page state in process ksoftirqd/16  pfn:1451b6   page:00000000de2b8d32 refcount:0 mapcount:0 mapping:0000000000000000 index:0x1451b6000 pfn:0x1451b6   flags: 0x200000000000000(node=0|zone=2)   page_type: 0xffffffff()   raw: 0200000000000000 dead000000000040 ffff88810d23c000 0000000000000000   raw: 00000001451b6000 0000000000000001 00000000ffffffff 0000000000000000   page dumped because: page_pool leak   Modules linked in: ip_gre gre mlx5_ib mlx5_core xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink iptable_nat nf_nat xt_addrtype br_netfilter rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm ib_ipoib iw_cm ib_cm ib_uverbs ib_core overlay zram zsmalloc fuse [last unloaded: mlx5_core]   CPU: 16 PID: 96 Comm: ksoftirqd/16 Not tainted 6.8.0-rc4+ #22   Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014   Call Trace:    <TASK>    dump_stack_lvl+0x36/0x50    bad_page+0x70/0xf0    free_unref_page_prepare+0x27a/0x460    free_unref_page+0x38/0x120    esp_ssg_unref.isra.0+0x15f/0x200    esp_output_tail+0x66d/0x780    esp_xmit+0x2c5/0x360    validate_xmit_xfrm+0x313/0x370    ? validate_xmit_skb+0x1d/0x330    validate_xmit_skb_list+0x4c/0x70    sch_direct_xmit+0x23e/0x350    __dev_queue_xmit+0x337/0xba0    ? nf_hook_slow+0x3f/0xd0    ip_finish_output2+0x25e/0x580    iptunnel_xmit+0x19b/0x240    ip_tunnel_xmit+0x5fb/0xb60    ipgre_xmit+0x14d/0x280 [ip_gre]    dev_hard_start_xmit+0xc3/0x1c0    __dev_queue_xmit+0x208/0xba0    ? nf_hook_slow+0x3f/0xd0    ip_finish_output2+0x1ca/0x580    ip_sublist_rcv_finish+0x32/0x40    ip_sublist_rcv+0x1b2/0x1f0    ? ip_rcv_finish_core.constprop.0+0x460/0x460    ip_list_rcv+0x103/0x130    __netif_receive_skb_list_core+0x181/0x1e0    netif_receive_skb_list_internal+0x1b3/0x2c0    napi_gro_receive+0xc8/0x200    gro_cell_poll+0x52/0x90    __napi_poll+0x25/0x1a0    net_rx_action+0x28e/0x300    __do_softirq+0xc3/0x276    ? sort_range+0x20/0x20    run_ksoftirqd+0x1e/0x30    smpboot_thread_fn+0xa6/0x130    kthread+0xcd/0x100    ? kthread_complete_and_exit+0x20/0x20    ret_from_fork+0x31/0x50    ? kthread_complete_and_exit+0x20/0x20    ret_from_fork_asm+0x11/0x20    </TASK>  The suggested fix is to introduce a new wrapper (skb_page_unref) that covers page refcounting for page_pool pages as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26952,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix potencial out-of-bounds when buffer offset is invalid  I found potencial out-of-bounds when buffer offset fields of a few requests is invalid. This patch set the minimum value of buffer offset field to ->Buffer offset to validate buffer length.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57929,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  dm array: fix releasing a faulty array block twice in dm_array_cursor_end  When dm_bm_read_lock() fails due to locking or checksum errors\, it releases the faulty block implicitly while leaving an invalid output pointer behind. The caller of dm_bm_read_lock() should not operate on this invalid dm_block pointer\, or it will lead to undefined result. For example\, the dm_array_cursor incorrectly caches the invalid pointer on reading a faulty array block\, causing a double release in dm_array_cursor_end()\, then hitting the BUG_ON in dm-bufio cache_put().  Reproduce steps:  1. initialize a cache device  dmsetup create cmeta --table ""0 8192 linear /dev/sdc 0"" dmsetup create cdata --table ""0 65536 linear /dev/sdc 8192"" dmsetup create corig --table ""0 524288 linear /dev/sdc $262144"" dd if=/dev/zero of=/dev/mapper/cmeta bs=4k count=1 dmsetup create cache --table ""0 524288 cache /dev/mapper/cmeta \\ /dev/mapper/cdata /dev/mapper/corig 128 2 metadata2 writethrough smq 0""  2. wipe the second array block offline  dmsteup remove cache cmeta cdata corig mapping_root=$(dd if=/dev/sdc bs=1c count=8 skip=192 \\ 2>/dev/null | hexdump -e '1/8 ""%u\\n""') ablock=$(dd if=/dev/sdc bs=1c count=8 skip=$((4096*mapping_root+2056)) \\ 2>/dev/null | hexdump -e '1/8 ""%u\\n""') dd if=/dev/zero of=/dev/sdc bs=4k count=1 seek=$ablock  3. try reopen the cache device  dmsetup create cmeta --table ""0 8192 linear /dev/sdc 0"" dmsetup create cdata --table ""0 65536 linear /dev/sdc 8192"" dmsetup create corig --table ""0 524288 linear /dev/sdc $262144"" dmsetup create cache --table ""0 524288 cache /dev/mapper/cmeta \\ /dev/mapper/cdata /dev/mapper/corig 128 2 metadata2 writethrough smq 0""  Kernel logs:  (snip) device-mapper: array: array_block_check failed: blocknr 0 != wanted 10 device-mapper: block manager: array validator check failed for block 10 device-mapper: array: get_ablock failed device-mapper: cache metadata: dm_array_cursor_next for mapping failed ------------[ cut here ]------------ kernel BUG at drivers/md/dm-bufio.c:638!  Fix by setting the cached block pointer to NULL on errors.  In addition to the reproducer described above\, this fix can be verified using the ""array_cursor/damaged"" test in dm-unit:   dm-unit run /pdata/array_cursor/damaged --kernel-dir <KERNEL_DIR>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46765,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ice: protect XDP configuration with a mutex  The main threat to data consistency in ice_xdp() is a possible asynchronous PF reset. It can be triggered by a user or by TX timeout handler.  XDP setup and PF reset code access the same resources in the following sections: * ice_vsi_close() in ice_prepare_for_reset() - already rtnl-locked * ice_vsi_rebuild() for the PF VSI - not protected * ice_vsi_open() - already rtnl-locked  With an unfortunate timing\, such accesses can result in a crash such as the one below:  [ +1.999878] ice 0000:b1:00.0: Registered XDP mem model MEM_TYPE_XSK_BUFF_POOL on Rx ring 14 [ +2.002992] ice 0000:b1:00.0: Registered XDP mem model MEM_TYPE_XSK_BUFF_POOL on Rx ring 18 [Mar15 18:17] ice 0000:b1:00.0 ens801f0np0: NETDEV WATCHDOG: CPU: 38: transmit queue 14 timed out 80692736 ms [ +0.000093] ice 0000:b1:00.0 ens801f0np0: tx_timeout: VSI_num: 6\, Q 14\, NTC: 0x0\, HW_HEAD: 0x0\, NTU: 0x0\, INT: 0x4000001 [ +0.000012] ice 0000:b1:00.0 ens801f0np0: tx_timeout recovery level 1\, txqueue 14 [ +0.394718] ice 0000:b1:00.0: PTP reset successful [ +0.006184] BUG: kernel NULL pointer dereference\, address: 0000000000000098 [ +0.000045] #PF: supervisor read access in kernel mode [ +0.000023] #PF: error_code(0x0000) - not-present page [ +0.000023] PGD 0 P4D 0 [ +0.000018] Oops: 0000 [#1] PREEMPT SMP NOPTI [ +0.000023] CPU: 38 PID: 7540 Comm: kworker/38:1 Not tainted 6.8.0-rc7 #1 [ +0.000031] Hardware name: Intel Corporation S2600WFT/S2600WFT\, BIOS SE5C620.86B.02.01.0014.082620210524 08/26/2021 [ +0.000036] Workqueue: ice ice_service_task [ice] [ +0.000183] RIP: 0010:ice_clean_tx_ring+0xa/0xd0 [ice] [...] [ +0.000013] Call Trace: [ +0.000016] <TASK> [ +0.000014] ? __die+0x1f/0x70 [ +0.000029] ? page_fault_oops+0x171/0x4f0 [ +0.000029] ? schedule+0x3b/0xd0 [ +0.000027] ? exc_page_fault+0x7b/0x180 [ +0.000022] ? asm_exc_page_fault+0x22/0x30 [ +0.000031] ? ice_clean_tx_ring+0xa/0xd0 [ice] [ +0.000194] ice_free_tx_ring+0xe/0x60 [ice] [ +0.000186] ice_destroy_xdp_rings+0x157/0x310 [ice] [ +0.000151] ice_vsi_decfg+0x53/0xe0 [ice] [ +0.000180] ice_vsi_rebuild+0x239/0x540 [ice] [ +0.000186] ice_vsi_rebuild_by_type+0x76/0x180 [ice] [ +0.000145] ice_rebuild+0x18c/0x840 [ice] [ +0.000145] ? delay_tsc+0x4a/0xc0 [ +0.000022] ? delay_tsc+0x92/0xc0 [ +0.000020] ice_do_reset+0x140/0x180 [ice] [ +0.000886] ice_service_task+0x404/0x1030 [ice] [ +0.000824] process_one_work+0x171/0x340 [ +0.000685] worker_thread+0x277/0x3a0 [ +0.000675] ? preempt_count_add+0x6a/0xa0 [ +0.000677] ? _raw_spin_lock_irqsave+0x23/0x50 [ +0.000679] ? __pfx_worker_thread+0x10/0x10 [ +0.000653] kthread+0xf0/0x120 [ +0.000635] ? __pfx_kthread+0x10/0x10 [ +0.000616] ret_from_fork+0x2d/0x50 [ +0.000612] ? __pfx_kthread+0x10/0x10 [ +0.000604] ret_from_fork_asm+0x1b/0x30 [ +0.000604] </TASK>  The previous way of handling this through returning -EBUSY is not viable\, particularly when destroying AF_XDP socket\, because the kernel proceeds with removal anyway.  There is plenty of code between those calls and there is no need to create a large critical section that covers all of them\, same as there is no need to protect ice_vsi_rebuild() with rtnl_lock().  Add xdp_state_lock mutex to protect ice_vsi_rebuild() and ice_xdp().  Leaving unprotected sections in between would result in two states that have to be considered: 1. when the VSI is closed\, but not yet rebuild 2. when VSI is already rebuild\, but not yet open  The latter case is actually already handled through !netif_running() case\, we just need to adjust flag checking a little. The former one is not as trivial\, because between ice_vsi_close() and ice_vsi_rebuild()\, a lot of hardware interaction happens\, this can make adding/deleting rings exit with an error. Luckily\, VSI rebuild is pending and can apply new configuration for us in a managed fashion.  Therefore\, add an additional VSI state flag ICE_VSI_REBUILD_PENDING to indicate that ice_x ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41023,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sched/deadline: Fix task_struct reference leak  During the execution of the following stress test with linux-rt:  stress-ng --cyclic 30 --timeout 30 --minimize --quiet  kmemleak frequently reported a memory leak concerning the task_struct:  unreferenced object 0xffff8881305b8000 (size 16136):   comm ""stress-ng""\, pid 614\, jiffies 4294883961 (age 286.412s)   object hex dump (first 32 bytes):     02 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .@..............     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................   debug hex dump (first 16 bytes):     53 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00  S...............   backtrace:     [<00000000046b6790>] dup_task_struct+0x30/0x540     [<00000000c5ca0f0b>] copy_process+0x3d9/0x50e0     [<00000000ced59777>] kernel_clone+0xb0/0x770     [<00000000a50befdc>] __do_sys_clone+0xb6/0xf0     [<000000001dbf2008>] do_syscall_64+0x5d/0xf0     [<00000000552900ff>] entry_SYSCALL_64_after_hwframe+0x6e/0x76  The issue occurs in start_dl_timer()\, which increments the task_struct reference count and sets a timer. The timer callback\, dl_task_timer\, is supposed to decrement the reference count upon expiration. However\, if enqueue_task_dl() is called before the timer expires and cancels it\, the reference count is not decremented\, leading to the leak.  This patch fixes the reference leak by ensuring the task_struct reference count is properly decremented when the timer is canceled.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26954,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix slab-out-of-bounds in smb_strndup_from_utf16()  If ->NameOffset of smb2_create_req is smaller than Buffer offset of smb2_create_req\, slab-out-of-bounds read can happen from smb2_open. This patch set the minimum value of the name offset to the buffer offset to validate name length of smb2_create_req().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-24855,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"A race condition was found in the Linux kernel's scsi device driver in lpfc_unregister_fcf_rescan() function. This can result in a null pointer dereference issue\, possibly leading to a kernel panic or denial of service issue.     ",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52916,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: aspeed: Fix memory overwrite if timing is 1600x900  When capturing 1600x900\, system could crash when system memory usage is tight.  The way to reproduce this issue: 1. Use 1600x900 to display on host 2. Mount ISO through 'Virtual media' on OpenBMC's web 3. Run script as below on host to do sha continuously   #!/bin/bash   while [ [1] ];   do \tfind /media -type f -printf '""%h/%f""\\n' | xargs sha256sum   done 4. Open KVM on OpenBMC's web  The size of macro block captured is 8x8. Therefore\, we should make sure the height of src-buf is 8 aligned to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-55881,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: x86: Play nice with protected guests in complete_hypercall_exit()  Use is_64_bit_hypercall() instead of is_64_bit_mode() to detect a 64-bit hypercall when completing said hypercall.  For guests with protected state\, e.g. SEV-ES and SEV-SNP\, KVM must assume the hypercall was made in 64-bit mode as the vCPU state needed to detect 64-bit mode is unavailable.  Hacking the sev_smoke_test selftest to generate a KVM_HC_MAP_GPA_RANGE hypercall via VMGEXIT trips the WARN:    ------------[ cut here ]------------   WARNING: CPU: 273 PID: 326626 at arch/x86/kvm/x86.h:180 complete_hypercall_exit+0x44/0xe0 [kvm]   Modules linked in: kvm_amd kvm ... [last unloaded: kvm]   CPU: 273 UID: 0 PID: 326626 Comm: sev_smoke_test Not tainted 6.12.0-smp--392e932fa0f3-feat #470   Hardware name: Google Astoria/astoria\, BIOS 0.20240617.0-0 06/17/2024   RIP: 0010:complete_hypercall_exit+0x44/0xe0 [kvm]   Call Trace:    <TASK>    kvm_arch_vcpu_ioctl_run+0x2400/0x2720 [kvm]    kvm_vcpu_ioctl+0x54f/0x630 [kvm]    __se_sys_ioctl+0x6b/0xc0    do_syscall_64+0x83/0x160    entry_SYSCALL_64_after_hwframe+0x76/0x7e    </TASK>   ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46834,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ethtool: fail closed if we can't get max channel used in indirection tables  Commit 0d1b7d6c9274 (""bnxt: fix crashes when reducing ring count with active RSS contexts"") proves that allowing indirection table to contain channels with out of bounds IDs may lead to crashes. Currently the max channel check in the core gets skipped if driver can't fetch the indirection table or when we can't allocate memory.  Both of those conditions should be extremely rare but if they do happen we should try to be safe and fail the channel change.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35808,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md/dm-raid: don't call md_reap_sync_thread() directly  Currently md_reap_sync_thread() is called from raid_message() directly without holding 'reconfig_mutex'\, this is definitely unsafe because md_reap_sync_thread() can change many fields that is protected by 'reconfig_mutex'.  However\, hold 'reconfig_mutex' here is still problematic because this will cause deadlock\, for example\, commit 130443d60b1b (""md: refactor idle/frozen_sync_thread() to fix deadlock"").  Fix this problem by using stop_sync_thread() to unregister sync_thread\, like md/raid did.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-3847,linux-libc-dev,HIGH,6.1.115-1,N/A,"An unauthorized access to the execution of the setuid file with capabilities flaw in the Linux kernel OverlayFS subsystem was found in the way user copying a capable file from a nosuid mount into another mount. A local user could use this flaw to escalate their privileges on the system.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35904,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  selinux: avoid dereference of garbage after mount failure  In case kern_mount() fails and returns an error pointer return in the error branch instead of continuing and dereferencing the error pointer.  While on it drop the never read static variable selinuxfs_mount.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-2818,libpoppler126,LOW,22.12.0-2+b1,N/A,"An exploitable heap overflow vulnerability exists in the image rendering functionality of Poppler 0.53.0. A specifically crafted PDF can cause an overly large number of color components during image rendering\, resulting in heap corruption. An attacker controlled PDF file can be used to trigger this vulnerability.",|tykio/midsommar|
CVE-2024-52560,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Mark inode as bad as soon as error detected in mi_enum_attr()  Extended the `mi_enum_attr()` function interface with an additional parameter\, `struct ntfs_inode *ni`\, to allow marking the inode as bad as soon as an error is detected.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36899,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  gpiolib: cdev: Fix use after free in lineinfo_changed_notify  The use-after-free issue occurs as follows: when the GPIO chip device file is being closed by invoking gpio_chrdev_release()\, watched_lines is freed by bitmap_free()\, but the unregistration of lineinfo_changed_nb notifier chain failed due to waiting write rwsem. Additionally\, one of the GPIO chip's lines is also in the release process and holds the notifier chain's read rwsem. Consequently\, a race condition leads to the use-after-free of watched_lines.  Here is the typical stack when issue happened:  [free] gpio_chrdev_release()   --> bitmap_free(cdev->watched_lines)                  <-- freed   --> blocking_notifier_chain_unregister()     --> down_write(&nh->rwsem)                          <-- waiting rwsem           --> __down_write_common()             --> rwsem_down_write_slowpath()                   --> schedule_preempt_disabled()                     --> schedule()  [use] st54spi_gpio_dev_release()   --> gpio_free()     --> gpiod_free()       --> gpiod_free_commit()         --> gpiod_line_state_notify()           --> blocking_notifier_call_chain()             --> down_read(&nh->rwsem);                  <-- held rwsem             --> notifier_call_chain()               --> lineinfo_changed_notify()                 --> test_bit(xxxx\, cdev->watched_lines) <-- use after free  The side effect of the use-after-free issue is that a GPIO line event is being generated for userspace where it shouldn't. However\, since the chrdev is being closed\, userspace won't have the chance to read that event anyway.  To fix the issue\, call the bitmap_free() function after the unregistration of lineinfo_changed_nb notifier chain.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-24358,github.com/gorilla/csrf,MEDIUM,v1.7.2,1.7.3,"gorilla/csrf provides Cross Site Request Forgery (CSRF) prevention middleware for Go web applications & services. Prior to 1.7.2\, gorilla/csrf does not validate the Origin header against an allowlist. Its executes its validation of the Referer header for cross-origin requests only when it believes the request is being served over TLS. It determines this by inspecting the r.URL.Scheme value. However\, this value is never populated for ""server"" requests per the Go spec\, and so this check does not run in practice. This vulnerability allows an attacker who has gained XSS on a subdomain or top level domain to perform authenticated form submissions against gorilla/csrf protected targets that share the same top level domain. This vulnerability is fixed in 1.7.2.",|tykio/midsommar|
CVE-2025-40325,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md/raid10: wait barrier before returning discard request with REQ_NOWAIT  raid10_handle_discard should wait barrier before returning a discard bio which has REQ_NOWAIT. And there is no need to print warning calltrace if a discard bio has REQ_NOWAIT flag. Quality engineer usually checks dmesg and reports error if dmesg has warning/error calltrace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-2814,libpoppler126,LOW,22.12.0-2+b1,N/A,"An exploitable heap overflow vulnerability exists in the image rendering functionality of Poppler 0.53.0. A specifically crafted pdf can cause an image resizing after allocation has already occurred\, resulting in heap corruption which can lead to code execution. An attacker controlled PDF file can be used to trigger this vulnerability.",|tykio/midsommar|
CVE-2023-6039,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A use-after-free flaw was found in lan78xx_disconnect in drivers/net/usb/lan78xx.c in the network sub-component\, net/usb/lan78xx in the Linux Kernel. This flaw allows a local attacker to crash the system when the LAN78XX USB device detaches.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52452,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix accesses to uninit stack slots  Privileged programs are supposed to be able to read uninitialized stack memory (ever since 6715df8d5) but\, before this patch\, these accesses were permitted inconsistently. In particular\, accesses were permitted above state->allocated_stack\, but not below it. In other words\, if the stack was already ""large enough""\, the access was permitted\, but otherwise the access was rejected instead of being allowed to ""grow the stack"". This undesired rejection was happening in two places: - in check_stack_slot_within_bounds() - in check_stack_range_initialized() This patch arranges for these accesses to be permitted. A bunch of tests that were relying on the old rejection had to change; all of them were changed to add also run unprivileged\, in which case the old behavior persists. One tests couldn't be updated - global_func16 - because it can't run unprivileged for other reasons.  This patch also fixes the tracking of the stack size for variable-offset reads. This second fix is bundled in the same commit as the first one because they're inter-related. Before this patch\, writes to the stack using registers containing a variable offset (as opposed to registers with fixed\, known values) were not properly contributing to the function's needed stack size. As a result\, it was possible for a program to verify\, but then to attempt to read out-of-bounds data at runtime because a too small stack had been allocated for it.  Each function tracks the size of the stack it needs in bpf_subprog_info.stack_depth\, which is maintained by update_stack_depth(). For regular memory accesses\, check_mem_access() was calling update_state_depth() but it was passing in only the fixed part of the offset register\, ignoring the variable offset. This was incorrect; the minimum possible value of that register should be used instead.  This tracking is now fixed by centralizing the tracking of stack size in grow_stack_state()\, and by lifting the calls to grow_stack_state() to check_stack_access_within_bounds() as suggested by Andrii. The code is now simpler and more convincingly tracks the correct maximum stack size. check_stack_range_initialized() can now rely on enough stack having been allocated for the access; this helps with the fix for the first issue.  A few tests were changed to also check the stack depth computation. The one that fails without this patch is verifier_var_off:stack_write_priv_vs_unpriv.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-13694,linux-libc-dev,LOW,6.1.115-1,N/A,"The acpi_ps_complete_final_op() function in drivers/acpi/acpica/psobject.c in the Linux kernel through 4.12.9 does not flush the node and node_ext caches and causes a kernel stack dump\, which allows local users to obtain sensitive information from kernel memory and bypass the KASLR protection mechanism (in the kernel through 4.9) via a crafted ACPI table.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46733,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix qgroup reserve leaks in cow_file_range  In the buffered write path\, the dirty page owns the qgroup reserve until it creates an ordered_extent.  Therefore\, any errors that occur before the ordered_extent is created must free that reservation\, or else the space is leaked. The fstest generic/475 exercises various IO error paths\, and is able to trigger errors in cow_file_range where we fail to get to allocating the ordered extent. Note that because we *do* clear delalloc\, we are likely to remove the inode from the delalloc list\, so the inodes/pages to not have invalidate/launder called on them in the commit abort path.  This results in failures at the unmount stage of the test that look like:    BTRFS: error (device dm-8 state EA) in cleanup_transaction:2018: errno=-5 IO failure   BTRFS: error (device dm-8 state EA) in btrfs_replace_file_extents:2416: errno=-5 IO failure   BTRFS warning (device dm-8 state EA): qgroup 0/5 has unreleased space\, type 0 rsv 28672   ------------[ cut here ]------------   WARNING: CPU: 3 PID: 22588 at fs/btrfs/disk-io.c:4333 close_ctree+0x222/0x4d0 [btrfs]   Modules linked in: btrfs blake2b_generic libcrc32c xor zstd_compress raid6_pq   CPU: 3 PID: 22588 Comm: umount Kdump: loaded Tainted: G W          6.10.0-rc7-gab56fde445b8 #21   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS Arch Linux 1.16.3-1-1 04/01/2014   RIP: 0010:close_ctree+0x222/0x4d0 [btrfs]   RSP: 0018:ffffb4465283be00 EFLAGS: 00010202   RAX: 0000000000000001 RBX: ffffa1a1818e1000 RCX: 0000000000000001   RDX: 0000000000000000 RSI: ffffb4465283bbe0 RDI: ffffa1a19374fcb8   RBP: ffffa1a1818e13c0 R08: 0000000100028b16 R09: 0000000000000000   R10: 0000000000000003 R11: 0000000000000003 R12: ffffa1a18ad7972c   R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000   FS:  00007f9168312b80(0000) GS:ffffa1a4afcc0000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 00007f91683c9140 CR3: 000000010acaa000 CR4: 00000000000006f0   Call Trace:    <TASK>    ? close_ctree+0x222/0x4d0 [btrfs]    ? __warn.cold+0x8e/0xea    ? close_ctree+0x222/0x4d0 [btrfs]    ? report_bug+0xff/0x140    ? handle_bug+0x3b/0x70    ? exc_invalid_op+0x17/0x70    ? asm_exc_invalid_op+0x1a/0x20    ? close_ctree+0x222/0x4d0 [btrfs]    generic_shutdown_super+0x70/0x160    kill_anon_super+0x11/0x40    btrfs_kill_super+0x11/0x20 [btrfs]    deactivate_locked_super+0x2e/0xa0    cleanup_mnt+0xb5/0x150    task_work_run+0x57/0x80    syscall_exit_to_user_mode+0x121/0x130    do_syscall_64+0xab/0x1a0    entry_SYSCALL_64_after_hwframe+0x77/0x7f   RIP: 0033:0x7f916847a887   ---[ end trace 0000000000000000 ]---   BTRFS error (device dm-8 state EA): qgroup reserved space leaked  Cases 2 and 3 in the out_reserve path both pertain to this type of leak and must free the reserved qgroup data. Because it is already an error path\, I opted not to handle the possible errors in btrfs_free_qgroup_data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52751,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix use-after-free in smb2_query_info_compound()  The following UAF was triggered when running fstests generic/072 with KASAN enabled against Windows Server 2022 and mount options 'multichannel\,max_channels=2\,vers=3.1.1\,mfsymlinks\,noperm'    BUG: KASAN: slab-use-after-free in smb2_query_info_compound+0x423/0x6d0 [cifs]   Read of size 8 at addr ffff888014941048 by task xfs_io/27534    CPU: 0 PID: 27534 Comm: xfs_io Not tainted 6.6.0-rc7 #1   Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS   rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014   Call Trace:    dump_stack_lvl+0x4a/0x80    print_report+0xcf/0x650    ? srso_alias_return_thunk+0x5/0x7f    ? srso_alias_return_thunk+0x5/0x7f    ? __phys_addr+0x46/0x90    kasan_report+0xda/0x110    ? smb2_query_info_compound+0x423/0x6d0 [cifs]    ? smb2_query_info_compound+0x423/0x6d0 [cifs]    smb2_query_info_compound+0x423/0x6d0 [cifs]    ? __pfx_smb2_query_info_compound+0x10/0x10 [cifs]    ? srso_alias_return_thunk+0x5/0x7f    ? __stack_depot_save+0x39/0x480    ? kasan_save_stack+0x33/0x60    ? kasan_set_track+0x25/0x30    ? ____kasan_slab_free+0x126/0x170    smb2_queryfs+0xc2/0x2c0 [cifs]    ? __pfx_smb2_queryfs+0x10/0x10 [cifs]    ? __pfx___lock_acquire+0x10/0x10    smb311_queryfs+0x210/0x220 [cifs]    ? __pfx_smb311_queryfs+0x10/0x10 [cifs]    ? srso_alias_return_thunk+0x5/0x7f    ? __lock_acquire+0x480/0x26c0    ? lock_release+0x1ed/0x640    ? srso_alias_return_thunk+0x5/0x7f    ? do_raw_spin_unlock+0x9b/0x100    cifs_statfs+0x18c/0x4b0 [cifs]    statfs_by_dentry+0x9b/0xf0    fd_statfs+0x4e/0xb0    __do_sys_fstatfs+0x7f/0xe0    ? __pfx___do_sys_fstatfs+0x10/0x10    ? srso_alias_return_thunk+0x5/0x7f    ? lockdep_hardirqs_on_prepare+0x136/0x200    ? srso_alias_return_thunk+0x5/0x7f    do_syscall_64+0x3f/0x90    entry_SYSCALL_64_after_hwframe+0x6e/0xd8    Allocated by task 27534:    kasan_save_stack+0x33/0x60    kasan_set_track+0x25/0x30    __kasan_kmalloc+0x8f/0xa0    open_cached_dir+0x71b/0x1240 [cifs]    smb2_query_info_compound+0x5c3/0x6d0 [cifs]    smb2_queryfs+0xc2/0x2c0 [cifs]    smb311_queryfs+0x210/0x220 [cifs]    cifs_statfs+0x18c/0x4b0 [cifs]    statfs_by_dentry+0x9b/0xf0    fd_statfs+0x4e/0xb0    __do_sys_fstatfs+0x7f/0xe0    do_syscall_64+0x3f/0x90    entry_SYSCALL_64_after_hwframe+0x6e/0xd8    Freed by task 27534:    kasan_save_stack+0x33/0x60    kasan_set_track+0x25/0x30    kasan_save_free_info+0x2b/0x50    ____kasan_slab_free+0x126/0x170    slab_free_freelist_hook+0xd0/0x1e0    __kmem_cache_free+0x9d/0x1b0    open_cached_dir+0xff5/0x1240 [cifs]    smb2_query_info_compound+0x5c3/0x6d0 [cifs]    smb2_queryfs+0xc2/0x2c0 [cifs]  This is a race between open_cached_dir() and cached_dir_lease_break() where the cache entry for the open directory handle receives a lease break while creating it.  And before returning from open_cached_dir()\, we put the last reference of the new @cfid because of !@cfid->has_lease.  Besides the UAF\, while running xfstests a lot of missed lease breaks have been noticed in tests that run several concurrent statfs(2) calls on those cached fids    CIFS: VFS: \\\\w22-root1.gandalf.test No task to wake\, unknown frame...   CIFS: VFS: \\\\w22-root1.gandalf.test Cmd: 18 Err: 0x0 Flags: 0x1...   CIFS: VFS: \\\\w22-root1.gandalf.test smb buf 00000000715bfe83 len 108   CIFS: VFS: Dump pending requests:   CIFS: VFS: \\\\w22-root1.gandalf.test No task to wake\, unknown frame...   CIFS: VFS: \\\\w22-root1.gandalf.test Cmd: 18 Err: 0x0 Flags: 0x1...   CIFS: VFS: \\\\w22-root1.gandalf.test smb buf 000000005aa7316e len 108   ...  To fix both\, in open_cached_dir() ensure that @cfid->has_lease is set right before sending out compounded request so that any potential lease break will be get processed by demultiplex thread while we're still caching @cfid.  And\, if open failed for some reason\, re-check @cfid->has_lease to decide whether or not put lease reference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-13693,linux-libc-dev,LOW,6.1.115-1,N/A,"The acpi_ds_create_operands() function in drivers/acpi/acpica/dsutils.c in the Linux kernel through 4.12.9 does not flush the operand cache and causes a kernel stack dump\, which allows local users to obtain sensitive information from kernel memory and bypass the KASLR protection mechanism (in the kernel through 4.9) via a crafted ACPI table.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46730,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Ensure array index tg_inst won't be -1  [WHY & HOW] tg_inst will be a negative if timing_generator_count equals 0\, which should be checked before used.  This fixes 2 OVERRUN issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-0630,linux-libc-dev,LOW,6.1.115-1,N/A,"An information disclosure vulnerability in the kernel trace subsystem could enable a local malicious application to access data outside of its permission levels. This issue is rated as Moderate because it first requires compromising a privileged process. Product: Android. Versions: Kernel-3.10\, Kernel-3.18. Android ID: A-34277115.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57898,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: cfg80211: clear link ID from bitmap during link delete after clean up  Currently\, during link deletion\, the link ID is first removed from the valid_links bitmap before performing any clean-up operations. However\, some functions require the link ID to remain in the valid_links bitmap. One such example is cfg80211_cac_event(). The flow is -  nl80211_remove_link()     cfg80211_remove_link()         ieee80211_del_intf_link()             ieee80211_vif_set_links()                 ieee80211_vif_update_links()                     ieee80211_link_stop()                         cfg80211_cac_event()  cfg80211_cac_event() requires link ID to be present but it is cleared already in cfg80211_remove_link(). Ultimately\, WARN_ON() is hit.  Therefore\, clear the link ID from the bitmap only after completing the link clean-up.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57899,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mac80211: fix mbss changed flags corruption on 32 bit systems  On 32-bit systems\, the size of an unsigned long is 4 bytes\, while a u64 is 8 bytes. Therefore\, when using or_each_set_bit(bit\, &bits\, sizeof(changed) * BITS_PER_BYTE)\, the code is incorrectly searching for a bit in a 32-bit variable that is expected to be 64 bits in size\, leading to incorrect bit finding.  Solution: Ensure that the size of the bits variable is correctly adjusted for each architecture.   Call Trace:   ? show_regs+0x54/0x58   ? __warn+0x6b/0xd4   ? ieee80211_link_info_change_notify+0xcc/0xd4 [mac80211]   ? report_bug+0x113/0x150   ? exc_overflow+0x30/0x30   ? handle_bug+0x27/0x44   ? exc_invalid_op+0x18/0x50   ? handle_exception+0xf6/0xf6   ? exc_overflow+0x30/0x30   ? ieee80211_link_info_change_notify+0xcc/0xd4 [mac80211]   ? exc_overflow+0x30/0x30   ? ieee80211_link_info_change_notify+0xcc/0xd4 [mac80211]   ? ieee80211_mesh_work+0xff/0x260 [mac80211]   ? cfg80211_wiphy_work+0x72/0x98 [cfg80211]   ? process_one_work+0xf1/0x1fc   ? worker_thread+0x2c0/0x3b4   ? kthread+0xc7/0xf0   ? mod_delayed_work_on+0x4c/0x4c   ? kthread_complete_and_exit+0x14/0x14   ? ret_from_fork+0x24/0x38   ? kthread_complete_and_exit+0x14/0x14   ? ret_from_fork_asm+0xf/0x14   ? entry_INT80_32+0xf0/0xf0  [restore no-op path for no changes]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-37454,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.4.2. A crafted UDF filesystem image causes a use-after-free write operation in the udf_put_super and udf_close_lvid functions in fs/udf/super.c. NOTE: the suse.com reference has a different perspective about this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50047,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix UAF in async decryption  Doing an async decryption (large read) crashes with a slab-use-after-free way down in the crypto API.  Reproducer:     # mount.cifs -o ...\,seal\,esize=1 //srv/share /mnt     # dd if=/mnt/largefile of=/dev/null     ...     [  194.196391] ==================================================================     [  194.196844] BUG: KASAN: slab-use-after-free in gf128mul_4k_lle+0xc1/0x110     [  194.197269] Read of size 8 at addr ffff888112bd0448 by task kworker/u77:2/899     [  194.197707]     [  194.197818] CPU: 12 UID: 0 PID: 899 Comm: kworker/u77:2 Not tainted 6.11.0-lku-00028-gfca3ca14a17a-dirty #43     [  194.198400] Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.16.2-3-gd478f380-prebuilt.qemu.org 04/01/2014     [  194.199046] Workqueue: smb3decryptd smb2_decrypt_offload [cifs]     [  194.200032] Call Trace:     [  194.200191]  <TASK>     [  194.200327]  dump_stack_lvl+0x4e/0x70     [  194.200558]  ? gf128mul_4k_lle+0xc1/0x110     [  194.200809]  print_report+0x174/0x505     [  194.201040]  ? __pfx__raw_spin_lock_irqsave+0x10/0x10     [  194.201352]  ? srso_return_thunk+0x5/0x5f     [  194.201604]  ? __virt_addr_valid+0xdf/0x1c0     [  194.201868]  ? gf128mul_4k_lle+0xc1/0x110     [  194.202128]  kasan_report+0xc8/0x150     [  194.202361]  ? gf128mul_4k_lle+0xc1/0x110     [  194.202616]  gf128mul_4k_lle+0xc1/0x110     [  194.202863]  ghash_update+0x184/0x210     [  194.203103]  shash_ahash_update+0x184/0x2a0     [  194.203377]  ? __pfx_shash_ahash_update+0x10/0x10     [  194.203651]  ? srso_return_thunk+0x5/0x5f     [  194.203877]  ? crypto_gcm_init_common+0x1ba/0x340     [  194.204142]  gcm_hash_assoc_remain_continue+0x10a/0x140     [  194.204434]  crypt_message+0xec1/0x10a0 [cifs]     [  194.206489]  ? __pfx_crypt_message+0x10/0x10 [cifs]     [  194.208507]  ? srso_return_thunk+0x5/0x5f     [  194.209205]  ? srso_return_thunk+0x5/0x5f     [  194.209925]  ? srso_return_thunk+0x5/0x5f     [  194.210443]  ? srso_return_thunk+0x5/0x5f     [  194.211037]  decrypt_raw_data+0x15f/0x250 [cifs]     [  194.212906]  ? __pfx_decrypt_raw_data+0x10/0x10 [cifs]     [  194.214670]  ? srso_return_thunk+0x5/0x5f     [  194.215193]  smb2_decrypt_offload+0x12a/0x6c0 [cifs]  This is because TFM is being used in parallel.  Fix this by allocating a new AEAD TFM for async decryption\, but keep the existing one for synchronous READ cases (similar to what is done in smb3_calc_signature()).  Also remove the calls to aead_request_set_callback() and crypto_wait_req() since it's always going to be a synchronous operation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56622,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: core: sysfs: Prevent div by zero  Prevent a division by 0 when monitoring is not enabled.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56569,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ftrace: Fix regression with module command in stack_trace_filter  When executing the following command:      # echo ""write*:mod:ext3"" > /sys/kernel/tracing/stack_trace_filter  The current mod command causes a null pointer dereference. While commit 0f17976568b3f (""ftrace: Fix regression with module command in stack_trace_filter"") has addressed part of the issue\, it left a corner case unhandled\, which still results in a kernel crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35878,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  of: module: prevent NULL pointer dereference in vsnprintf()  In of_modalias()\, we can get passed the str and len parameters which would cause a kernel oops in vsnprintf() since it only allows passing a NULL ptr when the length is also 0. Also\, we need to filter out the negative values of the len parameter as these will result in a really huge buffer since snprintf() takes size_t parameter while ours is ssize_t...  Found by Linux Verification Center (linuxtesting.org) with the Svace static analysis tool.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56623,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: qla2xxx: Fix use after free on unload  System crash is observed with stack trace warning of use after free. There are 2 signals to tell dpc_thread to terminate (UNLOADING flag and kthread_stop).  On setting the UNLOADING flag when dpc_thread happens to run at the time and sees the flag\, this causes dpc_thread to exit and clean up itself. When kthread_stop is called for final cleanup\, this causes use after free.  Remove UNLOADING signal to terminate dpc_thread.  Use the kthread_stop as the main signal to exit dpc_thread.  [596663.812935] kernel BUG at mm/slub.c:294! [596663.812950] invalid opcode: 0000 [#1] SMP PTI [596663.812957] CPU: 13 PID: 1475935 Comm: rmmod Kdump: loaded Tainted: G          IOE    --------- -  - 4.18.0-240.el8.x86_64 #1 [596663.812960] Hardware name: HP ProLiant DL380p Gen8\, BIOS P70 08/20/2012 [596663.812974] RIP: 0010:__slab_free+0x17d/0x360  ... [596663.813008] Call Trace: [596663.813022]  ? __dentry_kill+0x121/0x170 [596663.813030]  ? _cond_resched+0x15/0x30 [596663.813034]  ? _cond_resched+0x15/0x30 [596663.813039]  ? wait_for_completion+0x35/0x190 [596663.813048]  ? try_to_wake_up+0x63/0x540 [596663.813055]  free_task+0x5a/0x60 [596663.813061]  kthread_stop+0xf3/0x100 [596663.813103]  qla2x00_remove_one+0x284/0x440 [qla2xxx]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56568,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  iommu/arm-smmu: Defer probe of clients after smmu device bound  Null pointer dereference occurs due to a race between smmu driver probe and client driver probe\, when of_dma_configure() for client is called after the iommu_device_register() for smmu driver probe has executed but before the driver_bound() for smmu driver has been called.  Following is how the race occurs:  T1:Smmu device probe\t\tT2: Client device probe  really_probe() arm_smmu_device_probe() iommu_device_register() \t\t\t\t\treally_probe() \t\t\t\t\tplatform_dma_configure() \t\t\t\t\tof_dma_configure() \t\t\t\t\tof_dma_configure_id() \t\t\t\t\tof_iommu_configure() \t\t\t\t\tiommu_probe_device() \t\t\t\t\tiommu_init_device() \t\t\t\t\tarm_smmu_probe_device() \t\t\t\t\tarm_smmu_get_by_fwnode() \t\t\t\t\t\tdriver_find_device_by_fwnode() \t\t\t\t\t\tdriver_find_device() \t\t\t\t\t\tnext_device() \t\t\t\t\t\tklist_next() \t\t\t\t\t\t    /* null ptr \t\t\t\t\t\t       assigned to smmu */ \t\t\t\t\t/* null ptr dereference \t\t\t\t\t   while smmu->streamid_mask */ driver_bound() \tklist_add_tail()  When this null smmu pointer is dereferenced later in arm_smmu_probe_device\, the device crashes.  Fix this by deferring the probe of the client device until the smmu device has bound to the arm smmu driver.  [will: Add comment]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40945,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  iommu: Return right value in iommu_sva_bind_device()  iommu_sva_bind_device() should return either a sva bond handle or an ERR_PTR value in error cases. Existing drivers (idxd and uacce) only check the return value with IS_ERR(). This could potentially lead to a kernel NULL pointer dereference issue if the function returns NULL instead of an error pointer.  In reality\, this doesn't cause any problems because iommu_sva_bind_device() only returns NULL when the kernel is not configured with CONFIG_IOMMU_SVA. In this case\, iommu_dev_enable_feature(dev\, IOMMU_DEV_FEAT_SVA) will return an error\, and the device drivers won't call iommu_sva_bind_device() at all.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56625,linux-libc-dev,LOW,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  can: dev: can_set_termination(): allow sleeping GPIOs  In commit 6e86a1543c37 (""can: dev: provide optional GPIO based termination support"") GPIO based termination support was added.  For no particular reason that patch uses gpiod_set_value() to set the GPIO. This leads to the following warning\, if the systems uses a sleeping GPIO\, i.e. behind an I2C port expander:  | WARNING: CPU: 0 PID: 379 at /drivers/gpio/gpiolib.c:3496 gpiod_set_value+0x50/0x6c | CPU: 0 UID: 0 PID: 379 Comm: ip Not tainted 6.11.0-20241016-1 #1 823affae360cc91126e4d316d7a614a8bf86236c  Replace gpiod_set_value() by gpiod_set_value_cansleep() to allow the use of sleeping GPIOs.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44972,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: do not clear page dirty inside extent_write_locked_range()  [BUG] For subpage + zoned case\, the following workload can lead to rsv data leak at unmount time:    # mkfs.btrfs -f -s 4k $dev   # mount $dev $mnt   # fsstress -w -n 8 -d $mnt -s 1709539240   0/0: fiemap - no filename   0/1: copyrange read - no filename   0/2: write - no filename   0/3: rename - no source filename   0/4: creat f0 x:0 0 0   0/4: creat add id=0\,parent=-1   0/5: writev f0[259 1 0 0 0 0] [778052\,113\,965] 0   0/6: ioctl(FIEMAP) f0[259 1 0 0 224 887097] [1294220\,2291618343991484791\,0x10000] -1   0/7: dwrite - xfsctl(XFS_IOC_DIOINFO) f0[259 1 0 0 224 887097] return 25\, fallback to stat()   0/7: dwrite f0[259 1 0 0 224 887097] [696320\,102400] 0   # umount $mnt  The dmesg includes the following rsv leak detection warning (all call trace skipped):    ------------[ cut here ]------------   WARNING: CPU: 2 PID: 4528 at fs/btrfs/inode.c:8653 btrfs_destroy_inode+0x1e0/0x200 [btrfs]   ---[ end trace 0000000000000000 ]---   ------------[ cut here ]------------   WARNING: CPU: 2 PID: 4528 at fs/btrfs/inode.c:8654 btrfs_destroy_inode+0x1a8/0x200 [btrfs]   ---[ end trace 0000000000000000 ]---   ------------[ cut here ]------------   WARNING: CPU: 2 PID: 4528 at fs/btrfs/inode.c:8660 btrfs_destroy_inode+0x1a0/0x200 [btrfs]   ---[ end trace 0000000000000000 ]---   BTRFS info (device sda): last unmount of filesystem 1b4abba9-de34-4f07-9e7f-157cf12a18d6   ------------[ cut here ]------------   WARNING: CPU: 3 PID: 4528 at fs/btrfs/block-group.c:4434 btrfs_free_block_groups+0x338/0x500 [btrfs]   ---[ end trace 0000000000000000 ]---   BTRFS info (device sda): space_info DATA has 268218368 free\, is not full   BTRFS info (device sda): space_info total=268435456\, used=204800\, pinned=0\, reserved=0\, may_use=12288\, readonly=0 zone_unusable=0   BTRFS info (device sda): global_block_rsv: size 0 reserved 0   BTRFS info (device sda): trans_block_rsv: size 0 reserved 0   BTRFS info (device sda): chunk_block_rsv: size 0 reserved 0   BTRFS info (device sda): delayed_block_rsv: size 0 reserved 0   BTRFS info (device sda): delayed_refs_rsv: size 0 reserved 0   ------------[ cut here ]------------   WARNING: CPU: 3 PID: 4528 at fs/btrfs/block-group.c:4434 btrfs_free_block_groups+0x338/0x500 [btrfs]   ---[ end trace 0000000000000000 ]---   BTRFS info (device sda): space_info METADATA has 267796480 free\, is not full   BTRFS info (device sda): space_info total=268435456\, used=131072\, pinned=0\, reserved=0\, may_use=262144\, readonly=0 zone_unusable=245760   BTRFS info (device sda): global_block_rsv: size 0 reserved 0   BTRFS info (device sda): trans_block_rsv: size 0 reserved 0   BTRFS info (device sda): chunk_block_rsv: size 0 reserved 0   BTRFS info (device sda): delayed_block_rsv: size 0 reserved 0   BTRFS info (device sda): delayed_refs_rsv: size 0 reserved 0  Above $dev is a tcmu-runner emulated zoned HDD\, which has a max zone append size of 64K\, and the system has 64K page size.  [CAUSE] I have added several trace_printk() to show the events (header skipped):    > btrfs_dirty_pages: r/i=5/259 dirty start=774144 len=114688   > btrfs_dirty_pages: r/i=5/259 dirty part of page=720896 off_in_page=53248 len_in_page=12288   > btrfs_dirty_pages: r/i=5/259 dirty part of page=786432 off_in_page=0 len_in_page=65536   > btrfs_dirty_pages: r/i=5/259 dirty part of page=851968 off_in_page=0 len_in_page=36864  The above lines show our buffered write has dirtied 3 pages of inode 259 of root 5:    704K             768K              832K              896K   I           |////I/////////////////I///////////|     I               756K                               868K    |///| is the dirtied range using subpage bitmaps. and 'I' is the page   boundary.    Meanwhile all three pages (704K\, 768K\, 832K) have their PageDirty   flag set.    > btrfs_direct_write: r/i=5/259 start dio filepos=696320 len=102400  Then direct IO writ ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56626,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix Out-of-Bounds Write in ksmbd_vfs_stream_write  An offset from client could be a negative value\, It could allows to write data outside the bounds of the allocated buffer. Note that this issue is coming when setting 'vfs objects = streams_xattr parameter' in ksmbd.conf.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56627,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix Out-of-Bounds Read in ksmbd_vfs_stream_read  An offset from client could be a negative value\, It could lead to an out-of-bounds read from the stream_buf. Note that this issue is coming when setting 'vfs objects = streams_xattr parameter' in ksmbd.conf.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-14159,libldap-2.5-0,LOW,2.5.13+dfsg-5,N/A,"slapd in OpenLDAP 2.4.45 and earlier creates a PID file after dropping privileges to a non-root account\, which might allow local users to kill arbitrary processes by leveraging access to this non-root account for PID file modification before a root script executes a ""kill `cat /pathname`"" command\, as demonstrated by openldap-initscript.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-44034,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/scr24x_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open()\, aka a race condition between scr24x_open() and scr24x_remove().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57890,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/uverbs: Prevent integer overflow issue  In the expression ""cmd.wqe_size * cmd.wr_count""\, both variables are u32 values that come from the user so the multiplication can lead to integer wrapping.  Then we pass the result to uverbs_request_next_ptr() which also could potentially wrap.  The ""cmd.sge_count * sizeof(struct ib_uverbs_sge)"" multiplication can also overflow on 32bit systems although it's fine on 64bit systems.  This patch does two things.  First\, I've re-arranged the condition in uverbs_request_next_ptr() so that the use controlled variable ""len"" is on one side of the comparison by itself without any math.  Then I've modified all the callers to use size_mul() for the multiplications.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56628,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Add architecture specific huge_pte_clear()  When executing mm selftests run_vmtests.sh\, there is such an error:   BUG: Bad page state in process uffd-unit-tests  pfn:00000  page: refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x0  flags: 0xffff0000002000(reserved|node=0|zone=0|lastcpupid=0xffff)  raw: 00ffff0000002000 ffffbf0000000008 ffffbf0000000008 0000000000000000  raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000  page dumped because: PAGE_FLAGS_CHECK_AT_FREE flag(s) set  Modules linked in: snd_seq_dummy snd_seq snd_seq_device rfkill vfat fat     virtio_balloon efi_pstore virtio_net pstore net_failover failover fuse     nfnetlink virtio_scsi virtio_gpu virtio_dma_buf dm_multipath efivarfs  CPU: 2 UID: 0 PID: 1913 Comm: uffd-unit-tests Not tainted 6.12.0 #184  Hardware name: QEMU QEMU Virtual Machine\, BIOS unknown 2/2/2022  Stack : 900000047c8ac000 0000000000000000 9000000000223a7c 900000047c8ac000          900000047c8af690 900000047c8af698 0000000000000000 900000047c8af7d8          900000047c8af7d0 900000047c8af7d0 900000047c8af5b0 0000000000000001          0000000000000001 900000047c8af698 10b3c7d53da40d26 0000010000000000          0000000000000022 0000000fffffffff fffffffffe000000 ffff800000000000          000000000000002f 0000800000000000 000000017a6d4000 90000000028f8940          0000000000000000 0000000000000000 90000000025aa5e0 9000000002905000          0000000000000000 90000000028f8940 ffff800000000000 0000000000000000          0000000000000000 0000000000000000 9000000000223a94 000000012001839c          00000000000000b0 0000000000000004 0000000000000000 0000000000071c1d          ...  Call Trace:  [<9000000000223a94>] show_stack+0x5c/0x180  [<9000000001c3fd64>] dump_stack_lvl+0x6c/0xa0  [<900000000056aa08>] bad_page+0x1a0/0x1f0  [<9000000000574978>] free_unref_folios+0xbf0/0xd20  [<90000000004e65cc>] folios_put_refs+0x1a4/0x2b8  [<9000000000599a0c>] free_pages_and_swap_cache+0x164/0x260  [<9000000000547698>] tlb_batch_pages_flush+0xa8/0x1c0  [<9000000000547f30>] tlb_finish_mmu+0xa8/0x218  [<9000000000543cb8>] exit_mmap+0x1a0/0x360  [<9000000000247658>] __mmput+0x78/0x200  [<900000000025583c>] do_exit+0x43c/0xde8  [<9000000000256490>] do_group_exit+0x68/0x110  [<9000000000256554>] sys_exit_group+0x1c/0x20  [<9000000001c413b4>] do_syscall+0x94/0x130  [<90000000002216d8>] handle_syscall+0xb8/0x158  Disabling lock debugging due to kernel taint  BUG: non-zero pgtables_bytes on freeing mm: -16384  On LoongArch system\, invalid huge pte entry should be invalid_pte_table or a single _PAGE_HUGE bit rather than a zero value. And it should be the same with invalid pmd entry\, since pmd_none() is called by function free_pgd_range() and pmd_none() return 0 by huge_pte_clear(). So single _PAGE_HUGE bit is also treated as a valid pte table and free_pte_range() will be called in free_pmd_range().    free_pmd_range()         pmd = pmd_offset(pud\, addr);         do {                 next = pmd_addr_end(addr\, end);                 if (pmd_none_or_clear_bad(pmd))                         continue;                 free_pte_range(tlb\, pmd\, addr);         } while (pmd++\, addr = next\, addr != end);  Here invalid_pte_table is used for both invalid huge pte entry and pmd entry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26836,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86: think-lmi: Fix password opcode ordering for workstations  The Lenovo workstations require the password opcode to be run before the attribute value is changed (if Admin password is enabled).  Tested on some Thinkpads to confirm they are OK with this order too.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56629,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: wacom: fix when get product name maybe null pointer  Due to incorrect dev->product reporting by certain devices\, null pointer dereferences occur when dev->product is empty\, leading to potential system crashes.  This issue was found on EXCELSIOR DL37-D05 device with Loongson-LS3A6000-7A2000-DL37 motherboard.  Kernel logs: [   56.470885] usb 4-3: new full-speed USB device number 4 using ohci-pci [   56.671638] usb 4-3: string descriptor 0 read error: -22 [   56.671644] usb 4-3: New USB device found\, idVendor=056a\, idProduct=0374\, bcdDevice= 1.07 [   56.671647] usb 4-3: New USB device strings: Mfr=1\, Product=2\, SerialNumber=3 [   56.678839] hid-generic 0003:056A:0374.0004: hiddev0\,hidraw3: USB HID v1.10 Device [HID 056a:0374] on usb-0000:00:05.0-3/input0 [   56.697719] CPU 2 Unable to handle kernel paging request at virtual address 0000000000000000\, era == 90000000066e35c8\, ra == ffff800004f98a80 [   56.697732] Oops[#1]: [   56.697734] CPU: 2 PID: 2742 Comm: (udev-worker) Tainted: G           OE      6.6.0-loong64-desktop #25.00.2000.015 [   56.697737] Hardware name: Inspur CE520L2/C09901N000000000\, BIOS 2.09.00 10/11/2024 [   56.697739] pc 90000000066e35c8 ra ffff800004f98a80 tp 9000000125478000 sp 900000012547b8a0 [   56.697741] a0 0000000000000000 a1 ffff800004818b28 a2 0000000000000000 a3 0000000000000000 [   56.697743] a4 900000012547b8f0 a5 0000000000000000 a6 0000000000000000 a7 0000000000000000 [   56.697745] t0 ffff800004818b2d t1 0000000000000000 t2 0000000000000003 t3 0000000000000005 [   56.697747] t4 0000000000000000 t5 0000000000000000 t6 0000000000000000 t7 0000000000000000 [   56.697748] t8 0000000000000000 u0 0000000000000000 s9 0000000000000000 s0 900000011aa48028 [   56.697750] s1 0000000000000000 s2 0000000000000000 s3 ffff800004818e80 s4 ffff800004810000 [   56.697751] s5 90000001000b98d0 s6 ffff800004811f88 s7 ffff800005470440 s8 0000000000000000 [   56.697753]    ra: ffff800004f98a80 wacom_update_name+0xe0/0x300 [wacom] [   56.697802]   ERA: 90000000066e35c8 strstr+0x28/0x120 [   56.697806]  CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE) [   56.697816]  PRMD: 0000000c (PPLV0 +PIE +PWE) [   56.697821]  EUEN: 00000000 (-FPE -SXE -ASXE -BTE) [   56.697827]  ECFG: 00071c1d (LIE=0\,2-4\,10-12 VS=7) [   56.697831] ESTAT: 00010000 [PIL] (IS= ECode=1 EsubCode=0) [   56.697835]  BADV: 0000000000000000 [   56.697836]  PRID: 0014d000 (Loongson-64bit\, Loongson-3A6000) [   56.697838] Modules linked in: wacom(+) bnep bluetooth rfkill qrtr nls_iso8859_1 nls_cp437 snd_hda_codec_conexant snd_hda_codec_generic ledtrig_audio snd_hda_codec_hdmi snd_hda_intel snd_intel_dspcfg snd_hda_codec snd_hda_core snd_hwdep snd_pcm snd_timer snd soundcore input_leds mousedev led_class joydev deepin_netmonitor(OE) fuse nfnetlink dmi_sysfs ip_tables x_tables overlay amdgpu amdxcp drm_exec gpu_sched drm_buddy radeon drm_suballoc_helper i2c_algo_bit drm_ttm_helper r8169 ttm drm_display_helper spi_loongson_pci xhci_pci cec xhci_pci_renesas spi_loongson_core hid_generic realtek gpio_loongson_64bit [   56.697887] Process (udev-worker) (pid: 2742\, threadinfo=00000000aee0d8b4\, task=00000000a9eff1f3) [   56.697890] Stack : 0000000000000000 ffff800004817e00 0000000000000000 0000251c00000000 [   56.697896]         0000000000000000 00000011fffffffd 0000000000000000 0000000000000000 [   56.697901]         0000000000000000 1b67a968695184b9 0000000000000000 90000001000b98d0 [   56.697906]         90000001000bb8d0 900000011aa48028 0000000000000000 ffff800004f9d74c [   56.697911]         90000001000ba000 ffff800004f9ce58 0000000000000000 ffff800005470440 [   56.697916]         ffff800004811f88 90000001000b98d0 9000000100da2aa8 90000001000bb8d0 [   56.697921]         0000000000000000 90000001000ba000 900000011aa48028 ffff800004f9d74c [   56.697926]         ffff8000054704e8 90000001000bb8b8 90000001000ba000 0000000000000000 [   56.697931]         90000001000bb8d0  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56562,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  i3c: master: Fix miss free init_dyn_addr at i3c_master_put_i3c_addrs()  if (dev->boardinfo && dev->boardinfo->init_dyn_addr)                                       ^^^ here check ""init_dyn_addr"" \ti3c_bus_set_addr_slot_status(&master->bus\, dev->info.dyn_addr\, ...) \t\t\t\t\t\t             ^^^^ \t\t\t\t\t\t\tfree ""dyn_addr"" Fix copy/paste error ""dyn_addr"" by replacing it with ""init_dyn_addr"".",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35870,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix UAF in smb2_reconnect_server()  The UAF bug is due to smb2_reconnect_server() accessing a session that is already being teared down by another thread that is executing __cifs_put_smb_ses().  This can happen when (a) the client has connection to the server but no session or (b) another thread ends up setting @ses->ses_status again to something different than SES_EXITING.  To fix this\, we need to make sure to unconditionally set @ses->ses_status to SES_EXITING and prevent any other threads from setting a new status while we're still tearing it down.  The following can be reproduced by adding some delay to right after the ipc is freed in __cifs_put_smb_ses() - which will give smb2_reconnect_server() worker a chance to run and then accessing @ses->ipc:  kinit ... mount.cifs //srv/share /mnt/1 -o sec=krb5\,nohandlecache\,echo_interval=10 [disconnect srv] ls /mnt/1 &>/dev/null sleep 30 kdestroy [reconnect srv] sleep 10 umount /mnt/1 ... CIFS: VFS: Verify user has a krb5 ticket and keyutils is installed CIFS: VFS: \\\\srv Send error in SessSetup = -126 CIFS: VFS: Verify user has a krb5 ticket and keyutils is installed CIFS: VFS: \\\\srv Send error in SessSetup = -126 general protection fault\, probably for non-canonical address 0x6b6b6b6b6b6b6b6b: 0000 [#1] PREEMPT SMP NOPTI CPU: 3 PID: 50 Comm: kworker/3:1 Not tainted 6.9.0-rc2 #1 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-1.fc39 04/01/2014 Workqueue: cifsiod smb2_reconnect_server [cifs] RIP: 0010:__list_del_entry_valid_or_report+0x33/0xf0 Code: 4f 08 48 85 d2 74 42 48 85 c9 74 59 48 b8 00 01 00 00 00 00 ad de 48 39 c2 74 61 48 b8 22 01 00 00 00 00 74 69 <48> 8b 01 48 39 f8 75 7b 48 8b 72 08 48 39 c6 0f 85 88 00 00 00 b8 RSP: 0018:ffffc900001bfd70 EFLAGS: 00010a83 RAX: dead000000000122 RBX: ffff88810da53838 RCX: 6b6b6b6b6b6b6b6b RDX: 6b6b6b6b6b6b6b6b RSI: ffffffffc02f6878 RDI: ffff88810da53800 RBP: ffff88810da53800 R08: 0000000000000001 R09: 0000000000000000 R10: 0000000000000000 R11: 0000000000000001 R12: ffff88810c064000 R13: 0000000000000001 R14: ffff88810c064000 R15: ffff8881039cc000 FS: 0000000000000000(0000) GS:ffff888157c00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fe3728b1000 CR3: 000000010caa4000 CR4: 0000000000750ef0 PKRU: 55555554 Call Trace:  <TASK>  ? die_addr+0x36/0x90  ? exc_general_protection+0x1c1/0x3f0  ? asm_exc_general_protection+0x26/0x30  ? __list_del_entry_valid_or_report+0x33/0xf0  __cifs_put_smb_ses+0x1ae/0x500 [cifs]  smb2_reconnect_server+0x4ed/0x710 [cifs]  process_one_work+0x205/0x6b0  worker_thread+0x191/0x360  ? __pfx_worker_thread+0x10/0x10  kthread+0xe2/0x110  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x34/0x50  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57892,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: fix slab-use-after-free due to dangling pointer dqi_priv  When mounting ocfs2 and then remounting it as read-only\, a slab-use-after-free occurs after the user uses a syscall to quota_getnextquota.  Specifically\, sb_dqinfo(sb\, type)->dqi_priv is the dangling pointer.  During the remounting process\, the pointer dqi_priv is freed but is never set as null leaving it to be accessed.  Additionally\, the read-only option for remounting sets the DQUOT_SUSPENDED flag instead of setting the DQUOT_USAGE_ENABLED flags.  Moreover\, later in the process of getting the next quota\, the function ocfs2_get_next_id is called and only checks the quota usage flags and not the quota suspended flags.  To fix this\, I set dqi_priv to null when it is freed after remounting with read-only and put a check for DQUOT_SUSPENDED in ocfs2_get_next_id.  [akpm@linux-foundation.org: coding-style cleanups]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57893,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: seq: oss: Fix races at processing SysEx messages  OSS sequencer handles the SysEx messages split in 6 bytes packets\, and ALSA sequencer OSS layer tries to combine those.  It stores the data in the internal buffer and this access is racy as of now\, which may lead to the out-of-bounds access.  As a temporary band-aid fix\, introduce a mutex for serializing the process of the SysEx message packets.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-24528,libgssapi-krb5-2,MEDIUM,1.20.1-2+deb12u2,N/A,"A flaw was found in krb5. With incremental propagation enabled\, an authenticated attacker can cause kadmind to write beyond the end of the mapped region for the iprop log file. This issue can trigger a process crash and lead to a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56567,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ad7780: fix division by zero in ad7780_write_raw()  In the ad7780_write_raw() \, val2 can be zero\, which might lead to a division by zero error in DIV_ROUND_CLOSEST(). The ad7780_write_raw() is based on iio_info's write_raw. While val is explicitly declared that can be zero (in read mode)\, val2 is not specified to be non-zero.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57895,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: set ATTR_CTIME flags when setting mtime  David reported that the new warning from setattr_copy_mgtime is coming like the following.  [  113.215316] ------------[ cut here ]------------ [  113.215974] WARNING: CPU: 1 PID: 31 at fs/attr.c:300 setattr_copy+0x1ee/0x200 [  113.219192] CPU: 1 UID: 0 PID: 31 Comm: kworker/1:1 Not tainted 6.13.0-rc1+ #234 [  113.220127] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014 [  113.221530] Workqueue: ksmbd-io handle_ksmbd_work [ksmbd] [  113.222220] RIP: 0010:setattr_copy+0x1ee/0x200 [  113.222833] Code: 24 28 49 8b 44 24 30 48 89 53 58 89 43 6c 5b 41 5c 41 5d 41 5e 41 5f 5d c3 cc cc cc cc 48 89 df e8 77 d6 ff ff e9 cd fe ff ff <0f> 0b e9 be fe ff ff 66 0 [  113.225110] RSP: 0018:ffffaf218010fb68 EFLAGS: 00010202 [  113.225765] RAX: 0000000000000120 RBX: ffffa446815f8568 RCX: 0000000000000003 [  113.226667] RDX: ffffaf218010fd38 RSI: ffffa446815f8568 RDI: ffffffff94eb03a0 [  113.227531] RBP: ffffaf218010fb90 R08: 0000001a251e217d R09: 00000000675259fa [  113.228426] R10: 0000000002ba8a6d R11: ffffa4468196c7a8 R12: ffffaf218010fd38 [  113.229304] R13: 0000000000000120 R14: ffffffff94eb03a0 R15: 0000000000000000 [  113.230210] FS:  0000000000000000(0000) GS:ffffa44739d00000(0000) knlGS:0000000000000000 [  113.231215] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  113.232055] CR2: 00007efe0053d27e CR3: 000000000331a000 CR4: 00000000000006b0 [  113.232926] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [  113.233812] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [  113.234797] Call Trace: [  113.235116]  <TASK> [  113.235393]  ? __warn+0x73/0xd0 [  113.235802]  ? setattr_copy+0x1ee/0x200 [  113.236299]  ? report_bug+0xf3/0x1e0 [  113.236757]  ? handle_bug+0x4d/0x90 [  113.237202]  ? exc_invalid_op+0x13/0x60 [  113.237689]  ? asm_exc_invalid_op+0x16/0x20 [  113.238185]  ? setattr_copy+0x1ee/0x200 [  113.238692]  btrfs_setattr+0x80/0x820 [btrfs] [  113.239285]  ? get_stack_info_noinstr+0x12/0xf0 [  113.239857]  ? __module_address+0x22/0xa0 [  113.240368]  ? handle_ksmbd_work+0x6e/0x460 [ksmbd] [  113.240993]  ? __module_text_address+0x9/0x50 [  113.241545]  ? __module_address+0x22/0xa0 [  113.242033]  ? unwind_next_frame+0x10e/0x920 [  113.242600]  ? __pfx_stack_trace_consume_entry+0x10/0x10 [  113.243268]  notify_change+0x2c2/0x4e0 [  113.243746]  ? stack_depot_save_flags+0x27/0x730 [  113.244339]  ? set_file_basic_info+0x130/0x2b0 [ksmbd] [  113.244993]  set_file_basic_info+0x130/0x2b0 [ksmbd] [  113.245613]  ? process_scheduled_works+0xbe/0x310 [  113.246181]  ? worker_thread+0x100/0x240 [  113.246696]  ? kthread+0xc8/0x100 [  113.247126]  ? ret_from_fork+0x2b/0x40 [  113.247606]  ? ret_from_fork_asm+0x1a/0x30 [  113.248132]  smb2_set_info+0x63f/0xa70 [ksmbd]  ksmbd is trying to set the atime and mtime via notify_change without also setting the ctime. so This patch add ATTR_CTIME flags when setting mtime to avoid a warning.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56566,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/slub: Avoid list corruption when removing a slab from the full list  Boot with slub_debug=UFPZ.  If allocated object failed in alloc_consistency_checks\, all objects of the slab will be marked as used\, and then the slab will be removed from the partial list.  When an object belonging to the slab got freed later\, the remove_full() function is called. Because the slab is neither on the partial list nor on the full list\, it eventually lead to a list corruption (actually a list poison being detected).  So we need to mark and isolate the slab page with metadata corruption\, do not put it back in circulation.  Because the debug caches avoid all the fastpaths\, reusing the frozen bit to mark slab page with metadata corruption seems to be fine.  [ 4277.385669] list_del corruption\, ffffea00044b3e50->next is LIST_POISON1 (dead000000000100) [ 4277.387023] ------------[ cut here ]------------ [ 4277.387880] kernel BUG at lib/list_debug.c:56! [ 4277.388680] invalid opcode: 0000 [#1] PREEMPT SMP PTI [ 4277.389562] CPU: 5 PID: 90 Comm: kworker/5:1 Kdump: loaded Tainted: G           OE      6.6.1-1 #1 [ 4277.392113] Workqueue: xfs-inodegc/vda1 xfs_inodegc_worker [xfs] [ 4277.393551] RIP: 0010:__list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.394518] Code: 48 91 82 e8 37 f9 9a ff 0f 0b 48 89 fe 48 c7 c7 28 49 91 82 e8 26 f9 9a ff 0f 0b 48 89 fe 48 c7 c7 58 49 91 [ 4277.397292] RSP: 0018:ffffc90000333b38 EFLAGS: 00010082 [ 4277.398202] RAX: 000000000000004e RBX: ffffea00044b3e50 RCX: 0000000000000000 [ 4277.399340] RDX: 0000000000000002 RSI: ffffffff828f8715 RDI: 00000000ffffffff [ 4277.400545] RBP: ffffea00044b3e40 R08: 0000000000000000 R09: ffffc900003339f0 [ 4277.401710] R10: 0000000000000003 R11: ffffffff82d44088 R12: ffff888112cf9910 [ 4277.402887] R13: 0000000000000001 R14: 0000000000000001 R15: ffff8881000424c0 [ 4277.404049] FS:  0000000000000000(0000) GS:ffff88842fd40000(0000) knlGS:0000000000000000 [ 4277.405357] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 4277.406389] CR2: 00007f2ad0b24000 CR3: 0000000102a3a006 CR4: 00000000007706e0 [ 4277.407589] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [ 4277.408780] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [ 4277.410000] PKRU: 55555554 [ 4277.410645] Call Trace: [ 4277.411234]  <TASK> [ 4277.411777]  ? die+0x32/0x80 [ 4277.412439]  ? do_trap+0xd6/0x100 [ 4277.413150]  ? __list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.414158]  ? do_error_trap+0x6a/0x90 [ 4277.414948]  ? __list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.415915]  ? exc_invalid_op+0x4c/0x60 [ 4277.416710]  ? __list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.417675]  ? asm_exc_invalid_op+0x16/0x20 [ 4277.418482]  ? __list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.419466]  ? __list_del_entry_valid_or_report+0x7b/0xc0 [ 4277.420410]  free_to_partial_list+0x515/0x5e0 [ 4277.421242]  ? xfs_iext_remove+0x41a/0xa10 [xfs] [ 4277.422298]  xfs_iext_remove+0x41a/0xa10 [xfs] [ 4277.423316]  ? xfs_inodegc_worker+0xb4/0x1a0 [xfs] [ 4277.424383]  xfs_bmap_del_extent_delay+0x4fe/0x7d0 [xfs] [ 4277.425490]  __xfs_bunmapi+0x50d/0x840 [xfs] [ 4277.426445]  xfs_itruncate_extents_flags+0x13a/0x490 [xfs] [ 4277.427553]  xfs_inactive_truncate+0xa3/0x120 [xfs] [ 4277.428567]  xfs_inactive+0x22d/0x290 [xfs] [ 4277.429500]  xfs_inodegc_worker+0xb4/0x1a0 [xfs] [ 4277.430479]  process_one_work+0x171/0x340 [ 4277.431227]  worker_thread+0x277/0x390 [ 4277.431962]  ? __pfx_worker_thread+0x10/0x10 [ 4277.432752]  kthread+0xf0/0x120 [ 4277.433382]  ? __pfx_kthread+0x10/0x10 [ 4277.434134]  ret_from_fork+0x2d/0x50 [ 4277.434837]  ? __pfx_kthread+0x10/0x10 [ 4277.435566]  ret_from_fork_asm+0x1b/0x30 [ 4277.436280]  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-32434,torch,CRITICAL,2.5.1,2.6.0,"PyTorch is a Python package that provides tensor computation with strong GPU acceleration and deep neural networks built on a tape-based autograd system. In version 2.5.1 and prior\, a Remote Command Execution (RCE) vulnerability exists in PyTorch when loading a model using torch.load with weights_only=True. This issue has been patched in version 2.6.0.",|tykio/smart-ner-redact|
CVE-2022-44032,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4000_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open()\, aka a race condition between cmm_open() and cm4000_detach().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56565,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to drop all discards after creating snapshot on lvm device  Piergiorgio reported a bug in bugzilla as below:  ------------[ cut here ]------------ WARNING: CPU: 2 PID: 969 at fs/f2fs/segment.c:1330 RIP: 0010:__submit_discard_cmd+0x27d/0x400 [f2fs] Call Trace:  __issue_discard_cmd+0x1ca/0x350 [f2fs]  issue_discard_thread+0x191/0x480 [f2fs]  kthread+0xcf/0x100  ret_from_fork+0x31/0x50  ret_from_fork_asm+0x1a/0x30  w/ below testcase\, it can reproduce this bug quickly: - pvcreate /dev/vdb - vgcreate myvg1 /dev/vdb - lvcreate -L 1024m -n mylv1 myvg1 - mount /dev/myvg1/mylv1 /mnt/f2fs - dd if=/dev/zero of=/mnt/f2fs/file bs=1M count=20 - sync - rm /mnt/f2fs/file - sync - lvcreate -L 1024m -s -n mylv1-snapshot /dev/myvg1/mylv1 - umount /mnt/f2fs  The root cause is: it will update discard_max_bytes of mounted lvm device to zero after creating snapshot on this lvm device\, then\, __submit_discard_cmd() will pass parameter @nr_sects w/ zero value to __blkdev_issue_discard()\, it returns a NULL bio pointer\, result in panic.  This patch changes as below for fixing: 1. Let's drop all remained discards in f2fs_unfreeze() if snapshot of lvm device is created. 2. Checking discard_max_bytes before submitting discard during __submit_discard_cmd().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52485,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Wake DMCUB before sending a command  [Why] We can hang in place trying to send commands when the DMCUB isn't powered on.  [How] For functions that execute within a DC context or DC lock we can wrap the direct calls to dm_execute_dmub_cmd/list with code that exits idle power optimizations and reallows once we're done with the command submission on success.  For DM direct submissions the DM will need to manage the enter/exit sequencing manually.  We cannot invoke a DMCUB command directly within the DM execution helper or we can deadlock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57896,linux-libc-dev,HIGH,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: flush delalloc workers queue before stopping cleaner kthread during unmount  During the unmount path\, at close_ctree()\, we first stop the cleaner kthread\, using kthread_stop() which frees the associated task_struct\, and then stop and destroy all the work queues. However after we stopped the cleaner we may still have a worker from the delalloc_workers queue running inode.c:submit_compressed_extents()\, which calls btrfs_add_delayed_iput()\, which in turn tries to wake up the cleaner kthread - which was already destroyed before\, resulting in a use-after-free on the task_struct.  Syzbot reported this with the following stack traces:    BUG: KASAN: slab-use-after-free in __lock_acquire+0x78/0x2100 kernel/locking/lockdep.c:5089   Read of size 8 at addr ffff8880259d2818 by task kworker/u8:3/52    CPU: 1 UID: 0 PID: 52 Comm: kworker/u8:3 Not tainted 6.13.0-rc1-syzkaller-00002-gcdd30ebb1b9f #0   Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024   Workqueue: btrfs-delalloc btrfs_work_helper   Call Trace:    <TASK>    __dump_stack lib/dump_stack.c:94 [inline]    dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120    print_address_description mm/kasan/report.c:378 [inline]    print_report+0x169/0x550 mm/kasan/report.c:489    kasan_report+0x143/0x180 mm/kasan/report.c:602    __lock_acquire+0x78/0x2100 kernel/locking/lockdep.c:5089    lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5849    __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]    _raw_spin_lock_irqsave+0xd5/0x120 kernel/locking/spinlock.c:162    class_raw_spinlock_irqsave_constructor include/linux/spinlock.h:551 [inline]    try_to_wake_up+0xc2/0x1470 kernel/sched/core.c:4205    submit_compressed_extents+0xdf/0x16e0 fs/btrfs/inode.c:1615    run_ordered_work fs/btrfs/async-thread.c:288 [inline]    btrfs_work_helper+0x96f/0xc40 fs/btrfs/async-thread.c:324    process_one_work kernel/workqueue.c:3229 [inline]    process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3310    worker_thread+0x870/0xd30 kernel/workqueue.c:3391    kthread+0x2f0/0x390 kernel/kthread.c:389    ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147    ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244    </TASK>    Allocated by task 2:    kasan_save_stack mm/kasan/common.c:47 [inline]    kasan_save_track+0x3f/0x80 mm/kasan/common.c:68    unpoison_slab_object mm/kasan/common.c:319 [inline]    __kasan_slab_alloc+0x66/0x80 mm/kasan/common.c:345    kasan_slab_alloc include/linux/kasan.h:250 [inline]    slab_post_alloc_hook mm/slub.c:4104 [inline]    slab_alloc_node mm/slub.c:4153 [inline]    kmem_cache_alloc_node_noprof+0x1d9/0x380 mm/slub.c:4205    alloc_task_struct_node kernel/fork.c:180 [inline]    dup_task_struct+0x57/0x8c0 kernel/fork.c:1113    copy_process+0x5d1/0x3d50 kernel/fork.c:2225    kernel_clone+0x223/0x870 kernel/fork.c:2807    kernel_thread+0x1bc/0x240 kernel/fork.c:2869    create_kthread kernel/kthread.c:412 [inline]    kthreadd+0x60d/0x810 kernel/kthread.c:767    ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147    ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244    Freed by task 24:    kasan_save_stack mm/kasan/common.c:47 [inline]    kasan_save_track+0x3f/0x80 mm/kasan/common.c:68    kasan_save_free_info+0x40/0x50 mm/kasan/generic.c:582    poison_slab_object mm/kasan/common.c:247 [inline]    __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264    kasan_slab_free include/linux/kasan.h:233 [inline]    slab_free_hook mm/slub.c:2338 [inline]    slab_free mm/slub.c:4598 [inline]    kmem_cache_free+0x195/0x410 mm/slub.c:4700    put_task_struct include/linux/sched/task.h:144 [inline]    delayed_put_task_struct+0x125/0x300 kernel/exit.c:227    rcu_do_batch kernel/rcu/tree.c:2567 [inline]    rcu_core+0xaaa/0x17a0 kernel/rcu/tree.c:2823    handle_softirqs+0x2d4/0x9b0 kernel/softirq.c:554    run_ksoftirqd+0xca/0x130 kernel/softirq.c:943    ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-44033,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4040_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open()\, aka a race condition between cm4040_open() and reader_detach().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-3714,linux-libc-dev,LOW,6.1.115-1,N/A,"A flaw was found in the Linux kernels memory deduplication mechanism. Previous work has shown that memory deduplication can be attacked via a local exploitation mechanism. The same technique can be used if an attacker can upload page sized files and detect the change in access time from a networked service to determine if the page has been merged.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57897,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdkfd: Correct the migration DMA map direction  The SVM DMA device map direction should be set the same as the DMA unmap setting\, otherwise the DMA core will report the following warning.  Before finialize this solution\, there're some discussion on the DMA mapping type(stream-based or coherent) in this KFD migration case\, followed by https://lore.kernel.org/all/04d4ab32 -45a1-4b88-86ee-fb0f35a0ca40@amd.com/T/.  As there's no dma_sync_single_for_*() in the DMA buffer accessed that because this migration operation should be sync properly and automatically. Give that there's might not be a performance problem in various cache sync policy of DMA sync. Therefore\, in order to simplify the DMA direction setting alignment\, let's set the DMA map direction as BIDIRECTIONAL.  [  150.834218] WARNING: CPU: 8 PID: 1812 at kernel/dma/debug.c:1028 check_unmap+0x1cc/0x930 [  150.834225] Modules linked in: amdgpu(OE) amdxcp drm_exec(OE) gpu_sched drm_buddy(OE) drm_ttm_helper(OE) ttm(OE) drm_suballoc_helper(OE) drm_display_helper(OE) drm_kms_helper(OE) i2c_algo_bit rpcsec_gss_krb5 auth_rpcgss nfsv4 nfs lockd grace netfs xt_conntrack xt_MASQUERADE nf_conntrack_netlink xfrm_user xfrm_algo iptable_nat xt_addrtype iptable_filter br_netfilter nvme_fabrics overlay nfnetlink_cttimeout nfnetlink openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 libcrc32c bridge stp llc sch_fq_codel intel_rapl_msr amd_atl intel_rapl_common snd_hda_codec_realtek snd_hda_codec_generic snd_hda_scodec_component snd_hda_codec_hdmi snd_hda_intel snd_intel_dspcfg edac_mce_amd snd_pci_acp6x snd_hda_codec snd_acp_config snd_hda_core snd_hwdep snd_soc_acpi kvm_amd sunrpc snd_pcm kvm binfmt_misc snd_seq_midi crct10dif_pclmul snd_seq_midi_event ghash_clmulni_intel sha512_ssse3 snd_rawmidi nls_iso8859_1 sha256_ssse3 sha1_ssse3 snd_seq aesni_intel snd_seq_device crypto_simd snd_timer cryptd input_leds [  150.834310]  wmi_bmof serio_raw k10temp rapl snd sp5100_tco ipmi_devintf soundcore ccp ipmi_msghandler cm32181 industrialio mac_hid msr parport_pc ppdev lp parport efi_pstore drm(OE) ip_tables x_tables pci_stub crc32_pclmul nvme ahci libahci i2c_piix4 r8169 nvme_core i2c_designware_pci realtek i2c_ccgx_ucsi video wmi hid_generic cdc_ether usbnet usbhid hid r8152 mii [  150.834354] CPU: 8 PID: 1812 Comm: rocrtst64 Tainted: G           OE      6.10.0-custom #492 [  150.834358] Hardware name: AMD Majolica-RN/Majolica-RN\, BIOS RMJ1009A 06/13/2021 [  150.834360] RIP: 0010:check_unmap+0x1cc/0x930 [  150.834363] Code: c0 4c 89 4d c8 e8 34 bf 86 00 4c 8b 4d c8 4c 8b 45 c0 48 8b 4d b8 48 89 c6 41 57 4c 89 ea 48 c7 c7 80 49 b4 84 e8 b4 81 f3 ff <0f> 0b 48 c7 c7 04 83 ac 84 e8 76 ba fc ff 41 8b 76 4c 49 8d 7e 50 [  150.834365] RSP: 0018:ffffaac5023739e0 EFLAGS: 00010086 [  150.834368] RAX: 0000000000000000 RBX: ffffffff8566a2e0 RCX: 0000000000000027 [  150.834370] RDX: ffff8f6a8f621688 RSI: 0000000000000001 RDI: ffff8f6a8f621680 [  150.834372] RBP: ffffaac502373a30 R08: 00000000000000c9 R09: ffffaac502373850 [  150.834373] R10: ffffaac502373848 R11: ffffffff84f46328 R12: ffffaac502373a40 [  150.834375] R13: ffff8f6741045330 R14: ffff8f6741a77700 R15: ffffffff84ac831b [  150.834377] FS:  00007faf0fc94c00(0000) GS:ffff8f6a8f600000(0000) knlGS:0000000000000000 [  150.834379] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  150.834381] CR2: 00007faf0b600020 CR3: 000000010a52e000 CR4: 0000000000350ef0 [  150.834383] Call Trace: [  150.834385]  <TASK> [  150.834387]  ? show_regs+0x6d/0x80 [  150.834393]  ? __warn+0x8c/0x140 [  150.834397]  ? check_unmap+0x1cc/0x930 [  150.834400]  ? report_bug+0x193/0x1a0 [  150.834406]  ? handle_bug+0x46/0x80 [  150.834410]  ? exc_invalid_op+0x1d/0x80 [  150.834413]  ? asm_exc_invalid_op+0x1f/0x30 [  150.834420]  ? check_unmap+0x1cc/0x930 [  150.834425]  debug_dma_unmap_page+0x86/0x90 [  150.834431]  ? srso_return_thunk+0x5/0x5f [  150.834435]  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53110,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  vp_vdpa: fix id_table array not null terminated error  Allocate one extra virtio_device_id as null terminator\, otherwise vdpa_mgmtdev_get_classes() may iterate multiple times and visit undefined memory.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53113,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: fix NULL pointer dereference in alloc_pages_bulk_noprof  We triggered a NULL pointer dereference for ac.preferred_zoneref->zone in alloc_pages_bulk_noprof() when the task is migrated between cpusets.  When cpuset is enabled\, in prepare_alloc_pages()\, ac->nodemask may be &current->mems_allowed.  when first_zones_zonelist() is called to find preferred_zoneref\, the ac->nodemask may be modified concurrently if the task is migrated between different cpusets.  Assuming we have 2 NUMA Node\, when traversing Node1 in ac->zonelist\, the nodemask is 2\, and when traversing Node2 in ac->zonelist\, the nodemask is 1.  As a result\, the ac->preferred_zoneref points to NULL zone.  In alloc_pages_bulk_noprof()\, for_each_zone_zonelist_nodemask() finds a allowable zone and calls zonelist_node_idx(ac.preferred_zoneref)\, leading to NULL pointer dereference.  __alloc_pages_noprof() fixes this issue by checking NULL pointer in commit ea57485af8f4 (""mm\, page_alloc: fix check for NULL preferred_zone"") and commit df76cee6bbeb (""mm\, page_alloc: remove redundant checks from alloc fastpath"").  To fix it\, check NULL pointer for preferred_zoneref->zone.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47754,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: mediatek: vcodec: Fix H264 multi stateless decoder smatch warning  Fix a smatch static checker warning on vdec_h264_req_multi_if.c. Which leads to a kernel crash when fb is NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43840,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\, arm64: Fix trampoline for BPF_TRAMP_F_CALL_ORIG  When BPF_TRAMP_F_CALL_ORIG is set\, the trampoline calls __bpf_tramp_enter() and __bpf_tramp_exit() functions\, passing them the struct bpf_tramp_image *im pointer as an argument in R0.  The trampoline generation code uses emit_addr_mov_i64() to emit instructions for moving the bpf_tramp_image address into R0\, but emit_addr_mov_i64() assumes the address to be in the vmalloc() space and uses only 48 bits. Because bpf_tramp_image is allocated using kzalloc()\, its address can use more than 48-bits\, in this case the trampoline will pass an invalid address to __bpf_tramp_enter/exit() causing a kernel crash.  Fix this by using emit_a64_mov_i64() in place of emit_addr_mov_i64() as it can work with addresses that are greater than 48-bits.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36013,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: Fix slab-use-after-free in l2cap_connect()  Extend a critical section to prevent chan from early freeing. Also make the l2cap_connect() return type void. Nothing is using the returned value but it is ugly to return a potentially freed pointer. Making it void will help with backports because earlier kernels did use the return value. Now the compile will break for kernels where this patch is not a complete fix.  Call stack summary:  [use] l2cap_bredr_sig_cmd   l2cap_connect   ┌ mutex_lock(&conn->chan_lock);   │ chan = pchan->ops->new_connection(pchan); <- alloc chan   │ __l2cap_chan_add(conn\, chan);   │   l2cap_chan_hold(chan);   │   list_add(&chan->list\, &conn->chan_l);   ... (1)   └ mutex_unlock(&conn->chan_lock);     chan->conf_state              ... (4) <- use after free  [free] l2cap_conn_del ┌ mutex_lock(&conn->chan_lock); │ foreach chan in conn->chan_l:            ... (2) │   l2cap_chan_put(chan); │     l2cap_chan_destroy │       kfree(chan)               ... (3) <- chan freed └ mutex_unlock(&conn->chan_lock);  ================================================================== BUG: KASAN: slab-use-after-free in instrument_atomic_read include/linux/instrumented.h:68 [inline] BUG: KASAN: slab-use-after-free in _test_bit include/asm-generic/bitops/instrumented-non-atomic.h:141 [inline] BUG: KASAN: slab-use-after-free in l2cap_connect+0xa67/0x11a0 net/bluetooth/l2cap_core.c:4260 Read of size 8 at addr ffff88810bf040a0 by task kworker/u3:1/311",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53112,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: uncache inode which has failed entering the group  Syzbot has reported the following BUG:  kernel BUG at fs/ocfs2/uptodate.c:509! ... Call Trace:  <TASK>  ? __die_body+0x5f/0xb0  ? die+0x9e/0xc0  ? do_trap+0x15a/0x3a0  ? ocfs2_set_new_buffer_uptodate+0x145/0x160  ? do_error_trap+0x1dc/0x2c0  ? ocfs2_set_new_buffer_uptodate+0x145/0x160  ? __pfx_do_error_trap+0x10/0x10  ? handle_invalid_op+0x34/0x40  ? ocfs2_set_new_buffer_uptodate+0x145/0x160  ? exc_invalid_op+0x38/0x50  ? asm_exc_invalid_op+0x1a/0x20  ? ocfs2_set_new_buffer_uptodate+0x2e/0x160  ? ocfs2_set_new_buffer_uptodate+0x144/0x160  ? ocfs2_set_new_buffer_uptodate+0x145/0x160  ocfs2_group_add+0x39f/0x15a0  ? __pfx_ocfs2_group_add+0x10/0x10  ? __pfx_lock_acquire+0x10/0x10  ? mnt_get_write_access+0x68/0x2b0  ? __pfx_lock_release+0x10/0x10  ? rcu_read_lock_any_held+0xb7/0x160  ? __pfx_rcu_read_lock_any_held+0x10/0x10  ? smack_log+0x123/0x540  ? mnt_get_write_access+0x68/0x2b0  ? mnt_get_write_access+0x68/0x2b0  ? mnt_get_write_access+0x226/0x2b0  ocfs2_ioctl+0x65e/0x7d0  ? __pfx_ocfs2_ioctl+0x10/0x10  ? smack_file_ioctl+0x29e/0x3a0  ? __pfx_smack_file_ioctl+0x10/0x10  ? lockdep_hardirqs_on_prepare+0x43d/0x780  ? __pfx_lockdep_hardirqs_on_prepare+0x10/0x10  ? __pfx_ocfs2_ioctl+0x10/0x10  __se_sys_ioctl+0xfb/0x170  do_syscall_64+0xf3/0x230  entry_SYSCALL_64_after_hwframe+0x77/0x7f ...  </TASK>  When 'ioctl(OCFS2_IOC_GROUP_ADD\, ...)' has failed for the particular inode in 'ocfs2_verify_group_and_input()'\, corresponding buffer head remains cached and subsequent call to the same 'ioctl()' for the same inode issues the BUG() in 'ocfs2_set_new_buffer_uptodate()' (trying to cache the same buffer head of that inode). Fix this by uncaching the buffer head with 'ocfs2_remove_from_cache()' on error path in 'ocfs2_group_add()'.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47752,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  media: mediatek: vcodec: Fix H264 stateless decoder smatch warning  Fix a smatch static checker warning on vdec_h264_req_if.c. Which leads to a kernel crash when fb is NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40999,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: ena: Add validation for completion descriptors consistency  Validate that `first` flag is set only for the first descriptor in multi-buffer packets. In case of an invalid descriptor\, a reset will occur. A new reset reason for RX data corruption has been added.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-4039,gcc-12-base,LOW,12.2.0-14,N/A,"**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains  that target AArch64 allows an attacker to exploit an existing buffer  overflow in dynamically-sized local variables in your application  without this being detected. This stack-protector failure only applies  to C99-style dynamically-sized local variables or those created using  alloca(). The stack-protector operates as intended for statically-sized  local variables.  The default behavior when the stack-protector  detects an overflow is to terminate your application\, resulting in  controlled loss of availability. An attacker who can exploit a buffer  overflow without triggering the stack-protector might be able to change  program flow control to cause an uncontrolled loss of availability or to  go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21907,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm: memory-failure: update ttu flag inside unmap_poisoned_folio  Patch series ""mm: memory_failure: unmap poisoned folio during migrate properly""\, v3.  Fix two bugs during folio migration if the folio is poisoned.   This patch (of 3):  Commit 6da6b1d4a7df (""mm/hwpoison: convert TTU_IGNORE_HWPOISON to TTU_HWPOISON"") introduce TTU_HWPOISON to replace TTU_IGNORE_HWPOISON in order to stop send SIGBUS signal when accessing an error page after a memory error on a clean folio.  However during page migration\, anon folio must be set with TTU_HWPOISON during unmap_*().  For pagecache we need some policy just like the one in hwpoison_user_mappings to set this flag.  So move this policy from hwpoison_user_mappings to unmap_poisoned_folio to handle this warning properly.  Warning will be produced during unamp poison folio with the following log:    ------------[ cut here ]------------   WARNING: CPU: 1 PID: 365 at mm/rmap.c:1847 try_to_unmap_one+0x8fc/0xd3c   Modules linked in:   CPU: 1 UID: 0 PID: 365 Comm: bash Tainted: G        W          6.13.0-rc1-00018-gacdb4bbda7ab #42   Tainted: [W]=WARN   Hardware name: QEMU QEMU Virtual Machine\, BIOS 0.0.0 02/06/2015   pstate: 20400005 (nzCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : try_to_unmap_one+0x8fc/0xd3c   lr : try_to_unmap_one+0x3dc/0xd3c   Call trace:    try_to_unmap_one+0x8fc/0xd3c (P)    try_to_unmap_one+0x3dc/0xd3c (L)    rmap_walk_anon+0xdc/0x1f8    rmap_walk+0x3c/0x58    try_to_unmap+0x88/0x90    unmap_poisoned_folio+0x30/0xa8    do_migrate_range+0x4a0/0x568    offline_pages+0x5a4/0x670    memory_block_action+0x17c/0x374    memory_subsys_offline+0x3c/0x78    device_offline+0xa4/0xd0    state_store+0x8c/0xf0    dev_attr_store+0x18/0x2c    sysfs_kf_write+0x44/0x54    kernfs_fop_write_iter+0x118/0x1a8    vfs_write+0x3a8/0x4bc    ksys_write+0x6c/0xf8    __arm64_sys_write+0x1c/0x28    invoke_syscall+0x44/0x100    el0_svc_common.constprop.0+0x40/0xe0    do_el0_svc+0x1c/0x28    el0_svc+0x30/0xd0    el0t_64_sync_handler+0xc8/0xcc    el0t_64_sync+0x198/0x19c   ---[ end trace 0000000000000000 ]---  [mawupeng1@huawei.com: unmap_poisoned_folio(): remove shadowed local `mapping'\, per Miaohe]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53114,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/CPU/AMD: Clear virtualized VMLOAD/VMSAVE on Zen4 client  A number of Zen4 client SoCs advertise the ability to use virtualized VMLOAD/VMSAVE\, but using these instructions is reported to be a cause of a random host reboot.  These instructions aren't intended to be advertised on Zen4 client so clear the capability.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47753,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: mediatek: vcodec: Fix VP8 stateless decoder smatch warning  Fix a smatch static checker warning on vdec_vp8_req_if.c. Which leads to a kernel crash when fb is NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40998,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: fix uninitialized ratelimit_state->lock access in __ext4_fill_super()  In the following concurrency we will access the uninitialized rs->lock:  ext4_fill_super   ext4_register_sysfs    // sysfs registered msg_ratelimit_interval_ms                              // Other processes modify rs->interval to                              // non-zero via msg_ratelimit_interval_ms   ext4_orphan_cleanup     ext4_msg(sb\, KERN_INFO\, ""Errors on filesystem\, ""       __ext4_msg         ___ratelimit(&(EXT4_SB(sb)->s_msg_ratelimit_state)           if (!rs->interval)  // do nothing if interval is 0             return 1;           raw_spin_trylock_irqsave(&rs->lock\, flags)             raw_spin_trylock(lock)               _raw_spin_trylock                 __raw_spin_trylock                   spin_acquire(&lock->dep_map\, 0\, 1\, _RET_IP_)                     lock_acquire                       __lock_acquire                         register_lock_class                           assign_lock_key                             dump_stack();   ratelimit_state_init(&sbi->s_msg_ratelimit_state\, 5 * HZ\, 10);     raw_spin_lock_init(&rs->lock);     // init rs->lock here  and get the following dump_stack:  ========================================================= INFO: trying to register non-static key. The code is fine but needs lockdep annotation\, or maybe you didn't initialize this object before use? turning off the locking correctness validator. CPU: 12 PID: 753 Comm: mount Tainted: G E 6.7.0-rc6-next-20231222 #504 [...] Call Trace:  dump_stack_lvl+0xc5/0x170  dump_stack+0x18/0x30  register_lock_class+0x740/0x7c0  __lock_acquire+0x69/0x13a0  lock_acquire+0x120/0x450  _raw_spin_trylock+0x98/0xd0  ___ratelimit+0xf6/0x220  __ext4_msg+0x7f/0x160 [ext4]  ext4_orphan_cleanup+0x665/0x740 [ext4]  __ext4_fill_super+0x21ea/0x2b10 [ext4]  ext4_fill_super+0x14d/0x360 [ext4] [...] =========================================================  Normally interval is 0 until s_msg_ratelimit_state is initialized\, so ___ratelimit() does nothing. But registering sysfs precedes initializing rs->lock\, so it is possible to change rs->interval to a non-zero value via the msg_ratelimit_interval_ms interface of sysfs while rs->lock is uninitialized\, and then a call to ext4_msg triggers the problem by accessing an uninitialized rs->lock. Therefore register sysfs after all initializations are complete to avoid such problems.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-37785,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: fix OOB read when checking dotdot dir  Mounting a corrupted filesystem with directory which contains '.' dir entry with rec_len == block size results in out-of-bounds read (later on\, when the corrupted directory is removed).  ext4_empty_dir() assumes every ext4 directory contains at least '.' and '..' as directory entries in the first data block. It first loads the '.' dir entry\, performs sanity checks by calling ext4_check_dir_entry() and then uses its rec_len member to compute the location of '..' dir entry (in ext4_next_entry). It assumes the '..' dir entry fits into the same data block.  If the rec_len of '.' is precisely one block (4KB)\, it slips through the sanity checks (it is considered the last directory entry in the data block) and leaves ""struct ext4_dir_entry_2 *de"" point exactly past the memory slot allocated to the data block. The following call to ext4_check_dir_entry() on new value of de then dereferences this pointer which results in out-of-bounds mem access.  Fix this by extending __ext4_check_dir_entry() to check for '.' dir entries that reach the end of data block. Make sure to ignore the phony dir entries for checksum (by checking name_len for non-zero).  Note: This is reported by KASAN as use-after-free in case another structure was recently freed from the slot past the bound\, but it is really an OOB read.  This issue was found by syzkaller tool.  Call Trace: [   38.594108] BUG: KASAN: slab-use-after-free in __ext4_check_dir_entry+0x67e/0x710 [   38.594649] Read of size 2 at addr ffff88802b41a004 by task syz-executor/5375 [   38.595158] [   38.595288] CPU: 0 UID: 0 PID: 5375 Comm: syz-executor Not tainted 6.14.0-rc7 #1 [   38.595298] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014 [   38.595304] Call Trace: [   38.595308]  <TASK> [   38.595311]  dump_stack_lvl+0xa7/0xd0 [   38.595325]  print_address_description.constprop.0+0x2c/0x3f0 [   38.595339]  ? __ext4_check_dir_entry+0x67e/0x710 [   38.595349]  print_report+0xaa/0x250 [   38.595359]  ? __ext4_check_dir_entry+0x67e/0x710 [   38.595368]  ? kasan_addr_to_slab+0x9/0x90 [   38.595378]  kasan_report+0xab/0xe0 [   38.595389]  ? __ext4_check_dir_entry+0x67e/0x710 [   38.595400]  __ext4_check_dir_entry+0x67e/0x710 [   38.595410]  ext4_empty_dir+0x465/0x990 [   38.595421]  ? __pfx_ext4_empty_dir+0x10/0x10 [   38.595432]  ext4_rmdir.part.0+0x29a/0xd10 [   38.595441]  ? __dquot_initialize+0x2a7/0xbf0 [   38.595455]  ? __pfx_ext4_rmdir.part.0+0x10/0x10 [   38.595464]  ? __pfx___dquot_initialize+0x10/0x10 [   38.595478]  ? down_write+0xdb/0x140 [   38.595487]  ? __pfx_down_write+0x10/0x10 [   38.595497]  ext4_rmdir+0xee/0x140 [   38.595506]  vfs_rmdir+0x209/0x670 [   38.595517]  ? lookup_one_qstr_excl+0x3b/0x190 [   38.595529]  do_rmdir+0x363/0x3c0 [   38.595537]  ? __pfx_do_rmdir+0x10/0x10 [   38.595544]  ? strncpy_from_user+0x1ff/0x2e0 [   38.595561]  __x64_sys_unlinkat+0xf0/0x130 [   38.595570]  do_syscall_64+0x5b/0x180 [   38.595583]  entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21904,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  caif_virtio: fix wrong pointer check in cfv_probe()  del_vqs() frees virtqueues\, therefore cfv->vq_tx pointer should be checked for NULL before calling it\, not cfv->vdev. Also the current implementation is redundant because the pointer cfv->vdev is dereferenced before it is checked for NULL.  Fix this by checking cfv->vq_tx for NULL instead of cfv->vdev before calling del_vqs().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21905,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: limit printed string from FW file  There's no guarantee here that the file is always with a NUL-termination\, so reading the string may read beyond the end of the TLV. If that's the last TLV in the file\, it can perhaps even read beyond the end of the file buffer.  Fix that by limiting the print format to the size of the buffer we have.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53119,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  virtio/vsock: Fix accept_queue memory leak  As the final stages of socket destruction may be delayed\, it is possible that virtio_transport_recv_listen() will be called after the accept_queue has been flushed\, but before the SOCK_DONE flag has been set. As a result\, sockets enqueued after the flush would remain unremoved\, leading to a memory leak.  vsock_release   __vsock_release     lock     virtio_transport_release       virtio_transport_close         schedule_delayed_work(close_work)     sk_shutdown = SHUTDOWN_MASK (!) flush accept_queue     release                                         virtio_transport_recv_pkt                                           vsock_find_bound_socket                                           lock                                           if flag(SOCK_DONE) return                                           virtio_transport_recv_listen                                             child = vsock_create_connected                                       (!)   vsock_enqueue_accept(child)                                           release close_work   lock   virtio_transport_do_close     set_flag(SOCK_DONE)     virtio_transport_remove_sock       vsock_remove_sock         vsock_remove_bound   release  Introduce a sk_shutdown check to disallow vsock_enqueue_accept() during socket destruction.  unreferenced object 0xffff888109e3f800 (size 2040):   comm ""kworker/5:2""\, pid 371\, jiffies 4294940105   hex dump (first 32 bytes):     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................     28 00 0b 40 00 00 00 00 00 00 00 00 00 00 00 00  (..@............   backtrace (crc 9e5f4e84):     [<ffffffff81418ff1>] kmem_cache_alloc_noprof+0x2c1/0x360     [<ffffffff81d27aa0>] sk_prot_alloc+0x30/0x120     [<ffffffff81d2b54c>] sk_alloc+0x2c/0x4b0     [<ffffffff81fe049a>] __vsock_create.constprop.0+0x2a/0x310     [<ffffffff81fe6d6c>] virtio_transport_recv_pkt+0x4dc/0x9a0     [<ffffffff81fe745d>] vsock_loopback_work+0xfd/0x140     [<ffffffff810fc6ac>] process_one_work+0x20c/0x570     [<ffffffff810fce3f>] worker_thread+0x1bf/0x3a0     [<ffffffff811070dd>] kthread+0xdd/0x110     [<ffffffff81044fdd>] ret_from_fork+0x2d/0x50     [<ffffffff8100785a>] ret_from_fork_asm+0x1a/0x30",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2015-2877,linux-libc-dev,LOW,6.1.115-1,N/A,"Kernel Samepage Merging (KSM) in the Linux kernel 2.6.32 through 4.x does not prevent use of a write-timing side channel\, which allows guest OS users to defeat the ASLR protection mechanism on other guest OS instances via a Cross-VM ASL INtrospection (CAIN) attack.  NOTE: the vendor states ""Basically if you care about this attack vector\, disable deduplication."" Share-until-written approaches for memory conservation among mutually untrusting tenants are inherently detectable for information disclosure\, and can be classified as potentially misunderstood behaviors rather than vulnerabilities",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21909,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: nl80211: reject cooked mode if it is set along with other flags  It is possible to set both MONITOR_FLAG_COOK_FRAMES and MONITOR_FLAG_ACTIVE flags simultaneously on the same monitor interface from the userspace. This causes a sub-interface to be created with no IEEE80211_SDATA_IN_DRIVER bit set because the monitor interface is in the cooked state and it takes precedence over all other states. When the interface is then being deleted the kernel calls WARN_ONCE() from check_sdata_in_driver() because of missing that bit.  Fix this by rejecting MONITOR_FLAG_COOK_FRAMES if it is set along with other flags.  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-26242,linux-libc-dev,LOW,6.1.115-1,N/A,"afu_mmio_region_get_by_offset in drivers/fpga/dfl-afu-region.c in the Linux kernel through 6.1.12 has an integer overflow.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-3198,binutils,LOW,2.40-2,N/A,"A vulnerability has been found in GNU Binutils 2.43/2.44 and classified as problematic. Affected by this vulnerability is the function display_info of the file binutils/bucomm.c of the component objdump. The manipulation leads to memory leak. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The patch is named ba6ad3a18cb26b79e0e3b84c39f707535bbc344d. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
TEMP-0517018-A83CE6,sysvinit-utils,LOW,3.06-4,N/A,"No description",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-17479,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"In OpenJPEG 2.3.0\, a stack-based buffer overflow was discovered in the pgxtoimage function in jpwl/convert.c. The vulnerability causes an out-of-bounds write\, which may lead to remote denial of service or possibly remote code execution.",|tykio/midsommar|
CVE-2024-38950,libde265-0,MEDIUM,1.0.11-1+deb12u2,N/A,"Heap Buffer Overflow vulnerability in Libde265 v1.0.15 allows attackers to crash the application via crafted payload to __interceptor_memcpy function.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-30204,github.com/golang-jwt/jwt/v4,HIGH,v4.5.0,4.5.2,"golang-jwt is a Go implementation of JSON Web Tokens. Starting in version 3.2.0 and prior to versions 5.2.2 and 4.5.2\, the function parse.ParseUnverified splits (via a call to strings.Split) its argument (which is untrusted data) on periods. As a result\, in the face of a malicious request whose Authorization header consists of Bearer  followed by many period characters\, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument)\, with a constant factor of about 16. This issue is fixed in 5.2.2 and 4.5.2.",|tykio/midsommar|
CVE-2024-42162,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  gve: Account for stopped queues when reading NIC stats  We now account for the fact that the NIC might send us stats for a subset of queues. Without this change\, gve_get_ethtool_stats might make an invalid access on the priv->stats_report->stats array.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21819,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  Revert ""drm/amd/display: Use HW lock mgr for PSR1""  This reverts commit a2b5a9956269 (""drm/amd/display: Use HW lock mgr for PSR1"")  Because it may cause system hang while connect with two edp panel.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42279,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  spi: microchip-core: ensure TX and RX FIFOs are empty at start of a transfer  While transmitting with rx_len == 0\, the RX FIFO is not going to be emptied in the interrupt handler. A subsequent transfer could then read crap from the previous transfer out of the RX FIFO into the start RX buffer. The core provides a register that will empty the RX and TX FIFOs\, so do that before each transfer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36914,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Skip on writeback when it's not applicable  [WHY] dynamic memory safety error detector (KASAN) catches and generates error messages ""BUG: KASAN: slab-out-of-bounds"" as writeback connector does not support certain features which are not initialized.  [HOW] Skip them when connector type is DRM_MODE_CONNECTOR_WRITEBACK.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21811,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: protect access to buffers with no active references  nilfs_lookup_dirty_data_buffers()\, which iterates through the buffers attached to dirty data folios/pages\, accesses the attached buffers without locking the folios/pages.  For data cache\, nilfs_clear_folio_dirty() may be called asynchronously when the file system degenerates to read only\, so nilfs_lookup_dirty_data_buffers() still has the potential to cause use after free issues when buffers lose the protection of their dirty state midway due to this asynchronous clearing and are unintentionally freed by try_to_free_buffers().  Eliminate this race issue by adjusting the lock section in this function.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36915,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfc: llcp: fix nfc_llcp_setsockopt() unsafe copies  syzbot reported unsafe calls to copy_from_sockptr() [1]  Use copy_safe_from_sockptr() instead.  [1]  BUG: KASAN: slab-out-of-bounds in copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]  BUG: KASAN: slab-out-of-bounds in copy_from_sockptr include/linux/sockptr.h:55 [inline]  BUG: KASAN: slab-out-of-bounds in nfc_llcp_setsockopt+0x6c2/0x850 net/nfc/llcp_sock.c:255 Read of size 4 at addr ffff88801caa1ec3 by task syz-executor459/5078  CPU: 0 PID: 5078 Comm: syz-executor459 Not tainted 6.8.0-syzkaller-08951-gfe46a7dd189e #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 03/27/2024 Call Trace:  <TASK>   __dump_stack lib/dump_stack.c:88 [inline]   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114   print_address_description mm/kasan/report.c:377 [inline]   print_report+0x169/0x550 mm/kasan/report.c:488   kasan_report+0x143/0x180 mm/kasan/report.c:601   copy_from_sockptr_offset include/linux/sockptr.h:49 [inline]   copy_from_sockptr include/linux/sockptr.h:55 [inline]   nfc_llcp_setsockopt+0x6c2/0x850 net/nfc/llcp_sock.c:255   do_sock_setsockopt+0x3b1/0x720 net/socket.c:2311   __sys_setsockopt+0x1ae/0x250 net/socket.c:2334   __do_sys_setsockopt net/socket.c:2343 [inline]   __se_sys_setsockopt net/socket.c:2340 [inline]   __x64_sys_setsockopt+0xb5/0xd0 net/socket.c:2340  do_syscall_64+0xfd/0x240  entry_SYSCALL_64_after_hwframe+0x6d/0x75 RIP: 0033:0x7f7fac07fd89 Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 91 18 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48 RSP: 002b:00007fff660eb788 EFLAGS: 00000246 ORIG_RAX: 0000000000000036 RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f7fac07fd89 RDX: 0000000000000000 RSI: 0000000000000118 RDI: 0000000000000004 RBP: 0000000000000000 R08: 0000000000000002 R09: 0000000000000000 R10: 0000000020000a80 R11: 0000000000000246 R12: 0000000000000000 R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2015-3276,libldap-2.5-0,LOW,2.5.13+dfsg-5,N/A,"The nss_parse_ciphers function in libraries/libldap/tls_m.c in OpenLDAP does not properly parse OpenSSL-style multi-keyword mode cipher strings\, which might cause a weaker than intended cipher to be used and allow remote attackers to have unspecified impact via unknown vectors.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21812,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ax25: rcu protect dev->ax25_ptr  syzbot found a lockdep issue [1].  We should remove ax25 RTNL dependency in ax25_setsockopt()  This should also fix a variety of possible UAF in ax25.  [1]  WARNING: possible circular locking dependency detected 6.13.0-rc3-syzkaller-00762-g9268abe611b0 #0 Not tainted ------------------------------------------------------ syz.5.1818/12806 is trying to acquire lock:  ffffffff8fcb3988 (rtnl_mutex){+.+.}-{4:4}\, at: ax25_setsockopt+0xa55/0xe90 net/ax25/af_ax25.c:680  but task is already holding lock:  ffff8880617ac258 (sk_lock-AF_AX25){+.+.}-{0:0}\, at: lock_sock include/net/sock.h:1618 [inline]  ffff8880617ac258 (sk_lock-AF_AX25){+.+.}-{0:0}\, at: ax25_setsockopt+0x209/0xe90 net/ax25/af_ax25.c:574  which lock already depends on the new lock.  the existing dependency chain (in reverse order) is:  -> #1 (sk_lock-AF_AX25){+.+.}-{0:0}:         lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5849         lock_sock_nested+0x48/0x100 net/core/sock.c:3642         lock_sock include/net/sock.h:1618 [inline]         ax25_kill_by_device net/ax25/af_ax25.c:101 [inline]         ax25_device_event+0x24d/0x580 net/ax25/af_ax25.c:146         notifier_call_chain+0x1a5/0x3f0 kernel/notifier.c:85        __dev_notify_flags+0x207/0x400         dev_change_flags+0xf0/0x1a0 net/core/dev.c:9026         dev_ifsioc+0x7c8/0xe70 net/core/dev_ioctl.c:563         dev_ioctl+0x719/0x1340 net/core/dev_ioctl.c:820         sock_do_ioctl+0x240/0x460 net/socket.c:1234         sock_ioctl+0x626/0x8e0 net/socket.c:1339         vfs_ioctl fs/ioctl.c:51 [inline]         __do_sys_ioctl fs/ioctl.c:906 [inline]         __se_sys_ioctl+0xf5/0x170 fs/ioctl.c:892         do_syscall_x64 arch/x86/entry/common.c:52 [inline]         do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83        entry_SYSCALL_64_after_hwframe+0x77/0x7f  -> #0 (rtnl_mutex){+.+.}-{4:4}:         check_prev_add kernel/locking/lockdep.c:3161 [inline]         check_prevs_add kernel/locking/lockdep.c:3280 [inline]         validate_chain+0x18ef/0x5920 kernel/locking/lockdep.c:3904         __lock_acquire+0x1397/0x2100 kernel/locking/lockdep.c:5226         lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5849         __mutex_lock_common kernel/locking/mutex.c:585 [inline]         __mutex_lock+0x1ac/0xee0 kernel/locking/mutex.c:735         ax25_setsockopt+0xa55/0xe90 net/ax25/af_ax25.c:680         do_sock_setsockopt+0x3af/0x720 net/socket.c:2324         __sys_setsockopt net/socket.c:2349 [inline]         __do_sys_setsockopt net/socket.c:2355 [inline]         __se_sys_setsockopt net/socket.c:2352 [inline]         __x64_sys_setsockopt+0x1ee/0x280 net/socket.c:2352         do_syscall_x64 arch/x86/entry/common.c:52 [inline]         do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83        entry_SYSCALL_64_after_hwframe+0x77/0x7f  other info that might help us debug this:   Possible unsafe locking scenario:         CPU0                    CPU1        ----                    ----   lock(sk_lock-AF_AX25);                                lock(rtnl_mutex);                                lock(sk_lock-AF_AX25);   lock(rtnl_mutex);   *** DEADLOCK ***  1 lock held by syz.5.1818/12806:   #0: ffff8880617ac258 (sk_lock-AF_AX25){+.+.}-{0:0}\, at: lock_sock include/net/sock.h:1618 [inline]   #0: ffff8880617ac258 (sk_lock-AF_AX25){+.+.}-{0:0}\, at: ax25_setsockopt+0x209/0xe90 net/ax25/af_ax25.c:574  stack backtrace: CPU: 1 UID: 0 PID: 12806 Comm: syz.5.1818 Not tainted 6.13.0-rc3-syzkaller-00762-g9268abe611b0 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:  <TASK>   __dump_stack lib/dump_stack.c:94 [inline]   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120   print_circular_bug+0x13a/0x1b0 kernel/locking/lockdep.c:2074   check_noncircular+0x36a/0x4a0 kernel/locking/lockdep.c:2206   check_prev_add kernel/locking/lockdep.c:3161 [inline]   check_prevs_add kernel/lockin ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21814,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ptp: Ensure info->enable callback is always set  The ioctl and sysfs handlers unconditionally call the ->enable callback. Not all drivers implement that callback\, leading to NULL dereferences. Example of affected drivers: ptp_s390.c\, ptp_vclock.c and ptp_mock.c.  Instead use a dummy callback if no better was specified by the driver.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36911,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  hv_netvsc: Don't free decrypted memory  In CoCo VMs it is possible for the untrusted host to cause set_memory_encrypted() or set_memory_decrypted() to fail such that an error is returned and the resulting memory is shared. Callers need to take care to handle these errors to avoid returning decrypted (shared) memory to the page allocator\, which could lead to functional or security issues.  The netvsc driver could free decrypted/shared pages if set_memory_decrypted() fails. Check the decrypted field in the gpadl to decide whether to free the memory.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21816,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  hrtimers: Force migrate away hrtimers queued after CPUHP_AP_HRTIMERS_DYING  hrtimers are migrated away from the dying CPU to any online target at the CPUHP_AP_HRTIMERS_DYING stage in order not to delay bandwidth timers handling tasks involved in the CPU hotplug forward progress.  However wakeups can still be performed by the outgoing CPU after CPUHP_AP_HRTIMERS_DYING. Those can result again in bandwidth timers being armed. Depending on several considerations (crystal ball power management based election\, earliest timer already enqueued\, timer migration enabled or not)\, the target may eventually be the current CPU even if offline. If that happens\, the timer is eventually ignored.  The most notable example is RCU which had to deal with each and every of those wake-ups by deferring them to an online CPU\, along with related workarounds:  _ e787644caf76 (rcu: Defer RCU kthreads wakeup when CPU is dying) _ 9139f93209d1 (rcu/nocb: Fix RT throttling hrtimer armed from offline CPU) _ f7345ccc62a4 (rcu/nocb: Fix rcuog wake-up from offline softirq)  The problem isn't confined to RCU though as the stop machine kthread (which runs CPUHP_AP_HRTIMERS_DYING) reports its completion at the end of its work through cpu_stop_signal_done() and performs a wake up that eventually arms the deadline server timer:     WARNING: CPU: 94 PID: 588 at kernel/time/hrtimer.c:1086 hrtimer_start_range_ns+0x289/0x2d0    CPU: 94 UID: 0 PID: 588 Comm: migration/94 Not tainted    Stopper: multi_cpu_stop+0x0/0x120 <- stop_machine_cpuslocked+0x66/0xc0    RIP: 0010:hrtimer_start_range_ns+0x289/0x2d0    Call Trace:    <TASK>      start_dl_timer      enqueue_dl_entity      dl_server_start      enqueue_task_fair      enqueue_task      ttwu_do_activate      try_to_wake_up      complete      cpu_stopper_thread  Instead of providing yet another bandaid to work around the situation\, fix it in the hrtimers infrastructure instead: always migrate away a timer to an online target whenever it is enqueued from an offline CPU.  This will also allow to revert all the above RCU disgraceful hacks.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21817,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  block: mark GFP_NOIO around sysfs ->store()  sysfs ->store is called with queue freezed\, meantime we have several ->store() callbacks(update_nr_requests\, wbt\, scheduler) to allocate memory with GFP_KERNEL which may run into direct reclaim code path\, then potential deadlock can be caused.  Fix the issue by marking NOIO around sysfs ->store()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36913,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Drivers: hv: vmbus: Leak pages if set_memory_encrypted() fails  In CoCo VMs it is possible for the untrusted host to cause set_memory_encrypted() or set_memory_decrypted() to fail such that an error is returned and the resulting memory is shared. Callers need to take care to handle these errors to avoid returning decrypted (shared) memory to the page allocator\, which could lead to functional or security issues.  VMBus code could free decrypted pages if set_memory_encrypted()/decrypted() fails. Leak the pages if this happens.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47704,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check link_res->hpo_dp_link_enc before using it  [WHAT & HOW] Functions dp_enable_link_phy and dp_disable_link_phy can pass link_res without initializing hpo_dp_link_enc and it is necessary to check for null before dereferencing.  This fixes 2 FORWARD_NULL issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57997,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: wcn36xx: fix channel survey memory allocation size  KASAN reported a memory allocation issue in wcn->chan_survey due to incorrect size calculation. This commit uses kcalloc to allocate memory for wcn->chan_survey\, ensuring proper initialization and preventing the use of uninitialized values when there are no frames on the channel.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57996,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net_sched: sch_sfq: don't allow 1 packet limit  The current implementation does not work correctly with a limit of 1. iproute2 actually checks for this and this patch adds the check in kernel as well.  This fixes the following syzkaller reported crash:  UBSAN: array-index-out-of-bounds in net/sched/sch_sfq.c:210:6 index 65535 is out of range for type 'struct sfq_head[128]' CPU: 0 PID: 2569 Comm: syz-executor101 Not tainted 5.10.0-smp-DEV #1 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:   __dump_stack lib/dump_stack.c:79 [inline]   dump_stack+0x125/0x19f lib/dump_stack.c:120   ubsan_epilogue lib/ubsan.c:148 [inline]   __ubsan_handle_out_of_bounds+0xed/0x120 lib/ubsan.c:347   sfq_link net/sched/sch_sfq.c:210 [inline]   sfq_dec+0x528/0x600 net/sched/sch_sfq.c:238   sfq_dequeue+0x39b/0x9d0 net/sched/sch_sfq.c:500   sfq_reset+0x13/0x50 net/sched/sch_sfq.c:525   qdisc_reset+0xfe/0x510 net/sched/sch_generic.c:1026   tbf_reset+0x3d/0x100 net/sched/sch_tbf.c:319   qdisc_reset+0xfe/0x510 net/sched/sch_generic.c:1026   dev_reset_queue+0x8c/0x140 net/sched/sch_generic.c:1296   netdev_for_each_tx_queue include/linux/netdevice.h:2350 [inline]   dev_deactivate_many+0x6dc/0xc20 net/sched/sch_generic.c:1362   __dev_close_many+0x214/0x350 net/core/dev.c:1468   dev_close_many+0x207/0x510 net/core/dev.c:1506   unregister_netdevice_many+0x40f/0x16b0 net/core/dev.c:10738   unregister_netdevice_queue+0x2be/0x310 net/core/dev.c:10695   unregister_netdevice include/linux/netdevice.h:2893 [inline]   __tun_detach+0x6b6/0x1600 drivers/net/tun.c:689   tun_detach drivers/net/tun.c:705 [inline]   tun_chr_close+0x104/0x1b0 drivers/net/tun.c:3640   __fput+0x203/0x840 fs/file_table.c:280   task_work_run+0x129/0x1b0 kernel/task_work.c:185   exit_task_work include/linux/task_work.h:33 [inline]   do_exit+0x5ce/0x2200 kernel/exit.c:931   do_group_exit+0x144/0x310 kernel/exit.c:1046   __do_sys_exit_group kernel/exit.c:1057 [inline]   __se_sys_exit_group kernel/exit.c:1055 [inline]   __x64_sys_exit_group+0x3b/0x40 kernel/exit.c:1055  do_syscall_64+0x6c/0xd0  entry_SYSCALL_64_after_hwframe+0x61/0xcb RIP: 0033:0x7fe5e7b52479 Code: Unable to access opcode bytes at RIP 0x7fe5e7b5244f. RSP: 002b:00007ffd3c800398 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7 RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fe5e7b52479 RDX: 000000000000003c RSI: 00000000000000e7 RDI: 0000000000000000 RBP: 00007fe5e7bcd2d0 R08: ffffffffffffffb8 R09: 0000000000000014 R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe5e7bcd2d0 R13: 0000000000000000 R14: 00007fe5e7bcdd20 R15: 00007fe5e7b24270  The crash can be also be reproduced with the following (with a tc recompiled to allow for sfq limits of 1):  tc qdisc add dev dummy0 handle 1: root tbf rate 1Kbit burst 100b lat 1s ../iproute2-6.9.0/tc/tc qdisc add dev dummy0 handle 2: parent 1:10 sfq limit 1 ifconfig dummy0 up ping -I dummy0 -f -c2 -W0.1 8.8.8.8 sleep 1  Scenario that triggers the crash:  * the first packet is sent and queued in TBF and SFQ; qdisc qlen is 1  * TBF dequeues: it peeks from SFQ which moves the packet to the   gso_skb list and keeps qdisc qlen set to 1. TBF is out of tokens so   it schedules itself for later.  * the second packet is sent and TBF tries to queues it to SFQ. qdisc   qlen is now 2 and because the SFQ limit is 1 the packet is dropped   by SFQ. At this point qlen is 1\, and all of the SFQ slots are empty\,   however q->tail is not NULL.  At this point\, assuming no more packets are queued\, when sch_dequeue runs again it will decrement the qlen for the current empty slot causing an underflow and the subsequent out of bounds access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26757,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md: Don't ignore read-only array in md_check_recovery()  Usually if the array is not read-write\, md_check_recovery() won't register new sync_thread in the first place. And if the array is read-write and sync_thread is registered\, md_set_readonly() will unregister sync_thread before setting the array read-only. md/raid follow this behavior hence there is no problem.  After commit f52f5c71f3d4 (""md: fix stopping sync thread"")\, following hang can be triggered by test shell/integrity-caching.sh:  1) array is read-only. dm-raid update super block: rs_update_sbs  ro = mddev->ro  mddev->ro = 0   -> set array read-write  md_update_sb  2) register new sync thread concurrently.  3) dm-raid set array back to read-only: rs_update_sbs  mddev->ro = ro  4) stop the array: raid_dtr  md_stop   stop_sync_thread     set_bit(MD_RECOVERY_INTR\, &mddev->recovery);     md_wakeup_thread_directly(mddev->sync_thread);     wait_event(...\, !test_bit(MD_RECOVERY_RUNNING\, &mddev->recovery))  5) sync thread done:  md_do_sync  set_bit(MD_RECOVERY_DONE\, &mddev->recovery);  md_wakeup_thread(mddev->thread);  6) daemon thread can't unregister sync thread:  md_check_recovery   if (!md_is_rdwr(mddev) &&       !test_bit(MD_RECOVERY_NEEDED\, &mddev->recovery))    return;   -> -> MD_RECOVERY_RUNNING can't be cleared\, hence step 4 hang;  The root cause is that dm-raid manipulate 'mddev->ro' by itself\, however\, dm-raid really should stop sync thread before setting the array read-only. Unfortunately\, I need to read more code before I can refacter the handler of 'mddev->ro' in dm-raid\, hence let's fix the problem the easy way for now to prevent dm-raid regression.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-3618,libtiff6,MEDIUM,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"A flaw was found in libtiff. A specially crafted tiff file can lead to a segmentation fault due to a buffer overflow in the Fax3Encode function in libtiff/tif_fax3.c\, resulting in a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26756,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md: Don't register sync_thread for reshape directly  Currently\, if reshape is interrupted\, then reassemble the array will register sync_thread directly from pers->run()\, in this case 'MD_RECOVERY_RUNNING' is set directly\, however\, there is no guarantee that md_do_sync() will be executed\, hence stop_sync_thread() will hang because 'MD_RECOVERY_RUNNING' can't be cleared.  Last patch make sure that md_do_sync() will set MD_RECOVERY_DONE\, however\, following hang can still be triggered by dm-raid test shell/lvconvert-raid-reshape.sh occasionally:  [root@fedora ~]# cat /proc/1982/stack [<0>] stop_sync_thread+0x1ab/0x270 [md_mod] [<0>] md_frozen_sync_thread+0x5c/0xa0 [md_mod] [<0>] raid_presuspend+0x1e/0x70 [dm_raid] [<0>] dm_table_presuspend_targets+0x40/0xb0 [dm_mod] [<0>] __dm_destroy+0x2a5/0x310 [dm_mod] [<0>] dm_destroy+0x16/0x30 [dm_mod] [<0>] dev_remove+0x165/0x290 [dm_mod] [<0>] ctl_ioctl+0x4bb/0x7b0 [dm_mod] [<0>] dm_ctl_ioctl+0x11/0x20 [dm_mod] [<0>] vfs_ioctl+0x21/0x60 [<0>] __x64_sys_ioctl+0xb9/0xe0 [<0>] do_syscall_64+0xc6/0x230 [<0>] entry_SYSCALL_64_after_hwframe+0x6c/0x74  Meanwhile mddev->recovery is: MD_RECOVERY_RUNNING | MD_RECOVERY_INTR | MD_RECOVERY_RESHAPE | MD_RECOVERY_FROZEN  Fix this problem by remove the code to register sync_thread directly from raid10 and raid5. And let md_check_recovery() to register sync_thread.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57993,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: hid-thrustmaster: Fix warning in thrustmaster_probe by adding endpoint check  syzbot has found a type mismatch between a USB pipe and the transfer endpoint\, which is triggered by the hid-thrustmaster driver[1]. There is a number of similar\, already fixed issues [2]. In this case as in others\, implementing check for endpoint type fixes the issue.  [1] https://syzkaller.appspot.com/bug?extid=040e8b3db6a96908d470 [2] https://syzkaller.appspot.com/bug?extid=348331f63b034f89b622",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47703,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\, lsm: Add check for BPF LSM return value  A bpf prog returning a positive number attached to file_alloc_security hook makes kernel panic.  This happens because file system can not filter out the positive number returned by the LSM prog using IS_ERR\, and misinterprets this positive number as a file pointer.  Given that hook file_alloc_security never returned positive number before the introduction of BPF LSM\, and other BPF LSM hooks may encounter similar issues\, this patch adds LSM return value check in verifier\, to ensure no unexpected value is returned.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47408,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: check smcd_v2_ext_offset when receiving proposal msg  When receiving proposal msg in server\, the field smcd_v2_ext_offset in proposal msg is from the remote client and can not be fully trusted. Once the value of smcd_v2_ext_offset exceed the max value\, there has the chance to access wrong address\, and crash may happen.  This patch checks the value of smcd_v2_ext_offset before using it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52857,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/mediatek: Fix coverity issue with unintentional integer overflow  1. Instead of multiplying 2 variable of different types. Change to assign a value of one variable and then multiply the other variable.  2. Add a int variable for multiplier calculation instead of calculating different types multiplier with dma_addr_t variable directly.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43899,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix null pointer deref in dcn20_resource.c  Fixes a hang thats triggered when MPV is run on a DCN401 dGPU:  mpv --hwdec=vaapi --vo=gpu --hwdec-codecs=all  and then enabling fullscreen playback (double click on the video)  The following calltrace will be seen:  [  181.843989] BUG: kernel NULL pointer dereference\, address: 0000000000000000 [  181.843997] #PF: supervisor instruction fetch in kernel mode [  181.844003] #PF: error_code(0x0010) - not-present page [  181.844009] PGD 0 P4D 0 [  181.844020] Oops: 0010 [#1] PREEMPT SMP NOPTI [  181.844028] CPU: 6 PID: 1892 Comm: gnome-shell Tainted: G        W  OE      6.5.0-41-generic #41~22.04.2-Ubuntu [  181.844038] Hardware name: System manufacturer System Product Name/CROSSHAIR VI HERO\, BIOS 6302 10/23/2018 [  181.844044] RIP: 0010:0x0 [  181.844079] Code: Unable to access opcode bytes at 0xffffffffffffffd6. [  181.844084] RSP: 0018:ffffb593c2b8f7b0 EFLAGS: 00010246 [  181.844093] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000004 [  181.844099] RDX: ffffb593c2b8f804 RSI: ffffb593c2b8f7e0 RDI: ffff9e3c8e758400 [  181.844105] RBP: ffffb593c2b8f7b8 R08: ffffb593c2b8f9c8 R09: ffffb593c2b8f96c [  181.844110] R10: 0000000000000000 R11: 0000000000000000 R12: ffffb593c2b8f9c8 [  181.844115] R13: 0000000000000001 R14: ffff9e3c88000000 R15: 0000000000000005 [  181.844121] FS:  00007c6e323bb5c0(0000) GS:ffff9e3f85f80000(0000) knlGS:0000000000000000 [  181.844128] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  181.844134] CR2: ffffffffffffffd6 CR3: 0000000140fbe000 CR4: 00000000003506e0 [  181.844141] Call Trace: [  181.844146]  <TASK> [  181.844153]  ? show_regs+0x6d/0x80 [  181.844167]  ? __die+0x24/0x80 [  181.844179]  ? page_fault_oops+0x99/0x1b0 [  181.844192]  ? do_user_addr_fault+0x31d/0x6b0 [  181.844204]  ? exc_page_fault+0x83/0x1b0 [  181.844216]  ? asm_exc_page_fault+0x27/0x30 [  181.844237]  dcn20_get_dcc_compression_cap+0x23/0x30 [amdgpu] [  181.845115]  amdgpu_dm_plane_validate_dcc.constprop.0+0xe5/0x180 [amdgpu] [  181.845985]  amdgpu_dm_plane_fill_plane_buffer_attributes+0x300/0x580 [amdgpu] [  181.846848]  fill_dc_plane_info_and_addr+0x258/0x350 [amdgpu] [  181.847734]  fill_dc_plane_attributes+0x162/0x350 [amdgpu] [  181.848748]  dm_update_plane_state.constprop.0+0x4e3/0x6b0 [amdgpu] [  181.849791]  ? dm_update_plane_state.constprop.0+0x4e3/0x6b0 [amdgpu] [  181.850840]  amdgpu_dm_atomic_check+0xdfe/0x1760 [amdgpu]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58014,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: brcmsmac: add gain range check to wlc_phy_iqcal_gainparams_nphy()  In 'wlc_phy_iqcal_gainparams_nphy()'\, add gain range check to WARN() instead of possible out-of-bounds 'tbl_iqcal_gainparams_nphy' access. Compile tested only.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58017,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  printk: Fix signed integer overflow when defining LOG_BUF_LEN_MAX  Shifting 1 << 31 on a 32-bit int causes signed integer overflow\, which leads to undefined behavior. To prevent this\, cast 1 to u32 before performing the shift\, ensuring well-defined behavior.  This change explicitly avoids any potential overflow by ensuring that the shift occurs on an unsigned 32-bit integer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-45828,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  i3c: mipi-i3c-hci: Mask ring interrupts before ring stop request  Bus cleanup path in DMA mode may trigger a RING_OP_STAT interrupt when the ring is being stopped. Depending on timing between ring stop request completion\, interrupt handler removal and code execution this may lead to a NULL pointer dereference in hci_dma_irq_handler() if it gets to run after the io_data pointer is set to NULL in hci_dma_cleanup().  Prevent this my masking the ring interrupts before ring stop request.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58016,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  safesetid: check size of policy writes  syzbot attempts to write a buffer with a large size to a sysfs entry with writes handled by handle_policy_update()\, triggering a warning in kmalloc.  Check the size specified for write buffers before allocating.  [PM: subject tweak]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26758,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md: Don't ignore suspended array in md_check_recovery()  mddev_suspend() never stop sync_thread\, hence it doesn't make sense to ignore suspended array in md_check_recovery()\, which might cause sync_thread can't be unregistered.  After commit f52f5c71f3d4 (""md: fix stopping sync thread"")\, following hang can be triggered by test shell/integrity-caching.sh:  1) suspend the array: raid_postsuspend  mddev_suspend  2) stop the array: raid_dtr  md_stop   __md_stop_writes    stop_sync_thread     set_bit(MD_RECOVERY_INTR\, &mddev->recovery);     md_wakeup_thread_directly(mddev->sync_thread);     wait_event(...\, !test_bit(MD_RECOVERY_RUNNING\, &mddev->recovery))  3) sync thread done: md_do_sync  set_bit(MD_RECOVERY_DONE\, &mddev->recovery);  md_wakeup_thread(mddev->thread);  4) daemon thread can't unregister sync thread: md_check_recovery  if (mddev->suspended)    return; -> return directly  md_read_sync_thread  clear_bit(MD_RECOVERY_RUNNING\, &mddev->recovery);  -> MD_RECOVERY_RUNNING can't be cleared\, hence step 2 hang;  This problem is not just related to dm-raid\, fix it by ignoring suspended array in md_check_recovery(). And follow up patches will improve dm-raid better to frozen sync thread during suspend.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58011,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86: int3472: Check for adev == NULL  Not all devices have an ACPI companion fwnode\, so adev might be NULL. This can e.g. (theoretically) happen when a user manually binds one of the int3472 drivers to another i2c/platform device through sysfs.  Add a check for adev not being set and return -ENODEV in that case to avoid a possible NULL pointer deref in skl_int3472_get_acpi_buffer().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57999,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/pseries/iommu: IOMMU incorrectly marks MMIO range in DDW  Power Hypervisor can possibily allocate MMIO window intersecting with Dynamic DMA Window (DDW) range\, which is over 32-bit addressing.  These MMIO pages needs to be marked as reserved so that IOMMU doesn't map DMA buffers in this range.  The current code is not marking these pages correctly which is resulting in LPAR to OOPS while booting. The stack is at below  BUG: Unable to handle kernel data access on read at 0xc00800005cd40000 Faulting instruction address: 0xc00000000005cdac Oops: Kernel access of bad area\, sig: 11 [#1] LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries Modules linked in: af_packet rfkill ibmveth(X) lpfc(+) nvmet_fc nvmet nvme_keyring crct10dif_vpmsum nvme_fc nvme_fabrics nvme_core be2net(+) nvme_auth rtc_generic nfsd auth_rpcgss nfs_acl lockd grace sunrpc fuse configfs ip_tables x_tables xfs libcrc32c dm_service_time ibmvfc(X) scsi_transport_fc vmx_crypto gf128mul crc32c_vpmsum dm_mirror dm_region_hash dm_log dm_multipath dm_mod sd_mod scsi_dh_emc scsi_dh_rdac scsi_dh_alua t10_pi crc64_rocksoft_generic crc64_rocksoft sg crc64 scsi_mod Supported: Yes\, External CPU: 8 PID: 241 Comm: kworker/8:1 Kdump: loaded Not tainted 6.4.0-150600.23.14-default #1 SLE15-SP6 b44ee71c81261b9e4bab5e0cde1f2ed891d5359b Hardware name: IBM\,9080-M9S POWER9 (raw) 0x4e2103 0xf000005 of:IBM\,FW950.B0 (VH950_149) hv:phyp pSeries Workqueue: events work_for_cpu_fn NIP:  c00000000005cdac LR: c00000000005e830 CTR: 0000000000000000 REGS: c00001400c9ff770 TRAP: 0300   Not tainted  (6.4.0-150600.23.14-default) MSR:  800000000280b033 <SF\,VEC\,VSX\,EE\,FP\,ME\,IR\,DR\,RI\,LE>  CR: 24228448  XER: 00000001 CFAR: c00000000005cdd4 DAR: c00800005cd40000 DSISR: 40000000 IRQMASK: 0 GPR00: c00000000005e830 c00001400c9ffa10 c000000001987d00 c00001400c4fe800 GPR04: 0000080000000000 0000000000000001 0000000004000000 0000000000800000 GPR08: 0000000004000000 0000000000000001 c00800005cd40000 ffffffffffffffff GPR12: 0000000084228882 c00000000a4c4f00 0000000000000010 0000080000000000 GPR16: c00001400c4fe800 0000000004000000 0800000000000000 c00000006088b800 GPR20: c00001401a7be980 c00001400eff3800 c000000002a2da68 000000000000002b GPR24: c0000000026793a8 c000000002679368 000000000000002a c0000000026793c8 GPR28: 000008007effffff 0000080000000000 0000000000800000 c00001400c4fe800 NIP [c00000000005cdac] iommu_table_reserve_pages+0xac/0x100 LR [c00000000005e830] iommu_init_table+0x80/0x1e0 Call Trace: [c00001400c9ffa10] [c00000000005e810] iommu_init_table+0x60/0x1e0 (unreliable) [c00001400c9ffa90] [c00000000010356c] iommu_bypass_supported_pSeriesLP+0x9cc/0xe40 [c00001400c9ffc30] [c00000000005c300] dma_iommu_dma_supported+0xf0/0x230 [c00001400c9ffcb0] [c00000000024b0c4] dma_supported+0x44/0x90 [c00001400c9ffcd0] [c00000000024b14c] dma_set_mask+0x3c/0x80 [c00001400c9ffd00] [c0080000555b715c] be_probe+0xc4/0xb90 [be2net] [c00001400c9ffdc0] [c000000000986f3c] local_pci_probe+0x6c/0x110 [c00001400c9ffe40] [c000000000188f28] work_for_cpu_fn+0x38/0x60 [c00001400c9ffe70] [c00000000018e454] process_one_work+0x314/0x620 [c00001400c9fff10] [c00000000018f280] worker_thread+0x2b0/0x620 [c00001400c9fff90] [c00000000019bb18] kthread+0x148/0x150 [c00001400c9fffe0] [c00000000000ded8] start_kernel_thread+0x14/0x18  There are 2 issues in the code  1. The index is ""int"" while the address is ""unsigned long"". This results in    negative value when setting the bitmap.  2. The DMA offset is page shifted but the MMIO range is used as-is (64-bit    address). MMIO address needs to be page shifted as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58010,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  binfmt_flat: Fix integer overflow bug on 32 bit systems  Most of these sizes and counts are capped at 256MB so the math doesn't result in an integer overflow.  The ""relocs"" count needs to be checked as well.  Otherwise on 32bit systems the calculation of ""full_data"" could be wrong.  \tfull_data = data_len + relocs * sizeof(unsigned long);",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57998,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  OPP: add index check to assert to avoid buffer overflow in _read_freq()  Pass the freq index to the assert function to make sure we do not read a freq out of the opp->rates[] table when called from the indexed variants: dev_pm_opp_find_freq_exact_indexed() or dev_pm_opp_find_freq_ceil/floor_indexed().  Add a secondary parameter to the assert function\, unused for assert_single_clk() then add assert_clk_index() which will check for the clock index when called from the _indexed() find functions.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-20794,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in the Linux kernel 4.18 through 5.6.11 when unprivileged user namespaces are allowed. A user can create their own PID namespace\, and mount a FUSE filesystem. Upon interaction with this FUSE filesystem\, if the userspace component is terminated via a kill of the PID namespace's pid 1\, it will result in a hung task\, and resources being permanently locked up until system reboot. This can result in resource exhaustion.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58013,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: MGMT: Fix slab-use-after-free Read in mgmt_remove_adv_monitor_sync  This fixes the following crash:  ================================================================== BUG: KASAN: slab-use-after-free in mgmt_remove_adv_monitor_sync+0x3a/0xd0 net/bluetooth/mgmt.c:5543 Read of size 8 at addr ffff88814128f898 by task kworker/u9:4/5961  CPU: 1 UID: 0 PID: 5961 Comm: kworker/u9:4 Not tainted 6.12.0-syzkaller-10684-gf1cd565ce577 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: hci0 hci_cmd_sync_work Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:378 [inline]  print_report+0x169/0x550 mm/kasan/report.c:489  kasan_report+0x143/0x180 mm/kasan/report.c:602  mgmt_remove_adv_monitor_sync+0x3a/0xd0 net/bluetooth/mgmt.c:5543  hci_cmd_sync_work+0x22b/0x400 net/bluetooth/hci_sync.c:332  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa63/0x1850 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f0/0x390 kernel/kthread.c:389  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>  Allocated by task 16026:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  poison_kmalloc_redzone mm/kasan/common.c:377 [inline]  __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:394  kasan_kmalloc include/linux/kasan.h:260 [inline]  __kmalloc_cache_noprof+0x243/0x390 mm/slub.c:4314  kmalloc_noprof include/linux/slab.h:901 [inline]  kzalloc_noprof include/linux/slab.h:1037 [inline]  mgmt_pending_new+0x65/0x250 net/bluetooth/mgmt_util.c:269  mgmt_pending_add+0x36/0x120 net/bluetooth/mgmt_util.c:296  remove_adv_monitor+0x102/0x1b0 net/bluetooth/mgmt.c:5568  hci_mgmt_cmd+0xc47/0x11d0 net/bluetooth/hci_sock.c:1712  hci_sock_sendmsg+0x7b8/0x11c0 net/bluetooth/hci_sock.c:1832  sock_sendmsg_nosec net/socket.c:711 [inline]  __sock_sendmsg+0x221/0x270 net/socket.c:726  sock_write_iter+0x2d7/0x3f0 net/socket.c:1147  new_sync_write fs/read_write.c:586 [inline]  vfs_write+0xaeb/0xd30 fs/read_write.c:679  ksys_write+0x18f/0x2b0 fs/read_write.c:731  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Freed by task 16022:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  kasan_save_free_info+0x40/0x50 mm/kasan/generic.c:582  poison_slab_object mm/kasan/common.c:247 [inline]  __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264  kasan_slab_free include/linux/kasan.h:233 [inline]  slab_free_hook mm/slub.c:2338 [inline]  slab_free mm/slub.c:4598 [inline]  kfree+0x196/0x420 mm/slub.c:4746  mgmt_pending_foreach+0xd1/0x130 net/bluetooth/mgmt_util.c:259  __mgmt_power_off+0x183/0x430 net/bluetooth/mgmt.c:9550  hci_dev_close_sync+0x6c4/0x11c0 net/bluetooth/hci_sync.c:5208  hci_dev_do_close net/bluetooth/hci_core.c:483 [inline]  hci_dev_close+0x112/0x210 net/bluetooth/hci_core.c:508  sock_do_ioctl+0x158/0x460 net/socket.c:1209  sock_ioctl+0x626/0x8e0 net/socket.c:1328  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:906 [inline]  __se_sys_ioctl+0xf5/0x170 fs/ioctl.c:892  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58012,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: SOF: Intel: hda-dai: Ensure DAI widget is valid during params  Each cpu DAI should associate with a widget. However\, the topology might not create the right number of DAI widgets for aggregated amps. And it will cause NULL pointer deference. Check that the DAI widget associated with the CPU DAI is valid to prevent NULL pointer deference due to missing DAI widgets in topologies with aggregated amps.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22010,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/hns: Fix soft lockup during bt pages loop  Driver runs a for-loop when allocating bt pages and mapping them with buffer pages. When a large buffer (e.g. MR over 100GB) is being allocated\, it may require a considerable loop count. This will lead to soft lockup:          watchdog: BUG: soft lockup - CPU#27 stuck for 22s!         ...         Call trace:          hem_list_alloc_mid_bt+0x124/0x394 [hns_roce_hw_v2]          hns_roce_hem_list_request+0xf8/0x160 [hns_roce_hw_v2]          hns_roce_mtr_create+0x2e4/0x360 [hns_roce_hw_v2]          alloc_mr_pbl+0xd4/0x17c [hns_roce_hw_v2]          hns_roce_reg_user_mr+0xf8/0x190 [hns_roce_hw_v2]          ib_uverbs_reg_mr+0x118/0x290          watchdog: BUG: soft lockup - CPU#35 stuck for 23s!         ...         Call trace:          hns_roce_hem_list_find_mtt+0x7c/0xb0 [hns_roce_hw_v2]          mtr_map_bufs+0xc4/0x204 [hns_roce_hw_v2]          hns_roce_mtr_create+0x31c/0x3c4 [hns_roce_hw_v2]          alloc_mr_pbl+0xb0/0x160 [hns_roce_hw_v2]          hns_roce_reg_user_mr+0x108/0x1c0 [hns_roce_hw_v2]          ib_uverbs_reg_mr+0x120/0x2bc  Add a cond_resched() to fix soft lockup during these loops. In order not to affect the allocation performance of normal-size buffer\, set the loop count of a 100GB MR as the threshold to call cond_resched().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21846,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  acct: perform last write from workqueue  In [1] it was reported that the acct(2) system call can be used to trigger NULL deref in cases where it is set to write to a file that triggers an internal lookup. This can e.g.\, happen when pointing acc(2) to /sys/power/resume. At the point the where the write to this file happens the calling task has already exited and called exit_fs(). A lookup will thus trigger a NULL-deref when accessing current->fs.  Reorganize the code so that the the final write happens from the workqueue but with the caller's credentials. This preserves the (strange) permission model and has almost no regression risk.  This api should stop to exist though.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26648,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix variable deferencing before NULL check in edp_setup_replay()  In edp_setup_replay()\, 'struct dc *dc' & 'struct dmub_replay *replay' was dereferenced before the pointer 'link' & 'replay' NULL check.  Fixes the below: drivers/gpu/drm/amd/amdgpu/../display/dc/link/protocols/link_edp_panel_control.c:947 edp_setup_replay() warn: variable dereferenced before check 'link' (see line 933)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21844,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: Add check for next_buffer in receive_encrypted_standard()  Add check for the return value of cifs_buf_get() and cifs_small_buf_get() in receive_encrypted_standard() to prevent null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38564,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Add BPF_PROG_TYPE_CGROUP_SKB attach type enforcement in BPF_LINK_CREATE  bpf_prog_attach uses attach_type_to_prog_type to enforce proper attach type for BPF_PROG_TYPE_CGROUP_SKB. link_create uses bpf_prog_get and relies on bpf_prog_attach_check_attach_type to properly verify prog_type <> attach_type association.  Add missing attach_type enforcement for the link_create case. Otherwise\, it's currently possible to attach cgroup_skb prog types to other cgroup hooks.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22015,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm/migrate: fix shmem xarray update during migration  A shmem folio can be either in page cache or in swap cache\, but not at the same time.  Namely\, once it is in swap cache\, folio->mapping should be NULL\, and the folio is no longer in a shmem mapping.  In __folio_migrate_mapping()\, to determine the number of xarray entries to update\, folio_test_swapbacked() is used\, but that conflates shmem in page cache case and shmem in swap cache case.  It leads to xarray multi-index entry corruption\, since it turns a sibling entry to a normal entry during xas_store() (see [1] for a userspace reproduction).  Fix it by only using folio_test_swapcache() to determine whether xarray is storing swap cache entries or not to choose the right number of xarray entries to update.  [1] https://lore.kernel.org/linux-mm/Z8idPCkaJW1IChjT@casper.infradead.org/  Note: In __split_huge_page()\, folio_test_anon() && folio_test_swapcache() is used to get swap_cache address space\, but that ignores the shmem folio in swap cache case.  It could lead to NULL pointer dereferencing when a in-swap-cache shmem folio is split at __xa_store()\, since !folio_test_anon() is true and folio->mapping is NULL.  But fortunately\, its caller split_huge_page_to_list_to_order() bails out early with EBUSY when folio->mapping is NULL.  So no need to take care of it here.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22014,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  soc: qcom: pdr: Fix the potential deadlock  When some client process A call pdr_add_lookup() to add the look up for the service and does schedule locator work\, later a process B got a new server packet indicating locator is up and call pdr_locator_new_server() which eventually sets pdr->locator_init_complete to true which process A sees and takes list lock and queries domain list but it will timeout due to deadlock as the response will queued to the same qmi->wq and it is ordered workqueue and process B is not able to complete new server request work due to deadlock on list lock.  Fix it by removing the unnecessary list iteration as the list iteration is already being done inside locator work\, so avoid it here and just call schedule_work() here.         Process A                        Process B                                       process_scheduled_works() pdr_add_lookup()                      qmi_data_ready_work()  process_scheduled_works()             pdr_locator_new_server()                                          pdr->locator_init_complete=true;    pdr_locator_work()     mutex_lock(&pdr->list_lock);       pdr_locate_service()                  mutex_lock(&pdr->list_lock);        pdr_get_domain_list()        pr_err(""PDR: %s get domain list                txn wait failed: %d\\n""\,                req->service_name\,                ret);  Timeout error log due to deadlock:  ""  PDR: tms/servreg get domain list txn wait failed: -110  PDR: service lookup for msm/adsp/sensor_pd:tms/servreg failed: -110 ""  Thanks to Bjorn and Johan for letting me know that this commit also fixes an audio regression when using the in-kernel pd-mapper as that makes it easier to hit this race. [1]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35974,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  block: fix q->blkg_list corruption during disk rebind  Multiple gendisk instances can allocated/added for single request queue in case of disk rebind. blkg may still stay in q->blkg_list when calling blkcg_init_disk() for rebind\, then q->blkg_list becomes corrupted.  Fix the list corruption issue by:  - add blkg_init_queue() to initialize q->blkg_list & q->blkcg_mutex only - move calling blkg_init_queue() into blk_alloc_queue()  The list corruption should be started since commit f1c006f1c685 (""blk-cgroup: synchronize pd_free_fn() from blkg_free_workfn() and blkcg_deactivate_policy()"") which delays removing blkg from q->blkg_list into blkg_free_workfn().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22019,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bcachefs: bch2_ioctl_subvolume_destroy() fixes  bch2_evict_subvolume_inodes() was getting stuck - due to incorrectly pruning the dcache.  Also\, fix missing permissions checks.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22018,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  atm: Fix NULL pointer dereference  When MPOA_cache_impos_rcvd() receives the msg\, it can trigger Null Pointer Dereference Vulnerability if both entry and holding_time are NULL. Because there is only for the situation where entry is NULL and holding_time exists\, it can be passed when both entry and holding_time are NULL. If these are NULL\, the entry will be passd to eg_cache_put() as parameter and it is referenced by entry->use code in it.  kasan log:  [    3.316691] Oops: general protection fault\, probably for non-canonical address 0xdffffc0000000006:I [    3.317568] KASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037] [    3.318188] CPU: 3 UID: 0 PID: 79 Comm: ex Not tainted 6.14.0-rc2 #102 [    3.318601] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014 [    3.319298] RIP: 0010:eg_cache_remove_entry+0xa5/0x470 [    3.319677] Code: c1 f7 6e fd 48 c7 c7 00 7e 38 b2 e8 95 64 54 fd 48 c7 c7 40 7e 38 b2 48 89 ee e80 [    3.321220] RSP: 0018:ffff88800583f8a8 EFLAGS: 00010006 [    3.321596] RAX: 0000000000000006 RBX: ffff888005989000 RCX: ffffffffaecc2d8e [    3.322112] RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000030 [    3.322643] RBP: 0000000000000000 R08: 0000000000000000 R09: fffffbfff6558b88 [    3.323181] R10: 0000000000000003 R11: 203a207972746e65 R12: 1ffff11000b07f15 [    3.323707] R13: dffffc0000000000 R14: ffff888005989000 R15: ffff888005989068 [    3.324185] FS:  000000001b6313c0(0000) GS:ffff88806d380000(0000) knlGS:0000000000000000 [    3.325042] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [    3.325545] CR2: 00000000004b4b40 CR3: 000000000248e000 CR4: 00000000000006f0 [    3.326430] Call Trace: [    3.326725]  <TASK> [    3.326927]  ? die_addr+0x3c/0xa0 [    3.327330]  ? exc_general_protection+0x161/0x2a0 [    3.327662]  ? asm_exc_general_protection+0x26/0x30 [    3.328214]  ? vprintk_emit+0x15e/0x420 [    3.328543]  ? eg_cache_remove_entry+0xa5/0x470 [    3.328910]  ? eg_cache_remove_entry+0x9a/0x470 [    3.329294]  ? __pfx_eg_cache_remove_entry+0x10/0x10 [    3.329664]  ? console_unlock+0x107/0x1d0 [    3.329946]  ? __pfx_console_unlock+0x10/0x10 [    3.330283]  ? do_syscall_64+0xa6/0x1a0 [    3.330584]  ? entry_SYSCALL_64_after_hwframe+0x47/0x7f [    3.331090]  ? __pfx_prb_read_valid+0x10/0x10 [    3.331395]  ? down_trylock+0x52/0x80 [    3.331703]  ? vprintk_emit+0x15e/0x420 [    3.331986]  ? __pfx_vprintk_emit+0x10/0x10 [    3.332279]  ? down_trylock+0x52/0x80 [    3.332527]  ? _printk+0xbf/0x100 [    3.332762]  ? __pfx__printk+0x10/0x10 [    3.333007]  ? _raw_write_lock_irq+0x81/0xe0 [    3.333284]  ? __pfx__raw_write_lock_irq+0x10/0x10 [    3.333614]  msg_from_mpoad+0x1185/0x2750 [    3.333893]  ? __build_skb_around+0x27b/0x3a0 [    3.334183]  ? __pfx_msg_from_mpoad+0x10/0x10 [    3.334501]  ? __alloc_skb+0x1c0/0x310 [    3.334809]  ? __pfx___alloc_skb+0x10/0x10 [    3.335283]  ? _raw_spin_lock+0xe0/0xe0 [    3.335632]  ? finish_wait+0x8d/0x1e0 [    3.335975]  vcc_sendmsg+0x684/0xba0 [    3.336250]  ? __pfx_vcc_sendmsg+0x10/0x10 [    3.336587]  ? __pfx_autoremove_wake_function+0x10/0x10 [    3.337056]  ? fdget+0x176/0x3e0 [    3.337348]  __sys_sendto+0x4a2/0x510 [    3.337663]  ? __pfx___sys_sendto+0x10/0x10 [    3.337969]  ? ioctl_has_perm.constprop.0.isra.0+0x284/0x400 [    3.338364]  ? sock_ioctl+0x1bb/0x5a0 [    3.338653]  ? __rseq_handle_notify_resume+0x825/0xd20 [    3.339017]  ? __pfx_sock_ioctl+0x10/0x10 [    3.339316]  ? __pfx___rseq_handle_notify_resume+0x10/0x10 [    3.339727]  ? selinux_file_ioctl+0xa4/0x260 [    3.340166]  __x64_sys_sendto+0xe0/0x1c0 [    3.340526]  ? syscall_exit_to_user_mode+0x123/0x140 [    3.340898]  do_syscall_64+0xa6/0x1a0 [    3.341170]  entry_SYSCALL_64_after_hwframe+0x77/0x7f [    3.341533] RIP: 0033:0x44a380 [    3.341757] Code: 0f 1f 84 00 00 00 00 00 66 90 f3 0f 1e fa 41 89 ca 64 8b 04 25 18 00 00 00 85 c00 [     ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-29070,liblcms2-2,LOW,2.14-2,N/A,"A heap buffer overflow vulnerability has been identified in thesmooth2() in cmsgamma.c in lcms2-2.16 which allows a remote attacker to cause a denial of service. NOTE: the Supplier disputes this because ""this is not exploitable as this function is never called on normal color management\, is there only as a helper for low-level programming and investigation.""",|tykio/midsommar|
CVE-2024-26647,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix late derefrence 'dsc' check in 'link_set_dsc_pps_packet()'  In link_set_dsc_pps_packet()\, 'struct display_stream_compressor *dsc' was dereferenced in a DC_LOGGER_INIT(dsc->ctx->logger); before the 'dsc' NULL pointer check.  Fixes the below: drivers/gpu/drm/amd/amdgpu/../display/dc/link/link_dpms.c:905 link_set_dsc_pps_packet() warn: variable dereferenced before check 'dsc' (see line 903)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21848,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfp: bpf: Add check for nfp_app_ctrl_msg_alloc()  Add check for the return value of nfp_app_ctrl_msg_alloc() in nfp_bpf_cmsg_alloc() to prevent null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56619,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix potential out-of-bounds memory access in nilfs_find_entry()  Syzbot reported that when searching for records in a directory where the inode's i_size is corrupted and has a large value\, memory access outside the folio/page range may occur\, or a use-after-free bug may be detected if KASAN is enabled.  This is because nilfs_last_byte()\, which is called by nilfs_find_entry() and others to calculate the number of valid bytes of directory data in a page from i_size and the page index\, loses the upper 32 bits of the 64-bit size information due to an inappropriate type of local variable to which the i_size value is assigned.  This caused a large byte offset value due to underflow in the end address calculation in the calling nilfs_find_entry()\, resulting in memory access that exceeds the folio/page size.  Fix this issue by changing the type of the local variable causing the bit loss from ""unsigned int"" to ""u64"".  The return value of nilfs_last_byte() is also of type ""unsigned int""\, but it is truncated so as not to exceed PAGE_SIZE and no bit loss occurs\, so no change is required.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-54031,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nft_set_hash: unaligned atomic read on struct nft_set_ext  Access to genmask field in struct nft_set_ext results in unaligned atomic read:  [   72.130109] Unable to handle kernel paging request at virtual address ffff0000c2bb708c [   72.131036] Mem abort info: [   72.131213]   ESR = 0x0000000096000021 [   72.131446]   EC = 0x25: DABT (current EL)\, IL = 32 bits [   72.132209]   SET = 0\, FnV = 0 [   72.133216]   EA = 0\, S1PTW = 0 [   72.134080]   FSC = 0x21: alignment fault [   72.135593] Data abort info: [   72.137194]   ISV = 0\, ISS = 0x00000021\, ISS2 = 0x00000000 [   72.142351]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [   72.145989]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [   72.150115] swapper pgtable: 4k pages\, 48-bit VAs\, pgdp=0000000237d27000 [   72.154893] [ffff0000c2bb708c] pgd=0000000000000000\, p4d=180000023ffff403\, pud=180000023f84b403\, pmd=180000023f835403\, +pte=0068000102bb7707 [   72.163021] Internal error: Oops: 0000000096000021 [#1] SMP [...] [   72.170041] CPU: 7 UID: 0 PID: 54 Comm: kworker/7:0 Tainted: G            E      6.13.0-rc3+ #2 [   72.170509] Tainted: [E]=UNSIGNED_MODULE [   72.170720] Hardware name: QEMU QEMU Virtual Machine\, BIOS edk2-stable202302-for-qemu 03/01/2023 [   72.171192] Workqueue: events_power_efficient nft_rhash_gc [nf_tables] [   72.171552] pstate: 21400005 (nzCv daif +PAN -UAO -TCO +DIT -SSBS BTYPE=--) [   72.171915] pc : nft_rhash_gc+0x200/0x2d8 [nf_tables] [   72.172166] lr : nft_rhash_gc+0x128/0x2d8 [nf_tables] [   72.172546] sp : ffff800081f2bce0 [   72.172724] x29: ffff800081f2bd40 x28: ffff0000c2bb708c x27: 0000000000000038 [   72.173078] x26: ffff0000c6780ef0 x25: ffff0000c643df00 x24: ffff0000c6778f78 [   72.173431] x23: 000000000000001a x22: ffff0000c4b1f000 x21: ffff0000c6780f78 [   72.173782] x20: ffff0000c2bb70dc x19: ffff0000c2bb7080 x18: 0000000000000000 [   72.174135] x17: ffff0000c0a4e1c0 x16: 0000000000003000 x15: 0000ac26d173b978 [   72.174485] x14: ffffffffffffffff x13: 0000000000000030 x12: ffff0000c6780ef0 [   72.174841] x11: 0000000000000000 x10: ffff800081f2bcf8 x9 : ffff0000c3000000 [   72.175193] x8 : 00000000000004be x7 : 0000000000000000 x6 : 0000000000000000 [   72.175544] x5 : 0000000000000040 x4 : ffff0000c3000010 x3 : 0000000000000000 [   72.175871] x2 : 0000000000003a98 x1 : ffff0000c2bb708c x0 : 0000000000000004 [   72.176207] Call trace: [   72.176316]  nft_rhash_gc+0x200/0x2d8 [nf_tables] (P) [   72.176653]  process_one_work+0x178/0x3d0 [   72.176831]  worker_thread+0x200/0x3f0 [   72.176995]  kthread+0xe8/0xf8 [   72.177130]  ret_from_fork+0x10/0x20 [   72.177289] Code: 54fff984 d503201f d2800080 91003261 (f820303f) [   72.177557] ---[ end trace 0000000000000000 ]---  Align struct nft_set_ext to word size to address this and documentation it.  pahole reports that this increases the size of elements for rhash and pipapo in 8 bytes on x86_64.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-0840,binutils,LOW,2.40-2,N/A,"A vulnerability\, which was classified as problematic\, was found in GNU Binutils up to 2.43. This affects the function disassemble_bytes of the file binutils/objdump.c. The manipulation of the argument buf leads to stack-based buffer overflow. It is possible to initiate the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 2.44 is able to address this issue. The identifier of the patch is baac6c221e9d69335bf41366a1c7d87d8ab2f893. It is recommended to upgrade the affected component.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53099,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Check validity of link->type in bpf_link_show_fdinfo()  If a newly-added link type doesn't invoke BPF_LINK_TYPE()\, accessing bpf_link_type_strs[link->type] may result in an out-of-bounds access.  To spot such missed invocations early in the future\, checking the validity of link->type in bpf_link_show_fdinfo() and emitting a warning when such invocations are missed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49960,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: fix timer use-after-free on failed mount  Syzbot has found an ODEBUG bug in ext4_fill_super  The del_timer_sync function cancels the s_err_report timer\, which reminds about filesystem errors daily. We should guarantee the timer is no longer active before kfree(sbi).  When filesystem mounting fails\, the flow goes to failed_mount3\, where an error occurs when ext4_stop_mmpd is called\, causing a read I/O failure. This triggers the ext4_handle_error function that ultimately re-arms the timer\, leaving the s_err_report timer active before kfree(sbi) is called.  Fix the issue by canceling the s_err_report timer after calling ext4_stop_mmpd.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56611,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/mempolicy: fix migrate_to_node() assuming there is at least one VMA in a MM  We currently assume that there is at least one VMA in a MM\, which isn't true.  So we might end up having find_vma() return NULL\, to then de-reference NULL.  So properly handle find_vma() returning NULL.  This fixes the report:  Oops: general protection fault\, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN PTI KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007] CPU: 1 UID: 0 PID: 6021 Comm: syz-executor284 Not tainted 6.12.0-rc7-syzkaller-00187-gf868cd251776 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 10/30/2024 RIP: 0010:migrate_to_node mm/mempolicy.c:1090 [inline] RIP: 0010:do_migrate_pages+0x403/0x6f0 mm/mempolicy.c:1194 Code: ... RSP: 0018:ffffc9000375fd08 EFLAGS: 00010246 RAX: 0000000000000000 RBX: ffffc9000375fd78 RCX: 0000000000000000 RDX: ffff88807e171300 RSI: dffffc0000000000 RDI: ffff88803390c044 RBP: ffff88807e171428 R08: 0000000000000014 R09: fffffbfff2039ef1 R10: ffffffff901cf78f R11: 0000000000000000 R12: 0000000000000003 R13: ffffc9000375fe90 R14: ffffc9000375fe98 R15: ffffc9000375fdf8 FS:  00005555919e1380(0000) GS:ffff8880b8700000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00005555919e1ca8 CR3: 000000007f12a000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  kernel_migrate_pages+0x5b2/0x750 mm/mempolicy.c:1709  __do_sys_migrate_pages mm/mempolicy.c:1727 [inline]  __se_sys_migrate_pages mm/mempolicy.c:1723 [inline]  __x64_sys_migrate_pages+0x96/0x100 mm/mempolicy.c:1723  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  [akpm@linux-foundation.org: add unlikely()]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53094,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/siw: Add sendpage_ok() check to disable MSG_SPLICE_PAGES  While running ISER over SIW\, the initiator machine encounters a warning from skb_splice_from_iter() indicating that a slab page is being used in send_page. To address this\, it is better to add a sendpage_ok() check within the driver itself\, and if it returns 0\, then MSG_SPLICE_PAGES flag should be disabled before entering the network stack.  A similar issue has been discussed for NVMe in this thread: https://lore.kernel.org/all/20240530142417.146696-1-ofir.gal@volumez.com/    WARNING: CPU: 0 PID: 5342 at net/core/skbuff.c:7140 skb_splice_from_iter+0x173/0x320   Call Trace:    tcp_sendmsg_locked+0x368/0xe40    siw_tx_hdt+0x695/0xa40 [siw]    siw_qp_sq_process+0x102/0xb00 [siw]    siw_sq_resume+0x39/0x110 [siw]    siw_run_sq+0x74/0x160 [siw]    kthread+0xd2/0x100    ret_from_fork+0x34/0x40    ret_from_fork_asm+0x1a/0x30",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56610,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  kcsan: Turn report_filterlist_lock into a raw_spinlock  Ran Xiaokai reports that with a KCSAN-enabled PREEMPT_RT kernel\, we can see splats like:  | BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:48 | in_atomic(): 1\, irqs_disabled(): 1\, non_block: 0\, pid: 0\, name: swapper/1 | preempt_count: 10002\, expected: 0 | RCU nest depth: 0\, expected: 0 | no locks held by swapper/1/0. | irq event stamp: 156674 | hardirqs last  enabled at (156673): [<ffffffff81130bd9>] do_idle+0x1f9/0x240 | hardirqs last disabled at (156674): [<ffffffff82254f84>] sysvec_apic_timer_interrupt+0x14/0xc0 | softirqs last  enabled at (0): [<ffffffff81099f47>] copy_process+0xfc7/0x4b60 | softirqs last disabled at (0): [<0000000000000000>] 0x0 | Preemption disabled at: | [<ffffffff814a3e2a>] paint_ptr+0x2a/0x90 | CPU: 1 UID: 0 PID: 0 Comm: swapper/1 Not tainted 6.11.0+ #3 | Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014 | Call Trace: |  <IRQ> |  dump_stack_lvl+0x7e/0xc0 |  dump_stack+0x1d/0x30 |  __might_resched+0x1a2/0x270 |  rt_spin_lock+0x68/0x170 |  kcsan_skip_report_debugfs+0x43/0xe0 |  print_report+0xb5/0x590 |  kcsan_report_known_origin+0x1b1/0x1d0 |  kcsan_setup_watchpoint+0x348/0x650 |  __tsan_unaligned_write1+0x16d/0x1d0 |  hrtimer_interrupt+0x3d6/0x430 |  __sysvec_apic_timer_interrupt+0xe8/0x3a0 |  sysvec_apic_timer_interrupt+0x97/0xc0 |  </IRQ>  On a detected data race\, KCSAN's reporting logic checks if it should filter the report. That list is protected by the report_filterlist_lock *non-raw* spinlock which may sleep on RT kernels.  Since KCSAN may report data races in any context\, convert it to a raw_spinlock.  This requires being careful about when to allocate memory for the filter list itself which can be done via KCSAN's debugfs interface. Concurrent modification of the filter list via debugfs should be rare: the chosen strategy is to optimistically pre-allocate memory before the critical section and discard if unused.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53095,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: Fix use-after-free of network namespace.  Recently\, we got a customer report that CIFS triggers oops while reconnecting to a server.  [0]  The workload runs on Kubernetes\, and some pods mount CIFS servers in non-root network namespaces.  The problem rarely happened\, but it was always while the pod was dying.  The root cause is wrong reference counting for network namespace.  CIFS uses kernel sockets\, which do not hold refcnt of the netns that the socket belongs to.  That means CIFS must ensure the socket is always freed before its netns; otherwise\, use-after-free happens.  The repro steps are roughly:    1. mount CIFS in a non-root netns   2. drop packets from the netns   3. destroy the netns   4. unmount CIFS  We can reproduce the issue quickly with the script [1] below and see the splat [2] if CONFIG_NET_NS_REFCNT_TRACKER is enabled.  When the socket is TCP\, it is hard to guarantee the netns lifetime without holding refcnt due to async timers.  Let's hold netns refcnt for each socket as done for SMC in commit 9744d2bf1976 (""smc: Fix use-after-free in tcp_write_timer_handler()."").  Note that we need to move put_net() from cifs_put_tcp_session() to clean_demultiplex_info(); otherwise\, __sock_create() still could touch a freed netns while cifsd tries to reconnect from cifs_demultiplex_thread().  Also\, maybe_get_net() cannot be put just before __sock_create() because the code is not under RCU and there is a small chance that the same address happened to be reallocated to another netns.  [0]: CIFS: VFS: \\\\XXXXXXXXXXX has not responded in 15 seconds. Reconnecting... CIFS: Serverclose failed 4 times\, giving up Unable to handle kernel paging request at virtual address 14de99e461f84a07 Mem abort info:   ESR = 0x0000000096000004   EC = 0x25: DABT (current EL)\, IL = 32 bits   SET = 0\, FnV = 0   EA = 0\, S1PTW = 0   FSC = 0x04: level 0 translation fault Data abort info:   ISV = 0\, ISS = 0x00000004   CM = 0\, WnR = 0 [14de99e461f84a07] address between user and kernel address ranges Internal error: Oops: 0000000096000004 [#1] SMP Modules linked in: cls_bpf sch_ingress nls_utf8 cifs cifs_arc4 cifs_md4 dns_resolver tcp_diag inet_diag veth xt_state xt_connmark nf_conntrack_netlink xt_nat xt_statistic xt_MASQUERADE xt_mark xt_addrtype ipt_REJECT nf_reject_ipv4 nft_chain_nat nf_nat xt_conntrack nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 xt_comment nft_compat nf_tables nfnetlink overlay nls_ascii nls_cp437 sunrpc vfat fat aes_ce_blk aes_ce_cipher ghash_ce sm4_ce_cipher sm4 sm3_ce sm3 sha3_ce sha512_ce sha512_arm64 sha1_ce ena button sch_fq_codel loop fuse configfs dmi_sysfs sha2_ce sha256_arm64 dm_mirror dm_region_hash dm_log dm_mod dax efivarfs CPU: 5 PID: 2690970 Comm: cifsd Not tainted 6.1.103-109.184.amzn2023.aarch64 #1 Hardware name: Amazon EC2 r7g.4xlarge/\, BIOS 1.0 11/1/2018 pstate: 00400005 (nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : fib_rules_lookup+0x44/0x238 lr : __fib_lookup+0x64/0xbc sp : ffff8000265db790 x29: ffff8000265db790 x28: 0000000000000000 x27: 000000000000bd01 x26: 0000000000000000 x25: ffff000b4baf8000 x24: ffff00047b5e4580 x23: ffff8000265db7e0 x22: 0000000000000000 x21: ffff00047b5e4500 x20: ffff0010e3f694f8 x19: 14de99e461f849f7 x18: 0000000000000000 x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000 x14: 0000000000000000 x13: 0000000000000000 x12: 3f92800abd010002 x11: 0000000000000001 x10: ffff0010e3f69420 x9 : ffff800008a6f294 x8 : 0000000000000000 x7 : 0000000000000006 x6 : 0000000000000000 x5 : 0000000000000001 x4 : ffff001924354280 x3 : ffff8000265db7e0 x2 : 0000000000000000 x1 : ffff0010e3f694f8 x0 : ffff00047b5e4500 Call trace:  fib_rules_lookup+0x44/0x238  __fib_lookup+0x64/0xbc  ip_route_output_key_hash_rcu+0x2c4/0x398  ip_route_output_key_hash+0x60/0x8c  tcp_v4_connect+0x290/0x488  __inet_stream_connect+0x108/0x3d0  inet_stream_connect+0x50/0x78  kernel_connect+0x6c/0xac  generic_ip_conne ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50036,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: do not delay dst_entries_add() in dst_release()  dst_entries_add() uses per-cpu data that might be freed at netns dismantle from ip6_route_net_exit() calling dst_entries_destroy()  Before ip6_route_net_exit() can be called\, we release all the dsts associated with this netns\, via calls to dst_release()\, which waits an rcu grace period before calling dst_destroy()  dst_entries_add() use in dst_destroy() is racy\, because dst_entries_destroy() could have been called already.  Decrementing the number of dsts must happen sooner.  Notes:  1) in CONFIG_XFRM case\, dst_destroy() can call    dst_release_immediate(child)\, this might also cause UAF    if the child does not have DST_NOCOUNT set.    IPSEC maintainers might take a look and see how to address this.  2) There is also discussion about removing this count of dst\,    which might happen in future kernels.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53096,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: resolve faulty mmap_region() error path behaviour  The mmap_region() function is somewhat terrifying\, with spaghetti-like control flow and numerous means by which issues can arise and incomplete state\, memory leaks and other unpleasantness can occur.  A large amount of the complexity arises from trying to handle errors late in the process of mapping a VMA\, which forms the basis of recently observed issues with resource leaks and observable inconsistent state.  Taking advantage of previous patches in this series we move a number of checks earlier in the code\, simplifying things by moving the core of the logic into a static internal function __mmap_region().  Doing this allows us to perform a number of checks up front before we do any real work\, and allows us to unwind the writable unmap check unconditionally as required and to perform a CONFIG_DEBUG_VM_MAPLE_TREE validation unconditionally also.  We move a number of things here:  1. We preallocate memory for the iterator before we call the file-backed    memory hook\, allowing us to exit early and avoid having to perform    complicated and error-prone close/free logic. We carefully free    iterator state on both success and error paths.  2. The enclosing mmap_region() function handles the mapping_map_writable()    logic early. Previously the logic had the mapping_map_writable() at the    point of mapping a newly allocated file-backed VMA\, and a matching    mapping_unmap_writable() on success and error paths.     We now do this unconditionally if this is a file-backed\, shared writable    mapping. If a driver changes the flags to eliminate VM_MAYWRITE\, however    doing so does not invalidate the seal check we just performed\, and we in    any case always decrement the counter in the wrapper.     We perform a debug assert to ensure a driver does not attempt to do the    opposite.  3. We also move arch_validate_flags() up into the mmap_region()    function. This is only relevant on arm64 and sparc64\, and the check is    only meaningful for SPARC with ADI enabled. We explicitly add a warning    for this arch if a driver invalidates this check\, though the code ought    eventually to be fixed to eliminate the need for this.  With all of these measures in place\, we no longer need to explicitly close the VMA on error paths\, as we place all checks which might fail prior to a call to any driver mmap hook.  This eliminates an entire class of errors\, makes the code easier to reason about and more robust.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53097,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: krealloc: Fix MTE false alarm in __do_krealloc  This patch addresses an issue introduced by commit 1a83a716ec233 (""mm: krealloc: consider spare memory for __GFP_ZERO"") which causes MTE (Memory Tagging Extension) to falsely report a slab-out-of-bounds error.  The problem occurs when zeroing out spare memory in __do_krealloc. The original code only considered software-based KASAN and did not account for MTE. It does not reset the KASAN tag before calling memset\, leading to a mismatch between the pointer tag and the memory tag\, resulting in a false positive.  Example of the error: ================================================================== swapper/0: BUG: KASAN: slab-out-of-bounds in __memset+0x84/0x188 swapper/0: Write at addr f4ffff8005f0fdf0 by task swapper/0/1 swapper/0: Pointer tag: [f4]\, memory tag: [fe] swapper/0: swapper/0: CPU: 4 UID: 0 PID: 1 Comm: swapper/0 Not tainted 6.12. swapper/0: Hardware name: MT6991(ENG) (DT) swapper/0: Call trace: swapper/0:  dump_backtrace+0xfc/0x17c swapper/0:  show_stack+0x18/0x28 swapper/0:  dump_stack_lvl+0x40/0xa0 swapper/0:  print_report+0x1b8/0x71c swapper/0:  kasan_report+0xec/0x14c swapper/0:  __do_kernel_fault+0x60/0x29c swapper/0:  do_bad_area+0x30/0xdc swapper/0:  do_tag_check_fault+0x20/0x34 swapper/0:  do_mem_abort+0x58/0x104 swapper/0:  el1_abort+0x3c/0x5c swapper/0:  el1h_64_sync_handler+0x80/0xcc swapper/0:  el1h_64_sync+0x68/0x6c swapper/0:  __memset+0x84/0x188 swapper/0:  btf_populate_kfunc_set+0x280/0x3d8 swapper/0:  __register_btf_kfunc_id_set+0x43c/0x468 swapper/0:  register_btf_kfunc_id_set+0x48/0x60 swapper/0:  register_nf_nat_bpf+0x1c/0x40 swapper/0:  nf_nat_init+0xc0/0x128 swapper/0:  do_one_initcall+0x184/0x464 swapper/0:  do_initcall_level+0xdc/0x1b0 swapper/0:  do_initcalls+0x70/0xc0 swapper/0:  do_basic_setup+0x1c/0x28 swapper/0:  kernel_init_freeable+0x144/0x1b8 swapper/0:  kernel_init+0x20/0x1a8 swapper/0:  ret_from_fork+0x10/0x20 ==================================================================",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53090,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  afs: Fix lock recursion  afs_wake_up_async_call() can incur lock recursion.  The problem is that it is called from AF_RXRPC whilst holding the ->notify_lock\, but it tries to take a ref on the afs_call struct in order to pass it to a work queue - but if the afs_call is already queued\, we then have an extraneous ref that must be put... calling afs_put_call() may call back down into AF_RXRPC through rxrpc_kernel_shutdown_call()\, however\, which might try taking the ->notify_lock again.  This case isn't very common\, however\, so defer it to a workqueue.  The oops looks something like:    BUG: spinlock recursion on CPU#0\, krxrpcio/7001/1646    lock: 0xffff888141399b30\, .magic: dead4ead\, .owner: krxrpcio/7001/1646\, .owner_cpu: 0   CPU: 0 UID: 0 PID: 1646 Comm: krxrpcio/7001 Not tainted 6.12.0-rc2-build3+ #4351   Hardware name: ASUS All Series/H97-PLUS\, BIOS 2306 10/09/2014   Call Trace:    <TASK>    dump_stack_lvl+0x47/0x70    do_raw_spin_lock+0x3c/0x90    rxrpc_kernel_shutdown_call+0x83/0xb0    afs_put_call+0xd7/0x180    rxrpc_notify_socket+0xa0/0x190    rxrpc_input_split_jumbo+0x198/0x1d0    rxrpc_input_data+0x14b/0x1e0    ? rxrpc_input_call_packet+0xc2/0x1f0    rxrpc_input_call_event+0xad/0x6b0    rxrpc_input_packet_on_conn+0x1e1/0x210    rxrpc_input_packet+0x3f2/0x4d0    rxrpc_io_thread+0x243/0x410    ? __pfx_rxrpc_io_thread+0x10/0x10    kthread+0xcf/0xe0    ? __pfx_kthread+0x10/0x10    ret_from_fork+0x24/0x40    ? __pfx_kthread+0x10/0x10    ret_from_fork_asm+0x1a/0x30    </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56615,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: fix OOB devmap writes when deleting elements  Jordy reported issue against XSKMAP which also applies to DEVMAP - the index used for accessing map entry\, due to being a signed integer\, causes the OOB writes. Fix is simple as changing the type from int to u32\, however\, when compared to XSKMAP case\, one more thing needs to be addressed.  When map is released from system via dev_map_free()\, we iterate through all of the entries and an iterator variable is also an int\, which implies OOB accesses. Again\, change it to be u32.  Example splat below:  [  160.724676] BUG: unable to handle page fault for address: ffffc8fc2c001000 [  160.731662] #PF: supervisor read access in kernel mode [  160.736876] #PF: error_code(0x0000) - not-present page [  160.742095] PGD 0 P4D 0 [  160.744678] Oops: Oops: 0000 [#1] PREEMPT SMP [  160.749106] CPU: 1 UID: 0 PID: 520 Comm: kworker/u145:12 Not tainted 6.12.0-rc1+ #487 [  160.757050] Hardware name: Intel Corporation S2600WFT/S2600WFT\, BIOS SE5C620.86B.02.01.0008.031920191559 03/19/2019 [  160.767642] Workqueue: events_unbound bpf_map_free_deferred [  160.773308] RIP: 0010:dev_map_free+0x77/0x170 [  160.777735] Code: 00 e8 fd 91 ed ff e8 b8 73 ed ff 41 83 7d 18 19 74 6e 41 8b 45 24 49 8b bd f8 00 00 00 31 db 85 c0 74 48 48 63 c3 48 8d 04 c7 <48> 8b 28 48 85 ed 74 30 48 8b 7d 18 48 85 ff 74 05 e8 b3 52 fa ff [  160.796777] RSP: 0018:ffffc9000ee1fe38 EFLAGS: 00010202 [  160.802086] RAX: ffffc8fc2c001000 RBX: 0000000080000000 RCX: 0000000000000024 [  160.809331] RDX: 0000000000000000 RSI: 0000000000000024 RDI: ffffc9002c001000 [  160.816576] RBP: 0000000000000000 R08: 0000000000000023 R09: 0000000000000001 [  160.823823] R10: 0000000000000001 R11: 00000000000ee6b2 R12: dead000000000122 [  160.831066] R13: ffff88810c928e00 R14: ffff8881002df405 R15: 0000000000000000 [  160.838310] FS:  0000000000000000(0000) GS:ffff8897e0c40000(0000) knlGS:0000000000000000 [  160.846528] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  160.852357] CR2: ffffc8fc2c001000 CR3: 0000000005c32006 CR4: 00000000007726f0 [  160.859604] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [  160.866847] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [  160.874092] PKRU: 55555554 [  160.876847] Call Trace: [  160.879338]  <TASK> [  160.881477]  ? __die+0x20/0x60 [  160.884586]  ? page_fault_oops+0x15a/0x450 [  160.888746]  ? search_extable+0x22/0x30 [  160.892647]  ? search_bpf_extables+0x5f/0x80 [  160.896988]  ? exc_page_fault+0xa9/0x140 [  160.900973]  ? asm_exc_page_fault+0x22/0x30 [  160.905232]  ? dev_map_free+0x77/0x170 [  160.909043]  ? dev_map_free+0x58/0x170 [  160.912857]  bpf_map_free_deferred+0x51/0x90 [  160.917196]  process_one_work+0x142/0x370 [  160.921272]  worker_thread+0x29e/0x3b0 [  160.925082]  ? rescuer_thread+0x4b0/0x4b0 [  160.929157]  kthread+0xd4/0x110 [  160.932355]  ? kthread_park+0x80/0x80 [  160.936079]  ret_from_fork+0x2d/0x50 [  160.943396]  ? kthread_park+0x80/0x80 [  160.950803]  ret_from_fork_asm+0x11/0x20 [  160.958482]  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53091,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Add sk_is_inet and IS_ICSK check in tls_sw_has_ctx_tx/rx  As the introduction of the support for vsock and unix sockets in sockmap\, tls_sw_has_ctx_tx/rx cannot presume the socket passed in must be IS_ICSK. vsock and af_unix sockets have vsock_sock and unix_sock instead of inet_connection_sock. For these sockets\, tls_get_ctx may return an invalid pointer and cause page fault in function tls_sw_ctx_rx.  BUG: unable to handle page fault for address: 0000000000040030 Workqueue: vsock-loopback vsock_loopback_work RIP: 0010:sk_psock_strp_data_ready+0x23/0x60 Call Trace:  ? __die+0x81/0xc3  ? no_context+0x194/0x350  ? do_page_fault+0x30/0x110  ? async_page_fault+0x3e/0x50  ? sk_psock_strp_data_ready+0x23/0x60  virtio_transport_recv_pkt+0x750/0x800  ? update_load_avg+0x7e/0x620  vsock_loopback_work+0xd0/0x100  process_one_work+0x1a7/0x360  worker_thread+0x30/0x390  ? create_worker+0x1a0/0x1a0  kthread+0x112/0x130  ? __kthread_cancel_work+0x40/0x40  ret_from_fork+0x1f/0x40  v2:   - Add IS_ICSK check v3:   - Update the commits in Fixes",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50032,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rcu/nocb: Fix rcuog wake-up from offline softirq  After a CPU has set itself offline and before it eventually calls rcutree_report_cpu_dead()\, there are still opportunities for callbacks to be enqueued\, for example from a softirq. When that happens on NOCB\, the rcuog wake-up is deferred through an IPI to an online CPU in order not to call into the scheduler and risk arming the RT-bandwidth after hrtimers have been migrated out and disabled.  But performing a synchronized IPI from a softirq is buggy as reported in the following scenario:          WARNING: CPU: 1 PID: 26 at kernel/smp.c:633 smp_call_function_single         Modules linked in: rcutorture torture         CPU: 1 UID: 0 PID: 26 Comm: migration/1 Not tainted 6.11.0-rc1-00012-g9139f93209d1 #1         Stopper: multi_cpu_stop+0x0/0x320 <- __stop_cpus+0xd0/0x120         RIP: 0010:smp_call_function_single         <IRQ>         swake_up_one_online         __call_rcu_nocb_wake         __call_rcu_common         ? rcu_torture_one_read         call_timer_fn         __run_timers         run_timer_softirq         handle_softirqs         irq_exit_rcu         ? tick_handle_periodic         sysvec_apic_timer_interrupt         </IRQ>  Fix this with forcing deferred rcuog wake up through the NOCB timer when the CPU is offline. The actual wake up will happen from rcutree_report_cpu_dead().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27005,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  interconnect: Don't access req_list while it's being manipulated  The icc_lock mutex was split into separate icc_lock and icc_bw_lock mutexes in [1] to avoid lockdep splats. However\, this didn't adequately protect access to icc_node::req_list.  The icc_set_bw() function will eventually iterate over req_list while only holding icc_bw_lock\, but req_list can be modified while only holding icc_lock. This causes races between icc_set_bw()\, of_icc_get()\, and icc_put().  Example A:    CPU0                               CPU1   ----                               ----   icc_set_bw(path_a)     mutex_lock(&icc_bw_lock);                                      icc_put(path_b)                                        mutex_lock(&icc_lock);     aggregate_requests()       hlist_for_each_entry(r\, ...                                        hlist_del(...         <r = invalid pointer>  Example B:    CPU0                               CPU1   ----                               ----   icc_set_bw(path_a)     mutex_lock(&icc_bw_lock);                                      path_b = of_icc_get()                                        of_icc_get_by_index()                                          mutex_lock(&icc_lock);                                          path_find()                                            path_init()     aggregate_requests()       hlist_for_each_entry(r\, ...                                              hlist_add_head(...         <r = invalid pointer>  Fix this by ensuring icc_bw_lock is always held before manipulating icc_node::req_list. The additional places icc_bw_lock is held don't perform any memory allocations\, so we should still be safe from the original lockdep splats that motivated the separate locks.  [1] commit af42269c3523 (""interconnect: Fix locking for runpm vs reclaim"")",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56614,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  xsk: fix OOB map writes when deleting elements  Jordy says:  "" In the xsk_map_delete_elem function an unsigned integer (map->max_entries) is compared with a user-controlled signed integer (k). Due to implicit type conversion\, a large unsigned value for map->max_entries can bypass the intended bounds check:  \tif (k >= map->max_entries) \t\treturn -EINVAL;  This allows k to hold a negative value (between -2147483648 and -2)\, which is then used as an array index in m->xsk_map[k]\, which results in an out-of-bounds access.  \tspin_lock_bh(&m->lock); \tmap_entry = &m->xsk_map[k]; // Out-of-bounds map_entry \told_xs = unrcu_pointer(xchg(map_entry\, NULL));  // Oob write \tif (old_xs) \t\txsk_map_sock_delete(old_xs\, map_entry); \tspin_unlock_bh(&m->lock);  The xchg operation can then be used to cause an out-of-bounds write. Moreover\, the invalid map_entry passed to xsk_map_sock_delete can lead to further memory corruption. ""  It indeed results in following splat:  [76612.897343] BUG: unable to handle page fault for address: ffffc8fc2e461108 [76612.904330] #PF: supervisor write access in kernel mode [76612.909639] #PF: error_code(0x0002) - not-present page [76612.914855] PGD 0 P4D 0 [76612.917431] Oops: Oops: 0002 [#1] PREEMPT SMP [76612.921859] CPU: 11 UID: 0 PID: 10318 Comm: a.out Not tainted 6.12.0-rc1+ #470 [76612.929189] Hardware name: Intel Corporation S2600WFT/S2600WFT\, BIOS SE5C620.86B.02.01.0008.031920191559 03/19/2019 [76612.939781] RIP: 0010:xsk_map_delete_elem+0x2d/0x60 [76612.944738] Code: 00 00 41 54 55 53 48 63 2e 3b 6f 24 73 38 4c 8d a7 f8 00 00 00 48 89 fb 4c 89 e7 e8 2d bf 05 00 48 8d b4 eb 00 01 00 00 31 ff <48> 87 3e 48 85 ff 74 05 e8 16 ff ff ff 4c 89 e7 e8 3e bc 05 00 31 [76612.963774] RSP: 0018:ffffc9002e407df8 EFLAGS: 00010246 [76612.969079] RAX: 0000000000000000 RBX: ffffc9002e461000 RCX: 0000000000000000 [76612.976323] RDX: 0000000000000001 RSI: ffffc8fc2e461108 RDI: 0000000000000000 [76612.983569] RBP: ffffffff80000001 R08: 0000000000000000 R09: 0000000000000007 [76612.990812] R10: ffffc9002e407e18 R11: ffff888108a38858 R12: ffffc9002e4610f8 [76612.998060] R13: ffff888108a38858 R14: 00007ffd1ae0ac78 R15: ffffc9002e4610c0 [76613.005303] FS:  00007f80b6f59740(0000) GS:ffff8897e0ec0000(0000) knlGS:0000000000000000 [76613.013517] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [76613.019349] CR2: ffffc8fc2e461108 CR3: 000000011e3ef001 CR4: 00000000007726f0 [76613.026595] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [76613.033841] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [76613.041086] PKRU: 55555554 [76613.043842] Call Trace: [76613.046331]  <TASK> [76613.048468]  ? __die+0x20/0x60 [76613.051581]  ? page_fault_oops+0x15a/0x450 [76613.055747]  ? search_extable+0x22/0x30 [76613.059649]  ? search_bpf_extables+0x5f/0x80 [76613.063988]  ? exc_page_fault+0xa9/0x140 [76613.067975]  ? asm_exc_page_fault+0x22/0x30 [76613.072229]  ? xsk_map_delete_elem+0x2d/0x60 [76613.076573]  ? xsk_map_delete_elem+0x23/0x60 [76613.080914]  __sys_bpf+0x19b7/0x23c0 [76613.084555]  __x64_sys_bpf+0x1a/0x20 [76613.088194]  do_syscall_64+0x37/0xb0 [76613.091832]  entry_SYSCALL_64_after_hwframe+0x4b/0x53 [76613.096962] RIP: 0033:0x7f80b6d1e88d [76613.100592] Code: 5b 41 5c c3 66 0f 1f 84 00 00 00 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 73 b5 0f 00 f7 d8 64 89 01 48 [76613.119631] RSP: 002b:00007ffd1ae0ac68 EFLAGS: 00000206 ORIG_RAX: 0000000000000141 [76613.131330] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f80b6d1e88d [76613.142632] RDX: 0000000000000098 RSI: 00007ffd1ae0ad20 RDI: 0000000000000003 [76613.153967] RBP: 00007ffd1ae0adc0 R08: 0000000000000000 R09: 0000000000000000 [76613.166030] R10: 00007f80b6f77040 R11: 0000000000000206 R12: 00007ffd1ae0aed8 [76613.177130] R13: 000055ddf42ce1e9 R14: 000055ddf42d0d98 R15: 00 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56616,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/dp_mst: Fix MST sideband message body length check  Fix the MST sideband message body length check\, which must be at least 1 byte accounting for the message body CRC (aka message data CRC) at the end of the message.  This fixes a case where an MST branch device returns a header with a correct header CRC (indicating a correctly received body length)\, with the body length being incorrectly set to 0. This will later lead to a memory corruption in drm_dp_sideband_append_payload() and the following errors in dmesg:     UBSAN: array-index-out-of-bounds in drivers/gpu/drm/display/drm_dp_mst_topology.c:786:25    index -1 is out of range for type 'u8 [48]'    Call Trace:     drm_dp_sideband_append_payload+0x33d/0x350 [drm_display_helper]     drm_dp_get_one_sb_msg+0x3ce/0x5f0 [drm_display_helper]     drm_dp_mst_hpd_irq_handle_event+0xc8/0x1580 [drm_display_helper]     memcpy: detected field-spanning write (size 18446744073709551615) of single field ""&msg->msg[msg->curlen]"" at drivers/gpu/drm/display/drm_dp_mst_topology.c:791 (size 256)    Call Trace:     drm_dp_sideband_append_payload+0x324/0x350 [drm_display_helper]     drm_dp_get_one_sb_msg+0x3ce/0x5f0 [drm_display_helper]     drm_dp_mst_hpd_irq_handle_event+0xc8/0x1580 [drm_display_helper]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53093,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-multipath: defer partition scanning  We need to suppress the partition scan from occuring within the controller's scan_work context. If a path error occurs here\, the IO will wait until a path becomes available or all paths are torn down\, but that action also occurs within scan_work\, so it would deadlock. Defer the partion scan to a different context that does not block scan_work.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49968,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: filesystems without casefold feature cannot be mounted with siphash  When mounting the ext4 filesystem\, if the default hash version is set to DX_HASH_SIPHASH but the casefold feature is not set\, exit the mounting.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21662,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: Fix variable not being completed when function returns  When cmd_alloc_index()\, fails cmd_work_handler() needs to complete ent->slotted before returning early. Otherwise the task which issued the command may hang:     mlx5_core 0000:01:00.0: cmd_work_handler:877:(pid 3880418): failed to allocate command entry    INFO: task kworker/13:2:4055883 blocked for more than 120 seconds.          Not tainted 4.19.90-25.44.v2101.ky10.aarch64 #1    ""echo 0 > /proc/sys/kernel/hung_task_timeout_secs"" disables this message.    kworker/13:2    D    0 4055883      2 0x00000228    Workqueue: events mlx5e_tx_dim_work [mlx5_core]    Call trace:       __switch_to+0xe8/0x150       __schedule+0x2a8/0x9b8       schedule+0x2c/0x88       schedule_timeout+0x204/0x478       wait_for_common+0x154/0x250       wait_for_completion+0x28/0x38       cmd_exec+0x7a0/0xa00 [mlx5_core]       mlx5_cmd_exec+0x54/0x80 [mlx5_core]       mlx5_core_modify_cq+0x6c/0x80 [mlx5_core]       mlx5_core_modify_cq_moderation+0xa0/0xb8 [mlx5_core]       mlx5e_tx_dim_work+0x54/0x68 [mlx5_core]       process_one_work+0x1b0/0x448       worker_thread+0x54/0x468       kthread+0x134/0x138       ret_from_fork+0x10/0x18",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50146,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5e: Don't call cleanup on profile rollback failure  When profile rollback fails in mlx5e_netdev_change_profile\, the netdev profile var is left set to NULL. Avoid a crash when unloading the driver by not calling profile->cleanup in such a case.  This was encountered while testing\, with the original trigger that the wq rescuer thread creation got interrupted (presumably due to Ctrl+C-ing modprobe)\, which gets converted to ENOMEM (-12) by mlx5e_priv_init\, the profile rollback also fails for the same reason (signal still active) so the profile is left as NULL\, leading to a crash later in _mlx5e_remove.   [  732.473932] mlx5_core 0000:08:00.1: E-Switch: Unload vfs: mode(OFFLOADS)\, nvfs(2)\, necvfs(0)\, active vports(2)  [  734.525513] workqueue: Failed to create a rescuer kthread for wq ""mlx5e"": -EINTR  [  734.557372] mlx5_core 0000:08:00.1: mlx5e_netdev_init_profile:6235:(pid 6086): mlx5e_priv_init failed\, err=-12  [  734.559187] mlx5_core 0000:08:00.1 eth3: mlx5e_netdev_change_profile: new profile init failed\, -12  [  734.560153] workqueue: Failed to create a rescuer kthread for wq ""mlx5e"": -EINTR  [  734.589378] mlx5_core 0000:08:00.1: mlx5e_netdev_init_profile:6235:(pid 6086): mlx5e_priv_init failed\, err=-12  [  734.591136] mlx5_core 0000:08:00.1 eth3: mlx5e_netdev_change_profile: failed to rollback to orig profile\, -12  [  745.537492] BUG: kernel NULL pointer dereference\, address: 0000000000000008  [  745.538222] #PF: supervisor read access in kernel mode <snipped>  [  745.551290] Call Trace:  [  745.551590]  <TASK>  [  745.551866]  ? __die+0x20/0x60  [  745.552218]  ? page_fault_oops+0x150/0x400  [  745.555307]  ? exc_page_fault+0x79/0x240  [  745.555729]  ? asm_exc_page_fault+0x22/0x30  [  745.556166]  ? mlx5e_remove+0x6b/0xb0 [mlx5_core]  [  745.556698]  auxiliary_bus_remove+0x18/0x30  [  745.557134]  device_release_driver_internal+0x1df/0x240  [  745.557654]  bus_remove_device+0xd7/0x140  [  745.558075]  device_del+0x15b/0x3c0  [  745.558456]  mlx5_rescan_drivers_locked.part.0+0xb1/0x2f0 [mlx5_core]  [  745.559112]  mlx5_unregister_device+0x34/0x50 [mlx5_core]  [  745.559686]  mlx5_uninit_one+0x46/0xf0 [mlx5_core]  [  745.560203]  remove_one+0x4e/0xd0 [mlx5_core]  [  745.560694]  pci_device_remove+0x39/0xa0  [  745.561112]  device_release_driver_internal+0x1df/0x240  [  745.561631]  driver_detach+0x47/0x90  [  745.562022]  bus_remove_driver+0x84/0x100  [  745.562444]  pci_unregister_driver+0x3b/0x90  [  745.562890]  mlx5_cleanup+0xc/0x1b [mlx5_core]  [  745.563415]  __x64_sys_delete_module+0x14d/0x2f0  [  745.563886]  ? kmem_cache_free+0x1b0/0x460  [  745.564313]  ? lockdep_hardirqs_on_prepare+0xe2/0x190  [  745.564825]  do_syscall_64+0x6d/0x140  [  745.565223]  entry_SYSCALL_64_after_hwframe+0x4b/0x53  [  745.565725] RIP: 0033:0x7f1579b1288b",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-43903,libpoppler126,MEDIUM,22.12.0-2+b1,N/A,"NSSCryptoSignBackend.cc in Poppler before 25.04.0 does not verify the adbe.pkcs7.sha1 signatures on documents\, resulting in potential signature forgeries.",|tykio/midsommar|
CVE-2022-45888,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"An issue was discovered in the Linux kernel through 6.0.9. drivers/char/xillybus/xillyusb.c has a race condition and use-after-free during physical removal of a USB device.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21660,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix unexpectedly changed path in ksmbd_vfs_kern_path_locked  When `ksmbd_vfs_kern_path_locked` met an error and it is not the last entry\, it will exit without restoring changed path buffer. But later this buffer may be used as the filename for creation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-0563,bsdutils,LOW,1:2.38.1-5+deb12u3,N/A,"A flaw was found in the util-linux chfn and chsh utilities when compiled with Readline support. The Readline library uses an ""INPUTRC"" environment variable to get a path to the library config file. When the library cannot parse the specified file\, it prints an error message containing data from the file. This flaw allows an unprivileged user to read root-owned files\, potentially leading to privilege escalation. This flaw affects util-linux versions prior to 2.37.4.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2014-9892,linux-libc-dev,LOW,6.1.115-1,N/A,"The snd_compr_tstamp function in sound/core/compress_offload.c in the Linux kernel through 4.7\, as used in Android before 2016-08-05 on Nexus 5 and 7 (2013) devices\, does not properly initialize a timestamp data structure\, which allows attackers to obtain sensitive information via a crafted application\, aka Android internal bug 28770164 and Qualcomm internal bug CR568717.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21667,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iomap: avoid avoid truncating 64-bit offset to 32 bits  on 32-bit kernels\, iomap_write_delalloc_scan() was inadvertently using a 32-bit position due to folio_next_index() returning an unsigned long. This could lead to an infinite loop when writing to an xfs filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16229,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/gpu/drm/amd/amdkfd/kfd_interrupt.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference. NOTE: The security community disputes this issues as not being serious enough to be deserving a CVE id",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21666,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  vsock: prevent null-ptr-deref in vsock_*[has_data|has_space]  Recent reports have shown how we sometimes call vsock_*_has_data() when a vsock socket has been de-assigned from a transport (see attached links)\, but we shouldn't.  Previous commits should have solved the real problems\, but we may have more in the future\, so to avoid null-ptr-deref\, we can return 0 (no space\, no data available) but with a warning.  This way the code should continue to run in a nearly consistent state and have a warning that allows us to debug future problems.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21665,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  filemap: avoid truncating 64-bit offset to 32 bits  On 32-bit kernels\, folio_seek_hole_data() was inadvertently truncating a 64-bit value to 32 bits\, leading to a possible infinite loop when writing to an xfs filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56709,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring: check if iowq is killed before queuing  task work can be executed after the task has gone through io_uring termination\, whether it's the final task_work run or the fallback path. In this case\, task work will find ->io_wq being already killed and null'ed\, which is a problem if it then tries to forward the request to io_queue_iowq(). Make io_queue_iowq() fail requests in this case.  Note that it also checks PF_KTHREAD\, because the user can first close a DEFER_TASKRUN ring and shortly after kill the task\, in which case ->iowq check would race.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21664,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  dm thin: make get_first_thin use rcu-safe list first function  The documentation in rculist.h explains the absence of list_empty_rcu() and cautions programmers against relying on a list_empty() -> list_first() sequence in RCU safe code.  This is because each of these functions performs its own READ_ONCE() of the list head.  This can lead to a situation where the list_empty() sees a valid list entry\, but the subsequent list_first() sees a different view of list head state after a modification.  In the case of dm-thin\, this author had a production box crash from a GP fault in the process_deferred_bios path.  This function saw a valid list head in get_first_thin() but when it subsequently dereferenced that and turned it into a thin_c\, it got the inside of the struct pool\, since the list was now empty and referring to itself.  The kernel on which this occurred printed both a warning about a refcount_t being saturated\, and a UBSAN error for an out-of-bounds cpuid access in the queued spinlock\, prior to the fault itself.  When the resulting kdump was examined\, it was possible to see another thread patiently waiting in thin_dtr's synchronize_rcu.  The thin_dtr call managed to pull the thin_c out of the active thins list (and have it be the last entry in the active_thins list) at just the wrong moment which lead to this crash.  Fortunately\, the fix here is straight forward.  Switch get_first_thin() function to use list_first_or_null_rcu() which performs just a single READ_ONCE() and returns NULL if the list is already empty.  This was run against the devicemapper test suite's thin-provisioning suites for delete and suspend and no regressions were observed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56708,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  EDAC/igen6: Avoid segmentation fault on module unload  The segmentation fault happens because:  During modprobe: 1. In igen6_probe()\, igen6_pvt will be allocated with kzalloc() 2. In igen6_register_mci()\, mci->pvt_info will point to    &igen6_pvt->imc[mc]  During rmmod: 1. In mci_release() in edac_mc.c\, it will kfree(mci->pvt_info) 2. In igen6_remove()\, it will kfree(igen6_pvt);  Fix this issue by setting mci->pvt_info to NULL to avoid the double kfree.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56707,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  octeontx2-pf: handle otx2_mbox_get_rsp errors in otx2_dmac_flt.c  Add error pointer checks after calling otx2_mbox_get_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-32570,libdav1d6,MEDIUM,1.0.0-2+deb12u1,N/A,"VideoLAN dav1d before 1.2.0 has a thread_task.c race condition that can lead to an application crash\, related to dav1d_decode_frame_exit.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21669,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  vsock/virtio: discard packets if the transport changes  If the socket has been de-assigned or assigned to another transport\, we must discard any packets received because they are not expected and would cause issues when we access vsk->transport.  A possible scenario is described by Hyunwoo Kim in the attached link\, where after a first connect() interrupted by a signal\, and a second connect() failed\, we can find `vsk->transport` at NULL\, leading to a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56705,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: atomisp: Add check for rgby_data memory allocation failure  In ia_css_3a_statistics_allocate()\, there is no check on the allocation result of the rgby_data memory. If rgby_data is not successfully allocated\, it may trigger the assert(host_stats->rgby_data) assertion in ia_css_s3a_hmem_decode(). Adding a check to fix this potential issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-2193,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A Speculative Race Condition (SRC) vulnerability that impacts modern CPU architectures supporting speculative execution (related to Spectre V1) has been disclosed. An unauthenticated attacker can exploit this vulnerability to disclose arbitrary data from the CPU using race conditions to access the speculative executable code paths.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-6277,libtiff6,MEDIUM,4.5.0-6+deb12u2,N/A,"An out-of-memory flaw was found in libtiff. Passing a crafted tiff file to TIFFOpen() API may allow a remote attacker to cause a denial of service via a craft input with size smaller than 379 KB.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-23039,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.2.0-rc2. drivers/tty/vcc.c has a race condition and resultant use-after-free if a physically proximate attacker removes a VCC device while calling open()\, aka a race condition between vcc_open() and vcc_remove().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21668,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  pmdomain: imx8mp-blk-ctrl: add missing loop break condition  Currently imx8mp_blk_ctrl_remove() will continue the for loop until an out-of-bounds exception occurs.  pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : dev_pm_domain_detach+0x8/0x48 lr : imx8mp_blk_ctrl_shutdown+0x58/0x90 sp : ffffffc084f8bbf0 x29: ffffffc084f8bbf0 x28: ffffff80daf32ac0 x27: 0000000000000000 x26: ffffffc081658d78 x25: 0000000000000001 x24: ffffffc08201b028 x23: ffffff80d0db9490 x22: ffffffc082340a78 x21: 00000000000005b0 x20: ffffff80d19bc180 x19: 000000000000000a x18: ffffffffffffffff x17: ffffffc080a39e08 x16: ffffffc080a39c98 x15: 4f435f464f006c72 x14: 0000000000000004 x13: ffffff80d0172110 x12: 0000000000000000 x11: ffffff80d0537740 x10: ffffff80d05376c0 x9 : ffffffc0808ed2d8 x8 : ffffffc084f8bab0 x7 : 0000000000000000 x6 : 0000000000000000 x5 : ffffff80d19b9420 x4 : fffffffe03466e60 x3 : 0000000080800077 x2 : 0000000000000000 x1 : 0000000000000001 x0 : 0000000000000000 Call trace:  dev_pm_domain_detach+0x8/0x48  platform_shutdown+0x2c/0x48  device_shutdown+0x158/0x268  kernel_restart_prepare+0x40/0x58  kernel_kexec+0x58/0xe8  __do_sys_reboot+0x198/0x258  __arm64_sys_reboot+0x2c/0x40  invoke_syscall+0x5c/0x138  el0_svc_common.constprop.0+0x48/0xf0  do_el0_svc+0x24/0x38  el0_svc+0x38/0xc8  el0t_64_sync_handler+0x120/0x130  el0t_64_sync+0x190/0x198 Code: 8128c2d0 ffffffc0 aa1e03e9 d503201f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56704,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  9p/xen: fix release of IRQ  Kernel logs indicate an IRQ was double-freed.  Pass correct device ID during IRQ release.  [Dominique: remove confusing variable reset to 0]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-38104,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Replace Mutex with Spinlock for RLCG register access to avoid Priority Inversion in SRIOV  RLCG Register Access is a way for virtual functions to safely access GPU registers in a virtualized environment.\, including TLB flushes and register reads. When multiple threads or VFs try to access the same registers simultaneously\, it can lead to race conditions. By using the RLCG interface\, the driver can serialize access to the registers. This means that only one thread can access the registers at a time\, preventing conflicts and ensuring that operations are performed correctly. Additionally\, when a low-priority task holds a mutex that a high-priority task needs\, ie.\, If a thread holding a spinlock tries to acquire a mutex\, it can lead to priority inversion. register access in amdgpu_virt_rlcg_reg_rw especially in a fast code path is critical.  The call stack shows that the function amdgpu_virt_rlcg_reg_rw is being called\, which attempts to acquire the mutex. This function is invoked from amdgpu_sriov_wreg\, which in turn is called from gmc_v11_0_flush_gpu_tlb.  The [ BUG: Invalid wait context ] indicates that a thread is trying to acquire a mutex while it is in a context that does not allow it to sleep (like holding a spinlock).  Fixes the below:  [  253.013423] ============================= [  253.013434] [ BUG: Invalid wait context ] [  253.013446] 6.12.0-amdstaging-drm-next-lol-050225 #14 Tainted: G     U     OE [  253.013464] ----------------------------- [  253.013475] kworker/0:1/10 is trying to lock: [  253.013487] ffff9f30542e3cf8 (&adev->virt.rlcg_reg_lock){+.+.}-{3:3}\, at: amdgpu_virt_rlcg_reg_rw+0xf6/0x330 [amdgpu] [  253.013815] other info that might help us debug this: [  253.013827] context-{4:4} [  253.013835] 3 locks held by kworker/0:1/10: [  253.013847]  #0: ffff9f3040050f58 ((wq_completion)events){+.+.}-{0:0}\, at: process_one_work+0x3f5/0x680 [  253.013877]  #1: ffffb789c008be40 ((work_completion)(&wfc.work)){+.+.}-{0:0}\, at: process_one_work+0x1d6/0x680 [  253.013905]  #2: ffff9f3054281838 (&adev->gmc.invalidate_lock){+.+.}-{2:2}\, at: gmc_v11_0_flush_gpu_tlb+0x198/0x4f0 [amdgpu] [  253.014154] stack backtrace: [  253.014164] CPU: 0 UID: 0 PID: 10 Comm: kworker/0:1 Tainted: G     U     OE      6.12.0-amdstaging-drm-next-lol-050225 #14 [  253.014189] Tainted: [U]=USER\, [O]=OOT_MODULE\, [E]=UNSIGNED_MODULE [  253.014203] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine\, BIOS Hyper-V UEFI Release v4.1 11/18/2024 [  253.014224] Workqueue: events work_for_cpu_fn [  253.014241] Call Trace: [  253.014250]  <TASK> [  253.014260]  dump_stack_lvl+0x9b/0xf0 [  253.014275]  dump_stack+0x10/0x20 [  253.014287]  __lock_acquire+0xa47/0x2810 [  253.014303]  ? srso_alias_return_thunk+0x5/0xfbef5 [  253.014321]  lock_acquire+0xd1/0x300 [  253.014333]  ? amdgpu_virt_rlcg_reg_rw+0xf6/0x330 [amdgpu] [  253.014562]  ? __lock_acquire+0xa6b/0x2810 [  253.014578]  __mutex_lock+0x85/0xe20 [  253.014591]  ? amdgpu_virt_rlcg_reg_rw+0xf6/0x330 [amdgpu] [  253.014782]  ? sched_clock_noinstr+0x9/0x10 [  253.014795]  ? srso_alias_return_thunk+0x5/0xfbef5 [  253.014808]  ? local_clock_noinstr+0xe/0xc0 [  253.014822]  ? amdgpu_virt_rlcg_reg_rw+0xf6/0x330 [amdgpu] [  253.015012]  ? srso_alias_return_thunk+0x5/0xfbef5 [  253.015029]  mutex_lock_nested+0x1b/0x30 [  253.015044]  ? mutex_lock_nested+0x1b/0x30 [  253.015057]  amdgpu_virt_rlcg_reg_rw+0xf6/0x330 [amdgpu] [  253.015249]  amdgpu_sriov_wreg+0xc5/0xd0 [amdgpu] [  253.015435]  gmc_v11_0_flush_gpu_tlb+0x44b/0x4f0 [amdgpu] [  253.015667]  gfx_v11_0_hw_init+0x499/0x29c0 [amdgpu] [  253.015901]  ? __pfx_smu_v13_0_update_pcie_parameters+0x10/0x10 [amdgpu] [  253.016159]  ? srso_alias_return_thunk+0x5/0xfbef5 [  253.016173]  ? smu_hw_init+0x18d/0x300 [amdgpu] [  253.016403]  amdgpu_device_init+0x29ad/0x36a0 [amdgpu] [  253.016614]  amdgpu_driver_load_kms+0x1a/0xc0 [amdgpu] [  253.0170 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56703,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: Fix soft lockups in fib6_select_path under high next hop churn  Soft lockups have been observed on a cluster of Linux-based edge routers located in a highly dynamic environment. Using the `bird` service\, these routers continuously update BGP-advertised routes due to frequently changing nexthop destinations\, while also managing significant IPv6 traffic. The lockups occur during the traversal of the multipath circular linked-list in the `fib6_select_path` function\, particularly while iterating through the siblings in the list. The issue typically arises when the nodes of the linked list are unexpectedly deleted concurrently on a different core—indicated by their 'next' and 'previous' elements pointing back to the node itself and their reference count dropping to zero. This results in an infinite loop\, leading to a soft lockup that triggers a system panic via the watchdog timer.  Apply RCU primitives in the problematic code sections to resolve the issue. Where necessary\, update the references to fib6_siblings to annotate or use the RCU APIs.  Include a test script that reproduces the issue. The script periodically updates the routing table while generating a heavy load of outgoing IPv6 traffic through multiple iperf3 clients. It consistently induces infinite soft lockups within a couple of minutes.  Kernel log:   0 [ffffbd13003e8d30] machine_kexec at ffffffff8ceaf3eb  1 [ffffbd13003e8d90] __crash_kexec at ffffffff8d0120e3  2 [ffffbd13003e8e58] panic at ffffffff8cef65d4  3 [ffffbd13003e8ed8] watchdog_timer_fn at ffffffff8d05cb03  4 [ffffbd13003e8f08] __hrtimer_run_queues at ffffffff8cfec62f  5 [ffffbd13003e8f70] hrtimer_interrupt at ffffffff8cfed756  6 [ffffbd13003e8fd0] __sysvec_apic_timer_interrupt at ffffffff8cea01af  7 [ffffbd13003e8ff0] sysvec_apic_timer_interrupt at ffffffff8df1b83d -- <IRQ stack> --  8 [ffffbd13003d3708] asm_sysvec_apic_timer_interrupt at ffffffff8e000ecb     [exception RIP: fib6_select_path+299]     RIP: ffffffff8ddafe7b  RSP: ffffbd13003d37b8  RFLAGS: 00000287     RAX: ffff975850b43600  RBX: ffff975850b40200  RCX: 0000000000000000     RDX: 000000003fffffff  RSI: 0000000051d383e4  RDI: ffff975850b43618     RBP: ffffbd13003d3800   R8: 0000000000000000   R9: ffff975850b40200     R10: 0000000000000000  R11: 0000000000000000  R12: ffffbd13003d3830     R13: ffff975850b436a8  R14: ffff975850b43600  R15: 0000000000000007     ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018  9 [ffffbd13003d3808] ip6_pol_route at ffffffff8ddb030c 10 [ffffbd13003d3888] ip6_pol_route_input at ffffffff8ddb068c 11 [ffffbd13003d3898] fib6_rule_lookup at ffffffff8ddf02b5 12 [ffffbd13003d3928] ip6_route_input at ffffffff8ddb0f47 13 [ffffbd13003d3a18] ip6_rcv_finish_core.constprop.0 at ffffffff8dd950d0 14 [ffffbd13003d3a30] ip6_list_rcv_finish.constprop.0 at ffffffff8dd96274 15 [ffffbd13003d3a98] ip6_sublist_rcv at ffffffff8dd96474 16 [ffffbd13003d3af8] ipv6_list_rcv at ffffffff8dd96615 17 [ffffbd13003d3b60] __netif_receive_skb_list_core at ffffffff8dc16fec 18 [ffffbd13003d3be0] netif_receive_skb_list_internal at ffffffff8dc176b3 19 [ffffbd13003d3c50] napi_gro_receive at ffffffff8dc565b9 20 [ffffbd13003d3c80] ice_receive_skb at ffffffffc087e4f5 [ice] 21 [ffffbd13003d3c90] ice_clean_rx_irq at ffffffffc0881b80 [ice] 22 [ffffbd13003d3d20] ice_napi_poll at ffffffffc088232f [ice] 23 [ffffbd13003d3d80] __napi_poll at ffffffff8dc18000 24 [ffffbd13003d3db8] net_rx_action at ffffffff8dc18581 25 [ffffbd13003d3e40] __do_softirq at ffffffff8df352e9 26 [ffffbd13003d3eb0] run_ksoftirqd at ffffffff8ceffe47 27 [ffffbd13003d3ec0] smpboot_thread_fn at ffffffff8cf36a30 28 [ffffbd13003d3ee8] kthread at ffffffff8cf2b39f 29 [ffffbd13003d3f28] ret_from_fork at ffffffff8ce5fa64 30 [ffffbd13003d3f50] ret_from_fork_asm at ffffffff8ce03cbb",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-45884,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.0.9. drivers/media/dvb-core/dvbdev.c has a use-after-free\, related to dvb_register_device dynamically allocating fops.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56701,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/pseries: Fix dtl_access_lock to be a rw_semaphore  The dtl_access_lock needs to be a rw_sempahore\, a sleeping lock\, because the code calls kmalloc() while holding it\, which can sleep:    # echo 1 > /proc/powerpc/vcpudispatch_stats   BUG: sleeping function called from invalid context at include/linux/sched/mm.h:337   in_atomic(): 1\, irqs_disabled(): 0\, non_block: 0\, pid: 199\, name: sh   preempt_count: 1\, expected: 0   3 locks held by sh/199:    #0: c00000000a0743f8 (sb_writers#3){.+.+}-{0:0}\, at: vfs_write+0x324/0x438    #1: c0000000028c7058 (dtl_enable_mutex){+.+.}-{3:3}\, at: vcpudispatch_stats_write+0xd4/0x5f4    #2: c0000000028c70b8 (dtl_access_lock){+.+.}-{2:2}\, at: vcpudispatch_stats_write+0x220/0x5f4   CPU: 0 PID: 199 Comm: sh Not tainted 6.10.0-rc4 #152   Hardware name: IBM pSeries (emulated by qemu) POWER9 (raw) 0x4e1202 0xf000005 of:SLOF\,HEAD hv:linux\,kvm pSeries   Call Trace:     dump_stack_lvl+0x130/0x148 (unreliable)     __might_resched+0x174/0x410     kmem_cache_alloc_noprof+0x340/0x3d0     alloc_dtl_buffers+0x124/0x1ac     vcpudispatch_stats_write+0x2a8/0x5f4     proc_reg_write+0xf4/0x150     vfs_write+0xfc/0x438     ksys_write+0x88/0x148     system_call_exception+0x1c4/0x5a0     system_call_common+0xf4/0x258",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-45885,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 6.0.9. drivers/media/dvb-core/dvb_frontend.c has a race condition that can cause a use-after-free when a device is disconnected.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56700,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: wl128x: Fix atomicity violation in fmc_send_cmd()  Atomicity violation occurs when the fmc_send_cmd() function is executed simultaneously with the modification of the fmdev->resp_skb value. Consider a scenario where\, after passing the validity check within the function\, a non-null fmdev->resp_skb variable is assigned a null value. This results in an invalid fmdev->resp_skb variable passing the validity check. As seen in the later part of the function\, skb = fmdev->resp_skb; when the invalid fmdev->resp_skb passes the check\, a null pointer dereference error may occur at line 478\, evt_hdr = (void *)skb->data;  To address this issue\, it is recommended to include the validity check of fmdev->resp_skb within the locked section of the function. This modification ensures that the value of fmdev->resp_skb does not change during the validation process\, thereby maintaining its validity.  This possible bug is found by an experimental static analysis tool developed by our team. This tool analyzes the locking APIs to extract function pairs that can be concurrently executed\, and then analyzes the instructions in the paired functions to identify possible concurrency bugs including data races and atomicity violations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-8660,linux-libc-dev,LOW,6.1.115-1,N/A,"The XFS subsystem in the Linux kernel through 4.8.2 allows local users to cause a denial of service (fdatasync failure and system hang) by using the vfs syscall group in the trinity program\, related to a ""page lock order bug in the XFS seek hole/data implementation.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27057,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: SOF: ipc4-pcm: Workaround for crashed firmware on system suspend  When the system is suspended while audio is active\, the sof_ipc4_pcm_hw_free() is invoked to reset the pipelines since during suspend the DSP is turned off\, streams will be re-started after resume.  If the firmware crashes during while audio is running (or when we reset the stream before suspend) then the sof_ipc4_set_multi_pipeline_state() will fail with IPC error and the state change is interrupted. This will cause misalignment between the kernel and firmware state on next DSP boot resulting errors returned by firmware for IPC messages\, eventually failing the audio resume. On stream close the errors are ignored so the kernel state will be corrected on the next DSP boot\, so the second boot after the DSP panic.  If sof_ipc4_trigger_pipelines() is called from sof_ipc4_pcm_hw_free() then state parameter is SOF_IPC4_PIPE_RESET and only in this case.  Treat a forced pipeline reset similarly to how we treat a pcm_free by ignoring error on state sending to allow the kernel's state to be consistent with the state the firmware will have after the next boot.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21972,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: mctp: unshare packets when reassembling  Ensure that the frag_list used for reassembly isn't shared with other packets. This avoids incorrect reassembly when packets are cloned\, and prevents a memory leak due to circular references between fragments and their skb_shared_info.  The upcoming MCTP-over-USB driver uses skb_clone which can trigger the problem - other MCTP drivers don't share SKBs.  A kunit test is added to reproduce the issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27056,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: ensure offloading TID queue exists  The resume code path assumes that the TX queue for the offloading TID has been configured. At resume time it then tries to sync the write pointer as it may have been updated by the firmware.  In the unusual event that no packets have been send on TID 0\, the queue will not have been allocated and this causes a crash. Fix this by ensuring the queue exist at suspend time.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21971,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net_sched: Prevent creation of classes with TC_H_ROOT  The function qdisc_tree_reduce_backlog() uses TC_H_ROOT as a termination condition when traversing up the qdisc tree to update parent backlog counters. However\, if a class is created with classid TC_H_ROOT\, the traversal terminates prematurely at this class instead of reaching the actual root qdisc\, causing parent statistics to be incorrectly maintained. In case of DRR\, this could lead to a crash as reported by Mingi Cho.  Prevent the creation of any Qdisc class with classid TC_H_ROOT (0xFFFFFFFF) across all qdisc types\, as suggested by Jamal.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43831,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: mediatek: vcodec: Handle invalid decoder vsi  Handle an invalid decoder vsi in vpu_dec_init to ensure the decoder vsi is valid for future use.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-51744,github.com/golang-jwt/jwt/v4,LOW,v4.5.0,4.5.1,"golang-jwt is a Go implementation of JSON Web Tokens. Unclear documentation of the error behavior in `ParseWithClaims` can lead to situation where users are potentially not checking errors in the way they should be. Especially\, if a token is both expired and invalid\, the errors returned by `ParseWithClaims` return both error codes. If users only check for the `jwt.ErrTokenExpired ` using `error.Is`\, they will ignore the embedded `jwt.ErrTokenSignatureInvalid` and thus potentially accept invalid tokens. A fix has been back-ported with the error handling logic from the `v5` branch to the `v4` branch. In this logic\, the `ParseWithClaims` function will immediately return in ""dangerous"" situations (e.g.\, an invalid signature)\, limiting the combined errors only to situations where the signature is valid\, but further validation failed (e.g.\, if the signature is valid\, but is expired AND has the wrong audience). This fix is part of the 4.5.1 release. We are aware that this changes the behaviour of an established function and is not 100 % backwards compatible\, so updating to 4.5.1 might break your code. In case you cannot update to 4.5.0\, please make sure that you are properly checking for all errors (""dangerous"" ones first)\, so that you are not running in the case detailed above.",|tykio/midsommar|
CVE-2025-21970,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: Bridge\, fix the crash caused by LAG state check  When removing LAG device from bridge\, NETDEV_CHANGEUPPER event is triggered. Driver finds the lower devices (PFs) to flush all the offloaded entries. And mlx5_lag_is_shared_fdb is checked\, it returns false if one of PF is unloaded. In such case\, mlx5_esw_bridge_lag_rep_get() and its caller return NULL\, instead of the alive PF\, and the flush is skipped.  Besides\, the bridge fdb entry's lastuse is updated in mlx5 bridge event handler. But this SWITCHDEV_FDB_ADD_TO_BRIDGE event can be ignored in this case because the upper interface for bond is deleted\, and the entry will never be aged because lastuse is never updated.  To make things worse\, as the entry is alive\, mlx5 bridge workqueue keeps sending that event\, which is then handled by kernel bridge notifier. It causes the following crash when accessing the passed bond netdev which is already destroyed.  To fix this issue\, remove such checks. LAG state is already checked in commit 15f8f168952f (""net/mlx5: Bridge\, verify LAG state when adding bond to bridge"")\, driver still need to skip offload if LAG becomes invalid state after initialization.   Oops: stack segment: 0000 [#1] SMP  CPU: 3 UID: 0 PID: 23695 Comm: kworker/u40:3 Tainted: G           OE      6.11.0_mlnx #1  Tainted: [O]=OOT_MODULE\, [E]=UNSIGNED_MODULE  Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014  Workqueue: mlx5_bridge_wq mlx5_esw_bridge_update_work [mlx5_core]  RIP: 0010:br_switchdev_event+0x2c/0x110 [bridge]  Code: 44 00 00 48 8b 02 48 f7 00 00 02 00 00 74 69 41 54 55 53 48 83 ec 08 48 8b a8 08 01 00 00 48 85 ed 74 4a 48 83 fe 02 48 89 d3 <4c> 8b 65 00 74 23 76 49 48 83 fe 05 74 7e 48 83 fe 06 75 2f 0f b7  RSP: 0018:ffffc900092cfda0 EFLAGS: 00010297  RAX: ffff888123bfe000 RBX: ffffc900092cfe08 RCX: 00000000ffffffff  RDX: ffffc900092cfe08 RSI: 0000000000000001 RDI: ffffffffa0c585f0  RBP: 6669746f6e690a30 R08: 0000000000000000 R09: ffff888123ae92c8  R10: 0000000000000000 R11: fefefefefefefeff R12: ffff888123ae9c60  R13: 0000000000000001 R14: ffffc900092cfe08 R15: 0000000000000000  FS:  0000000000000000(0000) GS:ffff88852c980000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007f15914c8734 CR3: 0000000002830005 CR4: 0000000000770ef0  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400  PKRU: 55555554  Call Trace:   <TASK>   ? __die_body+0x1a/0x60   ? die+0x38/0x60   ? do_trap+0x10b/0x120   ? do_error_trap+0x64/0xa0   ? exc_stack_segment+0x33/0x50   ? asm_exc_stack_segment+0x22/0x30   ? br_switchdev_event+0x2c/0x110 [bridge]   ? sched_balance_newidle.isra.149+0x248/0x390   notifier_call_chain+0x4b/0xa0   atomic_notifier_call_chain+0x16/0x20   mlx5_esw_bridge_update+0xec/0x170 [mlx5_core]   mlx5_esw_bridge_update_work+0x19/0x40 [mlx5_core]   process_scheduled_works+0x81/0x390   worker_thread+0x106/0x250   ? bh_worker+0x110/0x110   kthread+0xb7/0xe0   ? kthread_park+0x80/0x80   ret_from_fork+0x2d/0x50   ? kthread_park+0x80/0x80   ret_from_fork_asm+0x11/0x20   </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-2781,coreutils,LOW,9.1-1,N/A,"chroot in GNU coreutils\, when used with --userspec\, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call\, which pushes characters to the terminal's input buffer.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21976,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fbdev: hyperv_fb: Allow graceful removal of framebuffer  When a Hyper-V framebuffer device is unbind\, hyperv_fb driver tries to release the framebuffer forcefully. If this framebuffer is in use it produce the following WARN and hence this framebuffer is never released.  [   44.111220] WARNING: CPU: 35 PID: 1882 at drivers/video/fbdev/core/fb_info.c:70 framebuffer_release+0x2c/0x40 < snip > [   44.111289] Call Trace: [   44.111290]  <TASK> [   44.111291]  ? show_regs+0x6c/0x80 [   44.111295]  ? __warn+0x8d/0x150 [   44.111298]  ? framebuffer_release+0x2c/0x40 [   44.111300]  ? report_bug+0x182/0x1b0 [   44.111303]  ? handle_bug+0x6e/0xb0 [   44.111306]  ? exc_invalid_op+0x18/0x80 [   44.111308]  ? asm_exc_invalid_op+0x1b/0x20 [   44.111311]  ? framebuffer_release+0x2c/0x40 [   44.111313]  ? hvfb_remove+0x86/0xa0 [hyperv_fb] [   44.111315]  vmbus_remove+0x24/0x40 [hv_vmbus] [   44.111323]  device_remove+0x40/0x80 [   44.111325]  device_release_driver_internal+0x20b/0x270 [   44.111327]  ? bus_find_device+0xb3/0xf0  Fix this by moving the release of framebuffer and assosiated memory to fb_ops.fb_destroy function\, so that framebuffer framework handles it gracefully.  While we fix this\, also replace manual registrations/unregistration of framebuffer with devm_register_framebuffer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21975,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: handle errors in mlx5_chains_create_table()  In mlx5_chains_create_table()\, the return value of mlx5_get_fdb_sub_ns() and mlx5_get_flow_namespace() must be checked to prevent NULL pointer dereferences. If either function fails\, the function should log error message with mlx5_core_warn() and return error pointer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50259,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  netdevsim: Add trailing zero to terminate the string in nsim_nexthop_bucket_activity_write()  This was found by a static analyzer. We should not forget the trailing zero after copy_from_user() if we will further do some string operations\, sscanf() in this case. Adding a trailing zero will ensure that the function performs properly.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50258,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: fix crash when config small gso_max_size/gso_ipv4_max_size  Config a small gso_max_size/gso_ipv4_max_size will lead to an underflow in sk_dst_gso_max_size()\, which may trigger a BUG_ON crash\, because sk->sk_gso_max_size would be much bigger than device limits. Call Trace: tcp_write_xmit     tso_segs = tcp_init_tso_segs(skb\, mss_now);         tcp_set_skb_tso_segs             tcp_skb_pcount_set                 // skb->len = 524288\, mss_now = 8                 // u16 tso_segs = 524288/8 = 65535 -> 0                 tso_segs = DIV_ROUND_UP(skb->len\, mss_now)     BUG_ON(!tso_segs) Add check for the minimum value of gso_max_size and gso_ipv4_max_size.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53043,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mctp i2c: handle NULL header address  daddr can be NULL if there is no neighbour table entry present\, in that case the tx packet should be dropped.  saddr will usually be set by MCTP core\, but check for NULL in case a packet is transmitted by a different protocol.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50257,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: Fix use-after-free in get_info()  ip6table_nat module unload has refcnt warning for UAF. call trace is:  WARNING: CPU: 1 PID: 379 at kernel/module/main.c:853 module_put+0x6f/0x80 Modules linked in: ip6table_nat(-) CPU: 1 UID: 0 PID: 379 Comm: ip6tables Not tainted 6.12.0-rc4-00047-gc2ee9f594da8-dirty #205 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP: 0010:module_put+0x6f/0x80 Call Trace:  <TASK>  get_info+0x128/0x180  do_ip6t_get_ctl+0x6a/0x430  nf_getsockopt+0x46/0x80  ipv6_getsockopt+0xb9/0x100  rawv6_getsockopt+0x42/0x190  do_sock_getsockopt+0xaa/0x180  __sys_getsockopt+0x70/0xc0  __x64_sys_getsockopt+0x20/0x30  do_syscall_64+0xa2/0x1a0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Concurrent execution of module unload and get_info() trigered the warning. The root cause is as follows:  cpu0\t\t\t\t      cpu1 module_exit //mod->state = MODULE_STATE_GOING   ip6table_nat_exit     xt_unregister_template \tkfree(t) \t//removed from templ_list \t\t\t\t      getinfo() \t\t\t\t\t  t = xt_find_table_lock \t\t\t\t\t\tlist_for_each_entry(tmpl\, &xt_templates[af]...) \t\t\t\t\t\t\tif (strcmp(tmpl->name\, name)) \t\t\t\t\t\t\t\tcontinue;  //table not found \t\t\t\t\t\t\ttry_module_get \t\t\t\t\t\tlist_for_each_entry(t\, &xt_net->tables[af]...) \t\t\t\t\t\t\treturn t;  //not get refcnt \t\t\t\t\t  module_put(t->me) //uaf     unregister_pernet_subsys     //remove table from xt_net list  While xt_table module was going away and has been removed from xt_templates list\, we couldnt get refcnt of xt_table->me. Check module in xt_net->tables list re-traversal to fix it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53042,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv4: ip_tunnel: Fix suspicious RCU usage warning in ip_tunnel_init_flow()  There are code paths from which the function is called without holding the RCU read lock\, resulting in a suspicious RCU usage warning [1].  Fix by using l3mdev_master_upper_ifindex_by_index() which will acquire the RCU read lock before calling l3mdev_master_upper_ifindex_by_index_rcu().  [1] WARNING: suspicious RCU usage 6.12.0-rc3-custom-gac8f72681cf2 #141 Not tainted ----------------------------- net/core/dev.c:876 RCU-list traversed in non-reader section!!  other info that might help us debug this:  rcu_scheduler_active = 2\, debug_locks = 1 1 lock held by ip/361:  #0: ffffffff86fc7cb0 (rtnl_mutex){+.+.}-{3:3}\, at: rtnetlink_rcv_msg+0x377/0xf60  stack backtrace: CPU: 3 UID: 0 PID: 361 Comm: ip Not tainted 6.12.0-rc3-custom-gac8f72681cf2 #141 Hardware name: Bochs Bochs\, BIOS Bochs 01/01/2011 Call Trace:  <TASK>  dump_stack_lvl+0xba/0x110  lockdep_rcu_suspicious.cold+0x4f/0xd6  dev_get_by_index_rcu+0x1d3/0x210  l3mdev_master_upper_ifindex_by_index_rcu+0x2b/0xf0  ip_tunnel_bind_dev+0x72f/0xa00  ip_tunnel_newlink+0x368/0x7a0  ipgre_newlink+0x14c/0x170  __rtnl_newlink+0x1173/0x19c0  rtnl_newlink+0x6c/0xa0  rtnetlink_rcv_msg+0x3cc/0xf60  netlink_rcv_skb+0x171/0x450  netlink_unicast+0x539/0x7f0  netlink_sendmsg+0x8c1/0xd80  ____sys_sendmsg+0x8f9/0xc20  ___sys_sendmsg+0x197/0x1e0  __sys_sendmsg+0x122/0x1f0  do_syscall_64+0xbb/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50256,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nf_reject_ipv6: fix potential crash in nf_send_reset6()  I got a syzbot report without a repro [1] crashing in nf_send_reset6()  I think the issue is that dev->hard_header_len is zero\, and we attempt later to push an Ethernet header.  Use LL_MAX_HEADER\, as other functions in net/ipv6/netfilter/nf_reject_ipv6.c.  [1]  skbuff: skb_under_panic: text:ffffffff89b1d008 len:74 put:14 head:ffff88803123aa00 data:ffff88803123a9f2 tail:0x3c end:0x140 dev:syz_tun  kernel BUG at net/core/skbuff.c:206 ! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 0 UID: 0 PID: 7373 Comm: syz.1.568 Not tainted 6.12.0-rc2-syzkaller-00631-g6d858708d465 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024  RIP: 0010:skb_panic net/core/skbuff.c:206 [inline]  RIP: 0010:skb_under_panic+0x14b/0x150 net/core/skbuff.c:216 Code: 0d 8d 48 c7 c6 60 a6 29 8e 48 8b 54 24 08 8b 0c 24 44 8b 44 24 04 4d 89 e9 50 41 54 41 57 41 56 e8 ba 30 38 02 48 83 c4 20 90 <0f> 0b 0f 1f 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 RSP: 0018:ffffc900045269b0 EFLAGS: 00010282 RAX: 0000000000000088 RBX: dffffc0000000000 RCX: cd66dacdc5d8e800 RDX: 0000000000000000 RSI: 0000000000000200 RDI: 0000000000000000 RBP: ffff88802d39a3d0 R08: ffffffff8174afec R09: 1ffff920008a4ccc R10: dffffc0000000000 R11: fffff520008a4ccd R12: 0000000000000140 R13: ffff88803123aa00 R14: ffff88803123a9f2 R15: 000000000000003c FS:  00007fdbee5ff6c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000000000000000 CR3: 000000005d322000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   skb_push+0xe5/0x100 net/core/skbuff.c:2636   eth_header+0x38/0x1f0 net/ethernet/eth.c:83   dev_hard_header include/linux/netdevice.h:3208 [inline]   nf_send_reset6+0xce6/0x1270 net/ipv6/netfilter/nf_reject_ipv6.c:358   nft_reject_inet_eval+0x3b9/0x690 net/netfilter/nft_reject_inet.c:48   expr_call_ops_eval net/netfilter/nf_tables_core.c:240 [inline]   nft_do_chain+0x4ad/0x1da0 net/netfilter/nf_tables_core.c:288   nft_do_chain_inet+0x418/0x6b0 net/netfilter/nft_chain_filter.c:161   nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]   nf_hook_slow+0xc3/0x220 net/netfilter/core.c:626   nf_hook include/linux/netfilter.h:269 [inline]   NF_HOOK include/linux/netfilter.h:312 [inline]   br_nf_pre_routing_ipv6+0x63e/0x770 net/bridge/br_netfilter_ipv6.c:184   nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]   nf_hook_bridge_pre net/bridge/br_input.c:277 [inline]   br_handle_frame+0x9fd/0x1530 net/bridge/br_input.c:424   __netif_receive_skb_core+0x13e8/0x4570 net/core/dev.c:5562   __netif_receive_skb_one_core net/core/dev.c:5666 [inline]   __netif_receive_skb+0x12f/0x650 net/core/dev.c:5781   netif_receive_skb_internal net/core/dev.c:5867 [inline]   netif_receive_skb+0x1e8/0x890 net/core/dev.c:5926   tun_rx_batched+0x1b7/0x8f0 drivers/net/tun.c:1550   tun_get_user+0x3056/0x47e0 drivers/net/tun.c:2007   tun_chr_write_iter+0x10d/0x1f0 drivers/net/tun.c:2053   new_sync_write fs/read_write.c:590 [inline]   vfs_write+0xa6d/0xc90 fs/read_write.c:683   ksys_write+0x183/0x2b0 fs/read_write.c:736   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7fdbeeb7d1ff Code: 89 54 24 18 48 89 74 24 10 89 7c 24 08 e8 c9 8d 02 00 48 8b 54 24 18 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 31 44 89 c7 48 89 44 24 08 e8 1c 8e 02 00 48 RSP: 002b:00007fdbee5ff000 EFLAGS: 00000293 ORIG_RAX: 0000000000000001 RAX: ffffffffffffffda RBX: 00007fdbeed36058 RCX: 00007fdbeeb7d1ff RDX: 000000000000008e RSI: 0000000020000040 RDI: 00000000000000c8 RBP: 00007fdbeebf12be R08: 0000000 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50255,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: hci: fix null-ptr-deref in hci_read_supported_codecs  Fix __hci_cmd_sync_sk() to return not NULL for unknown opcodes.  __hci_cmd_sync_sk() returns NULL if a command returns a status event. However\, it also returns NULL where an opcode doesn't exist in the hci_cc table because hci_cmd_complete_evt() assumes status = skb->data[0] for unknown opcodes. This leads to null-ptr-deref in cmd_sync for HCI_OP_READ_LOCAL_CODECS as there is no hci_cc for HCI_OP_READ_LOCAL_CODECS\, which always assumes status = skb->data[0].  KASAN: null-ptr-deref in range [0x0000000000000070-0x0000000000000077] CPU: 1 PID: 2000 Comm: kworker/u9:5 Not tainted 6.9.0-ga6bcb805883c-dirty #10 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014 Workqueue: hci7 hci_power_on RIP: 0010:hci_read_supported_codecs+0xb9/0x870 net/bluetooth/hci_codec.c:138 Code: 08 48 89 ef e8 b8 c1 8f fd 48 8b 75 00 e9 96 00 00 00 49 89 c6 48 ba 00 00 00 00 00 fc ff df 4c 8d 60 70 4c 89 e3 48 c1 eb 03 <0f> b6 04 13 84 c0 0f 85 82 06 00 00 41 83 3c 24 02 77 0a e8 bf 78 RSP: 0018:ffff888120bafac8 EFLAGS: 00010212 RAX: 0000000000000000 RBX: 000000000000000e RCX: ffff8881173f0040 RDX: dffffc0000000000 RSI: ffffffffa58496c0 RDI: ffff88810b9ad1e4 RBP: ffff88810b9ac000 R08: ffffffffa77882a7 R09: 1ffffffff4ef1054 R10: dffffc0000000000 R11: fffffbfff4ef1055 R12: 0000000000000070 R13: 0000000000000000 R14: 0000000000000000 R15: ffff88810b9ac000 FS:  0000000000000000(0000) GS:ffff8881f6c00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f6ddaa3439e CR3: 0000000139764003 CR4: 0000000000770ef0 PKRU: 55555554 Call Trace:  <TASK>  hci_read_local_codecs_sync net/bluetooth/hci_sync.c:4546 [inline]  hci_init_stage_sync net/bluetooth/hci_sync.c:3441 [inline]  hci_init4_sync net/bluetooth/hci_sync.c:4706 [inline]  hci_init_sync net/bluetooth/hci_sync.c:4742 [inline]  hci_dev_init_sync net/bluetooth/hci_sync.c:4912 [inline]  hci_dev_open_sync+0x19a9/0x2d30 net/bluetooth/hci_sync.c:4994  hci_dev_do_open net/bluetooth/hci_core.c:483 [inline]  hci_power_on+0x11e/0x560 net/bluetooth/hci_core.c:1015  process_one_work kernel/workqueue.c:3267 [inline]  process_scheduled_works+0x8ef/0x14f0 kernel/workqueue.c:3348  worker_thread+0x91f/0xe50 kernel/workqueue.c:3429  kthread+0x2cb/0x360 kernel/kthread.c:388  ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21979,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: cfg80211: cancel wiphy_work before freeing wiphy  A wiphy_work can be queued from the moment the wiphy is allocated and initialized (i.e. wiphy_new_nm). When a wiphy_work is queued\, the rdev::wiphy_work is getting queued.  If wiphy_free is called before the rdev::wiphy_work had a chance to run\, the wiphy memory will be freed\, and then when it eventally gets to run it'll use invalid memory.  Fix this by canceling the work before freeing the wiphy.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21978,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/hyperv: Fix address space leak when Hyper-V DRM device is removed  When a Hyper-V DRM device is probed\, the driver allocates MMIO space for the vram\, and maps it cacheable. If the device removed\, or in the error path for device probing\, the MMIO space is released but no unmap is done. Consequently the kernel address space for the mapping is leaked.  Fix this by adding iounmap() calls in the device removal path\, and in the error path during device probing.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2010-4756,libc-bin,LOW,2.36-9+deb12u10,N/A,"The glob implementation in the GNU C Library (aka glibc or libc6) allows remote authenticated users to cause a denial of service (CPU and memory consumption) via crafted glob expressions that do not match any pathnames\, as demonstrated by glob expressions in STAT commands to an FTP daemon\, a different vulnerability than CVE-2010-2632.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50252,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mlxsw: spectrum_ipip: Fix memory leak when changing remote IPv6 address  The device stores IPv6 addresses that are used for encapsulation in linear memory that is managed by the driver.  Changing the remote address of an ip6gre net device never worked properly\, but since cited commit the following reproducer [1] would result in a warning [2] and a memory leak [3]. The problem is that the new remote address is never added by the driver to its hash table (and therefore the device) and the old address is never removed from it.  Fix by programming the new address when the configuration of the ip6gre net device changes and removing the old one. If the address did not change\, then the above would result in increasing the reference count of the address and then decreasing it.  [1]  # ip link add name bla up type ip6gre local 2001:db8:1::1 remote 2001:db8:2::1 tos inherit ttl inherit  # ip link set dev bla type ip6gre remote 2001:db8:3::1  # ip link del dev bla  # devlink dev reload pci/0000:01:00.0  [2] WARNING: CPU: 0 PID: 1682 at drivers/net/ethernet/mellanox/mlxsw/spectrum.c:3002 mlxsw_sp_ipv6_addr_put+0x140/0x1d0 Modules linked in: CPU: 0 UID: 0 PID: 1682 Comm: ip Not tainted 6.12.0-rc3-custom-g86b5b55bc835 #151 Hardware name: Nvidia SN5600/VMOD0013\, BIOS 5.13 05/31/2023 RIP: 0010:mlxsw_sp_ipv6_addr_put+0x140/0x1d0 [...] Call Trace:  <TASK>  mlxsw_sp_router_netdevice_event+0x55f/0x1240  notifier_call_chain+0x5a/0xd0  call_netdevice_notifiers_info+0x39/0x90  unregister_netdevice_many_notify+0x63e/0x9d0  rtnl_dellink+0x16b/0x3a0  rtnetlink_rcv_msg+0x142/0x3f0  netlink_rcv_skb+0x50/0x100  netlink_unicast+0x242/0x390  netlink_sendmsg+0x1de/0x420  ____sys_sendmsg+0x2bd/0x320  ___sys_sendmsg+0x9a/0xe0  __sys_sendmsg+0x7a/0xd0  do_syscall_64+0x9e/0x1a0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  [3] unreferenced object 0xffff898081f597a0 (size 32):   comm ""ip""\, pid 1626\, jiffies 4294719324   hex dump (first 32 bytes):     20 01 0d b8 00 02 00 00 00 00 00 00 00 00 00 01   ...............     21 49 61 83 80 89 ff ff 00 00 00 00 01 00 00 00  !Ia.............   backtrace (crc fd9be911):     [<00000000df89c55d>] __kmalloc_cache_noprof+0x1da/0x260     [<00000000ff2a1ddb>] mlxsw_sp_ipv6_addr_kvdl_index_get+0x281/0x340     [<000000009ddd445d>] mlxsw_sp_router_netdevice_event+0x47b/0x1240     [<00000000743e7757>] notifier_call_chain+0x5a/0xd0     [<000000007c7b9e13>] call_netdevice_notifiers_info+0x39/0x90     [<000000002509645d>] register_netdevice+0x5f7/0x7a0     [<00000000c2e7d2a9>] ip6gre_newlink_common.isra.0+0x65/0x130     [<0000000087cd6d8d>] ip6gre_newlink+0x72/0x120     [<000000004df7c7cc>] rtnl_newlink+0x471/0xa20     [<0000000057ed632a>] rtnetlink_rcv_msg+0x142/0x3f0     [<0000000032e0d5b5>] netlink_rcv_skb+0x50/0x100     [<00000000908bca63>] netlink_unicast+0x242/0x390     [<00000000cdbe1c87>] netlink_sendmsg+0x1de/0x420     [<0000000011db153e>] ____sys_sendmsg+0x2bd/0x320     [<000000003b6d53eb>] ___sys_sendmsg+0x9a/0xe0     [<00000000cae27c62>] __sys_sendmsg+0x7a/0xd0",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50251,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nft_payload: sanitize offset and length before calling skb_checksum()  If access to offset + length is larger than the skbuff length\, then skb_checksum() triggers BUG_ON().  skb_checksum() internally subtracts the length parameter while iterating over skbuff\, BUG_ON(len) at the end of it checks that the expected length to be included in the checksum calculation is fully consumed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-17740,libldap-2.5-0,LOW,2.5.13+dfsg-5,N/A,"contrib/slapd-modules/nops/nops.c in OpenLDAP through 2.4.45\, when both the nops module and the memberof overlay are enabled\, attempts to free a buffer that was allocated on the stack\, which allows remote attackers to cause a denial of service (slapd crash) via a member MODDN operation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50250,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fsdax: dax_unshare_iter needs to copy entire blocks  The code that copies data from srcmap to iomap in dax_unshare_iter is very very broken\, which bfoster's recent fsx changes have exposed.  If the pos and len passed to dax_file_unshare are not aligned to an fsblock boundary\, the iter pos and length in the _iter function will reflect this unalignment.  dax_iomap_direct_access always returns a pointer to the start of the kmapped fsdax page\, even if its pos argument is in the middle of that page.  This is catastrophic for data integrity when iter->pos is not aligned to a page\, because daddr/saddr do not point to the same byte in the file as iter->pos.  Hence we corrupt user data by copying it to the wrong place.  If iter->pos + iomap_length() in the _iter function not aligned to a page\, then we fail to copy a full block\, and only partially populate the destination block.  This is catastrophic for data confidentiality because we expose stale pmem contents.  Fix both of these issues by aligning copy_pos/copy_len to a page boundary (remember\, this is fsdax so 1 fsblock == 1 base page) so that we always copy full blocks.  We're not done yet -- there's no call to invalidate_inode_pages2_range\, so programs that have the file range mmap'd will continue accessing the old memory mapping after the file metadata updates have completed.  Be careful with the return value -- if the unshare succeeds\, we still need to return the number of bytes that the iomap iter thinks we're operating on.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41080,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring: fix possible deadlock in io_register_iowq_max_workers()  The io_register_iowq_max_workers() function calls io_put_sq_data()\, which acquires the sqd->lock without releasing the uring_lock. Similar to the commit 009ad9f0c6ee (""io_uring: drop ctx->uring_lock before acquiring sqd->lock"")\, this can lead to a potential deadlock situation.  To resolve this issue\, the uring_lock is released before calling io_put_sq_data()\, and then it is re-acquired after the function call.  This change ensures that the locks are acquired in the correct order\, preventing the possibility of a deadlock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41082,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-fabrics: use reserved tag for reg read/write command  In some scenarios\, if too many commands are issued by nvme command in the same time by user tasks\, this may exhaust all tags of admin_q. If a reset (nvme reset or IO timeout) occurs before these commands finish\, reconnect routine may fail to update nvme regs due to insufficient tags\, which will cause kernel hang forever. In order to workaround this issue\, maybe we can let reg_read32()/reg_read64()/reg_write32() use reserved tags. This maybe safe for nvmf:  1. For the disable ctrl path\,  we will not issue connect command 2. For the enable ctrl / fw activate path\, since connect and reg_xx()    are called serially.  So the reserved tags may still be enough while reg_xx() use reserved tags.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-17973,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"In LibTIFF 4.0.8\, there is a heap-based use-after-free in the t2p_writeproc function in tiff2pdf.c. NOTE: there is a third-party report of inability to reproduce this issue",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2011-3389,libgnutls30,LOW,3.7.9-2+deb12u4,N/A,"The SSL protocol\, as used in certain configurations in Microsoft Windows and Microsoft Internet Explorer\, Mozilla Firefox\, Google Chrome\, Opera\, and other products\, encrypts data by using CBC mode with chained initialization vectors\, which allows man-in-the-middle attackers to obtain plaintext HTTP headers via a blockwise chosen-boundary attack (BCBA) on an HTTPS session\, in conjunction with JavaScript code that uses (1) the HTML5 WebSocket API\, (2) the Java URLConnection API\, or (3) the Silverlight WebClient API\, aka a ""BEAST"" attack.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-15213,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in the Linux kernel before 5.2.3. There is a use-after-free caused by a malicious USB device in the drivers/media/usb/dvb-usb/dvb-usb-init.c driver.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21708,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: usb: rtl8150: enable basic endpoint checking  Syzkaller reports [1] encountering a common issue of utilizing a wrong usb endpoint type during URB submitting stage. This\, in turn\, triggers a warning shown below.  For now\, enable simple endpoint checking (specifically\, bulk and interrupt eps\, testing control one is not essential) to mitigate the issue with a view to do other related cosmetic changes later\, if they are necessary.  [1] Syzkaller report: usb 1-1: BOGUS urb xfer\, pipe 3 != type 1 WARNING: CPU: 1 PID: 2586 at drivers/usb/core/urb.c:503 usb_submit_urb+0xe4b/0x1730 driv> Modules linked in: CPU: 1 UID: 0 PID: 2586 Comm: dhcpcd Not tainted 6.11.0-rc4-syzkaller-00069-gfc88bb11617> Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 08/06/2024 RIP: 0010:usb_submit_urb+0xe4b/0x1730 drivers/usb/core/urb.c:503 Code: 84 3c 02 00 00 e8 05 e4 fc fc 4c 89 ef e8 fd 25 d7 fe 45 89 e0 89 e9 4c 89 f2 48 8> RSP: 0018:ffffc9000441f740 EFLAGS: 00010282 RAX: 0000000000000000 RBX: ffff888112487a00 RCX: ffffffff811a99a9 RDX: ffff88810df6ba80 RSI: ffffffff811a99b6 RDI: 0000000000000001 RBP: 0000000000000003 R08: 0000000000000001 R09: 0000000000000000 R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000001 R13: ffff8881023bf0a8 R14: ffff888112452a20 R15: ffff888112487a7c FS:  00007fc04eea5740(0000) GS:ffff8881f6300000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f0a1de9f870 CR3: 000000010dbd0000 CR4: 00000000003506f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  rtl8150_open+0x300/0xe30 drivers/net/usb/rtl8150.c:733  __dev_open+0x2d4/0x4e0 net/core/dev.c:1474  __dev_change_flags+0x561/0x720 net/core/dev.c:8838  dev_change_flags+0x8f/0x160 net/core/dev.c:8910  devinet_ioctl+0x127a/0x1f10 net/ipv4/devinet.c:1177  inet_ioctl+0x3aa/0x3f0 net/ipv4/af_inet.c:1003  sock_do_ioctl+0x116/0x280 net/socket.c:1222  sock_ioctl+0x22e/0x6c0 net/socket.c:1341  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:907 [inline]  __se_sys_ioctl fs/ioctl.c:893 [inline]  __x64_sys_ioctl+0x193/0x220 fs/ioctl.c:893  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0033:0x7fc04ef73d49 ...  This change has not been tested on real hardware.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-38152,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  remoteproc: core: Clear table_sz when rproc_shutdown  There is case as below could trigger kernel dump: Use U-Boot to start remote processor(rproc) with resource table published to a fixed address by rproc. After Kernel boots up\, stop the rproc\, load a new firmware which doesn't have resource table \,and start rproc.  When starting rproc with a firmware not have resource table\, `memcpy(loaded_table\, rproc->cached_table\, rproc->table_sz)` will trigger dump\, because rproc->cache_table is set to NULL during the last stop operation\, but rproc->table_sz is still valid.  This issue is found on i.MX8MP and i.MX9.  Dump as below: Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000 Mem abort info:   ESR = 0x0000000096000004   EC = 0x25: DABT (current EL)\, IL = 32 bits   SET = 0\, FnV = 0   EA = 0\, S1PTW = 0   FSC = 0x04: level 0 translation fault Data abort info:   ISV = 0\, ISS = 0x00000004\, ISS2 = 0x00000000   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 user pgtable: 4k pages\, 48-bit VAs\, pgdp=000000010af63000 [0000000000000000] pgd=0000000000000000\, p4d=0000000000000000 Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP Modules linked in: CPU: 2 UID: 0 PID: 1060 Comm: sh Not tainted 6.14.0-rc7-next-20250317-dirty #38 Hardware name: NXP i.MX8MPlus EVK board (DT) pstate: a0000005 (NzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : __pi_memcpy_generic+0x110/0x22c lr : rproc_start+0x88/0x1e0 Call trace:  __pi_memcpy_generic+0x110/0x22c (P)  rproc_boot+0x198/0x57c  state_store+0x40/0x104  dev_attr_store+0x18/0x2c  sysfs_kf_write+0x7c/0x94  kernfs_fop_write_iter+0x120/0x1cc  vfs_write+0x240/0x378  ksys_write+0x70/0x108  __arm64_sys_write+0x1c/0x28  invoke_syscall+0x48/0x10c  el0_svc_common.constprop.0+0xc0/0xe0  do_el0_svc+0x1c/0x28  el0_svc+0x30/0xcc  el0t_64_sync_handler+0x10c/0x138  el0t_64_sync+0x198/0x19c  Clear rproc->table_sz to address the issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42079,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  gfs2: Fix NULL pointer dereference in gfs2_log_flush  In gfs2_jindex_free()\, set sdp->sd_jdesc to NULL under the log flush lock to provide exclusion against gfs2_log_flush().  In gfs2_log_flush()\, check if sdp->sd_jdesc is non-NULL before dereferencing it.  Otherwise\, we could run into a NULL pointer dereference when outstanding glock work races with an unmount (glock_work_func -> run_queue -> do_xmote -> inode_go_sync -> gfs2_log_flush).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2005-2541,tar,LOW,1.34+dfsg-1.2+deb12u1,N/A,"Tar 1.15.1 does not properly warn the user when extracting setuid or setgid files\, which may allow local users or remote attackers to gain privileges.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21704,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: cdc-acm: Check control transfer buffer size before access  If the first fragment is shorter than struct usb_cdc_notification\, we can't calculate an expected_size. Log an error and discard the notification instead of reading lengths from memory outside the received data\, which can lead to memory corruption when the expected_size decreases between fragments\, causing `expected_size - acm->nb_index` to wrap.  This issue has been present since the beginning of git history; however\, it only leads to memory corruption since commit ea2583529cd1 (""cdc-acm: reassemble fragmented notifications"").  A mitigating factor is that acm_ctrl_irq() can only execute after userspace has opened /dev/ttyACM*; but if ModemManager is running\, ModemManager will do that automatically depending on the USB device's vendor/product IDs and its other interfaces.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53241,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  x86/xen: don't do PV iret hypercall through hypercall page  Instead of jumping to the Xen hypercall page for doing the iret hypercall\, directly code the required sequence in xen-asm.S.  This is done in preparation of no longer using hypercall page at all\, as it has shown to cause problems with speculation mitigations.  This is part of XSA-466 / CVE-2024-53241.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21705,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: handle fastopen disconnect correctly  Syzbot was able to trigger a data stream corruption:    WARNING: CPU: 0 PID: 9846 at net/mptcp/protocol.c:1024 __mptcp_clean_una+0xddb/0xff0 net/mptcp/protocol.c:1024   Modules linked in:   CPU: 0 UID: 0 PID: 9846 Comm: syz-executor351 Not tainted 6.13.0-rc2-syzkaller-00059-g00a5acdbf398 #0   Hardware name: Google Compute Engine/Google Compute Engine\, BIOS Google 11/25/2024   RIP: 0010:__mptcp_clean_una+0xddb/0xff0 net/mptcp/protocol.c:1024   Code: fa ff ff 48 8b 4c 24 18 80 e1 07 fe c1 38 c1 0f 8c 8e fa ff ff 48 8b 7c 24 18 e8 e0 db 54 f6 e9 7f fa ff ff e8 e6 80 ee f5 90 <0f> 0b 90 4c 8b 6c 24 40 4d 89 f4 e9 04 f5 ff ff 44 89 f1 80 e1 07   RSP: 0018:ffffc9000c0cf400 EFLAGS: 00010293   RAX: ffffffff8bb0dd5a RBX: ffff888033f5d230 RCX: ffff888059ce8000   RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000   RBP: ffffc9000c0cf518 R08: ffffffff8bb0d1dd R09: 1ffff110170c8928   R10: dffffc0000000000 R11: ffffed10170c8929 R12: 0000000000000000   R13: ffff888033f5d220 R14: dffffc0000000000 R15: ffff8880592b8000   FS:  00007f6e866496c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 00007f6e86f491a0 CR3: 00000000310e6000 CR4: 00000000003526f0   DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000   DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400   Call Trace:    <TASK>    __mptcp_clean_una_wakeup+0x7f/0x2d0 net/mptcp/protocol.c:1074    mptcp_release_cb+0x7cb/0xb30 net/mptcp/protocol.c:3493    release_sock+0x1aa/0x1f0 net/core/sock.c:3640    inet_wait_for_connect net/ipv4/af_inet.c:609 [inline]    __inet_stream_connect+0x8bd/0xf30 net/ipv4/af_inet.c:703    mptcp_sendmsg_fastopen+0x2a2/0x530 net/mptcp/protocol.c:1755    mptcp_sendmsg+0x1884/0x1b10 net/mptcp/protocol.c:1830    sock_sendmsg_nosec net/socket.c:711 [inline]    __sock_sendmsg+0x1a6/0x270 net/socket.c:726    ____sys_sendmsg+0x52a/0x7e0 net/socket.c:2583    ___sys_sendmsg net/socket.c:2637 [inline]    __sys_sendmsg+0x269/0x350 net/socket.c:2669    do_syscall_x64 arch/x86/entry/common.c:52 [inline]    do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83    entry_SYSCALL_64_after_hwframe+0x77/0x7f   RIP: 0033:0x7f6e86ebfe69   Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 b1 1f 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48   RSP: 002b:00007f6e86649168 EFLAGS: 00000246 ORIG_RAX: 000000000000002e   RAX: ffffffffffffffda RBX: 00007f6e86f491b8 RCX: 00007f6e86ebfe69   RDX: 0000000030004001 RSI: 0000000020000080 RDI: 0000000000000003   RBP: 00007f6e86f491b0 R08: 00007f6e866496c0 R09: 0000000000000000   R10: 0000000000000000 R11: 0000000000000246 R12: 00007f6e86f491bc   R13: 000000000000006e R14: 00007ffe445d9420 R15: 00007ffe445d9508    </TASK>  The root cause is the bad handling of disconnect() generated internally by the MPTCP protocol in case of connect FASTOPEN errors.  Address the issue increasing the socket disconnect counter even on such a case\, to allow other threads waiting on the same socket lock to properly error out.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53240,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  xen/netfront: fix crash when removing device  When removing a netfront device directly after a suspend/resume cycle it might happen that the queues have not been setup again\, causing a crash during the attempt to stop the queues another time.  Fix that by checking the queues are existing before trying to stop them.  This is XSA-465 / CVE-2024-53240.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2011-4116,perl-base,LOW,5.36.0-7+deb12u1,N/A,"_is_safe in the File::Temp module for Perl does not properly handle symlinks.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21706,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: pm: only set fullmesh for subflow endp  With the in-kernel path-manager\, it is possible to change the 'fullmesh' flag. The code in mptcp_pm_nl_fullmesh() expects to change it only on 'subflow' endpoints\, to recreate more or less subflows using the linked address.  Unfortunately\, the set_flags() hook was a bit more permissive\, and allowed 'implicit' endpoints to get the 'fullmesh' flag while it is not allowed before.  That's what syzbot found\, triggering the following warning:    WARNING: CPU: 0 PID: 6499 at net/mptcp/pm_netlink.c:1496 __mark_subflow_endp_available net/mptcp/pm_netlink.c:1496 [inline]   WARNING: CPU: 0 PID: 6499 at net/mptcp/pm_netlink.c:1496 mptcp_pm_nl_fullmesh net/mptcp/pm_netlink.c:1980 [inline]   WARNING: CPU: 0 PID: 6499 at net/mptcp/pm_netlink.c:1496 mptcp_nl_set_flags net/mptcp/pm_netlink.c:2003 [inline]   WARNING: CPU: 0 PID: 6499 at net/mptcp/pm_netlink.c:1496 mptcp_pm_nl_set_flags+0x974/0xdc0 net/mptcp/pm_netlink.c:2064   Modules linked in:   CPU: 0 UID: 0 PID: 6499 Comm: syz.1.413 Not tainted 6.13.0-rc5-syzkaller-00172-gd1bf27c4e176 #0   Hardware name: Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024   RIP: 0010:__mark_subflow_endp_available net/mptcp/pm_netlink.c:1496 [inline]   RIP: 0010:mptcp_pm_nl_fullmesh net/mptcp/pm_netlink.c:1980 [inline]   RIP: 0010:mptcp_nl_set_flags net/mptcp/pm_netlink.c:2003 [inline]   RIP: 0010:mptcp_pm_nl_set_flags+0x974/0xdc0 net/mptcp/pm_netlink.c:2064   Code: 01 00 00 49 89 c5 e8 fb 45 e8 f5 e9 b8 fc ff ff e8 f1 45 e8 f5 4c 89 f7 be 03 00 00 00 e8 44 1d 0b f9 eb a0 e8 dd 45 e8 f5 90 <0f> 0b 90 e9 17 ff ff ff 89 d9 80 e1 07 38 c1 0f 8c c9 fc ff ff 48   RSP: 0018:ffffc9000d307240 EFLAGS: 00010293   RAX: ffffffff8bb72e03 RBX: 0000000000000000 RCX: ffff88807da88000   RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000   RBP: ffffc9000d307430 R08: ffffffff8bb72cf0 R09: 1ffff1100b842a5e   R10: dffffc0000000000 R11: ffffed100b842a5f R12: ffff88801e2e5ac0   R13: ffff88805c214800 R14: ffff88805c2152e8 R15: 1ffff1100b842a5d   FS:  00005555619f6500(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 0000000020002840 CR3: 00000000247e6000 CR4: 00000000003526f0   DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000   DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400   Call Trace:    <TASK>    genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]    genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]    genl_rcv_msg+0xb14/0xec0 net/netlink/genetlink.c:1210    netlink_rcv_skb+0x1e3/0x430 net/netlink/af_netlink.c:2542    genl_rcv+0x28/0x40 net/netlink/genetlink.c:1219    netlink_unicast_kernel net/netlink/af_netlink.c:1321 [inline]    netlink_unicast+0x7f6/0x990 net/netlink/af_netlink.c:1347    netlink_sendmsg+0x8e4/0xcb0 net/netlink/af_netlink.c:1891    sock_sendmsg_nosec net/socket.c:711 [inline]    __sock_sendmsg+0x221/0x270 net/socket.c:726    ____sys_sendmsg+0x52a/0x7e0 net/socket.c:2583    ___sys_sendmsg net/socket.c:2637 [inline]    __sys_sendmsg+0x269/0x350 net/socket.c:2669    do_syscall_x64 arch/x86/entry/common.c:52 [inline]    do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83    entry_SYSCALL_64_after_hwframe+0x77/0x7f   RIP: 0033:0x7f5fe8785d29   Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48   RSP: 002b:00007fff571f5558 EFLAGS: 00000246 ORIG_RAX: 000000000000002e   RAX: ffffffffffffffda RBX: 00007f5fe8975fa0 RCX: 00007f5fe8785d29   RDX: 0000000000000000 RSI: 0000000020000480 RDI: 0000000000000007   RBP: 00007f5fe8801b08 R08: 0000000000000000 R09: 0000000000000000   R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000   R13: 00007f5fe8975fa0 R14: 00007f5fe8975fa0 R15: 000000 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21707,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: consolidate suboption status  MPTCP maintains the received sub-options status is the bitmask carrying the received suboptions and in several bitfields carrying per suboption additional info.  Zeroing the bitmask before parsing is not enough to ensure a consistent status\, and the MPTCP code has to additionally clear some bitfiled depending on the actually parsed suboption.  The above schema is fragile\, and syzbot managed to trigger a path where a relevant bitfield is not cleared/initialized:    BUG: KMSAN: uninit-value in __mptcp_expand_seq net/mptcp/options.c:1030 [inline]   BUG: KMSAN: uninit-value in mptcp_expand_seq net/mptcp/protocol.h:864 [inline]   BUG: KMSAN: uninit-value in ack_update_msk net/mptcp/options.c:1060 [inline]   BUG: KMSAN: uninit-value in mptcp_incoming_options+0x2036/0x3d30 net/mptcp/options.c:1209    __mptcp_expand_seq net/mptcp/options.c:1030 [inline]    mptcp_expand_seq net/mptcp/protocol.h:864 [inline]    ack_update_msk net/mptcp/options.c:1060 [inline]    mptcp_incoming_options+0x2036/0x3d30 net/mptcp/options.c:1209    tcp_data_queue+0xb4/0x7be0 net/ipv4/tcp_input.c:5233    tcp_rcv_established+0x1061/0x2510 net/ipv4/tcp_input.c:6264    tcp_v4_do_rcv+0x7f3/0x11a0 net/ipv4/tcp_ipv4.c:1916    tcp_v4_rcv+0x51df/0x5750 net/ipv4/tcp_ipv4.c:2351    ip_protocol_deliver_rcu+0x2a3/0x13d0 net/ipv4/ip_input.c:205    ip_local_deliver_finish+0x336/0x500 net/ipv4/ip_input.c:233    NF_HOOK include/linux/netfilter.h:314 [inline]    ip_local_deliver+0x21f/0x490 net/ipv4/ip_input.c:254    dst_input include/net/dst.h:460 [inline]    ip_rcv_finish+0x4a2/0x520 net/ipv4/ip_input.c:447    NF_HOOK include/linux/netfilter.h:314 [inline]    ip_rcv+0xcd/0x380 net/ipv4/ip_input.c:567    __netif_receive_skb_one_core net/core/dev.c:5704 [inline]    __netif_receive_skb+0x319/0xa00 net/core/dev.c:5817    process_backlog+0x4ad/0xa50 net/core/dev.c:6149    __napi_poll+0xe7/0x980 net/core/dev.c:6902    napi_poll net/core/dev.c:6971 [inline]    net_rx_action+0xa5a/0x19b0 net/core/dev.c:7093    handle_softirqs+0x1a0/0x7c0 kernel/softirq.c:561    __do_softirq+0x14/0x1a kernel/softirq.c:595    do_softirq+0x9a/0x100 kernel/softirq.c:462    __local_bh_enable_ip+0x9f/0xb0 kernel/softirq.c:389    local_bh_enable include/linux/bottom_half.h:33 [inline]    rcu_read_unlock_bh include/linux/rcupdate.h:919 [inline]    __dev_queue_xmit+0x2758/0x57d0 net/core/dev.c:4493    dev_queue_xmit include/linux/netdevice.h:3168 [inline]    neigh_hh_output include/net/neighbour.h:523 [inline]    neigh_output include/net/neighbour.h:537 [inline]    ip_finish_output2+0x187c/0x1b70 net/ipv4/ip_output.c:236    __ip_finish_output+0x287/0x810    ip_finish_output+0x4b/0x600 net/ipv4/ip_output.c:324    NF_HOOK_COND include/linux/netfilter.h:303 [inline]    ip_output+0x15f/0x3f0 net/ipv4/ip_output.c:434    dst_output include/net/dst.h:450 [inline]    ip_local_out net/ipv4/ip_output.c:130 [inline]    __ip_queue_xmit+0x1f2a/0x20d0 net/ipv4/ip_output.c:536    ip_queue_xmit+0x60/0x80 net/ipv4/ip_output.c:550    __tcp_transmit_skb+0x3cea/0x4900 net/ipv4/tcp_output.c:1468    tcp_transmit_skb net/ipv4/tcp_output.c:1486 [inline]    tcp_write_xmit+0x3b90/0x9070 net/ipv4/tcp_output.c:2829    __tcp_push_pending_frames+0xc4/0x380 net/ipv4/tcp_output.c:3012    tcp_send_fin+0x9f6/0xf50 net/ipv4/tcp_output.c:3618    __tcp_close+0x140c/0x1550 net/ipv4/tcp.c:3130    __mptcp_close_ssk+0x74e/0x16f0 net/mptcp/protocol.c:2496    mptcp_close_ssk+0x26b/0x2c0 net/mptcp/protocol.c:2550    mptcp_pm_nl_rm_addr_or_subflow+0x635/0xd10 net/mptcp/pm_netlink.c:889    mptcp_pm_nl_rm_subflow_received net/mptcp/pm_netlink.c:924 [inline]    mptcp_pm_flush_addrs_and_subflows net/mptcp/pm_netlink.c:1688 [inline]    mptcp_nl_flush_addrs_list net/mptcp/pm_netlink.c:1709 [inline]    mptcp_pm_nl_flush_addrs_doit+0xe10/0x1630 net/mptcp/pm_netlink.c:1750    genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]   ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42118,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Do not return negative stream id for array  [WHY] resource_stream_to_stream_idx returns an array index and it return -1 when not found; however\, -1 is not a valid array index number.  [HOW] When this happens\, call ASSERT()\, and return a zero instead.  This fixes an OVERRUN and an NEGATIVE_RETURNS issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-50495,libtinfo6,MEDIUM,6.4-4,N/A,"NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21700,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: sched: Disallow replacing of child qdisc from one parent to another  Lion Ackermann was able to create a UAF which can be abused for privilege escalation with the following script  Step 1. create root qdisc tc qdisc add dev lo root handle 1:0 drr  step2. a class for packet aggregation do demonstrate uaf tc class add dev lo classid 1:1 drr  step3. a class for nesting tc class add dev lo classid 1:2 drr  step4. a class to graft qdisc to tc class add dev lo classid 1:3 drr  step5. tc qdisc add dev lo parent 1:1 handle 2:0 plug limit 1024  step6. tc qdisc add dev lo parent 1:2 handle 3:0 drr  step7. tc class add dev lo classid 3:1 drr  step 8. tc qdisc add dev lo parent 3:1 handle 4:0 pfifo  step 9. Display the class/qdisc layout  tc class ls dev lo  class drr 1:1 root leaf 2: quantum 64Kb  class drr 1:2 root leaf 3: quantum 64Kb  class drr 3:1 root leaf 4: quantum 64Kb  tc qdisc ls  qdisc drr 1: dev lo root refcnt 2  qdisc plug 2: dev lo parent 1:1  qdisc pfifo 4: dev lo parent 3:1 limit 1000p  qdisc drr 3: dev lo parent 1:2  step10. trigger the bug <=== prevented by this patch tc qdisc replace dev lo parent 1:3 handle 4:0  step 11. Redisplay again the qdiscs/classes  tc class ls dev lo  class drr 1:1 root leaf 2: quantum 64Kb  class drr 1:2 root leaf 3: quantum 64Kb  class drr 1:3 root leaf 4: quantum 64Kb  class drr 3:1 root leaf 4: quantum 64Kb  tc qdisc ls  qdisc drr 1: dev lo root refcnt 2  qdisc plug 2: dev lo parent 1:1  qdisc pfifo 4: dev lo parent 3:1 refcnt 2 limit 1000p  qdisc drr 3: dev lo parent 1:2  Observe that a) parent for 4:0 does not change despite the replace request. There can only be one parent.  b) refcount has gone up by two for 4:0 and c) both class 1:3 and 3:1 are pointing to it.  Step 12.  send one packet to plug echo """" | socat -u STDIN UDP4-DATAGRAM:127.0.0.1:8888\,priority=$((0x10001)) step13.  send one packet to the grafted fifo echo """" | socat -u STDIN UDP4-DATAGRAM:127.0.0.1:8888\,priority=$((0x10003))  step14. lets trigger the uaf tc class delete dev lo classid 1:3 tc class delete dev lo classid 1:1  The semantics of ""replace"" is for a del/add _on the same node_ and not a delete from one node(3:1) and add to another node (1:3) as in step10. While we could ""fix"" with a more complex approach there could be consequences to expectations so the patch takes the preventive approach of ""disallow such config"".  Joint work with Lion Ackermann <nnamrec@gmail.com>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21701,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: avoid race between device unregistration and ethnl ops  The following trace can be seen if a device is being unregistered while its number of channels are being modified.    DEBUG_LOCKS_WARN_ON(lock->magic != lock)   WARNING: CPU: 3 PID: 3754 at kernel/locking/mutex.c:564 __mutex_lock+0xc8a/0x1120   CPU: 3 UID: 0 PID: 3754 Comm: ethtool Not tainted 6.13.0-rc6+ #771   RIP: 0010:__mutex_lock+0xc8a/0x1120   Call Trace:    <TASK>    ethtool_check_max_channel+0x1ea/0x880    ethnl_set_channels+0x3c3/0xb10    ethnl_default_set_doit+0x306/0x650    genl_family_rcv_msg_doit+0x1e3/0x2c0    genl_rcv_msg+0x432/0x6f0    netlink_rcv_skb+0x13d/0x3b0    genl_rcv+0x28/0x40    netlink_unicast+0x42e/0x720    netlink_sendmsg+0x765/0xc20    __sys_sendto+0x3ac/0x420    __x64_sys_sendto+0xe0/0x1c0    do_syscall_64+0x95/0x180    entry_SYSCALL_64_after_hwframe+0x76/0x7e  This is because unregister_netdevice_many_notify might run before the rtnl lock section of ethnl operations\, eg. set_channels in the above example. In this example the rss lock would be destroyed by the device unregistration path before being used again\, but in general running ethnl operations while dismantle has started is not a good idea.  Fix this by denying any operation on devices being unregistered. A check was already there in ethnl_ops_begin\, but not wide enough.  Note that the same issue cannot be seen on the ioctl version (__dev_ethtool) because the device reference is retrieved from within the rtnl lock section there. Once dismantle started\, the net device is unlisted and no reference will be found.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21702,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  pfifo_tail_enqueue: Drop new packet when sch->limit == 0  Expected behaviour: In case we reach scheduler's limit\, pfifo_tail_enqueue() will drop a packet in scheduler's queue and decrease scheduler's qlen by one. Then\, pfifo_tail_enqueue() enqueue new packet and increase scheduler's qlen by one. Finally\, pfifo_tail_enqueue() return `NET_XMIT_CN` status code.  Weird behaviour: In case we set `sch->limit == 0` and trigger pfifo_tail_enqueue() on a scheduler that has no packet\, the 'drop a packet' step will do nothing. This means the scheduler's qlen still has value equal 0. Then\, we continue to enqueue new packet and increase scheduler's qlen by one. In summary\, we can leverage pfifo_tail_enqueue() to increase qlen by one and return `NET_XMIT_CN` status code.  The problem is: Let's say we have two qdiscs: Qdisc_A and Qdisc_B.  - Qdisc_A's type must have '->graft()' function to create parent/child relationship.    Let's say Qdisc_A's type is `hfsc`. Enqueue packet to this qdisc will trigger `hfsc_enqueue`.  - Qdisc_B's type is pfifo_head_drop. Enqueue packet to this qdisc will trigger `pfifo_tail_enqueue`.  - Qdisc_B is configured to have `sch->limit == 0`.  - Qdisc_A is configured to route the enqueued's packet to Qdisc_B.  Enqueue packet through Qdisc_A will lead to:  - hfsc_enqueue(Qdisc_A) -> pfifo_tail_enqueue(Qdisc_B)  - Qdisc_B->q.qlen += 1  - pfifo_tail_enqueue() return `NET_XMIT_CN`  - hfsc_enqueue() check for `NET_XMIT_SUCCESS` and see `NET_XMIT_CN` => hfsc_enqueue() don't increase qlen of Qdisc_A.  The whole process lead to a situation where Qdisc_A->q.qlen == 0 and Qdisc_B->q.qlen == 1. Replace 'hfsc' with other type (for example: 'drr') still lead to the same problem. This violate the design where parent's qlen should equal to the sum of its childrens'qlen.  Bug impact: This issue can be used for user->kernel privilege escalation when it is reachable.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21703,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  netem: Update sch->q.qlen before qdisc_tree_reduce_backlog()  qdisc_tree_reduce_backlog() notifies parent qdisc only if child qdisc becomes empty\, therefore we need to reduce the backlog of the child qdisc before calling it. Otherwise it would miss the opportunity to call cops->qlen_notify()\, in the case of DRR\, it resulted in UAF since DRR uses ->qlen_notify() to maintain its active list.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46751,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: don't BUG_ON() when 0 reference count at btrfs_lookup_extent_info()  Instead of doing a BUG_ON() handle the error by returning -EUCLEAN\, aborting the transaction and logging an error message.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26902,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  perf: RISCV: Fix panic on pmu overflow handler  (1 << idx) of int is not desired when setting bits in unsigned long overflowed_ctrs\, use BIT() instead. This panic happens when running 'perf record -e branches' on sophgo sg2042.  [  273.311852] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000098 [  273.320851] Oops [#1] [  273.323179] Modules linked in: [  273.326303] CPU: 0 PID: 1475 Comm: perf Not tainted 6.6.0-rc3+ #9 [  273.332521] Hardware name: Sophgo Mango (DT) [  273.336878] epc : riscv_pmu_ctr_get_width_mask+0x8/0x62 [  273.342291]  ra : pmu_sbi_ovf_handler+0x2e0/0x34e [  273.347091] epc : ffffffff80aecd98 ra : ffffffff80aee056 sp : fffffff6e36928b0 [  273.354454]  gp : ffffffff821f82d0 tp : ffffffd90c353200 t0 : 0000002ade4f9978 [  273.361815]  t1 : 0000000000504d55 t2 : ffffffff8016cd8c s0 : fffffff6e3692a70 [  273.369180]  s1 : 0000000000000020 a0 : 0000000000000000 a1 : 00001a8e81800000 [  273.376540]  a2 : 0000003c00070198 a3 : 0000003c00db75a4 a4 : 0000000000000015 [  273.383901]  a5 : ffffffd7ff8804b0 a6 : 0000000000000015 a7 : 000000000000002a [  273.391327]  s2 : 000000000000ffff s3 : 0000000000000000 s4 : ffffffd7ff8803b0 [  273.398773]  s5 : 0000000000504d55 s6 : ffffffd905069800 s7 : ffffffff821fe210 [  273.406139]  s8 : 000000007fffffff s9 : ffffffd7ff8803b0 s10: ffffffd903f29098 [  273.413660]  s11: 0000000080000000 t3 : 0000000000000003 t4 : ffffffff8017a0ca [  273.421022]  t5 : ffffffff8023cfc2 t6 : ffffffd9040780e8 [  273.426437] status: 0000000200000100 badaddr: 0000000000000098 cause: 000000000000000d [  273.434512] [<ffffffff80aecd98>] riscv_pmu_ctr_get_width_mask+0x8/0x62 [  273.441169] [<ffffffff80076bd8>] handle_percpu_devid_irq+0x98/0x1ee [  273.447562] [<ffffffff80071158>] generic_handle_domain_irq+0x28/0x36 [  273.454151] [<ffffffff8047a99a>] riscv_intc_irq+0x36/0x4e [  273.459659] [<ffffffff80c944de>] handle_riscv_irq+0x4a/0x74 [  273.465442] [<ffffffff80c94c48>] do_irq+0x62/0x92 [  273.470360] Code: 0420 60a2 6402 5529 0141 8082 0013 0000 0013 0000 (6d5c) b783 [  273.477921] ---[ end trace 0000000000000000 ]--- [  273.482630] Kernel panic - not syncing: Fatal exception in interrupt",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49989,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: fix double free issue during amdgpu module unload  Flexible endpoints use DIGs from available inflexible endpoints\, so only the encoders of inflexible links need to be freed. Otherwise\, a double free issue may occur when unloading the amdgpu module.  [  279.190523] RIP: 0010:__slab_free+0x152/0x2f0 [  279.190577] Call Trace: [  279.190580]  <TASK> [  279.190582]  ? show_regs+0x69/0x80 [  279.190590]  ? die+0x3b/0x90 [  279.190595]  ? do_trap+0xc8/0xe0 [  279.190601]  ? do_error_trap+0x73/0xa0 [  279.190605]  ? __slab_free+0x152/0x2f0 [  279.190609]  ? exc_invalid_op+0x56/0x70 [  279.190616]  ? __slab_free+0x152/0x2f0 [  279.190642]  ? asm_exc_invalid_op+0x1f/0x30 [  279.190648]  ? dcn10_link_encoder_destroy+0x19/0x30 [amdgpu] [  279.191096]  ? __slab_free+0x152/0x2f0 [  279.191102]  ? dcn10_link_encoder_destroy+0x19/0x30 [amdgpu] [  279.191469]  kfree+0x260/0x2b0 [  279.191474]  dcn10_link_encoder_destroy+0x19/0x30 [amdgpu] [  279.191821]  link_destroy+0xd7/0x130 [amdgpu] [  279.192248]  dc_destruct+0x90/0x270 [amdgpu] [  279.192666]  dc_destroy+0x19/0x40 [amdgpu] [  279.193020]  amdgpu_dm_fini+0x16e/0x200 [amdgpu] [  279.193432]  dm_hw_fini+0x26/0x40 [amdgpu] [  279.193795]  amdgpu_device_fini_hw+0x24c/0x400 [amdgpu] [  279.194108]  amdgpu_driver_unload_kms+0x4f/0x70 [amdgpu] [  279.194436]  amdgpu_pci_remove+0x40/0x80 [amdgpu] [  279.194632]  pci_device_remove+0x3a/0xa0 [  279.194638]  device_remove+0x40/0x70 [  279.194642]  device_release_driver_internal+0x1ad/0x210 [  279.194647]  driver_detach+0x4e/0xa0 [  279.194650]  bus_remove_driver+0x6f/0xf0 [  279.194653]  driver_unregister+0x33/0x60 [  279.194657]  pci_unregister_driver+0x44/0x90 [  279.194662]  amdgpu_exit+0x19/0x1f0 [amdgpu] [  279.194939]  __do_sys_delete_module.isra.0+0x198/0x2f0 [  279.194946]  __x64_sys_delete_module+0x16/0x20 [  279.194950]  do_syscall_64+0x58/0x120 [  279.194954]  entry_SYSCALL_64_after_hwframe+0x6e/0x76 [  279.194980]  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49988,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: add refcnt to ksmbd_conn struct  When sending an oplock break request\, opinfo->conn is used\, But freed ->conn can be used on multichannel. This patch add a reference count to the ksmbd_conn struct so that it can be freed when it is no longer used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-9117,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"In LibTIFF 4.0.6 and possibly other versions\, the program processes BMP images without verifying that biWidth and biHeight in the bitmap-information header match the actual input\, as demonstrated by a heap-based buffer over-read in bmp2tiff. NOTE: mentioning bmp2tiff does not imply that the activation point is in the bmp2tiff.c file (which was removed before the 4.0.7 release).",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22048,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: BPF: Don't override subprog's return value  The verifier test `calls: div by 0 in subprog` triggers a panic at the ld.bu instruction. The ld.bu insn is trying to load byte from memory address returned by the subprog. The subprog actually set the correct address at the a5 register (dedicated register for BPF return values). But at commit 73c359d1d356 (""LoongArch: BPF: Sign-extend return values"") we also sign extended a5 to the a0 register (return value in LoongArch). For function call insn\, we later propagate the a0 register back to a5 register. This is right for native calls but wrong for bpf2bpf calls which expect zero-extended return value in a5 register. So only move a0 to a5 for native calls (i.e. non-BPF_PSEUDO_CALL).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46753,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: handle errors from btrfs_dec_ref() properly  In walk_up_proc() we BUG_ON(ret) from btrfs_dec_ref().  This is incorrect\, we have proper error handling here\, return the error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52658,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Revert ""net/mlx5: Block entering switchdev mode with ns inconsistency""  This reverts commit 662404b24a4c4d839839ed25e3097571f5938b9b. The revert is required due to the suspicion it is not good for anything and cause crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22049,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Increase ARCH_DMA_MINALIGN up to 16  ARCH_DMA_MINALIGN is 1 by default\, but some LoongArch-specific devices (such as APBDMA) require 16 bytes alignment. When the data buffer length is too small\, the hardware may make an error writing cacheline. Thus\, it is dangerous to allocate a small memory buffer for DMA. It's always safe to define ARCH_DMA_MINALIGN as L1_CACHE_BYTES but unnecessary (kmalloc() need small memory objects). Therefore\, just increase it to 16.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-2953,libldap-2.5-0,HIGH,2.5.13+dfsg-5,N/A,"A vulnerability was found in openldap. This security flaw causes a null pointer dereference in ber_memalloc_x() function.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-40014,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  objtool\, spi: amd: Fix out-of-bounds stack access in amd_set_spi_freq()  If speed_hz < AMD_SPI_MIN_HZ\, amd_set_spi_freq() iterates over the entire amd_spi_freq array without breaking out early\, causing 'i' to go beyond the array bounds.  Fix that by stopping the loop when it gets to the last entry\, so the low speed_hz value gets clamped up to AMD_SPI_MIN_HZ.  Fixes the following warning with an UBSAN kernel:    drivers/spi/spi-amd.o: error: objtool: amd_set_spi_freq() falls through to next function amd_spi_set_opcode()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46754,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Remove tst_run from lwt_seg6local_prog_ops.  The syzbot reported that the lwt_seg6 related BPF ops can be invoked via bpf_test_run() without without entering input_action_end_bpf() first.  Martin KaFai Lau said that self test for BPF_PROG_TYPE_LWT_SEG6LOCAL probably didn't work since it was introduced in commit 04d4b274e2a (""ipv6: sr: Add seg6local action End.BPF""). The reason is that the per-CPU variable seg6_bpf_srh_states::srh is never assigned in the self test case but each BPF function expects it.  Remove test_run for BPF_PROG_TYPE_LWT_SEG6LOCAL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35929,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rcu/nocb: Fix WARN_ON_ONCE() in the rcu_nocb_bypass_lock()  For the kernels built with CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y and CONFIG_RCU_LAZY=y\, the following scenarios will trigger WARN_ON_ONCE() in the rcu_nocb_bypass_lock() and rcu_nocb_wait_contended() functions:          CPU2                                               CPU11 kthread rcu_nocb_cb_kthread                                       ksys_write rcu_do_batch                                              vfs_write rcu_torture_timer_cb                                      proc_sys_write __kmem_cache_free                                         proc_sys_call_handler kmemleak_free                                             drop_caches_sysctl_handler delete_object_full                                        drop_slab __delete_object                                           shrink_slab put_object                                                lazy_rcu_shrink_scan call_rcu                                                  rcu_nocb_flush_bypass __call_rcu_commn                                            rcu_nocb_bypass_lock                                                             raw_spin_trylock(&rdp->nocb_bypass_lock) fail                                                             atomic_inc(&rdp->nocb_lock_contended); rcu_nocb_wait_contended                                     WARN_ON_ONCE(smp_processor_id() != rdp->cpu);  WARN_ON_ONCE(atomic_read(&rdp->nocb_lock_contended))                                          |                             |_ _ _ _ _ _ _ _ _ _same rdp and rdp->cpu != 11_ _ _ _ _ _ _ _ _ __|  Reproduce this bug with ""echo 3 > /proc/sys/vm/drop_caches"".  This commit therefore uses rcu_nocb_try_flush_bypass() instead of rcu_nocb_flush_bypass() in lazy_rcu_shrink_scan().  If the nocb_bypass queue is being flushed\, then rcu_nocb_try_flush_bypass will return directly.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47691,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to avoid use-after-free in f2fs_stop_gc_thread()  syzbot reports a f2fs bug as below:   __dump_stack lib/dump_stack.c:88 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114  print_report+0xe8/0x550 mm/kasan/report.c:491  kasan_report+0x143/0x180 mm/kasan/report.c:601  kasan_check_range+0x282/0x290 mm/kasan/generic.c:189  instrument_atomic_read_write include/linux/instrumented.h:96 [inline]  atomic_fetch_add_relaxed include/linux/atomic/atomic-instrumented.h:252 [inline]  __refcount_add include/linux/refcount.h:184 [inline]  __refcount_inc include/linux/refcount.h:241 [inline]  refcount_inc include/linux/refcount.h:258 [inline]  get_task_struct include/linux/sched/task.h:118 [inline]  kthread_stop+0xca/0x630 kernel/kthread.c:704  f2fs_stop_gc_thread+0x65/0xb0 fs/f2fs/gc.c:210  f2fs_do_shutdown+0x192/0x540 fs/f2fs/file.c:2283  f2fs_ioc_shutdown fs/f2fs/file.c:2325 [inline]  __f2fs_ioctl+0x443a/0xbe60 fs/f2fs/file.c:4325  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:907 [inline]  __se_sys_ioctl+0xfc/0x170 fs/ioctl.c:893  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  The root cause is below race condition\, it may cause use-after-free issue in sbi->gc_th pointer.  - remount  - f2fs_remount   - f2fs_stop_gc_thread    - kfree(gc_th) \t\t\t\t- f2fs_ioc_shutdown \t\t\t\t - f2fs_do_shutdown \t\t\t\t  - f2fs_stop_gc_thread \t\t\t\t   - kthread_stop(gc_th->f2fs_gc_task)    : sbi->gc_thread = NULL;  We will call f2fs_do_shutdown() in two paths: - for f2fs_ioc_shutdown() path\, we should grab sb->s_umount semaphore for fixing. - for f2fs_shutdown() path\, it's safe since caller has already grabbed sb->s_umount semaphore.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22042,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: add bounds check for create lease context  Add missing bounds check for create lease context.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35924,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: ucsi: Limit read size on v1.2  Between UCSI 1.2 and UCSI 2.0\, the size of the MESSAGE_IN region was increased from 16 to 256. In order to avoid overflowing reads for older systems\, add a mechanism to use the read UCSI version to truncate read sizes on UCSI v1.2.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22043,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: add bounds check for durable handle context  Add missing bounds check for durable handle context.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52653,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  SUNRPC: fix a memleak in gss_import_v2_context  The ctx->mech_used.data allocated by kmemdup is not freed in neither gss_import_v2_context nor it only caller gss_krb5_import_sec_context\, which frees ctx on error.  Thus\, this patch reform the last call of gss_import_v2_context to the gss_krb5_import_ctx_v2\, preventing the memleak while keepping the return formation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-26966,libtiff6,MEDIUM,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"libtiff 4.5.0 is vulnerable to Buffer Overflow in uv_encode() when libtiff reads a corrupted little-endian TIFF file and specifies the output to be big-endian.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22040,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix session use-after-free in multichannel connection  There is a race condition between session setup and ksmbd_sessions_deregister. The session can be freed before the connection is added to channel list of session. This patch check reference count of session before freeing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-26965,libtiff6,MEDIUM,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"loadImage() in tools/tiffcrop.c in LibTIFF through 4.5.0 has a heap-based use after free via a crafted TIFF image.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-6879,libaom3,CRITICAL,3.6.0-1+deb12u1,N/A,"Increasing the resolution of video frames\, while performing a multi-threaded encode\, can result in a heap overflow in av1_loop_restoration_dealloc().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22041,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix use-after-free in ksmbd_sessions_deregister()  In multichannel mode\, UAF issue can occur in session_deregister when the second channel sets up a session through the connection of the first channel. session that is freed through the global session table can be accessed again through ->sessions of connection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22044,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  acpi: nfit: fix narrowing conversion in acpi_nfit_ctl  Syzkaller has reported a warning in to_nfit_bus_uuid(): ""only secondary bus families can be translated"". This warning is emited if the argument is equal to NVDIMM_BUS_FAMILY_NFIT == 0. Function acpi_nfit_ctl() first verifies that a user-provided value call_pkg->nd_family of type u64 is not equal to 0. Then the value is converted to int\, and only after that is compared to NVDIMM_BUS_FAMILY_MAX. This can lead to passing an invalid argument to acpi_nfit_ctl()\, if call_pkg->nd_family is non-zero\, while the lower 32 bits are zero.  Furthermore\, it is best to return EINVAL immediately upon seeing the invalid user input.  The WARNING is insufficient to prevent further undefined behavior based on other invalid user input.  All checks of the input value should be applied to the original variable call_pkg->nd_family.  [iweiny: update commit message]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49987,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpftool: Fix undefined behavior in qsort(NULL\, 0\, ...)  When netfilter has no entry to display\, qsort is called with qsort(NULL\, 0\, ...). This results in undefined behavior\, as UBSan reports:  net.c:827:2: runtime error: null pointer passed as argument 1\, which is declared to never be null  Although the C standard does not explicitly state whether calling qsort with a NULL pointer when the size is 0 constitutes undefined behavior\, Section 7.1.4 of the C standard (Use of library functions) mentions:  ""Each of the following statements applies unless explicitly stated otherwise in the detailed descriptions that follow: If an argument to a function has an invalid value (such as a value outside the domain of the function\, or a pointer outside the address space of the program\, or a null pointer\, or a pointer to non-modifiable storage when the corresponding parameter is not const-qualified) or a type (after promotion) not expected by a function with variable number of arguments\, the behavior is undefined.""  To avoid this\, add an early return when nf_link_info is NULL to prevent calling qsort with a NULL pointer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22045,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/mm: Fix flush_tlb_range() when used for zapping normal PMDs  On the following path\, flush_tlb_range() can be used for zapping normal PMD entries (PMD entries that point to page tables) together with the PTE entries in the pointed-to page table:      collapse_pte_mapped_thp       pmdp_collapse_flush         flush_tlb_range  The arm64 version of flush_tlb_range() has a comment describing that it can be used for page table removal\, and does not use any last-level invalidation optimizations. Fix the X86 version by making it behave the same way.  Currently\, X86 only uses this information for the following two purposes\, which I think means the issue doesn't have much impact:   - In native_flush_tlb_multi() for checking if lazy TLB CPUs need to be    IPI'd to avoid issues with speculative page table walks.  - In Hyper-V TLB paravirtualization\, again for lazy TLB stuff.  The patch ""x86/mm: only invalidate final translations with INVLPGB"" which is currently under review (see <https://lore.kernel.org/all/20241230175550.4046587-13-riel@surriel.com/>) would probably be making the impact of this a lot worse.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49986,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86: x86-android-tablets: Fix use after free on platform_device_register() errors  x86_android_tablet_remove() frees the pdevs[] array\, so it should not be used after calling x86_android_tablet_remove().  When platform_device_register() fails\, store the pdevs[x] PTR_ERR() value into the local ret variable before calling x86_android_tablet_remove() to avoid using pdevs[] after it has been freed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57872,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: pltfrm: Dellocate HBA during ufshcd_pltfrm_remove()  This will ensure that the scsi host is cleaned up properly using scsi_host_dev_release(). Otherwise\, it may lead to memory leaks.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56585,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Fix sleeping in atomic context for PREEMPT_RT  Commit bab1c299f3945ffe79 (""LoongArch: Fix sleeping in atomic context in setup_tlb_handler()"") changes the gfp flag from GFP_KERNEL to GFP_ATOMIC for alloc_pages_node(). However\, for PREEMPT_RT kernels we can still get a ""sleeping in atomic context"" error:  [    0.372259] BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:48 [    0.372266] in_atomic(): 1\, irqs_disabled(): 1\, non_block: 0\, pid: 0\, name: swapper/1 [    0.372268] preempt_count: 1\, expected: 0 [    0.372270] RCU nest depth: 1\, expected: 1 [    0.372272] 3 locks held by swapper/1/0: [    0.372274]  #0: 900000000c9f5e60 (&pcp->lock){+.+.}-{3:3}\, at: get_page_from_freelist+0x524/0x1c60 [    0.372294]  #1: 90000000087013b8 (rcu_read_lock){....}-{1:3}\, at: rt_spin_trylock+0x50/0x140 [    0.372305]  #2: 900000047fffd388 (&zone->lock){+.+.}-{3:3}\, at: __rmqueue_pcplist+0x30c/0xea0 [    0.372314] irq event stamp: 0 [    0.372316] hardirqs last  enabled at (0): [<0000000000000000>] 0x0 [    0.372322] hardirqs last disabled at (0): [<9000000005947320>] copy_process+0x9c0/0x26e0 [    0.372329] softirqs last  enabled at (0): [<9000000005947320>] copy_process+0x9c0/0x26e0 [    0.372335] softirqs last disabled at (0): [<0000000000000000>] 0x0 [    0.372341] CPU: 1 UID: 0 PID: 0 Comm: swapper/1 Not tainted 6.12.0-rc7+ #1891 [    0.372346] Hardware name: Loongson Loongson-3A5000-7A1000-1w-CRB/Loongson-LS3A5000-7A1000-1w-CRB\, BIOS vUDK2018-LoongArch-V2.0.0-prebeta9 10/21/2022 [    0.372349] Stack : 0000000000000089 9000000005a0db9c 90000000071519c8 9000000100388000 [    0.372486]         900000010038b890 0000000000000000 900000010038b898 9000000007e53788 [    0.372492]         900000000815bcc8 900000000815bcc0 900000010038b700 0000000000000001 [    0.372498]         0000000000000001 4b031894b9d6b725 00000000055ec000 9000000100338fc0 [    0.372503]         00000000000000c4 0000000000000001 000000000000002d 0000000000000003 [    0.372509]         0000000000000030 0000000000000003 00000000055ec000 0000000000000003 [    0.372515]         900000000806d000 9000000007e53788 00000000000000b0 0000000000000004 [    0.372521]         0000000000000000 0000000000000000 900000000c9f5f10 0000000000000000 [    0.372526]         90000000076f12d8 9000000007e53788 9000000005924778 0000000000000000 [    0.372532]         00000000000000b0 0000000000000004 0000000000000000 0000000000070000 [    0.372537]         ... [    0.372540] Call Trace: [    0.372542] [<9000000005924778>] show_stack+0x38/0x180 [    0.372548] [<90000000071519c4>] dump_stack_lvl+0x94/0xe4 [    0.372555] [<900000000599b880>] __might_resched+0x1a0/0x260 [    0.372561] [<90000000071675cc>] rt_spin_lock+0x4c/0x140 [    0.372565] [<9000000005cbb768>] __rmqueue_pcplist+0x308/0xea0 [    0.372570] [<9000000005cbed84>] get_page_from_freelist+0x564/0x1c60 [    0.372575] [<9000000005cc0d98>] __alloc_pages_noprof+0x218/0x1820 [    0.372580] [<900000000593b36c>] tlb_init+0x1ac/0x298 [    0.372585] [<9000000005924b74>] per_cpu_trap_init+0x114/0x140 [    0.372589] [<9000000005921964>] cpu_probe+0x4e4/0xa60 [    0.372592] [<9000000005934874>] start_secondary+0x34/0xc0 [    0.372599] [<900000000715615c>] smpboot_entry+0x64/0x6c  This is because in PREEMPT_RT kernels normal spinlocks are replaced by rt spinlocks and rt_spin_lock() will cause sleeping. Fix it by disabling NUMA optimization completely for PREEMPT_RT kernels.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56584,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring/tctx: work around xa_store() allocation error issue  syzbot triggered the following WARN_ON:  WARNING: CPU: 0 PID: 16 at io_uring/tctx.c:51 __io_uring_free+0xfa/0x140 io_uring/tctx.c:51  which is the  WARN_ON_ONCE(!xa_empty(&tctx->xa));  sanity check in __io_uring_free() when a io_uring_task is going through its final put. The syzbot test case includes injecting memory allocation failures\, and it very much looks like xa_store() can fail one of its memory allocations and end up with ->head being non-NULL even though no entries exist in the xarray.  Until this issue gets sorted out\, work around it by attempting to iterate entries in our xarray\, and WARN_ON_ONCE() if one is found.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50061,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  i3c: master: cdns: Fix use after free vulnerability in cdns_i3c_master Driver Due to Race Condition  In the cdns_i3c_master_probe function\, &master->hj_work is bound with cdns_i3c_master_hj. And cdns_i3c_master_interrupt can call cnds_i3c_master_demux_ibis function to start the work.  If we remove the module which will call cdns_i3c_master_remove to make cleanup\, it will free master->base through i3c_master_unregister while the work mentioned above will be used. The sequence of operations that may lead to a UAF bug is as follows:  CPU0                                      CPU1                                       | cdns_i3c_master_hj cdns_i3c_master_remove               | i3c_master_unregister(&master->base) | device_unregister(&master->dev)      | device_release                       | //free master->base                  |                                      | i3c_master_do_daa(&master->base)                                      | //use master->base  Fix it by ensuring that the work is canceled before proceeding with the cleanup in cdns_i3c_master_remove.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56587,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  leds: class: Protect brightness_show() with led_cdev->led_access mutex  There is NULL pointer issue observed if from Process A where hid device being added which results in adding a led_cdev addition and later a another call to access of led_cdev attribute from Process B can result in NULL pointer issue.  Use mutex led_cdev->led_access to protect access to led->cdev and its attribute inside brightness_show() and max_brightness_show() and also update the comment for mutex that it should be used to protect the led class device fields.  \tProcess A \t\t\t\tProcess B   kthread+0x114  worker_thread+0x244  process_scheduled_works+0x248  uhid_device_add_worker+0x24  hid_add_device+0x120  device_add+0x268  bus_probe_device+0x94  device_initial_probe+0x14  __device_attach+0xfc  bus_for_each_drv+0x10c  __device_attach_driver+0x14c  driver_probe_device+0x3c  __driver_probe_device+0xa0  really_probe+0x190  hid_device_probe+0x130  ps_probe+0x990  ps_led_register+0x94  devm_led_classdev_register_ext+0x58  led_classdev_register_ext+0x1f8  device_create_with_groups+0x48  device_create_groups_vargs+0xc8  device_add+0x244  kobject_uevent+0x14  kobject_uevent_env[jt]+0x224  mutex_unlock[jt]+0xc4  __mutex_unlock_slowpath+0xd4  wake_up_q+0x70  try_to_wake_up[jt]+0x48c  preempt_schedule_common+0x28  __schedule+0x628  __switch_to+0x174 \t\t\t\t\t\tel0t_64_sync+0x1a8/0x1ac \t\t\t\t\t\tel0t_64_sync_handler+0x68/0xbc \t\t\t\t\t\tel0_svc+0x38/0x68 \t\t\t\t\t\tdo_el0_svc+0x1c/0x28 \t\t\t\t\t\tel0_svc_common+0x80/0xe0 \t\t\t\t\t\tinvoke_syscall+0x58/0x114 \t\t\t\t\t\t__arm64_sys_read+0x1c/0x2c \t\t\t\t\t\tksys_read+0x78/0xe8 \t\t\t\t\t\tvfs_read+0x1e0/0x2c8 \t\t\t\t\t\tkernfs_fop_read_iter+0x68/0x1b4 \t\t\t\t\t\tseq_read_iter+0x158/0x4ec \t\t\t\t\t\tkernfs_seq_show+0x44/0x54 \t\t\t\t\t\tsysfs_kf_seq_show+0xb4/0x130 \t\t\t\t\t\tdev_attr_show+0x38/0x74 \t\t\t\t\t\tbrightness_show+0x20/0x4c \t\t\t\t\t\tdualshock4_led_get_brightness+0xc/0x74  [ 3313.874295][ T4013] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000060 [ 3313.874301][ T4013] Mem abort info: [ 3313.874303][ T4013]   ESR = 0x0000000096000006 [ 3313.874305][ T4013]   EC = 0x25: DABT (current EL)\, IL = 32 bits [ 3313.874307][ T4013]   SET = 0\, FnV = 0 [ 3313.874309][ T4013]   EA = 0\, S1PTW = 0 [ 3313.874311][ T4013]   FSC = 0x06: level 2 translation fault [ 3313.874313][ T4013] Data abort info: [ 3313.874314][ T4013]   ISV = 0\, ISS = 0x00000006\, ISS2 = 0x00000000 [ 3313.874316][ T4013]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [ 3313.874318][ T4013]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [ 3313.874320][ T4013] user pgtable: 4k pages\, 39-bit VAs\, pgdp=00000008f2b0a000 ..  [ 3313.874332][ T4013] Dumping ftrace buffer: [ 3313.874334][ T4013]    (ftrace buffer empty) .. .. [ dd3313.874639][ T4013] CPU: 6 PID: 4013 Comm: InputReader [ 3313.874648][ T4013] pc : dualshock4_led_get_brightness+0xc/0x74 [ 3313.874653][ T4013] lr : led_update_brightness+0x38/0x60 [ 3313.874656][ T4013] sp : ffffffc0b910bbd0 .. .. [ 3313.874685][ T4013] Call trace: [ 3313.874687][ T4013]  dualshock4_led_get_brightness+0xc/0x74 [ 3313.874690][ T4013]  brightness_show+0x20/0x4c [ 3313.874692][ T4013]  dev_attr_show+0x38/0x74 [ 3313.874696][ T4013]  sysfs_kf_seq_show+0xb4/0x130 [ 3313.874700][ T4013]  kernfs_seq_show+0x44/0x54 [ 3313.874703][ T4013]  seq_read_iter+0x158/0x4ec [ 3313.874705][ T4013]  kernfs_fop_read_iter+0x68/0x1b4 [ 3313.874708][ T4013]  vfs_read+0x1e0/0x2c8 [ 3313.874711][ T4013]  ksys_read+0x78/0xe8 [ 3313.874714][ T4013]  __arm64_sys_read+0x1c/0x2c [ 3313.874718][ T4013]  invoke_syscall+0x58/0x114 [ 3313.874721][ T4013]  el0_svc_common+0x80/0xe0 [ 3313.874724][ T4013]  do_el0_svc+0x1c/0x28 [ 3313.874727][ T4013]  el0_svc+0x38/0x68 [ 3313.874730][ T4013]  el0t_64_sync_handler+0x68/0xbc [ 3313.874732][ T4013]  el0t_64_sync+0x1a8/0x1ac",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56586,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix f2fs_bug_on when uninstalling filesystem call f2fs_evict_inode.  creating a large files during checkpoint disable until it runs out of space and then delete it\, then remount to enable checkpoint again\, and then unmount the filesystem triggers the f2fs_bug_on as below:  ------------[ cut here ]------------ kernel BUG at fs/f2fs/inode.c:896! CPU: 2 UID: 0 PID: 1286 Comm: umount Not tainted 6.11.0-rc7-dirty #360 Oops: invalid opcode: 0000 [#1] PREEMPT SMP NOPTI RIP: 0010:f2fs_evict_inode+0x58c/0x610 Call Trace:  __die_body+0x15/0x60  die+0x33/0x50  do_trap+0x10a/0x120  f2fs_evict_inode+0x58c/0x610  do_error_trap+0x60/0x80  f2fs_evict_inode+0x58c/0x610  exc_invalid_op+0x53/0x60  f2fs_evict_inode+0x58c/0x610  asm_exc_invalid_op+0x16/0x20  f2fs_evict_inode+0x58c/0x610  evict+0x101/0x260  dispose_list+0x30/0x50  evict_inodes+0x140/0x190  generic_shutdown_super+0x2f/0x150  kill_block_super+0x11/0x40  kill_f2fs_super+0x7d/0x140  deactivate_locked_super+0x2a/0x70  cleanup_mnt+0xb3/0x140  task_work_run+0x61/0x90  The root cause is: creating large files during disable checkpoint period results in not enough free segments\, so when writing back root inode will failed in f2fs_enable_checkpoint. When umount the file system after enabling checkpoint\, the root inode is dirty in f2fs_evict_inode function\, which triggers BUG_ON. The steps to reproduce are as follows:  dd if=/dev/zero of=f2fs.img bs=1M count=55 mount f2fs.img f2fs_dir -o checkpoint=disable:10% dd if=/dev/zero of=big bs=1M count=50 sync rm big mount -o remount\,checkpoint=enable f2fs_dir umount f2fs_dir  Let's redirty inode when there is not free segments during checkpoint is disable.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50063,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Prevent tail call between progs attached to different hooks  bpf progs can be attached to kernel functions\, and the attached functions can take different parameters or return different return values. If prog attached to one kernel function tail calls prog attached to another kernel function\, the ctx access or return value verification could be bypassed.  For example\, if prog1 is attached to func1 which takes only 1 parameter and prog2 is attached to func2 which takes two parameters. Since verifier assumes the bpf ctx passed to prog2 is constructed based on func2's prototype\, verifier allows prog2 to access the second parameter from the bpf ctx passed to it. The problem is that verifier does not prevent prog1 from passing its bpf ctx to prog2 via tail call. In this case\, the bpf ctx passed to prog2 is constructed from func1 instead of func2\, that is\, the assumption for ctx access verification is bypassed.  Another example\, if BPF LSM prog1 is attached to hook file_alloc_security\, and BPF LSM prog2 is attached to hook bpf_lsm_audit_rule_known. Verifier knows the return value rules for these two hooks\, e.g. it is legal for bpf_lsm_audit_rule_known to return positive number 1\, and it is illegal for file_alloc_security to return positive number. So verifier allows prog2 to return positive number 1\, but does not allow prog1 to return positive number. The problem is that verifier does not prevent prog1 from calling prog2 via tail call. In this case\, prog2's return value 1 will be used as the return value for prog1's hook file_alloc_security. That is\, the return value rule is bypassed.  This patch adds restriction for tail call to prevent such bypasses.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57876,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/dp_mst: Fix resetting msg rx state after topology removal  If the MST topology is removed during the reception of an MST down reply or MST up request sideband message\, the drm_dp_mst_topology_mgr::up_req_recv/down_rep_recv states could be reset from one thread via drm_dp_mst_topology_mgr_set_mst(false)\, racing with the reading/parsing of the message from another thread via drm_dp_mst_handle_down_rep() or drm_dp_mst_handle_up_req(). The race is possible since the reader/parser doesn't hold any lock while accessing the reception state. This in turn can lead to a memory corruption in the reader/parser as described by commit bd2fccac61b4 (""drm/dp_mst: Fix MST sideband message body length check"").  Fix the above by resetting the message reception state if needed before reading/parsing a message. Another solution would be to hold the drm_dp_mst_topology_mgr::lock for the whole duration of the message reception/parsing in drm_dp_mst_handle_down_rep() and drm_dp_mst_handle_up_req()\, however this would require a bigger change. Since the fix is also needed for stable\, opting for the simpler solution in this patch.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56581,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: ref-verify: fix use-after-free after invalid ref action  At btrfs_ref_tree_mod() after we successfully inserted the new ref entry (local variable 'ref') into the respective block entry's rbtree (local variable 'be')\, if we find an unexpected action of BTRFS_DROP_DELAYED_REF\, we error out and free the ref entry without removing it from the block entry's rbtree. Then in the error path of btrfs_ref_tree_mod() we call btrfs_free_ref_cache()\, which iterates over all block entries and then calls free_block_entry() for each one\, and there we will trigger a use-after-free when we are called against the block entry to which we added the freed ref entry to its rbtree\, since the rbtree still points to the block entry\, as we didn't remove it from the rbtree before freeing it in the error path at btrfs_ref_tree_mod(). Fix this by removing the new ref entry from the rbtree before freeing it.  Syzbot report this with the following stack traces:     BTRFS error (device loop0 state EA):   Ref action 2\, root 5\, ref_root 0\, parent 8564736\, owner 0\, offset 0\, num_refs 18446744073709551615       __btrfs_mod_ref+0x7dd/0xac0 fs/btrfs/extent-tree.c:2523       update_ref_for_cow+0x9cd/0x11f0 fs/btrfs/ctree.c:512       btrfs_force_cow_block+0x9f6/0x1da0 fs/btrfs/ctree.c:594       btrfs_cow_block+0x35e/0xa40 fs/btrfs/ctree.c:754       btrfs_search_slot+0xbdd/0x30d0 fs/btrfs/ctree.c:2116       btrfs_insert_empty_items+0x9c/0x1a0 fs/btrfs/ctree.c:4314       btrfs_insert_empty_item fs/btrfs/ctree.h:669 [inline]       btrfs_insert_orphan_item+0x1f1/0x320 fs/btrfs/orphan.c:23       btrfs_orphan_add+0x6d/0x1a0 fs/btrfs/inode.c:3482       btrfs_unlink+0x267/0x350 fs/btrfs/inode.c:4293       vfs_unlink+0x365/0x650 fs/namei.c:4469       do_unlinkat+0x4ae/0x830 fs/namei.c:4533       __do_sys_unlinkat fs/namei.c:4576 [inline]       __se_sys_unlinkat fs/namei.c:4569 [inline]       __x64_sys_unlinkat+0xcc/0xf0 fs/namei.c:4569       do_syscall_x64 arch/x86/entry/common.c:52 [inline]       do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83       entry_SYSCALL_64_after_hwframe+0x77/0x7f    BTRFS error (device loop0 state EA):   Ref action 1\, root 5\, ref_root 5\, parent 0\, owner 260\, offset 0\, num_refs 1       __btrfs_mod_ref+0x76b/0xac0 fs/btrfs/extent-tree.c:2521       update_ref_for_cow+0x96a/0x11f0       btrfs_force_cow_block+0x9f6/0x1da0 fs/btrfs/ctree.c:594       btrfs_cow_block+0x35e/0xa40 fs/btrfs/ctree.c:754       btrfs_search_slot+0xbdd/0x30d0 fs/btrfs/ctree.c:2116       btrfs_lookup_inode+0xdc/0x480 fs/btrfs/inode-item.c:411       __btrfs_update_delayed_inode+0x1e7/0xb90 fs/btrfs/delayed-inode.c:1030       btrfs_update_delayed_inode fs/btrfs/delayed-inode.c:1114 [inline]       __btrfs_commit_inode_delayed_items+0x2318/0x24a0 fs/btrfs/delayed-inode.c:1137       __btrfs_run_delayed_items+0x213/0x490 fs/btrfs/delayed-inode.c:1171       btrfs_commit_transaction+0x8a8/0x3740 fs/btrfs/transaction.c:2313       prepare_to_relocate+0x3c4/0x4c0 fs/btrfs/relocation.c:3586       relocate_block_group+0x16c/0xd40 fs/btrfs/relocation.c:3611       btrfs_relocate_block_group+0x77d/0xd90 fs/btrfs/relocation.c:4081       btrfs_relocate_chunk+0x12c/0x3b0 fs/btrfs/volumes.c:3377       __btrfs_balance+0x1b0f/0x26b0 fs/btrfs/volumes.c:4161       btrfs_balance+0xbdc/0x10c0 fs/btrfs/volumes.c:4538    BTRFS error (device loop0 state EA):   Ref action 2\, root 5\, ref_root 0\, parent 8564736\, owner 0\, offset 0\, num_refs 18446744073709551615       __btrfs_mod_ref+0x7dd/0xac0 fs/btrfs/extent-tree.c:2523       update_ref_for_cow+0x9cd/0x11f0 fs/btrfs/ctree.c:512       btrfs_force_cow_block+0x9f6/0x1da0 fs/btrfs/ctree.c:594       btrfs_cow_block+0x35e/0xa40 fs/btrfs/ctree.c:754       btrfs_search_slot+0xbdd/0x30d0 fs/btrfs/ctree.c:2116       btrfs_lookup_inode+0xdc/0x480 fs/btrfs/inode-item.c:411       __btrfs_update_delayed_inode+0x1e7/0xb90 fs/btrfs/delayed-inode.c:1030       btrfs_update_delayed_i ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-12720,transformers,MEDIUM,4.46.2,4.48.0,"A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library\, specifically in the file tokenization_nougat_fast.py. The vulnerability occurs in the post_process_single() function\, where a regular expression processes specially crafted input. The issue stems from the regex exhibiting exponential time complexity under certain conditions\, leading to excessive backtracking. This can result in significantly high CPU usage and potential application downtime\, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.46.3 (latest).",|tykio/smart-ner-redact|
CVE-2024-40965,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  i2c: lpi2c: Avoid calling clk_get_rate during transfer  Instead of repeatedly calling clk_get_rate for each transfer\, lock the clock rate and cache the value. A deadlock has been observed while adding tlv320aic32x4 audio codec to the system. When this clock provider adds its clock\, the clk mutex is locked already\, it needs to access i2c\, which in return needs the mutex for clk_get_rate as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22869,golang.org/x/crypto,HIGH,v0.31.0,0.35.0,"SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly\, or not at all\, causing pending content to be read into memory\, but never transmitted.",|tykio/midsommar|
CVE-2024-57874,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  arm64: ptrace: fix partial SETREGSET for NT_ARM_TAGGED_ADDR_CTRL  Currently tagged_addr_ctrl_set() doesn't initialize the temporary 'ctrl' variable\, and a SETREGSET call with a length of zero will leave this uninitialized. Consequently tagged_addr_ctrl_set() will consume an arbitrary value\, potentially leaking up to 64 bits of memory from the kernel stack. The read is limited to a specific slot on the stack\, and the issue does not provide a write mechanism.  As set_tagged_addr_ctrl() only accepts values where bits [63:4] zero and rejects other values\, a partial SETREGSET attempt will randomly succeed or fail depending on the value of the uninitialized value\, and the exposure is significantly limited.  Fix this by initializing the temporary value before copying the regset from userspace\, as for other regsets (e.g. NT_PRSTATUS\, NT_PRFPREG\, NT_ARM_SYSTEM_CALL). In the case of a zero-length write\, the existing value of the tagged address ctrl will be retained.  The NT_ARM_TAGGED_ADDR_CTRL regset is only visible in the user_aarch64_view used by a native AArch64 task to manipulate another native AArch64 task. As get_tagged_addr_ctrl() only returns an error value when called for a compat task\, tagged_addr_ctrl_get() and tagged_addr_ctrl_set() should never observe an error value from get_tagged_addr_ctrl(). Add a WARN_ON_ONCE() to both to indicate that such an error would be unexpected\, and error handlnig is not missing in either case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56583,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sched/deadline: Fix warning in migrate_enable for boosted tasks  When running the following command:  while true; do     stress-ng --cyclic 30 --timeout 30s --minimize --quiet done  a warning is eventually triggered:  WARNING: CPU: 43 PID: 2848 at kernel/sched/deadline.c:794 setup_new_dl_entity+0x13e/0x180 ... Call Trace:  <TASK>  ? show_trace_log_lvl+0x1c4/0x2df  ? enqueue_dl_entity+0x631/0x6e0  ? setup_new_dl_entity+0x13e/0x180  ? __warn+0x7e/0xd0  ? report_bug+0x11a/0x1a0  ? handle_bug+0x3c/0x70  ? exc_invalid_op+0x14/0x70  ? asm_exc_invalid_op+0x16/0x20  enqueue_dl_entity+0x631/0x6e0  enqueue_task_dl+0x7d/0x120  __do_set_cpus_allowed+0xe3/0x280  __set_cpus_allowed_ptr_locked+0x140/0x1d0  __set_cpus_allowed_ptr+0x54/0xa0  migrate_enable+0x7e/0x150  rt_spin_unlock+0x1c/0x90  group_send_sig_info+0xf7/0x1a0  ? kill_pid_info+0x1f/0x1d0  kill_pid_info+0x78/0x1d0  kill_proc_info+0x5b/0x110  __x64_sys_kill+0x93/0xc0  do_syscall_64+0x5c/0xf0  entry_SYSCALL_64_after_hwframe+0x6e/0x76  RIP: 0033:0x7f0dab31f92b  This warning occurs because set_cpus_allowed dequeues and enqueues tasks with the ENQUEUE_RESTORE flag set. If the task is boosted\, the warning is triggered. A boosted task already had its parameters set by rt_mutex_setprio\, and a new call to setup_new_dl_entity is unnecessary\, hence the WARN_ON call.  Check if we are requeueing a boosted task and avoid calling setup_new_dl_entity if that's the case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57875,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  block: RCU protect disk->conv_zones_bitmap  Ensure that a disk revalidation changing the conventional zones bitmap of a disk does not cause invalid memory references when using the disk_zone_is_conv() helper by RCU protecting the disk->conv_zones_bitmap pointer.  disk_zone_is_conv() is modified to operate under the RCU read lock and the function disk_set_conv_zones_bitmap() is added to update a disk conv_zones_bitmap pointer using rcu_replace_pointer() with the disk zone_wplugs_lock spinlock held.  disk_free_zone_resources() is modified to call disk_update_zone_resources() with a NULL bitmap pointer to free the disk conv_zones_bitmap. disk_set_conv_zones_bitmap() is also used in disk_update_zone_resources() to set the new (revalidated) bitmap and free the old one.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56582,linux-libc-dev,HIGH,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix use-after-free in btrfs_encoded_read_endio()  Shinichiro reported the following use-after free that sometimes is happening in our CI system when running fstests' btrfs/284 on a TCMU runner device:    BUG: KASAN: slab-use-after-free in lock_release+0x708/0x780   Read of size 8 at addr ffff888106a83f18 by task kworker/u80:6/219    CPU: 8 UID: 0 PID: 219 Comm: kworker/u80:6 Not tainted 6.12.0-rc6-kts+ #15   Hardware name: Supermicro Super Server/X11SPi-TF\, BIOS 3.3 02/21/2020   Workqueue: btrfs-endio btrfs_end_bio_work [btrfs]   Call Trace:    <TASK>    dump_stack_lvl+0x6e/0xa0    ? lock_release+0x708/0x780    print_report+0x174/0x505    ? lock_release+0x708/0x780    ? __virt_addr_valid+0x224/0x410    ? lock_release+0x708/0x780    kasan_report+0xda/0x1b0    ? lock_release+0x708/0x780    ? __wake_up+0x44/0x60    lock_release+0x708/0x780    ? __pfx_lock_release+0x10/0x10    ? __pfx_do_raw_spin_lock+0x10/0x10    ? lock_is_held_type+0x9a/0x110    _raw_spin_unlock_irqrestore+0x1f/0x60    __wake_up+0x44/0x60    btrfs_encoded_read_endio+0x14b/0x190 [btrfs]    btrfs_check_read_bio+0x8d9/0x1360 [btrfs]    ? lock_release+0x1b0/0x780    ? trace_lock_acquire+0x12f/0x1a0    ? __pfx_btrfs_check_read_bio+0x10/0x10 [btrfs]    ? process_one_work+0x7e3/0x1460    ? lock_acquire+0x31/0xc0    ? process_one_work+0x7e3/0x1460    process_one_work+0x85c/0x1460    ? __pfx_process_one_work+0x10/0x10    ? assign_work+0x16c/0x240    worker_thread+0x5e6/0xfc0    ? __pfx_worker_thread+0x10/0x10    kthread+0x2c3/0x3a0    ? __pfx_kthread+0x10/0x10    ret_from_fork+0x31/0x70    ? __pfx_kthread+0x10/0x10    ret_from_fork_asm+0x1a/0x30    </TASK>    Allocated by task 3661:    kasan_save_stack+0x30/0x50    kasan_save_track+0x14/0x30    __kasan_kmalloc+0xaa/0xb0    btrfs_encoded_read_regular_fill_pages+0x16c/0x6d0 [btrfs]    send_extent_data+0xf0f/0x24a0 [btrfs]    process_extent+0x48a/0x1830 [btrfs]    changed_cb+0x178b/0x2ea0 [btrfs]    btrfs_ioctl_send+0x3bf9/0x5c20 [btrfs]    _btrfs_ioctl_send+0x117/0x330 [btrfs]    btrfs_ioctl+0x184a/0x60a0 [btrfs]    __x64_sys_ioctl+0x12e/0x1a0    do_syscall_64+0x95/0x180    entry_SYSCALL_64_after_hwframe+0x76/0x7e    Freed by task 3661:    kasan_save_stack+0x30/0x50    kasan_save_track+0x14/0x30    kasan_save_free_info+0x3b/0x70    __kasan_slab_free+0x4f/0x70    kfree+0x143/0x490    btrfs_encoded_read_regular_fill_pages+0x531/0x6d0 [btrfs]    send_extent_data+0xf0f/0x24a0 [btrfs]    process_extent+0x48a/0x1830 [btrfs]    changed_cb+0x178b/0x2ea0 [btrfs]    btrfs_ioctl_send+0x3bf9/0x5c20 [btrfs]    _btrfs_ioctl_send+0x117/0x330 [btrfs]    btrfs_ioctl+0x184a/0x60a0 [btrfs]    __x64_sys_ioctl+0x12e/0x1a0    do_syscall_64+0x95/0x180    entry_SYSCALL_64_after_hwframe+0x76/0x7e    The buggy address belongs to the object at ffff888106a83f00    which belongs to the cache kmalloc-rnd-07-96 of size 96   The buggy address is located 24 bytes inside of    freed 96-byte region [ffff888106a83f00\, ffff888106a83f60)    The buggy address belongs to the physical page:   page: refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff888106a83800 pfn:0x106a83   flags: 0x17ffffc0000000(node=0|zone=2|lastcpupid=0x1fffff)   page_type: f5(slab)   raw: 0017ffffc0000000 ffff888100053680 ffffea0004917200 0000000000000004   raw: ffff888106a83800 0000000080200019 00000001f5000000 0000000000000000   page dumped because: kasan: bad access detected    Memory state around the buggy address:    ffff888106a83e00: fa fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc    ffff888106a83e80: fa fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc   >ffff888106a83f00: fa fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc                               ^    ffff888106a83f80: fa fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc    ffff888106a84000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ==================================================================  Further analyzing the trace and  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50067,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  uprobe: avoid out-of-bounds memory access of fetching args  Uprobe needs to fetch args into a percpu buffer\, and then copy to ring buffer to avoid non-atomic context problem.  Sometimes user-space strings\, arrays can be very large\, but the size of percpu buffer is only page size. And store_trace_args() won't check whether these data exceeds a single page or not\, caused out-of-bounds memory access.  It could be reproduced by following steps: 1. build kernel with CONFIG_KASAN enabled 2. save follow program as test.c  ``` \\#include <stdio.h> \\#include <stdlib.h> \\#include <string.h>  // If string length large than MAX_STRING_SIZE\, the fetch_store_strlen() // will return 0\, cause __get_data_size() return shorter size\, and // store_trace_args() will not trigger out-of-bounds access. // So make string length less than 4096. \\#define STRLEN 4093  void generate_string(char *str\, int n) {     int i;     for (i = 0; i < n; ++i)     {         char c = i % 26 + 'a';         str[i] = c;     }     str[n-1] = '\\0'; }  void print_string(char *str) {     printf(""%s\\n""\, str); }  int main() {     char tmp[STRLEN];      generate_string(tmp\, STRLEN);     print_string(tmp);      return 0; } ``` 3. compile program `gcc -o test test.c`  4. get the offset of `print_string()` ``` objdump -t test | grep -w print_string 0000000000401199 g     F .text  000000000000001b              print_string ```  5. configure uprobe with offset 0x1199 ``` off=0x1199  cd /sys/kernel/debug/tracing/ echo ""p /root/test:${off} arg1=+0(%di):ustring arg2=\\$comm arg3=+0(%di):ustring""  > uprobe_events echo 1 > events/uprobes/enable echo 1 > tracing_on ```  6. run `test`\, and kasan will report error. ================================================================== BUG: KASAN: use-after-free in strncpy_from_user+0x1d6/0x1f0 Write of size 8 at addr ffff88812311c004 by task test/499CPU: 0 UID: 0 PID: 499 Comm: test Not tainted 6.12.0-rc3+ #18 Hardware name: Red Hat KVM\, BIOS 1.16.0-4.al8 04/01/2014 Call Trace:  <TASK>  dump_stack_lvl+0x55/0x70  print_address_description.constprop.0+0x27/0x310  kasan_report+0x10f/0x120  ? strncpy_from_user+0x1d6/0x1f0  strncpy_from_user+0x1d6/0x1f0  ? rmqueue.constprop.0+0x70d/0x2ad0  process_fetch_insn+0xb26/0x1470  ? __pfx_process_fetch_insn+0x10/0x10  ? _raw_spin_lock+0x85/0xe0  ? __pfx__raw_spin_lock+0x10/0x10  ? __pte_offset_map+0x1f/0x2d0  ? unwind_next_frame+0xc5f/0x1f80  ? arch_stack_walk+0x68/0xf0  ? is_bpf_text_address+0x23/0x30  ? kernel_text_address.part.0+0xbb/0xd0  ? __kernel_text_address+0x66/0xb0  ? unwind_get_return_address+0x5e/0xa0  ? __pfx_stack_trace_consume_entry+0x10/0x10  ? arch_stack_walk+0xa2/0xf0  ? _raw_spin_lock_irqsave+0x8b/0xf0  ? __pfx__raw_spin_lock_irqsave+0x10/0x10  ? depot_alloc_stack+0x4c/0x1f0  ? _raw_spin_unlock_irqrestore+0xe/0x30  ? stack_depot_save_flags+0x35d/0x4f0  ? kasan_save_stack+0x34/0x50  ? kasan_save_stack+0x24/0x50  ? mutex_lock+0x91/0xe0  ? __pfx_mutex_lock+0x10/0x10  prepare_uprobe_buffer.part.0+0x2cd/0x500  uprobe_dispatcher+0x2c3/0x6a0  ? __pfx_uprobe_dispatcher+0x10/0x10  ? __kasan_slab_alloc+0x4d/0x90  handler_chain+0xdd/0x3e0  handle_swbp+0x26e/0x3d0  ? __pfx_handle_swbp+0x10/0x10  ? uprobe_pre_sstep_notifier+0x151/0x1b0  irqentry_exit_to_user_mode+0xe2/0x1b0  asm_exc_int3+0x39/0x40 RIP: 0033:0x401199 Code: 01 c2 0f b6 45 fb 88 02 83 45 fc 01 8b 45 fc 3b 45 e4 7c b7 8b 45 e4 48 98 48 8d 50 ff 48 8b 45 e8 48 01 d0 ce RSP: 002b:00007ffdf00576a8 EFLAGS: 00000206 RAX: 00007ffdf00576b0 RBX: 0000000000000000 RCX: 0000000000000ff2 RDX: 0000000000000ffc RSI: 0000000000000ffd RDI: 00007ffdf00576b0 RBP: 00007ffdf00586b0 R08: 00007feb2f9c0d20 R09: 00007feb2f9c0d20 R10: 0000000000000001 R11: 0000000000000202 R12: 0000000000401040 R13: 00007ffdf0058780 R14: 0000000000000000 R15: 0000000000000000  </TASK>  This commit enforces the buffer's maxlen less than a page-size to avoid store_trace_args() out-of-memory access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40969,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: don't set RO when shutting down f2fs  Shutdown does not check the error of thaw_super due to readonly\, which causes a deadlock like below.  f2fs_ioc_shutdown(F2FS_GOING_DOWN_FULLSYNC)        issue_discard_thread  - bdev_freeze   - freeze_super  - f2fs_stop_checkpoint()   - f2fs_handle_critical_error                     - sb_start_write     - set RO                                         - waiting  - bdev_thaw   - thaw_super_locked     - return -EINVAL\, if sb_rdonly()  - f2fs_stop_discard_thread   -> wait for kthread_stop(discard_thread);",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57917,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  topology: Keep the cpumask unchanged when printing cpumap  During fuzz testing\, the following warning was discovered:   different return values (15 and 11) from vsnprintf(""%*pbl  ""\, ...)   test:keyward is WARNING in kvasprintf  WARNING: CPU: 55 PID: 1168477 at lib/kasprintf.c:30 kvasprintf+0x121/0x130  Call Trace:   kvasprintf+0x121/0x130   kasprintf+0xa6/0xe0   bitmap_print_to_buf+0x89/0x100   core_siblings_list_read+0x7e/0xb0   kernfs_file_read_iter+0x15b/0x270   new_sync_read+0x153/0x260   vfs_read+0x215/0x290   ksys_read+0xb9/0x160   do_syscall_64+0x56/0x100   entry_SYSCALL_64_after_hwframe+0x78/0xe2  The call trace shows that kvasprintf() reported this warning during the printing of core_siblings_list. kvasprintf() has several steps:   (1) First\, calculate the length of the resulting formatted string.   (2) Allocate a buffer based on the returned length.   (3) Then\, perform the actual string formatting.   (4) Check whether the lengths of the formatted strings returned in      steps (1) and (2) are consistent.  If the core_cpumask is modified between steps (1) and (3)\, the lengths obtained in these two steps may not match. Indeed our test includes cpu hotplugging\, which should modify core_cpumask while printing.  To fix this issue\, cache the cpumask into a temporary variable before calling cpumap_print_{list\, cpumask}_to_buf()\, to keep it unchanged during the printing process.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22866,stdlib,MEDIUM,v1.23.2,1.22.12	 1.23.6	 1.24.0-rc.3,"Due to the usage of a variable time instruction in the assembly implementation of an internal function\, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used\, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",|tykio/midsommar|
CVE-2024-57916,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  misc: microchip: pci1xxxx: Resolve kernel panic during GPIO IRQ handling  Resolve kernel panic caused by improper handling of IRQs while accessing GPIO values. This is done by replacing generic_handle_irq with handle_nested_irq.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56589,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: hisi_sas: Add cond_resched() for no forced preemption model  For no forced preemption model kernel\, in the scenario where the expander is connected to 12 high performance SAS SSDs\, the following call trace may occur:  [  214.409199][  C240] watchdog: BUG: soft lockup - CPU#240 stuck for 22s! [irq/149-hisi_sa:3211] [  214.568533][  C240] pstate: 60400009 (nZCv daif +PAN -UAO -TCO BTYPE=--) [  214.575224][  C240] pc : fput_many+0x8c/0xdc [  214.579480][  C240] lr : fput+0x1c/0xf0 [  214.583302][  C240] sp : ffff80002de2b900 [  214.587298][  C240] x29: ffff80002de2b900 x28: ffff1082aa412000 [  214.593291][  C240] x27: ffff3062a0348c08 x26: ffff80003a9f6000 [  214.599284][  C240] x25: ffff1062bbac5c40 x24: 0000000000001000 [  214.605277][  C240] x23: 000000000000000a x22: 0000000000000001 [  214.611270][  C240] x21: 0000000000001000 x20: 0000000000000000 [  214.617262][  C240] x19: ffff3062a41ae580 x18: 0000000000010000 [  214.623255][  C240] x17: 0000000000000001 x16: ffffdb3a6efe5fc0 [  214.629248][  C240] x15: ffffffffffffffff x14: 0000000003ffffff [  214.635241][  C240] x13: 000000000000ffff x12: 000000000000029c [  214.641234][  C240] x11: 0000000000000006 x10: ffff80003a9f7fd0 [  214.647226][  C240] x9 : ffffdb3a6f0482fc x8 : 0000000000000001 [  214.653219][  C240] x7 : 0000000000000002 x6 : 0000000000000080 [  214.659212][  C240] x5 : ffff55480ee9b000 x4 : fffffde7f94c6554 [  214.665205][  C240] x3 : 0000000000000002 x2 : 0000000000000020 [  214.671198][  C240] x1 : 0000000000000021 x0 : ffff3062a41ae5b8 [  214.677191][  C240] Call trace: [  214.680320][  C240]  fput_many+0x8c/0xdc [  214.684230][  C240]  fput+0x1c/0xf0 [  214.687707][  C240]  aio_complete_rw+0xd8/0x1fc [  214.692225][  C240]  blkdev_bio_end_io+0x98/0x140 [  214.696917][  C240]  bio_endio+0x160/0x1bc [  214.701001][  C240]  blk_update_request+0x1c8/0x3bc [  214.705867][  C240]  scsi_end_request+0x3c/0x1f0 [  214.710471][  C240]  scsi_io_completion+0x7c/0x1a0 [  214.715249][  C240]  scsi_finish_command+0x104/0x140 [  214.720200][  C240]  scsi_softirq_done+0x90/0x180 [  214.724892][  C240]  blk_mq_complete_request+0x5c/0x70 [  214.730016][  C240]  scsi_mq_done+0x48/0xac [  214.734194][  C240]  sas_scsi_task_done+0xbc/0x16c [libsas] [  214.739758][  C240]  slot_complete_v3_hw+0x260/0x760 [hisi_sas_v3_hw] [  214.746185][  C240]  cq_thread_v3_hw+0xbc/0x190 [hisi_sas_v3_hw] [  214.752179][  C240]  irq_thread_fn+0x34/0xa4 [  214.756435][  C240]  irq_thread+0xc4/0x130 [  214.760520][  C240]  kthread+0x108/0x13c [  214.764430][  C240]  ret_from_fork+0x10/0x18  This is because in the hisi_sas driver\, both the hardware interrupt handler and the interrupt thread are executed on the same CPU. In the performance test scenario\, function irq_wait_for_interrupt() will always return 0 if lots of interrupts occurs and the CPU will be continuously consumed. As a result\, the CPU cannot run the watchdog thread. When the watchdog time exceeds the specified time\, call trace occurs.  To fix it\, add cond_resched() to execute the watchdog thread.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57911,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: dummy: iio_simply_dummy_buffer: fix information leak in triggered buffer  The 'data' array is allocated via kmalloc() and it is used to push data to user space from a triggered buffer\, but it does not set values for inactive channels\, as it only uses iio_for_each_active_channel() to assign new values.  Use kzalloc for the memory allocation to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56588,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: hisi_sas: Create all dump files during debugfs initialization  For the current debugfs of hisi_sas\, after user triggers dump\, the driver allocate memory space to save the register information and create debugfs files to display the saved information. In this process\, the debugfs files created after each dump.  Therefore\, when the dump is triggered while the driver is unbind\, the following hang occurs:  [67840.853907] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000a0 [67840.862947] Mem abort info: [67840.865855]   ESR = 0x0000000096000004 [67840.869713]   EC = 0x25: DABT (current EL)\, IL = 32 bits [67840.875125]   SET = 0\, FnV = 0 [67840.878291]   EA = 0\, S1PTW = 0 [67840.881545]   FSC = 0x04: level 0 translation fault [67840.886528] Data abort info: [67840.889524]   ISV = 0\, ISS = 0x00000004\, ISS2 = 0x00000000 [67840.895117]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [67840.900284]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [67840.905709] user pgtable: 4k pages\, 48-bit VAs\, pgdp=0000002803a1f000 [67840.912263] [00000000000000a0] pgd=0000000000000000\, p4d=0000000000000000 [67840.919177] Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP [67840.996435] pstate: 80400009 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--) [67841.003628] pc : down_write+0x30/0x98 [67841.007546] lr : start_creating.part.0+0x60/0x198 [67841.012495] sp : ffff8000b979ba20 [67841.016046] x29: ffff8000b979ba20 x28: 0000000000000010 x27: 0000000000024b40 [67841.023412] x26: 0000000000000012 x25: ffff20202b355ae8 x24: ffff20202b35a8c8 [67841.030779] x23: ffffa36877928208 x22: ffffa368b4972240 x21: ffff8000b979bb18 [67841.038147] x20: ffff00281dc1e3c0 x19: fffffffffffffffe x18: 0000000000000020 [67841.045515] x17: 0000000000000000 x16: ffffa368b128a530 x15: ffffffffffffffff [67841.052888] x14: ffff8000b979bc18 x13: ffffffffffffffff x12: ffff8000b979bb18 [67841.060263] x11: 0000000000000000 x10: 0000000000000000 x9 : ffffa368b1289b18 [67841.067640] x8 : 0000000000000012 x7 : 0000000000000000 x6 : 00000000000003a9 [67841.075014] x5 : 0000000000000000 x4 : ffff002818c5cb00 x3 : 0000000000000001 [67841.082388] x2 : 0000000000000000 x1 : ffff002818c5cb00 x0 : 00000000000000a0 [67841.089759] Call trace: [67841.092456]  down_write+0x30/0x98 [67841.096017]  start_creating.part.0+0x60/0x198 [67841.100613]  debugfs_create_dir+0x48/0x1f8 [67841.104950]  debugfs_create_files_v3_hw+0x88/0x348 [hisi_sas_v3_hw] [67841.111447]  debugfs_snapshot_regs_v3_hw+0x708/0x798 [hisi_sas_v3_hw] [67841.118111]  debugfs_trigger_dump_v3_hw_write+0x9c/0x120 [hisi_sas_v3_hw] [67841.125115]  full_proxy_write+0x68/0xc8 [67841.129175]  vfs_write+0xd8/0x3f0 [67841.132708]  ksys_write+0x70/0x108 [67841.136317]  __arm64_sys_write+0x24/0x38 [67841.140440]  invoke_syscall+0x50/0x128 [67841.144385]  el0_svc_common.constprop.0+0xc8/0xf0 [67841.149273]  do_el0_svc+0x24/0x38 [67841.152773]  el0_svc+0x38/0xd8 [67841.156009]  el0t_64_sync_handler+0xc0/0xc8 [67841.160361]  el0t_64_sync+0x1a4/0x1a8 [67841.164189] Code: b9000882 d2800002 d2800023 f9800011 (c85ffc05) [67841.170443] ---[ end trace 0000000000000000 ]---  To fix this issue\, create all directories and files during debugfs initialization. In this way\, the driver only needs to allocate memory space to save information each time the user triggers dumping.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57910,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: light: vcnl4035: fix information leak in triggered buffer  The 'buffer' local array is used to push data to userspace from a triggered buffer\, but it does not set an initial value for the single data element\, which is an u16 aligned to 8 bytes. That leaves at least 4 bytes uninitialized even after writing an integer value with regmap_read().  Initialize the array to zero before using it to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57913,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: f_fs: Remove WARN_ON in functionfs_bind  This commit addresses an issue related to below kernel panic where panic_on_warn is enabled. It is caused by the unnecessary use of WARN_ON in functionsfs_bind\, which easily leads to the following scenarios.  1.adb_write in adbd               2. UDC write via configfs   =================\t             =====================  ->usb_ffs_open_thread()           ->UDC write  ->open_functionfs()               ->configfs_write_iter()   ->adb_open()                      ->gadget_dev_desc_UDC_store()    ->adb_write()                     ->usb_gadget_register_driver_owner                                       ->driver_register() ->StartMonitor()                       ->bus_add_driver()  ->adb_read()                           ->gadget_bind_driver() <times-out without BIND event>           ->configfs_composite_bind()                                           ->usb_add_function() ->open_functionfs()                        ->ffs_func_bind()  ->adb_open()                               ->functionfs_bind()                                        <ffs->state !=FFS_ACTIVE>  The adb_open\, adb_read\, and adb_write operations are invoked from the daemon\, but trying to bind the function is a process that is invoked by UDC write through configfs\, which opens up the possibility of a race condition between the two paths. In this race scenario\, the kernel panic occurs due to the WARN_ON from functionfs_bind when panic_on_warn is enabled. This commit fixes the kernel panic by removing the unnecessary WARN_ON.  Kernel panic - not syncing: kernel: panic_on_warn set ... [   14.542395] Call trace: [   14.542464]  ffs_func_bind+0x1c8/0x14a8 [   14.542468]  usb_add_function+0xcc/0x1f0 [   14.542473]  configfs_composite_bind+0x468/0x588 [   14.542478]  gadget_bind_driver+0x108/0x27c [   14.542483]  really_probe+0x190/0x374 [   14.542488]  __driver_probe_device+0xa0/0x12c [   14.542492]  driver_probe_device+0x3c/0x220 [   14.542498]  __driver_attach+0x11c/0x1fc [   14.542502]  bus_for_each_dev+0x104/0x160 [   14.542506]  driver_attach+0x24/0x34 [   14.542510]  bus_add_driver+0x154/0x270 [   14.542514]  driver_register+0x68/0x104 [   14.542518]  usb_gadget_register_driver_owner+0x48/0xf4 [   14.542523]  gadget_dev_desc_UDC_store+0xf8/0x144 [   14.542526]  configfs_write_iter+0xf0/0x138",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2012-4542,linux-libc-dev,LOW,6.1.115-1,N/A,"block/scsi_ioctl.c in the Linux kernel through 3.8 does not properly consider the SCSI device class during authorization of SCSI commands\, which allows local users to bypass intended access restrictions via an SG_IO ioctl call that leverages overlapping opcodes.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57912,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: pressure: zpa2326: fix information leak in triggered buffer  The 'sample' local struct is used to push data to user space from a triggered buffer\, but it has a hole between the temperature and the timestamp (u32 pressure\, u16 temperature\, GAP\, u64 timestamp). This hole is never initialized.  Initialize the struct to zero before using it to avoid pushing uninitialized information to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35784,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix deadlock with fiemap and extent locking  While working on the patchset to remove extent locking I got a lockdep splat with fiemap and pagefaulting with my new extent lock replacement lock.  This deadlock exists with our normal code\, we just don't have lockdep annotations with the extent locking so we've never noticed it.  Since we're copying the fiemap extent to user space on every iteration we have the chance of pagefaulting.  Because we hold the extent lock for the entire range we could mkwrite into a range in the file that we have mmap'ed.  This would deadlock with the following stack trace  [<0>] lock_extent+0x28d/0x2f0 [<0>] btrfs_page_mkwrite+0x273/0x8a0 [<0>] do_page_mkwrite+0x50/0xb0 [<0>] do_fault+0xc1/0x7b0 [<0>] __handle_mm_fault+0x2fa/0x460 [<0>] handle_mm_fault+0xa4/0x330 [<0>] do_user_addr_fault+0x1f4/0x800 [<0>] exc_page_fault+0x7c/0x1e0 [<0>] asm_exc_page_fault+0x26/0x30 [<0>] rep_movs_alternative+0x33/0x70 [<0>] _copy_to_user+0x49/0x70 [<0>] fiemap_fill_next_extent+0xc8/0x120 [<0>] emit_fiemap_extent+0x4d/0xa0 [<0>] extent_fiemap+0x7f8/0xad0 [<0>] btrfs_fiemap+0x49/0x80 [<0>] __x64_sys_ioctl+0x3e1/0xb50 [<0>] do_syscall_64+0x94/0x1a0 [<0>] entry_SYSCALL_64_after_hwframe+0x6e/0x76  I wrote an fstest to reproduce this deadlock without my replacement lock and verified that the deadlock exists with our existing locking.  To fix this simply don't take the extent lock for the entire duration of the fiemap.  This is safe in general because we keep track of where we are when we're searching the tree\, so if an ordered extent updates in the middle of our fiemap call we'll still emit the correct extents because we know what offset we were on before.  The only place we maintain the lock is searching delalloc.  Since the delalloc stuff can change during writeback we want to lock the extent range so we have a consistent view of delalloc at the time we're checking to see if we need to set the delalloc flag.  With this patch applied we no longer deadlock with my testcase.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56751,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: release nexthop on device removal  The CI is hitting some aperiodic hangup at device removal time in the pmtu.sh self-test:  unregister_netdevice: waiting for veth_A-R1 to become free. Usage count = 6 ref_tracker: veth_A-R1@ffff888013df15d8 has 1/5 users at \tdst_init+0x84/0x4a0 \tdst_alloc+0x97/0x150 \tip6_dst_alloc+0x23/0x90 \tip6_rt_pcpu_alloc+0x1e6/0x520 \tip6_pol_route+0x56f/0x840 \tfib6_rule_lookup+0x334/0x630 \tip6_route_output_flags+0x259/0x480 \tip6_dst_lookup_tail.constprop.0+0x5c2/0x940 \tip6_dst_lookup_flow+0x88/0x190 \tudp_tunnel6_dst_lookup+0x2a7/0x4c0 \tvxlan_xmit_one+0xbde/0x4a50 [vxlan] \tvxlan_xmit+0x9ad/0xf20 [vxlan] \tdev_hard_start_xmit+0x10e/0x360 \t__dev_queue_xmit+0xf95/0x18c0 \tarp_solicit+0x4a2/0xe00 \tneigh_probe+0xaa/0xf0  While the first suspect is the dst_cache\, explicitly tracking the dst owing the last device reference via probes proved such dst is held by the nexthop in the originating fib6_info.  Similar to commit f5b51fe804ec (""ipv6: route: purge exception on removal"")\, we need to explicitly release the originating fib info when disconnecting a to-be-removed device from a live ipv6 dst: move the fib6_info cleanup into ip6_dst_ifdown().  Tested running:  ./pmtu.sh cleanup_ipv6_exception  in a tight loop for more than 400 iterations with no spat\, running an unpatched kernel  I observed a splat every ~10 iterations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49939,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw89: avoid to add interface to list twice when SER  If SER L2 occurs during the WoWLAN resume flow\, the add interface flow is triggered by ieee80211_reconfig(). However\, due to rtw89_wow_resume() return failure\, it will cause the add interface flow to be executed again\, resulting in a double add list and causing a kernel panic. Therefore\, we have added a check to prevent double adding of the list.  list_add double add: new=ffff99d6992e2010\, prev=ffff99d6992e2010\, next=ffff99d695302628. ------------[ cut here ]------------ kernel BUG at lib/list_debug.c:37! invalid opcode: 0000 [#1] PREEMPT SMP NOPTI CPU: 0 PID: 9 Comm: kworker/0:1 Tainted: G        W  O       6.6.30-02659-gc18865c4dfbd #1 770df2933251a0e3c888ba69d1053a817a6376a7 Hardware name: HP Grunt/Grunt\, BIOS Google_Grunt.11031.169.0 06/24/2021 Workqueue: events_freezable ieee80211_restart_work [mac80211] RIP: 0010:__list_add_valid_or_report+0x5e/0xb0 Code: c7 74 18 48 39 ce 74 13 b0 01 59 5a 5e 5f 41 58 41 59 41 5a 5d e9 e2 d6 03 00 cc 48 c7 c7 8d 4f 17 83 48 89 c2 e8 02 c0 00 00 <0f> 0b 48 c7 c7 aa 8c 1c 83 e8 f4 bf 00 00 0f 0b 48 c7 c7 c8 bc 12 RSP: 0018:ffffa91b8007bc50 EFLAGS: 00010246 RAX: 0000000000000058 RBX: ffff99d6992e0900 RCX: a014d76c70ef3900 RDX: ffffa91b8007bae8 RSI: 00000000ffffdfff RDI: 0000000000000001 RBP: ffffa91b8007bc88 R08: 0000000000000000 R09: ffffa91b8007bae0 R10: 00000000ffffdfff R11: ffffffff83a79800 R12: ffff99d695302060 R13: ffff99d695300900 R14: ffff99d6992e1be0 R15: ffff99d6992e2010 FS:  0000000000000000(0000) GS:ffff99d6aac00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 000078fbdba43480 CR3: 000000010e464000 CR4: 00000000001506f0 Call Trace:  <TASK>  ? __die_body+0x1f/0x70  ? die+0x3d/0x60  ? do_trap+0xa4/0x110  ? __list_add_valid_or_report+0x5e/0xb0  ? do_error_trap+0x6d/0x90  ? __list_add_valid_or_report+0x5e/0xb0  ? handle_invalid_op+0x30/0x40  ? __list_add_valid_or_report+0x5e/0xb0  ? exc_invalid_op+0x3c/0x50  ? asm_exc_invalid_op+0x16/0x20  ? __list_add_valid_or_report+0x5e/0xb0  rtw89_ops_add_interface+0x309/0x310 [rtw89_core 7c32b1ee6854761c0321027c8a58c5160e41f48f]  drv_add_interface+0x5c/0x130 [mac80211 83e989e6e616bd5b4b8a2b0a9f9352a2c385a3bc]  ieee80211_reconfig+0x241/0x13d0 [mac80211 83e989e6e616bd5b4b8a2b0a9f9352a2c385a3bc]  ? finish_wait+0x3e/0x90  ? synchronize_rcu_expedited+0x174/0x260  ? sync_rcu_exp_done_unlocked+0x50/0x50  ? wake_bit_function+0x40/0x40  ieee80211_restart_work+0xf0/0x140 [mac80211 83e989e6e616bd5b4b8a2b0a9f9352a2c385a3bc]  process_scheduled_works+0x1e5/0x480  worker_thread+0xea/0x1e0  kthread+0xdb/0x110  ? move_linked_works+0x90/0x90  ? kthread_associate_blkcg+0xa0/0xa0  ret_from_fork+0x3b/0x50  ? kthread_associate_blkcg+0xa0/0xa0  ret_from_fork_asm+0x11/0x20  </TASK> Modules linked in: dm_integrity async_xor xor async_tx lz4 lz4_compress zstd zstd_compress zram zsmalloc rfcomm cmac uinput algif_hash algif_skcipher af_alg btusb btrtl iio_trig_hrtimer industrialio_sw_trigger btmtk industrialio_configfs btbcm btintel uvcvideo videobuf2_vmalloc iio_trig_sysfs videobuf2_memops videobuf2_v4l2 videobuf2_common uvc snd_hda_codec_hdmi veth snd_hda_intel snd_intel_dspcfg acpi_als snd_hda_codec industrialio_triggered_buffer kfifo_buf snd_hwdep industrialio i2c_piix4 snd_hda_core designware_i2s ip6table_nat snd_soc_max98357a xt_MASQUERADE xt_cgroup snd_soc_acp_rt5682_mach fuse rtw89_8922ae(O) rtw89_8922a(O) rtw89_pci(O) rtw89_core(O) 8021q mac80211(O) bluetooth ecdh_generic ecc cfg80211 r8152 mii joydev gsmi: Log Shutdown Reason 0x03 ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49569,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-rdma: unquiesce admin_q before destroy it  Kernel will hang on destroy admin_q while we create ctrl failed\, such as following calltrace:  PID: 23644    TASK: ff2d52b40f439fc0  CPU: 2    COMMAND: ""nvme""  #0 [ff61d23de260fb78] __schedule at ffffffff8323bc15  #1 [ff61d23de260fc08] schedule at ffffffff8323c014  #2 [ff61d23de260fc28] blk_mq_freeze_queue_wait at ffffffff82a3dba1  #3 [ff61d23de260fc78] blk_freeze_queue at ffffffff82a4113a  #4 [ff61d23de260fc90] blk_cleanup_queue at ffffffff82a33006  #5 [ff61d23de260fcb0] nvme_rdma_destroy_admin_queue at ffffffffc12686ce  #6 [ff61d23de260fcc8] nvme_rdma_setup_ctrl at ffffffffc1268ced  #7 [ff61d23de260fd28] nvme_rdma_create_ctrl at ffffffffc126919b  #8 [ff61d23de260fd68] nvmf_dev_write at ffffffffc024f362  #9 [ff61d23de260fe38] vfs_write at ffffffff827d5f25     RIP: 00007fda7891d574  RSP: 00007ffe2ef06958  RFLAGS: 00000202     RAX: ffffffffffffffda  RBX: 000055e8122a4d90  RCX: 00007fda7891d574     RDX: 000000000000012b  RSI: 000055e8122a4d90  RDI: 0000000000000004     RBP: 00007ffe2ef079c0   R8: 000000000000012b   R9: 000055e8122a4d90     R10: 0000000000000000  R11: 0000000000000202  R12: 0000000000000004     R13: 000055e8122923c0  R14: 000000000000012b  R15: 00007fda78a54500     ORIG_RAX: 0000000000000001  CS: 0033  SS: 002b  This due to we have quiesced admi_q before cancel requests\, but forgot to unquiesce before destroy it\, as a result we fail to drain the pending requests\, and hang on blk_mq_freeze_queue_wait() forever. Here try to reuse nvme_rdma_teardown_admin_queue() to fix this issue and simplify the code.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49568,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: check v2_ext_offset/eid_cnt/ism_gid_cnt when receiving proposal msg  When receiving proposal msg in server\, the fields v2_ext_offset/ eid_cnt/ism_gid_cnt in proposal msg are from the remote client and can not be fully trusted. Especially the field v2_ext_offset\, once exceed the max value\, there has the chance to access wrong address\, and crash may happen.  This patch checks the fields v2_ext_offset/eid_cnt/ism_gid_cnt before using them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56754,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  crypto: caam - Fix the pointer passed to caam_qi_shutdown()  The type of the last parameter given to devm_add_action_or_reset() is ""struct caam_drv_private *""\, but in caam_qi_shutdown()\, it is casted to ""struct device *"".  Pass the correct parameter to devm_add_action_or_reset() so that the resources are released as expected.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46809,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check BIOS images before it is used  BIOS images may fail to load and null checks are added before they are used.  This fixes 6 NULL_RETURNS issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56755,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfs/fscache: Add a memory barrier for FSCACHE_VOLUME_CREATING  In fscache_create_volume()\, there is a missing memory barrier between the bit-clearing operation and the wake-up operation. This may cause a situation where\, after a wake-up\, the bit-clearing operation hasn't been detected yet\, leading to an indefinite wait. The triggering process is as follows:    [cookie1]                [cookie2]                  [volume_work] fscache_perform_lookup   fscache_create_volume                         fscache_perform_lookup                           fscache_create_volume \t\t\t                        fscache_create_volume_work                                                   cachefiles_acquire_volume                                                   clear_and_wake_up_bit     test_and_set_bit                             test_and_set_bit                               goto maybe_wait       goto no_wait  In the above process\, cookie1 and cookie2 has the same volume. When cookie1 enters the -no_wait- process\, it will clear the bit and wake up the waiting process. If a barrier is missing\, it may cause cookie2 to remain in the -wait- process indefinitely.  In commit 3288666c7256 (""fscache: Use clear_and_wake_up_bit() in fscache_create_volume_work()"")\, barriers were added to similar operations in fscache_create_volume_work()\, but fscache_create_volume() was missed.  By combining the clear and wake operations into clear_and_wake_up_bit() to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46808,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add missing NULL pointer check within dpcd_extend_address_range  [Why & How] ASSERT if return NULL from kcalloc.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56756,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-pci: fix freeing of the HMB descriptor table  The HMB descriptor table is sized to the maximum number of descriptors that could be used for a given device\, but __nvme_alloc_host_mem could break out of the loop earlier on memory allocation failure and end up using less descriptors than planned for\, which leads to an incorrect size passed to dma_free_coherent.  In practice this was not showing up because the number of descriptors tends to be low and the dma coherent allocator always allocates and frees at least a page.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56757,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: btusb: mediatek: add intf release flow when usb disconnect  MediaTek claim an special usb intr interface for ISO data transmission. The interface need to be released before unregistering hci device when usb disconnect. Removing BT usb dongle without properly releasing the interface may cause Kernel panic while unregister hci device.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56758,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: check folio mapping after unlock in relocate_one_folio()  When we call btrfs_read_folio() to bring a folio uptodate\, we unlock the folio. The result of that is that a different thread can modify the mapping (like remove it with invalidate) before we call folio_lock(). This results in an invalid page and we need to try again.  In particular\, if we are relocating concurrently with aborting a transaction\, this can result in a crash like the following:    BUG: kernel NULL pointer dereference\, address: 0000000000000000   PGD 0 P4D 0   Oops: 0000 [#1] SMP   CPU: 76 PID: 1411631 Comm: kworker/u322:5   Workqueue: events_unbound btrfs_reclaim_bgs_work   RIP: 0010:set_page_extent_mapped+0x20/0xb0   RSP: 0018:ffffc900516a7be8 EFLAGS: 00010246   RAX: ffffea009e851d08 RBX: ffffea009e0b1880 RCX: 0000000000000000   RDX: 0000000000000000 RSI: ffffc900516a7b90 RDI: ffffea009e0b1880   RBP: 0000000003573000 R08: 0000000000000001 R09: ffff88c07fd2f3f0   R10: 0000000000000000 R11: 0000194754b575be R12: 0000000003572000   R13: 0000000003572fff R14: 0000000000100cca R15: 0000000005582fff   FS:  0000000000000000(0000) GS:ffff88c07fd00000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 0000000000000000 CR3: 000000407d00f002 CR4: 00000000007706f0   DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000   DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400   PKRU: 55555554   Call Trace:   <TASK>   ? __die+0x78/0xc0   ? page_fault_oops+0x2a8/0x3a0   ? __switch_to+0x133/0x530   ? wq_worker_running+0xa/0x40   ? exc_page_fault+0x63/0x130   ? asm_exc_page_fault+0x22/0x30   ? set_page_extent_mapped+0x20/0xb0   relocate_file_extent_cluster+0x1a7/0x940   relocate_data_extent+0xaf/0x120   relocate_block_group+0x20f/0x480   btrfs_relocate_block_group+0x152/0x320   btrfs_relocate_chunk+0x3d/0x120   btrfs_reclaim_bgs_work+0x2ae/0x4e0   process_scheduled_works+0x184/0x370   worker_thread+0xc6/0x3e0   ? blk_add_timer+0xb0/0xb0   kthread+0xae/0xe0   ? flush_tlb_kernel_range+0x90/0x90   ret_from_fork+0x2f/0x40   ? flush_tlb_kernel_range+0x90/0x90   ret_from_fork_asm+0x11/0x20   </TASK>  This occurs because cleanup_one_transaction() calls destroy_delalloc_inodes() which calls invalidate_inode_pages2() which takes the folio_lock before setting mapping to NULL. We fail to check this\, and subsequently call set_extent_mapping()\, which assumes that mapping != NULL (in fact it asserts that in debug mode)  Note that the ""fixes"" patch here is not the one that introduced the race (the very first iteration of this code from 2009) but a more recent change that made this particular crash happen in practice.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56759,linux-libc-dev,HIGH,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix use-after-free when COWing tree bock and tracing is enabled  When a COWing a tree block\, at btrfs_cow_block()\, and we have the tracepoint trace_btrfs_cow_block() enabled and preemption is also enabled (CONFIG_PREEMPT=y)\, we can trigger a use-after-free in the COWed extent buffer while inside the tracepoint code. This is because in some paths that call btrfs_cow_block()\, such as btrfs_search_slot()\, we are holding the last reference on the extent buffer @buf so btrfs_force_cow_block() drops the last reference on the @buf extent buffer when it calls free_extent_buffer_stale(buf)\, which schedules the release of the extent buffer with RCU. This means that if we are on a kernel with preemption\, the current task may be preempted before calling trace_btrfs_cow_block() and the extent buffer already released by the time trace_btrfs_cow_block() is called\, resulting in a use-after-free.  Fix this by moving the trace_btrfs_cow_block() from btrfs_cow_block() to btrfs_force_cow_block() before the COWed extent buffer is freed. This also has a side effect of invoking the tracepoint in the tree defrag code\, at defrag.c:btrfs_realloc_node()\, since btrfs_force_cow_block() is called there\, but this is fine and it was actually missing there.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49932,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: don't readahead the relocation inode on RST  On relocation we're doing readahead on the relocation inode\, but if the filesystem is backed by a RAID stripe tree we can get ENOENT (e.g. due to preallocated extents not being mapped in the RST) from the lookup.  But readahead doesn't handle the error and submits invalid reads to the device\, causing an assertion in the scatter-gather list code:    BTRFS info (device nvme1n1): balance: start -d -m -s   BTRFS info (device nvme1n1): relocating block group 6480920576 flags data|raid0   BTRFS error (device nvme1n1): cannot find raid-stripe for logical [6481928192\, 6481969152] devid 2\, profile raid0   ------------[ cut here ]------------   kernel BUG at include/linux/scatterlist.h:115!   Oops: invalid opcode: 0000 [#1] PREEMPT SMP PTI   CPU: 0 PID: 1012 Comm: btrfs Not tainted 6.10.0-rc7+ #567   RIP: 0010:__blk_rq_map_sg+0x339/0x4a0   RSP: 0018:ffffc90001a43820 EFLAGS: 00010202   RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffea00045d4802   RDX: 0000000117520000 RSI: 0000000000000000 RDI: ffff8881027d1000   RBP: 0000000000003000 R08: ffffea00045d4902 R09: 0000000000000000   R10: 0000000000000000 R11: 0000000000001000 R12: ffff8881003d10b8   R13: ffffc90001a438f0 R14: 0000000000000000 R15: 0000000000003000   FS:  00007fcc048a6900(0000) GS:ffff88813bc00000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 000000002cd11000 CR3: 00000001109ea001 CR4: 0000000000370eb0   Call Trace:    <TASK>    ? __die_body.cold+0x14/0x25    ? die+0x2e/0x50    ? do_trap+0xca/0x110    ? do_error_trap+0x65/0x80    ? __blk_rq_map_sg+0x339/0x4a0    ? exc_invalid_op+0x50/0x70    ? __blk_rq_map_sg+0x339/0x4a0    ? asm_exc_invalid_op+0x1a/0x20    ? __blk_rq_map_sg+0x339/0x4a0    nvme_prep_rq.part.0+0x9d/0x770    nvme_queue_rq+0x7d/0x1e0    __blk_mq_issue_directly+0x2a/0x90    ? blk_mq_get_budget_and_tag+0x61/0x90    blk_mq_try_issue_list_directly+0x56/0xf0    blk_mq_flush_plug_list.part.0+0x52b/0x5d0    __blk_flush_plug+0xc6/0x110    blk_finish_plug+0x28/0x40    read_pages+0x160/0x1c0    page_cache_ra_unbounded+0x109/0x180    relocate_file_extent_cluster+0x611/0x6a0    ? btrfs_search_slot+0xba4/0xd20    ? balance_dirty_pages_ratelimited_flags+0x26/0xb00    relocate_data_extent.constprop.0+0x134/0x160    relocate_block_group+0x3f2/0x500    btrfs_relocate_block_group+0x250/0x430    btrfs_relocate_chunk+0x3f/0x130    btrfs_balance+0x71b/0xef0    ? kmalloc_trace_noprof+0x13b/0x280    btrfs_ioctl+0x2c2e/0x3030    ? kvfree_call_rcu+0x1e6/0x340    ? list_lru_add_obj+0x66/0x80    ? mntput_no_expire+0x3a/0x220    __x64_sys_ioctl+0x96/0xc0    do_syscall_64+0x54/0x110    entry_SYSCALL_64_after_hwframe+0x76/0x7e   RIP: 0033:0x7fcc04514f9b   Code: Unable to access opcode bytes at 0x7fcc04514f71.   RSP: 002b:00007ffeba923370 EFLAGS: 00000246 ORIG_RAX: 0000000000000010   RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007fcc04514f9b   RDX: 00007ffeba923460 RSI: 00000000c4009420 RDI: 0000000000000003   RBP: 0000000000000000 R08: 0000000000000013 R09: 0000000000000001   R10: 00007fcc043fbba8 R11: 0000000000000246 R12: 00007ffeba924fc5   R13: 00007ffeba923460 R14: 0000000000000002 R15: 00000000004d4bb0    </TASK>   Modules linked in:   ---[ end trace 0000000000000000 ]---   RIP: 0010:__blk_rq_map_sg+0x339/0x4a0   RSP: 0018:ffffc90001a43820 EFLAGS: 00010202   RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffea00045d4802   RDX: 0000000117520000 RSI: 0000000000000000 RDI: ffff8881027d1000   RBP: 0000000000003000 R08: ffffea00045d4902 R09: 0000000000000000   R10: 0000000000000000 R11: 0000000000001000 R12: ffff8881003d10b8   R13: ffffc90001a438f0 R14: 0000000000000000 R15: 0000000000003000   FS:  00007fcc048a6900(0000) GS:ffff88813bc00000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 00007fcc04514f71 CR3: 00000001109ea001 CR4: 0000000000370eb0   Kernel p ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46806,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Fix the warning division or modulo by zero  Checks the partition mode and returns an error for an invalid mode.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-0838,libabsl20220623,MEDIUM,20220623.1-1,N/A,"There exists a heap buffer overflow vulnerable in Abseil-cpp. The sized constructors\, reserve()\, and rehash() methods of absl::{flat\,node}hash{set\,map} did not impose an upper bound on their size argument. As a result\, it was possible for a caller to pass a very large size that would cause an integer overflow when computing the size of the container's backing store\, and a subsequent out-of-bounds memory write. Subsequent accesses to the container might also access out-of-bounds memory. We recommend upgrading past commit 5a0e2cb5e3958dd90bb8569a2766622cb74d90c1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49934,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/inode: Prevent dump_mapping() accessing invalid dentry.d_name.name  It's observed that a crash occurs during hot-remove a memory device\, in which user is accessing the hugetlb. See calltrace as following:  ------------[ cut here ]------------ WARNING: CPU: 1 PID: 14045 at arch/x86/mm/fault.c:1278 do_user_addr_fault+0x2a0/0x790 Modules linked in: kmem device_dax cxl_mem cxl_pmem cxl_port cxl_pci dax_hmem dax_pmem nd_pmem cxl_acpi nd_btt cxl_core crc32c_intel nvme virtiofs fuse nvme_core nfit libnvdimm dm_multipath scsi_dh_rdac scsi_dh_emc s mirror dm_region_hash dm_log dm_mod CPU: 1 PID: 14045 Comm: daxctl Not tainted 6.10.0-rc2-lizhijian+ #492 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014 RIP: 0010:do_user_addr_fault+0x2a0/0x790 Code: 48 8b 00 a8 04 0f 84 b5 fe ff ff e9 1c ff ff ff 4c 89 e9 4c 89 e2 be 01 00 00 00 bf 02 00 00 00 e8 b5 ef 24 00 e9 42 fe ff ff <0f> 0b 48 83 c4 08 4c 89 ea 48 89 ee 4c 89 e7 5b 5d 41 5c 41 5d 41 RSP: 0000:ffffc90000a575f0 EFLAGS: 00010046 RAX: ffff88800c303600 RBX: 0000000000000000 RCX: 0000000000000000 RDX: 0000000000001000 RSI: ffffffff82504162 RDI: ffffffff824b2c36 RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000 R10: 0000000000000000 R11: 0000000000000000 R12: ffffc90000a57658 R13: 0000000000001000 R14: ffff88800bc2e040 R15: 0000000000000000 FS:  00007f51cb57d880(0000) GS:ffff88807fd00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000000000001000 CR3: 00000000072e2004 CR4: 00000000001706f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  ? __warn+0x8d/0x190  ? do_user_addr_fault+0x2a0/0x790  ? report_bug+0x1c3/0x1d0  ? handle_bug+0x3c/0x70  ? exc_invalid_op+0x14/0x70  ? asm_exc_invalid_op+0x16/0x20  ? do_user_addr_fault+0x2a0/0x790  ? exc_page_fault+0x31/0x200  exc_page_fault+0x68/0x200 <...snip...> BUG: unable to handle page fault for address: 0000000000001000  #PF: supervisor read access in kernel mode  #PF: error_code(0x0000) - not-present page  PGD 800000000ad92067 P4D 800000000ad92067 PUD 7677067 PMD 0  Oops: Oops: 0000 [#1] PREEMPT SMP PTI  ---[ end trace 0000000000000000 ]---  BUG: unable to handle page fault for address: 0000000000001000  #PF: supervisor read access in kernel mode  #PF: error_code(0x0000) - not-present page  PGD 800000000ad92067 P4D 800000000ad92067 PUD 7677067 PMD 0  Oops: Oops: 0000 [#1] PREEMPT SMP PTI  CPU: 1 PID: 14045 Comm: daxctl Kdump: loaded Tainted: G        W          6.10.0-rc2-lizhijian+ #492  Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014  RIP: 0010:dentry_name+0x1f4/0x440 <...snip...> ? dentry_name+0x2fa/0x440 vsnprintf+0x1f3/0x4f0 vprintk_store+0x23a/0x540 vprintk_emit+0x6d/0x330 _printk+0x58/0x80 dump_mapping+0x10b/0x1a0 ? __pfx_free_object_rcu+0x10/0x10 __dump_page+0x26b/0x3e0 ? vprintk_emit+0xe0/0x330 ? _printk+0x58/0x80 ? dump_page+0x17/0x50 dump_page+0x17/0x50 do_migrate_range+0x2f7/0x7f0 ? do_migrate_range+0x42/0x7f0 ? offline_pages+0x2f4/0x8c0 offline_pages+0x60a/0x8c0 memory_subsys_offline+0x9f/0x1c0 ? lockdep_hardirqs_on+0x77/0x100 ? _raw_spin_unlock_irqrestore+0x38/0x60 device_offline+0xe3/0x110 state_store+0x6e/0xc0 kernfs_fop_write_iter+0x143/0x200 vfs_write+0x39f/0x560 ksys_write+0x65/0xf0 do_syscall_64+0x62/0x130  Previously\, some sanity check have been done in dump_mapping() before the print facility parsing '%pd' though\, it's still possible to run into an invalid dentry.d_name.name.  Since dump_mapping() only needs to dump the filename only\, retrieve it by itself in a safer way to prevent an unnecessary crash.  Note that either retrieving the filename with '%pd' or strncpy_from_kernel_nofault()\, the filename could be unreliable.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46803,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdkfd: Check debug trap enable before write dbg_ev_file  In interrupt context\, write dbg_ev_file will be run by work queue. It will cause write dbg_ev_file execution after debug_trap_disable\, which will cause NULL pointer access. v2: cancel work ""debug_event_workarea"" before set dbg_ev_file as NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12456,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the MPT3COMMAND case in _ctl_ioctl_main in drivers/scsi/mpt3sas/mpt3sas_ctl.c in the Linux kernel through 5.1.5. It allows local users to cause a denial of service or possibly have unspecified other impact by changing the value of ioc_number between two kernel reads of that value\, aka a ""double fetch"" vulnerability. NOTE: a third party reports that this is unexploitable because the doubly fetched value is not used",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12455,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in sunxi_divs_clk_setup in drivers/clk/sunxi/clk-sunxi.c in the Linux kernel through 5.1.5. There is an unchecked kstrndup of derived_name\, which might allow an attacker to cause a denial of service (NULL pointer dereference and system crash). NOTE: This id is disputed as not being an issue because “The memory allocation that was not checked is part of a code that only runs at boot time\, before user processes are started. Therefore\, there is no possibility for an unprivileged user to control it\, and no denial of service.”",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56531,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: caiaq: Use snd_card_free_when_closed() at disconnection  The USB disconnect callback is supposed to be short and not too-long waiting.  OTOH\, the current code uses snd_card_free() at disconnection\, but this waits for the close of all used fds\, hence it can take long.  It eventually blocks the upper layer USB ioctls\, which may trigger a soft lockup.  An easy workaround is to replace snd_card_free() with snd_card_free_when_closed().  This variant returns immediately while the release of resources is done asynchronously by the card device release at the last close.  This patch also splits the code to the disconnect and the free phases; the former is called immediately at the USB disconnect callback while the latter is called from the card destructor.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26842,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: core: Fix shift issue in ufshcd_clear_cmd()  When task_tag >= 32 (in MCQ mode) and sizeof(unsigned int) == 4\, 1U << task_tag will out of bounds for a u32 mask. Fix this up to prevent SHIFT_ISSUE (bitwise shifts that are out of bounds for their data type).  [name:debug_monitors&]Unexpected kernel BRK exception at EL1 [name:traps&]Internal error: BRK handler: 00000000f2005514 [#1] PREEMPT SMP [name:mediatek_cpufreq_hw&]cpufreq stop DVFS log done [name:mrdump&]Kernel Offset: 0x1ba5800000 from 0xffffffc008000000 [name:mrdump&]PHYS_OFFSET: 0x80000000 [name:mrdump&]pstate: 22400005 (nzCv daif +PAN -UAO) [name:mrdump&]pc : [0xffffffdbaf52bb2c] ufshcd_clear_cmd+0x280/0x288 [name:mrdump&]lr : [0xffffffdbaf52a774] ufshcd_wait_for_dev_cmd+0x3e4/0x82c [name:mrdump&]sp : ffffffc0081471b0 <snip> Workqueue: ufs_eh_wq_0 ufshcd_err_handler Call trace:  dump_backtrace+0xf8/0x144  show_stack+0x18/0x24  dump_stack_lvl+0x78/0x9c  dump_stack+0x18/0x44  mrdump_common_die+0x254/0x480 [mrdump]  ipanic_die+0x20/0x30 [mrdump]  notify_die+0x15c/0x204  die+0x10c/0x5f8  arm64_notify_die+0x74/0x13c  do_debug_exception+0x164/0x26c  el1_dbg+0x64/0x80  el1h_64_sync_handler+0x3c/0x90  el1h_64_sync+0x68/0x6c  ufshcd_clear_cmd+0x280/0x288  ufshcd_wait_for_dev_cmd+0x3e4/0x82c  ufshcd_exec_dev_cmd+0x5bc/0x9ac  ufshcd_verify_dev_init+0x84/0x1c8  ufshcd_probe_hba+0x724/0x1ce0  ufshcd_host_reset_and_restore+0x260/0x574  ufshcd_reset_and_restore+0x138/0xbd0  ufshcd_err_handler+0x1218/0x2f28  process_one_work+0x5fc/0x1140  worker_thread+0x7d8/0xe20  kthread+0x25c/0x468  ret_from_fork+0x10/0x20",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56532,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: us122l: Use snd_card_free_when_closed() at disconnection  The USB disconnect callback is supposed to be short and not too-long waiting.  OTOH\, the current code uses snd_card_free() at disconnection\, but this waits for the close of all used fds\, hence it can take long.  It eventually blocks the upper layer USB ioctls\, which may trigger a soft lockup.  An easy workaround is to replace snd_card_free() with snd_card_free_when_closed().  This variant returns immediately while the release of resources is done asynchronously by the card device release at the last close.  The loop of us122l->mmap_count check is dropped as well.  The check is useless for the asynchronous operation with *_when_closed().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26841,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Update cpu_sibling_map when disabling nonboot CPUs  Update cpu_sibling_map when disabling nonboot CPUs by defining & calling clear_cpu_sibling_map()\, otherwise we get such errors on SMT systems:  jump label: negative count! WARNING: CPU: 6 PID: 45 at kernel/jump_label.c:263 __static_key_slow_dec_cpuslocked+0xec/0x100 CPU: 6 PID: 45 Comm: cpuhp/6 Not tainted 6.8.0-rc5+ #1340 pc 90000000004c302c ra 90000000004c302c tp 90000001005bc000 sp 90000001005bfd20 a0 000000000000001b a1 900000000224c278 a2 90000001005bfb58 a3 900000000224c280 a4 900000000224c278 a5 90000001005bfb50 a6 0000000000000001 a7 0000000000000001 t0 ce87a4763eb5234a t1 ce87a4763eb5234a t2 0000000000000000 t3 0000000000000000 t4 0000000000000006 t5 0000000000000000 t6 0000000000000064 t7 0000000000001964 t8 000000000009ebf6 u0 9000000001f2a068 s9 0000000000000000 s0 900000000246a2d8 s1 ffffffffffffffff s2 ffffffffffffffff s3 90000000021518c0 s4 0000000000000040 s5 9000000002151058 s6 9000000009828e40 s7 00000000000000b4 s8 0000000000000006    ra: 90000000004c302c __static_key_slow_dec_cpuslocked+0xec/0x100   ERA: 90000000004c302c __static_key_slow_dec_cpuslocked+0xec/0x100  CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE)  PRMD: 00000004 (PPLV0 +PIE -PWE)  EUEN: 00000000 (-FPE -SXE -ASXE -BTE)  ECFG: 00071c1c (LIE=2-4\,10-12 VS=7) ESTAT: 000c0000 [BRK] (IS= ECode=12 EsubCode=0)  PRID: 0014d000 (Loongson-64bit\, Loongson-3A6000-HV) CPU: 6 PID: 45 Comm: cpuhp/6 Not tainted 6.8.0-rc5+ #1340 Stack : 0000000000000000 900000000203f258 900000000179afc8 90000001005bc000         90000001005bf980 0000000000000000 90000001005bf988 9000000001fe0be0         900000000224c280 900000000224c278 90000001005bf8c0 0000000000000001         0000000000000001 ce87a4763eb5234a 0000000007f38000 90000001003f8cc0         0000000000000000 0000000000000006 0000000000000000 4c206e6f73676e6f         6f4c203a656d616e 000000000009ec99 0000000007f38000 0000000000000000         900000000214b000 9000000001fe0be0 0000000000000004 0000000000000000         0000000000000107 0000000000000009 ffffffffffafdabe 00000000000000b4         0000000000000006 90000000004c302c 9000000000224528 00005555939a0c7c         00000000000000b0 0000000000000004 0000000000000000 0000000000071c1c         ... Call Trace: [<9000000000224528>] show_stack+0x48/0x1a0 [<900000000179afc8>] dump_stack_lvl+0x78/0xa0 [<9000000000263ed0>] __warn+0x90/0x1a0 [<90000000017419b8>] report_bug+0x1b8/0x280 [<900000000179c564>] do_bp+0x264/0x420 [<90000000004c302c>] __static_key_slow_dec_cpuslocked+0xec/0x100 [<90000000002b4d7c>] sched_cpu_deactivate+0x2fc/0x300 [<9000000000266498>] cpuhp_invoke_callback+0x178/0x8a0 [<9000000000267f70>] cpuhp_thread_fun+0xf0/0x240 [<90000000002a117c>] smpboot_thread_fn+0x1dc/0x2e0 [<900000000029a720>] kthread+0x140/0x160 [<9000000000222288>] ret_from_kernel_thread+0xc/0xa4",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-6228,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"An issue was found in the tiffcp utility distributed by the libtiff package where a crafted TIFF file on processing may cause a heap-based buffer overflow leads to an application crash.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56533,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: usx2y: Use snd_card_free_when_closed() at disconnection  The USB disconnect callback is supposed to be short and not too-long waiting.  OTOH\, the current code uses snd_card_free() at disconnection\, but this waits for the close of all used fds\, hence it can take long.  It eventually blocks the upper layer USB ioctls\, which may trigger a soft lockup.  An easy workaround is to replace snd_card_free() with snd_card_free_when_closed().  This variant returns immediately while the release of resources is done asynchronously by the card device release at the last close.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-2908,libtiff6,MEDIUM,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"A null pointer dereference issue was found in Libtiff's tif_dir.c file. This issue may allow an attacker to pass a crafted TIFF image file to the tiffcp utility which triggers a runtime error that causes undefined behavior. This will result in an application crash\, eventually leading to a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50111,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Enable IRQ if do_ale() triggered in irq-enabled context  Unaligned access exception can be triggered in irq-enabled context such as user mode\, in this case do_ale() may call get_user() which may cause sleep. Then we will get:   BUG: sleeping function called from invalid context at arch/loongarch/kernel/access-helper.h:7  in_atomic(): 0\, irqs_disabled(): 1\, non_block: 0\, pid: 129\, name: modprobe  preempt_count: 0\, expected: 0  RCU nest depth: 0\, expected: 0  CPU: 0 UID: 0 PID: 129 Comm: modprobe Tainted: G        W          6.12.0-rc1+ #1723  Tainted: [W]=WARN  Stack : 9000000105e0bd48 0000000000000000 9000000003803944 9000000105e08000          9000000105e0bc70 9000000105e0bc78 0000000000000000 0000000000000000          9000000105e0bc78 0000000000000001 9000000185e0ba07 9000000105e0b890          ffffffffffffffff 9000000105e0bc78 73924b81763be05b 9000000100194500          000000000000020c 000000000000000a 0000000000000000 0000000000000003          00000000000023f0 00000000000e1401 00000000072f8000 0000007ffbb0e260          0000000000000000 0000000000000000 9000000005437650 90000000055d5000          0000000000000000 0000000000000003 0000007ffbb0e1f0 0000000000000000          0000005567b00490 0000000000000000 9000000003803964 0000007ffbb0dfec          00000000000000b0 0000000000000007 0000000000000003 0000000000071c1d          ...  Call Trace:  [<9000000003803964>] show_stack+0x64/0x1a0  [<9000000004c57464>] dump_stack_lvl+0x74/0xb0  [<9000000003861ab4>] __might_resched+0x154/0x1a0  [<900000000380c96c>] emulate_load_store_insn+0x6c/0xf60  [<9000000004c58118>] do_ale+0x78/0x180  [<9000000003801bc8>] handle_ale+0x128/0x1e0  So enable IRQ if unaligned access exception is triggered in irq-enabled context to fix it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50112,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/lam: Disable ADDRESS_MASKING in most cases  Linear Address Masking (LAM) has a weakness related to transient execution as described in the SLAM paper[1]. Unless Linear Address Space Separation (LASS) is enabled this weakness may be exploitable.  Until kernel adds support for LASS[2]\, only allow LAM for COMPILE_TEST\, or when speculation mitigations have been disabled at compile time\, otherwise keep LAM disabled.  There are no processors in market that support LAM yet\, so currently nobody is affected by this issue.  [1] SLAM: https://download.vusec.net/papers/slam_sp24.pdf [2] LASS: https://lore.kernel.org/lkml/20230609183632.48706-1-alexander.shishkin@linux.intel.com/  [ dhansen: update SPECULATION_MITIGATIONS -> CPU_MITIGATIONS ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-39479,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/i915/hwmon: Get rid of devm  When both hwmon and hwmon drvdata (on which hwmon depends) are device managed resources\, the expectation\, on device unbind\, is that hwmon will be released before drvdata. However\, in i915 there are two separate code paths\, which both release either drvdata or hwmon and either can be released before the other. These code paths (for device unbind) are as follows (see also the bug referenced below):  Call Trace: release_nodes+0x11/0x70 devres_release_group+0xb2/0x110 component_unbind_all+0x8d/0xa0 component_del+0xa5/0x140 intel_pxp_tee_component_fini+0x29/0x40 [i915] intel_pxp_fini+0x33/0x80 [i915] i915_driver_remove+0x4c/0x120 [i915] i915_pci_remove+0x19/0x30 [i915] pci_device_remove+0x32/0xa0 device_release_driver_internal+0x19c/0x200 unbind_store+0x9c/0xb0  and  Call Trace: release_nodes+0x11/0x70 devres_release_all+0x8a/0xc0 device_unbind_cleanup+0x9/0x70 device_release_driver_internal+0x1c1/0x200 unbind_store+0x9c/0xb0  This means that in i915\, if use devm\, we cannot gurantee that hwmon will always be released before drvdata. Which means that we have a uaf if hwmon sysfs is accessed when drvdata has been released but hwmon hasn't.  The only way out of this seems to be do get rid of devm_ and release/free everything explicitly during device unbind.  v2: Change commit message and other minor code changes v3: Cleanup from i915_hwmon_register on error (Armin Wolf) v4: Eliminate potential static analyzer warning (Rodrigo)     Eliminate fetch_and_zero (Jani) v5: Restore previous logic for ddat_gt->hwmon_dev error return (Andi)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56538,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm: zynqmp_kms: Unplug DRM device before removal  Prevent userspace accesses to the DRM device from causing use-after-frees by unplugging the device before we remove it. This causes any further userspace accesses to result in an error without further calls into this driver's internals.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-27516,Jinja2,MEDIUM,3.1.4,3.1.6,"Jinja is an extensible templating engine. Prior to 3.1.6\, an oversight in how the Jinja sandboxed environment interacts with the |attr filter allows an attacker that controls the content of a template to execute arbitrary Python code. To exploit the vulnerability\, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates. Jinja's sandbox does catch calls to str.format and ensures they don't escape the sandbox. However\, it's possible to use the |attr filter to get a reference to a string's plain format method\, bypassing the sandbox. After the fix\, the |attr filter no longer bypasses the environment's attribute lookup. This vulnerability is fixed in 3.1.6.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56539,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mwifiex: Fix memcpy() field-spanning write warning in mwifiex_config_scan()  Replace one-element array with a flexible-array member in `struct mwifiex_ie_types_wildcard_ssid_params` to fix the following warning on a MT8173 Chromebook (mt8173-elm-hana):  [  356.775250] ------------[ cut here ]------------ [  356.784543] memcpy: detected field-spanning write (size 6) of single field ""wildcard_ssid_tlv->ssid"" at drivers/net/wireless/marvell/mwifiex/scan.c:904 (size 1) [  356.813403] WARNING: CPU: 3 PID: 742 at drivers/net/wireless/marvell/mwifiex/scan.c:904 mwifiex_scan_networks+0x4fc/0xf28 [mwifiex]  The ""(size 6)"" above is exactly the length of the SSID of the network this device was connected to. The source of the warning looks like:      ssid_len = user_scan_in->ssid_list[i].ssid_len;     [...]     memcpy(wildcard_ssid_tlv->ssid\,            user_scan_in->ssid_list[i].ssid\, ssid_len);  There is a #define WILDCARD_SSID_TLV_MAX_SIZE that uses sizeof() on this struct\, but it already didn't account for the size of the one-element array\, so it doesn't need to be changed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-19378,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel 5.0.21\, mounting a crafted btrfs filesystem image can lead to slab-out-of-bounds write access in index_rbio_pages in fs/btrfs/raid56.c.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52888,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  media: mediatek: vcodec: Only free buffer VA that is not NULL  In the MediaTek vcodec driver\, while mtk_vcodec_mem_free() is mostly called only when the buffer to free exists\, there are some instances that didn't do the check and triggered warnings in practice.  We believe those checks were forgotten unintentionally. Add the checks back to fix the warnings.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-2953,torch,LOW,2.5.1,N/A,"A vulnerability\, which was classified as problematic\, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.",|tykio/smart-ner-redact|
CVE-2024-58034,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  memory: tegra20-emc: fix an OF node reference bug in tegra_emc_find_node_by_ram_code()  As of_find_node_by_name() release the reference of the argument device node\, tegra_emc_find_node_by_ram_code() releases some device nodes while still in use\, resulting in possible UAFs. According to the bindings and the in-tree DTS files\, the ""emc-tables"" node is always device's child node with the property ""nvidia\,use-ram-code""\, and the ""lpddr2"" node is a child of the ""emc-tables"" node. Thus utilize the for_each_child_of_node() macro and of_get_child_by_name() instead of of_find_node_by_name() to simplify the code.  This bug was found by an experimental verification tool that I am developing.  [krzysztof: applied v1\, adjust the commit msg to incorporate v2 parts]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52797,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drivers: perf: Check find_first_bit() return value  We must check the return value of find_first_bit() before using the return value as an index array since it happens to overflow the array and then panic:  [  107.318430] Kernel BUG [#1] [  107.319434] CPU: 3 PID: 1238 Comm: kill Tainted: G            E      6.6.0-rc6ubuntu-defconfig #2 [  107.319465] Hardware name: riscv-virtio\,qemu (DT) [  107.319551] epc : pmu_sbi_ovf_handler+0x3a4/0x3ae [  107.319840]  ra : pmu_sbi_ovf_handler+0x52/0x3ae [  107.319868] epc : ffffffff80a0a77c ra : ffffffff80a0a42a sp : ffffaf83fecda350 [  107.319884]  gp : ffffffff823961a8 tp : ffffaf8083db1dc0 t0 : ffffaf83fecda480 [  107.319899]  t1 : ffffffff80cafe62 t2 : 000000000000ff00 s0 : ffffaf83fecda520 [  107.319921]  s1 : ffffaf83fecda380 a0 : 00000018fca29df0 a1 : ffffffffffffffff [  107.319936]  a2 : 0000000001073734 a3 : 0000000000000004 a4 : 0000000000000000 [  107.319951]  a5 : 0000000000000040 a6 : 000000001d1c8774 a7 : 0000000000504d55 [  107.319965]  s2 : ffffffff82451f10 s3 : ffffffff82724e70 s4 : 000000000000003f [  107.319980]  s5 : 0000000000000011 s6 : ffffaf8083db27c0 s7 : 0000000000000000 [  107.319995]  s8 : 0000000000000001 s9 : 00007fffb45d6558 s10: 00007fffb45d81a0 [  107.320009]  s11: ffffaf7ffff60000 t3 : 0000000000000004 t4 : 0000000000000000 [  107.320023]  t5 : ffffaf7f80000000 t6 : ffffaf8000000000 [  107.320037] status: 0000000200000100 badaddr: 0000000000000000 cause: 0000000000000003 [  107.320081] [<ffffffff80a0a77c>] pmu_sbi_ovf_handler+0x3a4/0x3ae [  107.320112] [<ffffffff800b42d0>] handle_percpu_devid_irq+0x9e/0x1a0 [  107.320131] [<ffffffff800ad92c>] generic_handle_domain_irq+0x28/0x36 [  107.320148] [<ffffffff8065f9f8>] riscv_intc_irq+0x36/0x4e [  107.320166] [<ffffffff80caf4a0>] handle_riscv_irq+0x54/0x86 [  107.320189] [<ffffffff80cb0036>] do_irq+0x64/0x96 [  107.320271] Code: 85a6 855e b097 ff7f 80e7 9220 b709 9002 4501 bbd9 (9002) 6097 [  107.320585] ---[ end trace 0000000000000000 ]--- [  107.320704] Kernel panic - not syncing: Fatal exception in interrupt [  107.320775] SMP: stopping secondary CPUs [  107.321219] Kernel Offset: 0x0 from 0xffffffff80000000 [  107.333051] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31439,libsystemd0,LOW,252.36-1~deb12u1,N/A,"An issue was discovered in systemd 253. An attacker can modify the contents of past events in a sealed log file and then adjust the file such that checking the integrity shows no error\, despite modifications. NOTE: the vendor reportedly sent ""a reply denying that any of the finding was a security vulnerability.""",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31438,libsystemd0,LOW,252.36-1~deb12u1,N/A,"An issue was discovered in systemd 253. An attacker can truncate a sealed log file and then resume log sealing such that checking the integrity shows no error\, despite modifications. NOTE: the vendor reportedly sent ""a reply denying that any of the finding was a security vulnerability.""",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-48875,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: don't take dev_replace rwsem on task already holding it  Running fstests btrfs/011 with MKFS_OPTIONS=""-O rst"" to force the usage of the RAID stripe-tree\, we get the following splat from lockdep:   BTRFS info (device sdd): dev_replace from /dev/sdd (devid 1) to /dev/sdb started   ============================================  WARNING: possible recursive locking detected  6.11.0-rc3-btrfs-for-next #599 Not tainted  --------------------------------------------  btrfs/2326 is trying to acquire lock:  ffff88810f215c98 (&fs_info->dev_replace.rwsem){++++}-{3:3}\, at: btrfs_map_block+0x39f/0x2250   but task is already holding lock:  ffff88810f215c98 (&fs_info->dev_replace.rwsem){++++}-{3:3}\, at: btrfs_map_block+0x39f/0x2250   other info that might help us debug this:   Possible unsafe locking scenario:          CPU0         ----    lock(&fs_info->dev_replace.rwsem);    lock(&fs_info->dev_replace.rwsem);    *** DEADLOCK ***    May be due to missing lock nesting notation   1 lock held by btrfs/2326:   #0: ffff88810f215c98 (&fs_info->dev_replace.rwsem){++++}-{3:3}\, at: btrfs_map_block+0x39f/0x2250   stack backtrace:  CPU: 1 UID: 0 PID: 2326 Comm: btrfs Not tainted 6.11.0-rc3-btrfs-for-next #599  Hardware name: Bochs Bochs\, BIOS Bochs 01/01/2011  Call Trace:   <TASK>   dump_stack_lvl+0x5b/0x80   __lock_acquire+0x2798/0x69d0   ? __pfx___lock_acquire+0x10/0x10   ? __pfx___lock_acquire+0x10/0x10   lock_acquire+0x19d/0x4a0   ? btrfs_map_block+0x39f/0x2250   ? __pfx_lock_acquire+0x10/0x10   ? find_held_lock+0x2d/0x110   ? lock_is_held_type+0x8f/0x100   down_read+0x8e/0x440   ? btrfs_map_block+0x39f/0x2250   ? __pfx_down_read+0x10/0x10   ? do_raw_read_unlock+0x44/0x70   ? _raw_read_unlock+0x23/0x40   btrfs_map_block+0x39f/0x2250   ? btrfs_dev_replace_by_ioctl+0xd69/0x1d00   ? btrfs_bio_counter_inc_blocked+0xd9/0x2e0   ? __kasan_slab_alloc+0x6e/0x70   ? __pfx_btrfs_map_block+0x10/0x10   ? __pfx_btrfs_bio_counter_inc_blocked+0x10/0x10   ? kmem_cache_alloc_noprof+0x1f2/0x300   ? mempool_alloc_noprof+0xed/0x2b0   btrfs_submit_chunk+0x28d/0x17e0   ? __pfx_btrfs_submit_chunk+0x10/0x10   ? bvec_alloc+0xd7/0x1b0   ? bio_add_folio+0x171/0x270   ? __pfx_bio_add_folio+0x10/0x10   ? __kasan_check_read+0x20/0x20   btrfs_submit_bio+0x37/0x80   read_extent_buffer_pages+0x3df/0x6c0   btrfs_read_extent_buffer+0x13e/0x5f0   read_tree_block+0x81/0xe0   read_block_for_search+0x4bd/0x7a0   ? __pfx_read_block_for_search+0x10/0x10   btrfs_search_slot+0x78d/0x2720   ? __pfx_btrfs_search_slot+0x10/0x10   ? lock_is_held_type+0x8f/0x100   ? kasan_save_track+0x14/0x30   ? __kasan_slab_alloc+0x6e/0x70   ? kmem_cache_alloc_noprof+0x1f2/0x300   btrfs_get_raid_extent_offset+0x181/0x820   ? __pfx_lock_acquire+0x10/0x10   ? __pfx_btrfs_get_raid_extent_offset+0x10/0x10   ? down_read+0x194/0x440   ? __pfx_down_read+0x10/0x10   ? do_raw_read_unlock+0x44/0x70   ? _raw_read_unlock+0x23/0x40   btrfs_map_block+0x5b5/0x2250   ? __pfx_btrfs_map_block+0x10/0x10   scrub_submit_initial_read+0x8fe/0x11b0   ? __pfx_scrub_submit_initial_read+0x10/0x10   submit_initial_group_read+0x161/0x3a0   ? lock_release+0x20e/0x710   ? __pfx_submit_initial_group_read+0x10/0x10   ? __pfx_lock_release+0x10/0x10   scrub_simple_mirror.isra.0+0x3eb/0x580   scrub_stripe+0xe4d/0x1440   ? lock_release+0x20e/0x710   ? __pfx_scrub_stripe+0x10/0x10   ? __pfx_lock_release+0x10/0x10   ? do_raw_read_unlock+0x44/0x70   ? _raw_read_unlock+0x23/0x40   scrub_chunk+0x257/0x4a0   scrub_enumerate_chunks+0x64c/0xf70   ? __mutex_unlock_slowpath+0x147/0x5f0   ? __pfx_scrub_enumerate_chunks+0x10/0x10   ? bit_wait_timeout+0xb0/0x170   ? __up_read+0x189/0x700   ? scrub_workers_get+0x231/0x300   ? up_write+0x490/0x4f0   btrfs_scrub_dev+0x52e/0xcd0   ? create_pending_snapshots+0x230/0x250   ? __pfx_btrfs_scrub_dev+0x10/0x10   btrfs_dev_replace_by_ioctl+0xd69/0x1d00   ? lock_acquire+0x19d/0x4a0   ? __pfx_btrfs_dev_replace_by_ioctl+0x10/0x10   ? ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-15719,libldap-2.5-0,LOW,2.5.13+dfsg-5,N/A,"libldap in certain third-party OpenLDAP packages has a certificate-validation flaw when the third-party package is asserting RFC6125 support. It considers CN even when there is a non-matching subjectAltName (SAN). This is fixed in\, for example\, openldap-2.4.46-10.el8 in Red Hat Enterprise Linux.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-4543,linux-libc-dev,LOW,6.1.115-1,N/A,"A flaw named ""EntryBleed"" was found in the Linux Kernel Page Table Isolation (KPTI). This issue could allow a local attacker to leak KASLR base via prefetch side-channels based on TLB timing for Intel systems.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-31437,libsystemd0,LOW,252.36-1~deb12u1,N/A,"An issue was discovered in systemd 253. An attacker can modify a sealed log file such that\, in some views\, not all existing and sealed log messages are displayed. NOTE: the vendor reportedly sent ""a reply denying that any of the finding was a security vulnerability.""",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-30258,gpgv,LOW,2.2.40-1.1,N/A,"In GnuPG before 2.5.5\, if a user chooses to import a certificate with certain crafted subkey data that lacks a valid backsig or that has incorrect usage flags\, the user loses the ability to verify signatures made from certain other signing keys\, aka a ""verification DoS.""",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23129,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath11k: Clear affinity hint before calling ath11k_pcic_free_irq() in error path  If a shared IRQ is used by the driver due to platform limitation\, then the IRQ affinity hint is set right after the allocation of IRQ vectors in ath11k_pci_alloc_msi(). This does no harm unless one of the functions requesting the IRQ fails and attempt to free the IRQ. This results in the below warning:  WARNING: CPU: 7 PID: 349 at kernel/irq/manage.c:1929 free_irq+0x278/0x29c Call trace:  free_irq+0x278/0x29c  ath11k_pcic_free_irq+0x70/0x10c [ath11k]  ath11k_pci_probe+0x800/0x820 [ath11k_pci]  local_pci_probe+0x40/0xbc  The warning is due to not clearing the affinity hint before freeing the IRQs.  So to fix this issue\, clear the IRQ affinity hint before calling ath11k_pcic_free_irq() in the error path. The affinity will be cleared once again further down the error path due to code organization\, but that does no harm.  Tested-on: QCA6390 hw2.0 PCI WLAN.HST.1.0.1-05266-QCAHSTSWPLZ_V2_TO_X86-1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21821,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  fbdev: omap: use threaded IRQ for LCD DMA  When using touchscreen and framebuffer\, Nokia 770 crashes easily with:      BUG: scheduling while atomic: irq/144-ads7846/82/0x00010000     Modules linked in: usb_f_ecm g_ether usb_f_rndis u_ether libcomposite configfs omap_udc ohci_omap ohci_hcd     CPU: 0 UID: 0 PID: 82 Comm: irq/144-ads7846 Not tainted 6.12.7-770 #2     Hardware name: Nokia 770     Call trace:      unwind_backtrace from show_stack+0x10/0x14      show_stack from dump_stack_lvl+0x54/0x5c      dump_stack_lvl from __schedule_bug+0x50/0x70      __schedule_bug from __schedule+0x4d4/0x5bc      __schedule from schedule+0x34/0xa0      schedule from schedule_preempt_disabled+0xc/0x10      schedule_preempt_disabled from __mutex_lock.constprop.0+0x218/0x3b4      __mutex_lock.constprop.0 from clk_prepare_lock+0x38/0xe4      clk_prepare_lock from clk_set_rate+0x18/0x154      clk_set_rate from sossi_read_data+0x4c/0x168      sossi_read_data from hwa742_read_reg+0x5c/0x8c      hwa742_read_reg from send_frame_handler+0xfc/0x300      send_frame_handler from process_pending_requests+0x74/0xd0      process_pending_requests from lcd_dma_irq_handler+0x50/0x74      lcd_dma_irq_handler from __handle_irq_event_percpu+0x44/0x130      __handle_irq_event_percpu from handle_irq_event+0x28/0x68      handle_irq_event from handle_level_irq+0x9c/0x170      handle_level_irq from generic_handle_domain_irq+0x2c/0x3c      generic_handle_domain_irq from omap1_handle_irq+0x40/0x8c      omap1_handle_irq from generic_handle_arch_irq+0x28/0x3c      generic_handle_arch_irq from call_with_stack+0x1c/0x24      call_with_stack from __irq_svc+0x94/0xa8     Exception stack(0xc5255da0 to 0xc5255de8)     5da0: 00000001 c22fc620 00000000 00000000 c08384a8 c106fc00 00000000 c240c248     5dc0: c113a600 c3f6ec30 00000001 00000000 c22fc620 c5255df0 c22fc620 c0279a94     5de0: 60000013 ffffffff      __irq_svc from clk_prepare_lock+0x4c/0xe4      clk_prepare_lock from clk_get_rate+0x10/0x74      clk_get_rate from uwire_setup_transfer+0x40/0x180      uwire_setup_transfer from spi_bitbang_transfer_one+0x2c/0x9c      spi_bitbang_transfer_one from spi_transfer_one_message+0x2d0/0x664      spi_transfer_one_message from __spi_pump_transfer_message+0x29c/0x498      __spi_pump_transfer_message from __spi_sync+0x1f8/0x2e8      __spi_sync from spi_sync+0x24/0x40      spi_sync from ads7846_halfd_read_state+0x5c/0x1c0      ads7846_halfd_read_state from ads7846_irq+0x58/0x348      ads7846_irq from irq_thread_fn+0x1c/0x78      irq_thread_fn from irq_thread+0x120/0x228      irq_thread from kthread+0xc8/0xe8      kthread from ret_from_fork+0x14/0x28  As a quick fix\, switch to a threaded IRQ which provides a stable system.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22115,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix block group refcount race in btrfs_create_pending_block_groups()  Block group creation is done in two phases\, which results in a slightly unintuitive property: a block group can be allocated/deallocated from after btrfs_make_block_group() adds it to the space_info with btrfs_add_bg_to_space_info()\, but before creation is completely completed in btrfs_create_pending_block_groups(). As a result\, it is possible for a block group to go unused and have 'btrfs_mark_bg_unused' called on it concurrently with 'btrfs_create_pending_block_groups'. This causes a number of issues\, which were fixed with the block group flag 'BLOCK_GROUP_FLAG_NEW'.  However\, this fix is not quite complete. Since it does not use the unused_bg_lock\, it is possible for the following race to occur:  btrfs_create_pending_block_groups            btrfs_mark_bg_unused                                            if list_empty // false         list_del_init         clear_bit                                            else if (test_bit) // true                                                 list_move_tail  And we get into the exact same broken ref count and invalid new_bgs state for transaction cleanup that BLOCK_GROUP_FLAG_NEW was designed to prevent.  The broken refcount aspect will result in a warning like:    [1272.943527] refcount_t: underflow; use-after-free.   [1272.943967] WARNING: CPU: 1 PID: 61 at lib/refcount.c:28 refcount_warn_saturate+0xba/0x110   [1272.944731] Modules linked in: btrfs virtio_net xor zstd_compress raid6_pq null_blk [last unloaded: btrfs]   [1272.945550] CPU: 1 UID: 0 PID: 61 Comm: kworker/u32:1 Kdump: loaded Tainted: G        W          6.14.0-rc5+ #108   [1272.946368] Tainted: [W]=WARN   [1272.946585] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS Arch Linux 1.16.3-1-1 04/01/2014   [1272.947273] Workqueue: btrfs_discard btrfs_discard_workfn [btrfs]   [1272.947788] RIP: 0010:refcount_warn_saturate+0xba/0x110   [1272.949532] RSP: 0018:ffffbf1200247df0 EFLAGS: 00010282   [1272.949901] RAX: 0000000000000000 RBX: ffffa14b00e3f800 RCX: 0000000000000000   [1272.950437] RDX: 0000000000000000 RSI: ffffbf1200247c78 RDI: 00000000ffffdfff   [1272.950986] RBP: ffffa14b00dc2860 R08: 00000000ffffdfff R09: ffffffff90526268   [1272.951512] R10: ffffffff904762c0 R11: 0000000063666572 R12: ffffa14b00dc28c0   [1272.952024] R13: 0000000000000000 R14: ffffa14b00dc2868 R15: 000001285dcd12c0   [1272.952850] FS:  0000000000000000(0000) GS:ffffa14d33c40000(0000) knlGS:0000000000000000   [1272.953458] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   [1272.953931] CR2: 00007f838cbda000 CR3: 000000010104e000 CR4: 00000000000006f0   [1272.954474] Call Trace:   [1272.954655]  <TASK>   [1272.954812]  ? refcount_warn_saturate+0xba/0x110   [1272.955173]  ? __warn.cold+0x93/0xd7   [1272.955487]  ? refcount_warn_saturate+0xba/0x110   [1272.955816]  ? report_bug+0xe7/0x120   [1272.956103]  ? handle_bug+0x53/0x90   [1272.956424]  ? exc_invalid_op+0x13/0x60   [1272.956700]  ? asm_exc_invalid_op+0x16/0x20   [1272.957011]  ? refcount_warn_saturate+0xba/0x110   [1272.957399]  btrfs_discard_cancel_work.cold+0x26/0x2b [btrfs]   [1272.957853]  btrfs_put_block_group.cold+0x5d/0x8e [btrfs]   [1272.958289]  btrfs_discard_workfn+0x194/0x380 [btrfs]   [1272.958729]  process_one_work+0x130/0x290   [1272.959026]  worker_thread+0x2ea/0x420   [1272.959335]  ? __pfx_worker_thread+0x10/0x10   [1272.959644]  kthread+0xd7/0x1c0   [1272.959872]  ? __pfx_kthread+0x10/0x10   [1272.960172]  ret_from_fork+0x30/0x50   [1272.960474]  ? __pfx_kthread+0x10/0x10   [1272.960745]  ret_from_fork_asm+0x1a/0x30   [1272.961035]  </TASK>   [1272.961238] ---[ end trace 0000000000000000 ]---  Though we have seen them in the async discard workfn as well. It is most likely to happen after a relocation finishes which cancels discard\, tears down the block group\, etc.  Fix this fully by taking the lock arou ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21820,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  tty: xilinx_uartps: split sysrq handling  lockdep detects the following circular locking dependency:  CPU 0                      CPU 1 ========================== ============================ cdns_uart_isr()            printk()   uart_port_lock(port)       console_lock() \t\t\t     cdns_uart_console_write()                                if (!port->sysrq)                                  uart_port_lock(port)   uart_handle_break()     port->sysrq = ...   uart_handle_sysrq_char()     printk()       console_lock()  The fixed commit attempts to avoid this situation by only taking the port lock in cdns_uart_console_write if port->sysrq unset. However\, if (as shown above) cdns_uart_console_write runs before port->sysrq is set\, then it will try to take the port lock anyway. This may result in a deadlock.  Fix this by splitting sysrq handling into two parts. We use the prepare helper under the port lock and defer handling until we release the lock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26662,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix 'panel_cntl' could be null in 'dcn21_set_backlight_level()'  'panel_cntl' structure used to control the display panel could be null\, dereferencing it could lead to a null pointer access.  Fixes the below: drivers/gpu/drm/amd/amdgpu/../display/dc/hwss/dcn21/dcn21_hwseq.c:269 dcn21_set_backlight_level() error: we previously assumed 'panel_cntl' could be null (see line 250)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21785,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  arm64: cacheinfo: Avoid out-of-bounds write to cacheinfo array  The loop that detects/populates cache information already has a bounds check on the array size but does not account for cache levels with separate data/instructions cache. Fix this by incrementing the index for any populated leaf (instead of any populated level).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21823,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  batman-adv: Drop unmanaged ELP metric worker  The ELP worker needs to calculate new metric values for all neighbors ""reachable"" over an interface. Some of the used metric sources require locks which might need to sleep. This sleep is incompatible with the RCU list iterator used for the recorded neighbors. The initial approach to work around of this problem was to queue another work item per neighbor and then run this in a new context.  Even when this solved the RCU vs might_sleep() conflict\, it has a major problems: Nothing was stopping the work item in case it is not needed anymore - for example because one of the related interfaces was removed or the batman-adv module was unloaded - resulting in potential invalid memory accesses.  Directly canceling the metric worker also has various problems:  * cancel_work_sync for a to-be-deactivated interface is called with   rtnl_lock held. But the code in the ELP metric worker also tries to use   rtnl_lock() - which will never return in this case. This also means that   cancel_work_sync would never return because it is waiting for the worker   to finish. * iterating over the neighbor list for the to-be-deactivated interface is   currently done using the RCU specific methods. Which means that it is   possible to miss items when iterating over it without the associated   spinlock - a behaviour which is acceptable for a periodic metric check   but not for a cleanup routine (which must ""stop"" all still running   workers)  The better approch is to get rid of the per interface neighbor metric worker and handle everything in the interface worker. The original problems are solved by:  * creating a list of neighbors which require new metric information inside   the RCU protected context\, gathering the metric according to the new list   outside the RCU protected context * only use rcu_trylock inside metric gathering code to avoid a deadlock   when the cancel_delayed_work_sync is called in the interface removal code   (which is called with the rtnl_lock held)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53148,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  comedi: Flush partial mappings in error case  If some remap_pfn_range() calls succeeded before one failed\, we still have buffer pages mapped into the userspace page tables when we drop the buffer reference with comedi_buf_map_put(bm). The userspace mappings are only cleaned up later in the mmap error path.  Fix it by explicitly flushing all mappings in our VMA on the error path.  See commit 79a61cc3fc04 (""mm: avoid leaving partial pfn mappings around in error case"").",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38608,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5e: Fix netif state handling  mlx5e_suspend cleans resources only if netif_device_present() returns true. However\, mlx5e_resume changes the state of netif\, via mlx5e_nic_enable\, only if reg_state == NETREG_REGISTERED. In the below case\, the above leads to NULL-ptr Oops[1] and memory leaks:  mlx5e_probe  _mlx5e_resume   mlx5e_attach_netdev    mlx5e_nic_enable  <-- netdev not reg\, not calling netif_device_attach()   register_netdev <-- failed for some reason. ERROR_FLOW:  _mlx5e_suspend <-- netif_device_present return false\, resources aren't freed :(  Hence\, clean resources in this case as well.  [1] BUG: kernel NULL pointer dereference\, address: 0000000000000000 PGD 0 P4D 0 Oops: 0010 [#1] SMP CPU: 2 PID: 9345 Comm: test-ovs-ct-gen Not tainted 6.5.0_for_upstream_min_debug_2023_09_05_16_01 #1 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP: 0010:0x0 Code: Unable to access opcode bytes at0xffffffffffffffd6. RSP: 0018:ffff888178aaf758 EFLAGS: 00010246 Call Trace:  <TASK>  ? __die+0x20/0x60  ? page_fault_oops+0x14c/0x3c0  ? exc_page_fault+0x75/0x140  ? asm_exc_page_fault+0x22/0x30  notifier_call_chain+0x35/0xb0  blocking_notifier_call_chain+0x3d/0x60  mlx5_blocking_notifier_call_chain+0x22/0x30 [mlx5_core]  mlx5_core_uplink_netdev_event_replay+0x3e/0x60 [mlx5_core]  mlx5_mdev_netdev_track+0x53/0x60 [mlx5_ib]  mlx5_ib_roce_init+0xc3/0x340 [mlx5_ib]  __mlx5_ib_add+0x34/0xd0 [mlx5_ib]  mlx5r_probe+0xe1/0x210 [mlx5_ib]  ? auxiliary_match_id+0x6a/0x90  auxiliary_bus_probe+0x38/0x80  ? driver_sysfs_add+0x51/0x80  really_probe+0xc9/0x3e0  ? driver_probe_device+0x90/0x90  __driver_probe_device+0x80/0x160  driver_probe_device+0x1e/0x90  __device_attach_driver+0x7d/0x100  bus_for_each_drv+0x80/0xd0  __device_attach+0xbc/0x1f0  bus_probe_device+0x86/0xa0  device_add+0x637/0x840  __auxiliary_device_add+0x3b/0xa0  add_adev+0xc9/0x140 [mlx5_core]  mlx5_rescan_drivers_locked+0x22a/0x310 [mlx5_core]  mlx5_register_device+0x53/0xa0 [mlx5_core]  mlx5_init_one_devl_locked+0x5c4/0x9c0 [mlx5_core]  mlx5_init_one+0x3b/0x60 [mlx5_core]  probe_one+0x44c/0x730 [mlx5_core]  local_pci_probe+0x3e/0x90  pci_device_probe+0xbf/0x210  ? kernfs_create_link+0x5d/0xa0  ? sysfs_do_create_link_sd+0x60/0xc0  really_probe+0xc9/0x3e0  ? driver_probe_device+0x90/0x90  __driver_probe_device+0x80/0x160  driver_probe_device+0x1e/0x90  __device_attach_driver+0x7d/0x100  bus_for_each_drv+0x80/0xd0  __device_attach+0xbc/0x1f0  pci_bus_add_device+0x54/0x80  pci_iov_add_virtfn+0x2e6/0x320  sriov_enable+0x208/0x420  mlx5_core_sriov_configure+0x9e/0x200 [mlx5_core]  sriov_numvfs_store+0xae/0x1a0  kernfs_fop_write_iter+0x10c/0x1a0  vfs_write+0x291/0x3c0  ksys_write+0x5f/0xe0  do_syscall_64+0x3d/0x90  entry_SYSCALL_64_after_hwframe+0x46/0xb0  CR2: 0000000000000000  ---[ end trace 0000000000000000  ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36927,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ipv4: Fix uninit-value access in __ip_make_skb()  KMSAN reported uninit-value access in __ip_make_skb() [1].  __ip_make_skb() tests HDRINCL to know if the skb has icmphdr. However\, HDRINCL can cause a race condition. If calling setsockopt(2) with IP_HDRINCL changes HDRINCL while __ip_make_skb() is running\, the function will access icmphdr in the skb even if it is not included. This causes the issue reported by KMSAN.  Check FLOWI_FLAG_KNOWN_NH on fl4->flowi4_flags instead of testing HDRINCL on the socket.  Also\, fl4->fl4_icmp_type and fl4->fl4_icmp_code are not initialized. These are union in struct flowi4 and are implicitly initialized by flowi4_init_output()\, but we should not rely on specific union layout.  Initialize these explicitly in raw_sendmsg().  [1] BUG: KMSAN: uninit-value in __ip_make_skb+0x2b74/0x2d20 net/ipv4/ip_output.c:1481  __ip_make_skb+0x2b74/0x2d20 net/ipv4/ip_output.c:1481  ip_finish_skb include/net/ip.h:243 [inline]  ip_push_pending_frames+0x4c/0x5c0 net/ipv4/ip_output.c:1508  raw_sendmsg+0x2381/0x2690 net/ipv4/raw.c:654  inet_sendmsg+0x27b/0x2a0 net/ipv4/af_inet.c:851  sock_sendmsg_nosec net/socket.c:730 [inline]  __sock_sendmsg+0x274/0x3c0 net/socket.c:745  __sys_sendto+0x62c/0x7b0 net/socket.c:2191  __do_sys_sendto net/socket.c:2203 [inline]  __se_sys_sendto net/socket.c:2199 [inline]  __x64_sys_sendto+0x130/0x200 net/socket.c:2199  do_syscall_64+0xd8/0x1f0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x6d/0x75  Uninit was created at:  slab_post_alloc_hook mm/slub.c:3804 [inline]  slab_alloc_node mm/slub.c:3845 [inline]  kmem_cache_alloc_node+0x5f6/0xc50 mm/slub.c:3888  kmalloc_reserve+0x13c/0x4a0 net/core/skbuff.c:577  __alloc_skb+0x35a/0x7c0 net/core/skbuff.c:668  alloc_skb include/linux/skbuff.h:1318 [inline]  __ip_append_data+0x49ab/0x68c0 net/ipv4/ip_output.c:1128  ip_append_data+0x1e7/0x260 net/ipv4/ip_output.c:1365  raw_sendmsg+0x22b1/0x2690 net/ipv4/raw.c:648  inet_sendmsg+0x27b/0x2a0 net/ipv4/af_inet.c:851  sock_sendmsg_nosec net/socket.c:730 [inline]  __sock_sendmsg+0x274/0x3c0 net/socket.c:745  __sys_sendto+0x62c/0x7b0 net/socket.c:2191  __do_sys_sendto net/socket.c:2203 [inline]  __se_sys_sendto net/socket.c:2199 [inline]  __x64_sys_sendto+0x130/0x200 net/socket.c:2199  do_syscall_64+0xd8/0x1f0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x6d/0x75  CPU: 1 PID: 15709 Comm: syz-executor.7 Not tainted 6.8.0-11567-gb3603fcb79b1 #25 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-1.fc39 04/01/2014",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26661,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL test for 'timing generator' in 'dcn21_set_pipe()'  In ""u32 otg_inst = pipe_ctx->stream_res.tg->inst;"" pipe_ctx->stream_res.tg could be NULL\, it is relying on the caller to ensure the tg is not NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21787,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  team: better TEAM_OPTION_TYPE_STRING validation  syzbot reported following splat [1]  Make sure user-provided data contains one nul byte.  [1]  BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:633 [inline]  BUG: KMSAN: uninit-value in string+0x3ec/0x5f0 lib/vsprintf.c:714   string_nocheck lib/vsprintf.c:633 [inline]   string+0x3ec/0x5f0 lib/vsprintf.c:714   vsnprintf+0xa5d/0x1960 lib/vsprintf.c:2843   __request_module+0x252/0x9f0 kernel/module/kmod.c:149   team_mode_get drivers/net/team/team_core.c:480 [inline]   team_change_mode drivers/net/team/team_core.c:607 [inline]   team_mode_option_set+0x437/0x970 drivers/net/team/team_core.c:1401   team_option_set drivers/net/team/team_core.c:375 [inline]   team_nl_options_set_doit+0x1339/0x1f90 drivers/net/team/team_core.c:2662   genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]   genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]   genl_rcv_msg+0x1214/0x12c0 net/netlink/genetlink.c:1210   netlink_rcv_skb+0x375/0x650 net/netlink/af_netlink.c:2543   genl_rcv+0x40/0x60 net/netlink/genetlink.c:1219   netlink_unicast_kernel net/netlink/af_netlink.c:1322 [inline]   netlink_unicast+0xf52/0x1260 net/netlink/af_netlink.c:1348   netlink_sendmsg+0x10da/0x11e0 net/netlink/af_netlink.c:1892   sock_sendmsg_nosec net/socket.c:718 [inline]   __sock_sendmsg+0x30f/0x380 net/socket.c:733   ____sys_sendmsg+0x877/0xb60 net/socket.c:2573   ___sys_sendmsg+0x28d/0x3c0 net/socket.c:2627   __sys_sendmsg net/socket.c:2659 [inline]   __do_sys_sendmsg net/socket.c:2664 [inline]   __se_sys_sendmsg net/socket.c:2662 [inline]   __x64_sys_sendmsg+0x212/0x3c0 net/socket.c:2662   x64_sys_call+0x2ed6/0x3c30 arch/x86/include/generated/asm/syscalls_64.h:47   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xcd/0x1e0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-10041,libpam-modules,MEDIUM,1.5.2-6+deb12u1,N/A,"A vulnerability was found in PAM. The secret information is stored in memory\, where the attacker can trigger the victim program to execute by sending characters to its standard input (stdin). As this occurs\, the attacker can train the branch predictor to execute an ROP chain speculatively. This flaw could result in leaked passwords\, such as those found in /etc/shadow while performing authentications.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21825,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Cancel the running bpf_timer through kworker for PREEMPT_RT  During the update procedure\, when overwrite element in a pre-allocated htab\, the freeing of old_element is protected by the bucket lock. The reason why the bucket lock is necessary is that the old_element has already been stashed in htab->extra_elems after alloc_htab_elem() returns. If freeing the old_element after the bucket lock is unlocked\, the stashed element may be reused by concurrent update procedure and the freeing of old_element will run concurrently with the reuse of the old_element. However\, the invocation of check_and_free_fields() may acquire a spin-lock which violates the lockdep rule because its caller has already held a raw-spin-lock (bucket lock). The following warning will be reported when such race happens:    BUG: scheduling while atomic: test_progs/676/0x00000003   3 locks held by test_progs/676:   #0: ffffffff864b0240 (rcu_read_lock_trace){....}-{0:0}\, at: bpf_prog_test_run_syscall+0x2c0/0x830   #1: ffff88810e961188 (&htab->lockdep_key){....}-{2:2}\, at: htab_map_update_elem+0x306/0x1500   #2: ffff8881f4eac1b8 (&base->softirq_expiry_lock){....}-{2:2}\, at: hrtimer_cancel_wait_running+0xe9/0x1b0   Modules linked in: bpf_testmod(O)   Preemption disabled at:   [<ffffffff817837a3>] htab_map_update_elem+0x293/0x1500   CPU: 0 UID: 0 PID: 676 Comm: test_progs Tainted: G ... 6.12.0+ #11   Tainted: [W]=WARN\, [O]=OOT_MODULE   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)...   Call Trace:   <TASK>   dump_stack_lvl+0x57/0x70   dump_stack+0x10/0x20   __schedule_bug+0x120/0x170   __schedule+0x300c/0x4800   schedule_rtlock+0x37/0x60   rtlock_slowlock_locked+0x6d9/0x54c0   rt_spin_lock+0x168/0x230   hrtimer_cancel_wait_running+0xe9/0x1b0   hrtimer_cancel+0x24/0x30   bpf_timer_delete_work+0x1d/0x40   bpf_timer_cancel_and_free+0x5e/0x80   bpf_obj_free_fields+0x262/0x4a0   check_and_free_fields+0x1d0/0x280   htab_map_update_elem+0x7fc/0x1500   bpf_prog_9f90bc20768e0cb9_overwrite_cb+0x3f/0x43   bpf_prog_ea601c4649694dbd_overwrite_timer+0x5d/0x7e   bpf_prog_test_run_syscall+0x322/0x830   __sys_bpf+0x135d/0x3ca0   __x64_sys_bpf+0x75/0xb0   x64_sys_call+0x1b5/0xa10   do_syscall_64+0x3b/0xc0   entry_SYSCALL_64_after_hwframe+0x4b/0x53   ...   </TASK>  It seems feasible to break the reuse and refill of per-cpu extra_elems into two independent parts: reuse the per-cpu extra_elems with bucket lock being held and refill the old_element as per-cpu extra_elems after the bucket lock is unlocked. However\, it will make the concurrent overwrite procedures on the same CPU return unexpected -E2BIG error when the map is full.  Therefore\, the patch fixes the lock problem by breaking the cancelling of bpf_timer into two steps for PREEMPT_RT: 1) use hrtimer_try_to_cancel() and check its return value 2) if the timer is running\, use hrtimer_cancel() through a kworker to    cancel it again Considering that the current implementation of hrtimer_cancel() will try to acquire a being held softirq_expiry_lock when the current timer is running\, these steps above are reasonable. However\, it also has downside. When the timer is running\, the cancelling of the timer is delayed when releasing the last map uref. The delay is also fixable (e.g.\, break the cancelling of bpf timer into two parts: one part in locked scope\, another one in unlocked scope)\, it can be revised later if necessary.  It is a bit hard to decide the right fix tag. One reason is that the problem depends on PREEMPT_RT which is enabled in v6.12. Considering the softirq_expiry_lock lock exists since v5.4 and bpf_timer is introduced in v5.15\, the bpf_timer commit is used in the fixes tag and an extra depends-on tag is added to state the dependency on PREEMPT_RT.  Depends-on: v6.12+ with PREEMPT_RT enabled",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21780,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: avoid buffer overflow attach in smu_sys_set_pp_table()  It malicious user provides a small pptable through sysfs and then a bigger pptable\, it may cause buffer overflow attack in function smu_sys_set_pp_table().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36921,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: guard against invalid STA ID on removal  Guard against invalid station IDs in iwl_mvm_mld_rm_sta_id as that would result in out-of-bounds array accesses. This prevents issues should the driver get into a bad state during error handling.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22111,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: Remove RTNL dance for SIOCBRADDIF and SIOCBRDELIF.  SIOCBRDELIF is passed to dev_ioctl() first and later forwarded to br_ioctl_call()\, which causes unnecessary RTNL dance and the splat below [0] under RTNL pressure.  Let's say Thread A is trying to detach a device from a bridge and Thread B is trying to remove the bridge.  In dev_ioctl()\, Thread A bumps the bridge device's refcnt by netdev_hold() and releases RTNL because the following br_ioctl_call() also re-acquires RTNL.  In the race window\, Thread B could acquire RTNL and try to remove the bridge device.  Then\, rtnl_unlock() by Thread B will release RTNL and wait for netdev_put() by Thread A.  Thread A\, however\, must hold RTNL after the unlock in dev_ifsioc()\, which may take long under RTNL pressure\, resulting in the splat by Thread B.    Thread A (SIOCBRDELIF)           Thread B (SIOCBRDELBR)   ----------------------           ----------------------   sock_ioctl                       sock_ioctl   `- sock_do_ioctl                 `- br_ioctl_call      `- dev_ioctl                     `- br_ioctl_stub         |- rtnl_lock                     |         |- dev_ifsioc                    '         '  |- dev = __dev_get_by_name(...)            |- netdev_hold(dev\, ...)      .        /   |- rtnl_unlock  ------.       |        |   |- br_ioctl_call       `--->  |- rtnl_lock   Race |   |  `- br_ioctl_stub           |- br_del_bridge   Window   |     |                       |  |- dev = __dev_get_by_name(...)        |   |     |  May take long        |  `- br_dev_delete(dev\, ...)        |   |     |  under RTNL pressure  |     `- unregister_netdevice_queue(dev\, ...)        |   |     |               |       `- rtnl_unlock        \\   |     |- rtnl_lock  <-'          `- netdev_run_todo            |     |- ...                        `- netdev_run_todo            |     `- rtnl_unlock                   |- __rtnl_unlock            |                                      |- netdev_wait_allrefs_any            |- netdev_put(dev\, ...)  <----------------'                                                 Wait refcnt decrement                                                 and log splat below  To avoid blocking SIOCBRDELBR unnecessarily\, let's not call dev_ioctl() for SIOCBRADDIF and SIOCBRDELIF.  In the dev_ioctl() path\, we do the following:    1. Copy struct ifreq by get_user_ifreq in sock_do_ioctl()   2. Check CAP_NET_ADMIN in dev_ioctl()   3. Call dev_load() in dev_ioctl()   4. Fetch the master dev from ifr.ifr_name in dev_ifsioc()  3. can be done by request_module() in br_ioctl_call()\, so we move 1.\, 2.\, and 4. to br_ioctl_stub().  Note that 2. is also checked later in add_del_if()\, but it's better performed before RTNL.  SIOCBRADDIF and SIOCBRDELIF have been processed in dev_ioctl() since the pre-git era\, and there seems to be no specific reason to process them there.  [0]: unregister_netdevice: waiting for wpan3 to become free. Usage count = 2 ref_tracker: wpan3@ffff8880662d8608 has 1/1 users at      __netdev_tracker_alloc include/linux/netdevice.h:4282 [inline]      netdev_hold include/linux/netdevice.h:4311 [inline]      dev_ifsioc+0xc6a/0x1160 net/core/dev_ioctl.c:624      dev_ioctl+0x255/0x10c0 net/core/dev_ioctl.c:826      sock_do_ioctl+0x1ca/0x260 net/socket.c:1213      sock_ioctl+0x23a/0x6c0 net/socket.c:1318      vfs_ioctl fs/ioctl.c:51 [inline]      __do_sys_ioctl fs/ioctl.c:906 [inline]      __se_sys_ioctl fs/ioctl.c:892 [inline]      __x64_sys_ioctl+0x1a4/0x210 fs/ioctl.c:892      do_syscall_x64 arch/x86/entry/common.c:52 [inline]      do_syscall_64+0xcb/0x250 arch/x86/entry/common.c:83      entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21781,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  batman-adv: fix panic during interface removal  Reference counting is used to ensure that batadv_hardif_neigh_node and batadv_hard_iface are not freed before/during batadv_v_elp_throughput_metric_update work is finished.  But there isn't a guarantee that the hard if will remain associated with a soft interface up until the work is finished.  This fixes a crash triggered by reboot that looks like this:  Call trace:  batadv_v_mesh_free+0xd0/0x4dc [batman_adv]  batadv_v_elp_throughput_metric_update+0x1c/0xa4  process_one_work+0x178/0x398  worker_thread+0x2e8/0x4d0  kthread+0xd8/0xdc  ret_from_fork+0x10/0x20  (the batadv_v_mesh_free call is misleading\, and does not actually happen)  I was able to make the issue happen more reliably by changing hardif_neigh->bat_v.metric_work work to be delayed work. This allowed me to track down and confirm the fix.  [sven@narfation.org: prevent entering batadv_v_elp_get_throughput without  soft_iface]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-45001,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: mana: Fix RX buf alloc_size alignment and atomic op panic  The MANA driver's RX buffer alloc_size is passed into napi_build_skb() to create SKB. skb_shinfo(skb) is located at the end of skb\, and its alignment is affected by the alloc_size passed into napi_build_skb(). The size needs to be aligned properly for better performance and atomic operations. Otherwise\, on ARM64 CPU\, for certain MTU settings like 4000\, atomic operations may panic on the skb_shinfo(skb)->dataref due to alignment fault.  To fix this bug\, add proper alignment to the alloc_size calculation.  Sample panic info: [  253.298819] Unable to handle kernel paging request at virtual address ffff000129ba5cce [  253.300900] Mem abort info: [  253.301760]   ESR = 0x0000000096000021 [  253.302825]   EC = 0x25: DABT (current EL)\, IL = 32 bits [  253.304268]   SET = 0\, FnV = 0 [  253.305172]   EA = 0\, S1PTW = 0 [  253.306103]   FSC = 0x21: alignment fault Call trace:  __skb_clone+0xfc/0x198  skb_clone+0x78/0xe0  raw6_local_deliver+0xfc/0x228  ip6_protocol_deliver_rcu+0x80/0x500  ip6_input_finish+0x48/0x80  ip6_input+0x48/0xc0  ip6_sublist_rcv_finish+0x50/0x78  ip6_sublist_rcv+0x1cc/0x2b8  ipv6_list_rcv+0x100/0x150  __netif_receive_skb_list_core+0x180/0x220  netif_receive_skb_list_internal+0x198/0x2a8  __napi_poll+0x138/0x250  net_rx_action+0x148/0x330  handle_softirqs+0x12c/0x3a0",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36923,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/9p: fix uninitialized values during inode evict  If an iget fails due to not being able to retrieve information from the server then the inode structure is only partially initialized.  When the inode gets evicted\, references to uninitialized structures (like fscache cookies) were being made.  This patch checks for a bad_inode before doing anything other than clearing the inode from the cache.  Since the inode is bad\, it shouldn't have any state associated with it that needs to be written back (and there really isn't a way to complete those anyways).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21782,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  orangefs: fix a oob in orangefs_debug_write  I got a syzbot report: slab-out-of-bounds Read in orangefs_debug_write... several people suggested fixes\, I tested Al Viro's suggestion and made this patch.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-7006,libtiff6,HIGH,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"A null pointer dereference flaw was found in Libtiff via `tif_dirinfo.c`. This issue may allow an attacker to trigger memory allocation failures through certain means\, such as restricting the heap space size or injecting faults\, causing a segmentation fault. This can cause an application crash\, eventually leading to a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22113,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: avoid journaling sb update on error if journal is destroying  Presently we always BUG_ON if trying to start a transaction on a journal marked with JBD2_UNMOUNT\, since this should never happen. However\, while ltp running stress tests\, it was observed that in case of some error handling paths\, it is possible for update_super_work to start a transaction after the journal is destroyed eg:  (umount) ext4_kill_sb   kill_block_super     generic_shutdown_super       sync_filesystem /* commits all txns */       evict_inodes         /* might start a new txn */       ext4_put_super \tflush_work(&sbi->s_sb_upd_work) /* flush the workqueue */         jbd2_journal_destroy           journal_kill_thread             journal->j_flags |= JBD2_UNMOUNT;           jbd2_journal_commit_transaction             jbd2_journal_get_descriptor_buffer               jbd2_journal_bmap                 ext4_journal_bmap                   ext4_map_blocks                     ...                     ext4_inode_error                       ext4_handle_error                         schedule_work(&sbi->s_sb_upd_work)                                                 /* work queue kicks in */                                                update_super_work                                                  jbd2_journal_start                                                    start_this_handle                                                      BUG_ON(journal->j_flags &                                                             JBD2_UNMOUNT)  Hence\, introduce a new mount flag to indicate journal is destroying and only do a journaled (and deferred) update of sb if this flag is not set. Otherwise\, just fallback to an un-journaled commit.  Further\, in the journal destroy path\, we have the following sequence:    1. Set mount flag indicating journal is destroying   2. force a commit and wait for it   3. flush pending sb updates  This sequence is important as it ensures that\, after this point\, there is no sb update that might be journaled so it is safe to update the sb outside the journal. (To avoid race discussed in 2d01ddc86606)  Also\, we don't need a similar check in ext4_grp_locked_error since it is only called from mballoc and AFAICT it would be always valid to schedule work here.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21826,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nf_tables: reject mismatching sum of field_len with set key length  The field length description provides the length of each separated key field in the concatenation\, each field gets rounded up to 32-bits to calculate the pipapo rule width from pipapo_init(). The set key length provides the total size of the key aligned to 32-bits.  Register-based arithmetics still allows for combining mismatching set key length and field length description\, eg. set key length 10 and field description [ 5\, 4 ] leading to pipapo width of 12.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36922,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: read txq->read_ptr under lock  If we read txq->read_ptr without lock\, we can read the same value twice\, then obtain the lock\, and reclaim from there to two different places\, but crucially reclaim the same entry twice\, resulting in the WARN_ONCE() a little later. Fix that by reading txq->read_ptr under lock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21829,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/rxe: Fix the warning ""__rxe_cleanup+0x12c/0x170 [rdma_rxe]""  The Call Trace is as below: ""   <TASK>   ? show_regs.cold+0x1a/0x1f   ? __rxe_cleanup+0x12c/0x170 [rdma_rxe]   ? __warn+0x84/0xd0   ? __rxe_cleanup+0x12c/0x170 [rdma_rxe]   ? report_bug+0x105/0x180   ? handle_bug+0x46/0x80   ? exc_invalid_op+0x19/0x70   ? asm_exc_invalid_op+0x1b/0x20   ? __rxe_cleanup+0x12c/0x170 [rdma_rxe]   ? __rxe_cleanup+0x124/0x170 [rdma_rxe]   rxe_destroy_qp.cold+0x24/0x29 [rdma_rxe]   ib_destroy_qp_user+0x118/0x190 [ib_core]   rdma_destroy_qp.cold+0x43/0x5e [rdma_cm]   rtrs_cq_qp_destroy.cold+0x1d/0x2b [rtrs_core]   rtrs_srv_close_work.cold+0x1b/0x31 [rtrs_server]   process_one_work+0x21d/0x3f0   worker_thread+0x4a/0x3c0   ? process_one_work+0x3f0/0x3f0   kthread+0xf0/0x120   ? kthread_complete_and_exit+0x20/0x20   ret_from_fork+0x22/0x30   </TASK> "" When too many rdma resources are allocated\, rxe needs more time to handle these rdma resources. Sometimes with the current timeout\, rxe can not release the rdma resources correctly.  Compared with other rdma drivers\, a bigger timeout is used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53142,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  initramfs: avoid filename buffer overrun  The initramfs filename field is defined in Documentation/driver-api/early-userspace/buffer-format.rst as:   37 cpio_file := ALGN(4) + cpio_header + filename + ""\\0"" + ALGN(4) + data ...  55 ============= ================== =========================  56 Field name    Field size         Meaning  57 ============= ================== ========================= ...  70 c_namesize    8 bytes            Length of filename\, including final \\0  When extracting an initramfs cpio archive\, the kernel's do_name() path handler assumes a zero-terminated path at @collected\, passing it directly to filp_open() / init_mkdir() / init_mknod().  If a specially crafted cpio entry carries a non-zero-terminated filename and is followed by uninitialized memory\, then a file may be created with trailing characters that represent the uninitialized memory. The ability to create an initramfs entry would imply already having full control of the system\, so the buffer overrun shouldn't be considered a security vulnerability.  Append the output of the following bash script to an existing initramfs and observe any created /initramfs_test_fname_overrunAA* path. E.g.   ./reproducer.sh | gzip >> /myinitramfs  It's easiest to observe non-zero uninitialized memory when the output is gzipped\, as it'll overflow the heap allocated @out_buf in __gunzip()\, rather than the initrd_start+initrd_size block.  ---- reproducer.sh ---- nilchar=""A""\t# change to ""\\0"" to properly zero terminate / pad magic=""070701"" ino=1 mode=$(( 0100777 )) uid=0 gid=0 nlink=1 mtime=1 filesize=0 devmajor=0 devminor=1 rdevmajor=0 rdevminor=0 csum=0 fname=""initramfs_test_fname_overrun"" namelen=$(( ${#fname} + 1 ))\t# plus one to account for terminator  printf ""%s%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%s"" \\ \t$magic $ino $mode $uid $gid $nlink $mtime $filesize \\ \t$devmajor $devminor $rdevmajor $rdevminor $namelen $csum $fname  termpadlen=$(( 1 + ((4 - ((110 + $namelen) & 3)) % 4) )) printf ""%.s${nilchar}"" $(seq 1 $termpadlen) ---- reproducer.sh ----  Symlink filename fields handled in do_symlink() won't overrun past the data segment\, due to the explicit zero-termination of the symlink target.  Fix filename buffer overrun by aborting the initramfs FSM if any cpio entry doesn't carry a zero-terminator at the expected (name_len - 1) offset.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47726,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to wait dio completion  It should wait all existing dio write IOs before block removal\, otherwise\, previous direct write IO may overwrite data in the block which may be reused by other inode.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53140,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  netlink: terminate outstanding dump on socket close  Netlink supports iterative dumping of data. It provides the families the following ops:  - start - (optional) kicks off the dumping process  - dump  - actual dump helper\, keeps getting called until it returns 0  - done  - (optional) pairs with .start\, can be used for cleanup The whole process is asynchronous and the repeated calls to .dump don't actually happen in a tight loop\, but rather are triggered in response to recvmsg() on the socket.  This gives the user full control over the dump\, but also means that the user can close the socket without getting to the end of the dump. To make sure .start is always paired with .done we check if there is an ongoing dump before freeing the socket\, and if so call .done.  The complication is that sockets can get freed from BH and .done is allowed to sleep. So we use a workqueue to defer the call\, when needed.  Unfortunately this does not work correctly. What we defer is not the cleanup but rather releasing a reference on the socket. We have no guarantee that we own the last reference\, if someone else holds the socket they may release it in BH and we're back to square one.  The whole dance\, however\, appears to be unnecessary. Only the user can interact with dumps\, so we can clean up when socket is closed. And close always happens in process context. Some async code may still access the socket after close\, queue notification skbs to it etc. but no dumps can start\, end or otherwise make progress.  Delete the workqueue and flush the dump state directly from the release handler. Note that further cleanup is possible in -next\, for instance we now always call .done before releasing the main module reference\, so dump doesn't have to take a reference of its own.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26669,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: flower: Fix chain template offload  When a qdisc is deleted from a net device the stack instructs the underlying driver to remove its flow offload callback from the associated filter block using the 'FLOW_BLOCK_UNBIND' command. The stack then continues to replay the removal of the filters in the block for this driver by iterating over the chains in the block and invoking the 'reoffload' operation of the classifier being used. In turn\, the classifier in its 'reoffload' operation prepares and emits a 'FLOW_CLS_DESTROY' command for each filter.  However\, the stack does not do the same for chain templates and the underlying driver never receives a 'FLOW_CLS_TMPLT_DESTROY' command when a qdisc is deleted. This results in a memory leak [1] which can be reproduced using [2].  Fix by introducing a 'tmplt_reoffload' operation and have the stack invoke it with the appropriate arguments as part of the replay. Implement the operation in the sole classifier that supports chain templates (flower) by emitting the 'FLOW_CLS_TMPLT_{CREATE\,DESTROY}' command based on whether a flow offload callback is being bound to a filter block or being unbound from one.  As far as I can tell\, the issue happens since cited commit which reordered tcf_block_offload_unbind() before tcf_block_flush_all_chains() in __tcf_block_put(). The order cannot be reversed as the filter block is expected to be freed after flushing all the chains.  [1] unreferenced object 0xffff888107e28800 (size 2048):   comm ""tc""\, pid 1079\, jiffies 4294958525 (age 3074.287s)   hex dump (first 32 bytes):     b1 a6 7c 11 81 88 ff ff e0 5b b3 10 81 88 ff ff  ..|......[......     01 00 00 00 00 00 00 00 e0 aa b0 84 ff ff ff ff  ................   backtrace:     [<ffffffff81c06a68>] __kmem_cache_alloc_node+0x1e8/0x320     [<ffffffff81ab374e>] __kmalloc+0x4e/0x90     [<ffffffff832aec6d>] mlxsw_sp_acl_ruleset_get+0x34d/0x7a0     [<ffffffff832bc195>] mlxsw_sp_flower_tmplt_create+0x145/0x180     [<ffffffff832b2e1a>] mlxsw_sp_flow_block_cb+0x1ea/0x280     [<ffffffff83a10613>] tc_setup_cb_call+0x183/0x340     [<ffffffff83a9f85a>] fl_tmplt_create+0x3da/0x4c0     [<ffffffff83a22435>] tc_ctl_chain+0xa15/0x1170     [<ffffffff838a863c>] rtnetlink_rcv_msg+0x3cc/0xed0     [<ffffffff83ac87f0>] netlink_rcv_skb+0x170/0x440     [<ffffffff83ac6270>] netlink_unicast+0x540/0x820     [<ffffffff83ac6e28>] netlink_sendmsg+0x8d8/0xda0     [<ffffffff83793def>] ____sys_sendmsg+0x30f/0xa80     [<ffffffff8379d29a>] ___sys_sendmsg+0x13a/0x1e0     [<ffffffff8379d50c>] __sys_sendmsg+0x11c/0x1f0     [<ffffffff843b9ce0>] do_syscall_64+0x40/0xe0 unreferenced object 0xffff88816d2c0400 (size 1024):   comm ""tc""\, pid 1079\, jiffies 4294958525 (age 3074.287s)   hex dump (first 32 bytes):     40 00 00 00 00 00 00 00 57 f6 38 be 00 00 00 00  @.......W.8.....     10 04 2c 6d 81 88 ff ff 10 04 2c 6d 81 88 ff ff  ..\,m......\,m....   backtrace:     [<ffffffff81c06a68>] __kmem_cache_alloc_node+0x1e8/0x320     [<ffffffff81ab36c1>] __kmalloc_node+0x51/0x90     [<ffffffff81a8ed96>] kvmalloc_node+0xa6/0x1f0     [<ffffffff82827d03>] bucket_table_alloc.isra.0+0x83/0x460     [<ffffffff82828d2b>] rhashtable_init+0x43b/0x7c0     [<ffffffff832aed48>] mlxsw_sp_acl_ruleset_get+0x428/0x7a0     [<ffffffff832bc195>] mlxsw_sp_flower_tmplt_create+0x145/0x180     [<ffffffff832b2e1a>] mlxsw_sp_flow_block_cb+0x1ea/0x280     [<ffffffff83a10613>] tc_setup_cb_call+0x183/0x340     [<ffffffff83a9f85a>] fl_tmplt_create+0x3da/0x4c0     [<ffffffff83a22435>] tc_ctl_chain+0xa15/0x1170     [<ffffffff838a863c>] rtnetlink_rcv_msg+0x3cc/0xed0     [<ffffffff83ac87f0>] netlink_rcv_skb+0x170/0x440     [<ffffffff83ac6270>] netlink_unicast+0x540/0x820     [<ffffffff83ac6e28>] netlink_sendmsg+0x8d8/0xda0     [<ffffffff83793def>] ____sys_sendmsg+0x30f/0xa80  [2]  # tc qdisc add dev swp1 clsact  # tc chain add dev swp1 ingress proto ip chain 1 flower dst_ip 0.0.0.0/32  # tc qdisc del dev ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53141,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: ipset: add missing range check in bitmap_ip_uadt  When tb[IPSET_ATTR_IP_TO] is not present but tb[IPSET_ATTR_CIDR] exists\, the values of ip and ip_to are slightly swapped. Therefore\, the range check for ip should be done later\, but this part is missing and it seems that the vulnerability occurs.  So we should add missing range checks and remove unnecessary range checks.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53146,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFSD: Prevent a potential integer overflow  If the tag length is >= U32_MAX - 3 then the ""length + 4"" addition can result in an integer overflow. Address this by splitting the decoding into several steps so that decode_cb_compound4res() does not have to perform arithmetic on the unsafe length value.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12382,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in drm_load_edid_firmware in drivers/gpu/drm/drm_edid_load.c in the Linux kernel through 5.1.5. There is an unchecked kstrdup of fwstr\, which might allow an attacker to cause a denial of service (NULL pointer dereference and system crash). NOTE: The vendor disputes this issues as not being a vulnerability because kstrdup() returning NULL is handled sufficiently and there is no chance for a NULL pointer dereference",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22119,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: cfg80211: init wiphy_work before allocating rfkill fails  syzbort reported a uninitialize wiphy_work_lock in cfg80211_dev_free. [1]  After rfkill allocation fails\, the wiphy release process will be performed\, which will cause cfg80211_dev_free to access the uninitialized wiphy_work related data.  Move the initialization of wiphy_work to before rfkill initialization to avoid this issue.  [1] INFO: trying to register non-static key. The code is fine but needs lockdep annotation\, or maybe you didn't initialize this object before use? turning off the locking correctness validator. CPU: 0 UID: 0 PID: 5935 Comm: syz-executor550 Not tainted 6.14.0-rc6-syzkaller-00103-g4003c9e78778 #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120  assign_lock_key kernel/locking/lockdep.c:983 [inline]  register_lock_class+0xc39/0x1240 kernel/locking/lockdep.c:1297  __lock_acquire+0x135/0x3c40 kernel/locking/lockdep.c:5103  lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c:5851  __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]  _raw_spin_lock_irqsave+0x3a/0x60 kernel/locking/spinlock.c:162  cfg80211_dev_free+0x30/0x3d0 net/wireless/core.c:1196  device_release+0xa1/0x240 drivers/base/core.c:2568  kobject_cleanup lib/kobject.c:689 [inline]  kobject_release lib/kobject.c:720 [inline]  kref_put include/linux/kref.h:65 [inline]  kobject_put+0x1e4/0x5a0 lib/kobject.c:737  put_device+0x1f/0x30 drivers/base/core.c:3774  wiphy_free net/wireless/core.c:1224 [inline]  wiphy_new_nm+0x1c1f/0x2160 net/wireless/core.c:562  ieee80211_alloc_hw_nm+0x1b7a/0x2260 net/mac80211/main.c:835  mac80211_hwsim_new_radio+0x1d6/0x54e0 drivers/net/wireless/virtual/mac80211_hwsim.c:5185  hwsim_new_radio_nl+0xb42/0x12b0 drivers/net/wireless/virtual/mac80211_hwsim.c:6242  genl_family_rcv_msg_doit+0x202/0x2f0 net/netlink/genetlink.c:1115  genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]  genl_rcv_msg+0x565/0x800 net/netlink/genetlink.c:1210  netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c:2533  genl_rcv+0x28/0x40 net/netlink/genetlink.c:1219  netlink_unicast_kernel net/netlink/af_netlink.c:1312 [inline]  netlink_unicast+0x53c/0x7f0 net/netlink/af_netlink.c:1338  netlink_sendmsg+0x8b8/0xd70 net/netlink/af_netlink.c:1882  sock_sendmsg_nosec net/socket.c:718 [inline]  __sock_sendmsg net/socket.c:733 [inline]  ____sys_sendmsg+0xaaf/0xc90 net/socket.c:2573  ___sys_sendmsg+0x135/0x1e0 net/socket.c:2627  __sys_sendmsg+0x16e/0x220 net/socket.c:2659  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  Close: https://syzkaller.appspot.com/bug?extid=aaf0488c83d1d5f4f029",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53147,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  exfat: fix out-of-bounds access of directory entries  In the case of the directory size is greater than or equal to the cluster size\, if start_clu becomes an EOF cluster(an invalid cluster) due to file system corruption\, then the directory entry where ei->hint_femp.eidx hint is outside the directory\, resulting in an out-of-bounds access\, which may cause further file system corruption.  This commit adds a check for start_clu\, if it is an invalid cluster\, the file or directory will be treated as empty.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-29383,login,LOW,1:4.13+dfsg1-1+b1,N/A,"In Shadow 4.13\, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g.\, adding a new user fails because \\n is in the block list)\, it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words\, an adversary may be able to convince a system administrator to take the system offline (an indirect\, social-engineered denial of service) by demonstrating that ""cat /etc/passwd"" shows a rogue user account.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12381,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in ip_ra_control in net/ipv4/ip_sockglue.c in the Linux kernel through 5.1.5. There is an unchecked kmalloc of new_ra\, which might allow an attacker to cause a denial of service (NULL pointer dereference and system crash). NOTE: this is disputed because new_ra is never used if it is NULL",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-49463,libheif1,LOW,1.15.1-1+deb12u1,N/A,"libheif v1.17.5 was discovered to contain a segmentation violation via the function find_exif_tag at /libheif/exif.cc.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12380,linux-libc-dev,LOW,6.1.115-1,N/A,"**DISPUTED** An issue was discovered in the efi subsystem in the Linux kernel through 5.1.5. phys_efi_set_virtual_address_map in arch/x86/platform/efi/efi.c and efi_call_phys_prolog in arch/x86/platform/efi/efi_64.c mishandle memory allocation failures. NOTE: This id is disputed as not being an issue because “All the code touched by the referenced commit runs only at boot\, before any user processes are started. Therefore\, there is no possibility for an unprivileged user to control it.”.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53145,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  um: Fix potential integer overflow during physmem setup  This issue happens when the real map size is greater than LONG_MAX\, which can be easily triggered on UML/i386.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41008,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: change vm->task_info handling  This patch changes the handling and lifecycle of vm->task_info object. The major changes are: - vm->task_info is a dynamically allocated ptr now\, and its uasge is   reference counted. - introducing two new helper funcs for task_info lifecycle management     - amdgpu_vm_get_task_info: reference counts up task_info before       returning this info     - amdgpu_vm_put_task_info: reference counts down task_info - last put to task_info() frees task_info from the vm.  This patch also does logistical changes required for existing usage of vm->task_info.  V2: Do not block all the prints when task_info not found (Felix)  V3: Fixed review comments from Felix    - Fix wrong indentation    - No debug message for -ENOMEM    - Add NULL check for task_info    - Do not duplicate the debug messages (ti vs no ti)    - Get first reference of task_info in vm_init()\, put last      in vm_fini()  V4: Fixed review comments from Felix    - fix double reference increment in create_task_info    - change amdgpu_vm_get_task_info_pasid    - additional changes in amdgpu_gem.c while porting",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22039,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix overflow in dacloffset bounds check  The dacloffset field was originally typed as int and used in an unchecked addition\, which could overflow and bypass the existing bounds check in both smb_check_perm_dacl() and smb_inherit_dacl().  This could result in out-of-bounds memory access and a kernel crash when dereferencing the DACL pointer.  This patch converts dacloffset to unsigned int and uses check_add_overflow() to validate access to the DACL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52629,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sh: push-switch: Reorder cleanup operations to avoid use-after-free bug  The original code puts flush_work() before timer_shutdown_sync() in switch_drv_remove(). Although we use flush_work() to stop the worker\, it could be rescheduled in switch_timer(). As a result\, a use-after-free bug can occur. The details are shown below:        (cpu 0)                    |      (cpu 1) switch_drv_remove()              |  flush_work()                    |   ...                            |  switch_timer // timer                                  |   schedule_work(&psw->work)  timer_shutdown_sync()           |  ...                             |  switch_work_handler // worker  kfree(psw) // free              |                                  |   psw->state = 0 // use  This patch puts timer_shutdown_sync() before flush_work() to mitigate the bugs. As a result\, the worker and timer will be stopped safely before the deallocate operations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22038,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: validate zero num_subauth before sub_auth is accessed  Access psid->sub_auth[psid->num_subauth - 1] without checking if num_subauth is non-zero leads to an out-of-bounds read. This patch adds a validation step to ensure num_subauth != 0 before sub_auth is accessed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21699,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  gfs2: Truncate address space when flipping GFS2_DIF_JDATA flag  Truncate an inode's address space when flipping the GFS2_DIF_JDATA flag: depending on that flag\, the pages in the address space will either use buffer heads or iomap_folio_state structs\, and we cannot mix the two.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46786,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fscache: delete fscache_cookie_lru_timer when fscache exits to avoid UAF  The fscache_cookie_lru_timer is initialized when the fscache module is inserted\, but is not deleted when the fscache module is removed. If timer_reduce() is called before removing the fscache module\, the fscache_cookie_lru_timer will be added to the timer list of the current cpu. Afterwards\, a use-after-free will be triggered in the softIRQ after removing the fscache module\, as follows:  ================================================================== BUG: unable to handle page fault for address: fffffbfff803c9e9  PF: supervisor read access in kernel mode  PF: error_code(0x0000) - not-present page PGD 21ffea067 P4D 21ffea067 PUD 21ffe6067 PMD 110a7c067 PTE 0 Oops: Oops: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 1 UID: 0 PID: 0 Comm: swapper/1 Tainted: G W 6.11.0-rc3 #855 Tainted: [W]=WARN RIP: 0010:__run_timer_base.part.0+0x254/0x8a0 Call Trace:  <IRQ>  tmigr_handle_remote_up+0x627/0x810  __walk_groups.isra.0+0x47/0x140  tmigr_handle_remote+0x1fa/0x2f0  handle_softirqs+0x180/0x590  irq_exit_rcu+0x84/0xb0  sysvec_apic_timer_interrupt+0x6e/0x90  </IRQ>  <TASK>  asm_sysvec_apic_timer_interrupt+0x1a/0x20 RIP: 0010:default_idle+0xf/0x20  default_idle_call+0x38/0x60  do_idle+0x2b5/0x300  cpu_startup_entry+0x54/0x60  start_secondary+0x20d/0x280  common_startup_64+0x13e/0x148  </TASK> Modules linked in: [last unloaded: netfs] ==================================================================  Therefore delete fscache_cookie_lru_timer when removing the fscahe module.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46787,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  userfaultfd: fix checks for huge PMDs  Patch series ""userfaultfd: fix races around pmd_trans_huge() check""\, v2.  The pmd_trans_huge() code in mfill_atomic() is wrong in three different ways depending on kernel version:  1. The pmd_trans_huge() check is racy and can lead to a BUG_ON() (if you hit    the right two race windows) - I've tested this in a kernel build with    some extra mdelay() calls. See the commit message for a description    of the race scenario.    On older kernels (before 6.5)\, I think the same bug can even    theoretically lead to accessing transhuge page contents as a page table    if you hit the right 5 narrow race windows (I haven't tested this case). 2. As pointed out by Qi Zheng\, pmd_trans_huge() is not sufficient for    detecting PMDs that don't point to page tables.    On older kernels (before 6.5)\, you'd just have to win a single fairly    wide race to hit this.    I've tested this on 6.1 stable by racing migration (with a mdelay()    patched into try_to_migrate()) against UFFDIO_ZEROPAGE - on my x86    VM\, that causes a kernel oops in ptlock_ptr(). 3. On newer kernels (>=6.5)\, for shmem mappings\, khugepaged is allowed    to yank page tables out from under us (though I haven't tested that)\,    so I think the BUG_ON() checks in mfill_atomic() are just wrong.  I decided to write two separate fixes for these (one fix for bugs 1+2\, one fix for bug 3)\, so that the first fix can be backported to kernels affected by bugs 1+2.   This patch (of 2):  This fixes two issues.  I discovered that the following race can occur:    mfill_atomic                other thread   ============                ============                               <zap PMD>   pmdp_get_lockless() [reads none pmd]   <bail if trans_huge>   <if none:>                               <pagefault creates transhuge zeropage>     __pte_alloc [no-op]                               <zap PMD>   <bail if pmd_trans_huge(*dst_pmd)>   BUG_ON(pmd_none(*dst_pmd))  I have experimentally verified this in a kernel with extra mdelay() calls; the BUG_ON(pmd_none(*dst_pmd)) triggers.  On kernels newer than commit 0d940a9b270b (""mm/pgtable: allow pte_offset_map[_lock]() to fail"")\, this can't lead to anything worse than a BUG_ON()\, since the page table access helpers are actually designed to deal with page tables concurrently disappearing; but on older kernels (<=6.4)\, I think we could probably theoretically race past the two BUG_ON() checks and end up treating a hugepage as a page table.  The second issue is that\, as Qi Zheng pointed out\, there are other types of huge PMDs that pmd_trans_huge() can't catch: devmap PMDs and swap PMDs (in particular\, migration PMDs).  On <=6.4\, this is worse than the first issue: If mfill_atomic() runs on a PMD that contains a migration entry (which just requires winning a single\, fairly wide race)\, it will pass the PMD to pte_offset_map_lock()\, which assumes that the PMD points to a page table.  Breakage follows: First\, the kernel tries to take the PTE lock (which will crash or maybe worse if there is no ""struct page"" for the address bits in the migration entry PMD - I think at least on X86 there usually is no corresponding ""struct page"" thanks to the PTE inversion mitigation\, amd64 looks different).  If that didn't crash\, the kernel would next try to write a PTE into what it wrongly thinks is a page table.  As part of fixing these issues\, get rid of the check for pmd_trans_huge() before __pte_alloc() - that's redundant\, we're going to have to check for that after the __pte_alloc() anyway.  Backport note: pmdp_get_lockless() is pmd_read_atomic() in older kernels.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22033,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  arm64: Don't call NULL in do_compat_alignment_fixup()  do_alignment_t32_to_handler() only fixes up alignment faults for specific instructions; it returns NULL otherwise (e.g. LDREX). When that's the case\, signal to the caller that it needs to proceed with the regular alignment fault handling (i.e. SIGBUS). Without this patch\, the kernel panics:    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000   Mem abort info:     ESR = 0x0000000086000006     EC = 0x21: IABT (current EL)\, IL = 32 bits     SET = 0\, FnV = 0     EA = 0\, S1PTW = 0     FSC = 0x06: level 2 translation fault   user pgtable: 4k pages\, 48-bit VAs\, pgdp=00000800164aa000   [0000000000000000] pgd=0800081fdbd22003\, p4d=0800081fdbd22003\, pud=08000815d51c6003\, pmd=0000000000000000   Internal error: Oops: 0000000086000006 [#1] SMP   Modules linked in: cfg80211 rfkill xt_nat xt_tcpudp xt_conntrack nft_chain_nat xt_MASQUERADE nf_nat nf_conntrack_netlink nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 xfrm_user xfrm_algo xt_addrtype nft_compat br_netfilter veth nvme_fa>    libcrc32c crc32c_generic raid0 multipath linear dm_mod dax raid1 md_mod xhci_pci nvme xhci_hcd nvme_core t10_pi usbcore igb crc64_rocksoft crc64 crc_t10dif crct10dif_generic crct10dif_ce crct10dif_common usb_common i2c_algo_bit i2c>   CPU: 2 PID: 3932954 Comm: WPEWebProcess Not tainted 6.1.0-31-arm64 #1  Debian 6.1.128-1   Hardware name: GIGABYTE MP32-AR1-00/MP32-AR1-00\, BIOS F18v (SCP: 1.08.20211002) 12/01/2021   pstate: 80400009 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : 0x0   lr : do_compat_alignment_fixup+0xd8/0x3dc   sp : ffff80000f973dd0   x29: ffff80000f973dd0 x28: ffff081b42526180 x27: 0000000000000000   x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000   x23: 0000000000000004 x22: 0000000000000000 x21: 0000000000000001   x20: 00000000e8551f00 x19: ffff80000f973eb0 x18: 0000000000000000   x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000   x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000   x11: 0000000000000000 x10: 0000000000000000 x9 : ffffaebc949bc488   x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000000000   x5 : 0000000000400000 x4 : 0000fffffffffffe x3 : 0000000000000000   x2 : ffff80000f973eb0 x1 : 00000000e8551f00 x0 : 0000000000000001   Call trace:    0x0    do_alignment_fault+0x40/0x50    do_mem_abort+0x4c/0xa0    el0_da+0x48/0xf0    el0t_32_sync_handler+0x110/0x140    el0t_32_sync+0x190/0x194   Code: bad PC value   ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21692,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: sched: fix ets qdisc OOB Indexing  Haowei Yan <g1042620637@gmail.com> found that ets_class_from_arg() can index an Out-Of-Bound class in ets_class_from_arg() when passed clid of 0. The overflow may cause local privilege escalation.   [   18.852298] ------------[ cut here ]------------  [   18.853271] UBSAN: array-index-out-of-bounds in net/sched/sch_ets.c:93:20  [   18.853743] index 18446744073709551615 is out of range for type 'ets_class [16]'  [   18.854254] CPU: 0 UID: 0 PID: 1275 Comm: poc Not tainted 6.12.6-dirty #17  [   18.854821] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014  [   18.856532] Call Trace:  [   18.857441]  <TASK>  [   18.858227]  dump_stack_lvl+0xc2/0xf0  [   18.859607]  dump_stack+0x10/0x20  [   18.860908]  __ubsan_handle_out_of_bounds+0xa7/0xf0  [   18.864022]  ets_class_change+0x3d6/0x3f0  [   18.864322]  tc_ctl_tclass+0x251/0x910  [   18.864587]  ? lock_acquire+0x5e/0x140  [   18.865113]  ? __mutex_lock+0x9c/0xe70  [   18.866009]  ? __mutex_lock+0xa34/0xe70  [   18.866401]  rtnetlink_rcv_msg+0x170/0x6f0  [   18.866806]  ? __lock_acquire+0x578/0xc10  [   18.867184]  ? __pfx_rtnetlink_rcv_msg+0x10/0x10  [   18.867503]  netlink_rcv_skb+0x59/0x110  [   18.867776]  rtnetlink_rcv+0x15/0x30  [   18.868159]  netlink_unicast+0x1c3/0x2b0  [   18.868440]  netlink_sendmsg+0x239/0x4b0  [   18.868721]  ____sys_sendmsg+0x3e2/0x410  [   18.869012]  ___sys_sendmsg+0x88/0xe0  [   18.869276]  ? rseq_ip_fixup+0x198/0x260  [   18.869563]  ? rseq_update_cpu_node_id+0x10a/0x190  [   18.869900]  ? trace_hardirqs_off+0x5a/0xd0  [   18.870196]  ? syscall_exit_to_user_mode+0xcc/0x220  [   18.870547]  ? do_syscall_64+0x93/0x150  [   18.870821]  ? __memcg_slab_free_hook+0x69/0x290  [   18.871157]  __sys_sendmsg+0x69/0xd0  [   18.871416]  __x64_sys_sendmsg+0x1d/0x30  [   18.871699]  x64_sys_call+0x9e2/0x2670  [   18.871979]  do_syscall_64+0x87/0x150  [   18.873280]  ? do_syscall_64+0x93/0x150  [   18.874742]  ? lock_release+0x7b/0x160  [   18.876157]  ? do_user_addr_fault+0x5ce/0x8f0  [   18.877833]  ? irqentry_exit_to_user_mode+0xc2/0x210  [   18.879608]  ? irqentry_exit+0x77/0xb0  [   18.879808]  ? clear_bhb_loop+0x15/0x70  [   18.880023]  ? clear_bhb_loop+0x15/0x70  [   18.880223]  ? clear_bhb_loop+0x15/0x70  [   18.880426]  entry_SYSCALL_64_after_hwframe+0x76/0x7e  [   18.880683] RIP: 0033:0x44a957  [   18.880851] Code: ff ff e8 fc 00 00 00 66 2e 0f 1f 84 00 00 00 00 00 66 90 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51 c3 48 83 ec 28 89 54 24 1c 48 8974 24 10  [   18.881766] RSP: 002b:00007ffcdd00fad8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e  [   18.882149] RAX: ffffffffffffffda RBX: 00007ffcdd010db8 RCX: 000000000044a957  [   18.882507] RDX: 0000000000000000 RSI: 00007ffcdd00fb70 RDI: 0000000000000003  [   18.885037] RBP: 00007ffcdd010bc0 R08: 000000000703c770 R09: 000000000703c7c0  [   18.887203] R10: 0000000000000080 R11: 0000000000000246 R12: 0000000000000001  [   18.888026] R13: 00007ffcdd010da8 R14: 00000000004ca7d0 R15: 0000000000000001  [   18.888395]  </TASK>  [   18.888610] ---[ end trace ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21693,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm: zswap: properly synchronize freeing resources during CPU hotunplug  In zswap_compress() and zswap_decompress()\, the per-CPU acomp_ctx of the current CPU at the beginning of the operation is retrieved and used throughout.  However\, since neither preemption nor migration are disabled\, it is possible that the operation continues on a different CPU.  If the original CPU is hotunplugged while the acomp_ctx is still in use\, we run into a UAF bug as some of the resources attached to the acomp_ctx are freed during hotunplug in zswap_cpu_comp_dead() (i.e.  acomp_ctx.buffer\, acomp_ctx.req\, or acomp_ctx.acomp).  The problem was introduced in commit 1ec3b5fe6eec (""mm/zswap: move to use crypto_acomp API for hardware acceleration"") when the switch to the crypto_acomp API was made.  Prior to that\, the per-CPU crypto_comp was retrieved using get_cpu_ptr() which disables preemption and makes sure the CPU cannot go away from under us.  Preemption cannot be disabled with the crypto_acomp API as a sleepable context is needed.  Use the acomp_ctx.mutex to synchronize CPU hotplug callbacks allocating and freeing resources with compression/decompression paths.  Make sure that acomp_ctx.req is NULL when the resources are freed.  In the compression/decompression paths\, check if acomp_ctx.req is NULL after acquiring the mutex (meaning the CPU was offlined) and retry on the new CPU.  The initialization of acomp_ctx.mutex is moved from the CPU hotplug callback to the pool initialization where it belongs (where the mutex is allocated).  In addition to adding clarity\, this makes sure that CPU hotplug cannot reinitialize a mutex that is already locked by compression/decompression.  Previously a fix was attempted by holding cpus_read_lock() [1].  This would have caused a potential deadlock as it is possible for code already holding the lock to fall into reclaim and enter zswap (causing a deadlock).  A fix was also attempted using SRCU for synchronization\, but Johannes pointed out that synchronize_srcu() cannot be used in CPU hotplug notifiers [2].  Alternative fixes that were considered/attempted and could have worked: - Refcounting the per-CPU acomp_ctx. This involves complexity in   handling the race between the refcount dropping to zero in   zswap_[de]compress() and the refcount being re-initialized when the   CPU is onlined. - Disabling migration before getting the per-CPU acomp_ctx [3]\, but   that's discouraged and is a much bigger hammer than needed\, and could   result in subtle performance issues.  [1]https://lkml.kernel.org/20241219212437.2714151-1-yosryahmed@google.com/ [2]https://lkml.kernel.org/20250107074724.1756696-2-yosryahmed@google.com/ [3]https://lkml.kernel.org/20250107222236.2715883-2-yosryahmed@google.com/  [yosryahmed@google.com: remove comment]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21690,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: storvsc: Ratelimit warning logs to prevent VM denial of service  If there's a persistent error in the hypervisor\, the SCSI warning for failed I/O can flood the kernel log and max out CPU utilization\, preventing troubleshooting from the VM side. Ratelimit the warning so it doesn't DoS the VM.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22037,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix null pointer dereference in alloc_preauth_hash()  The Client send malformed smb2 negotiate request. ksmbd return error response. Subsequently\, the client can send smb2 session setup even thought conn->preauth_info is not allocated. This patch add KSMBD_SESS_NEED_SETUP status of connection to ignore session setup request if smb2 negotiate phase is not complete.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21696,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm: clear uffd-wp PTE/PMD state on mremap()  When mremap()ing a memory region previously registered with userfaultfd as write-protected but without UFFD_FEATURE_EVENT_REMAP\, an inconsistency in flag clearing leads to a mismatch between the vma flags (which have uffd-wp cleared) and the pte/pmd flags (which do not have uffd-wp cleared).  This mismatch causes a subsequent mprotect(PROT_WRITE) to trigger a warning in page_table_check_pte_flags() due to setting the pte to writable while uffd-wp is still set.  Fix this by always explicitly clearing the uffd-wp pte/pmd flags on any such mremap() so that the values are consistent with the existing clearing of VM_UFFD_WP.  Be careful to clear the logical flag regardless of its physical form; a PTE bit\, a swap PTE bit\, or a PTE marker.  Cover PTE\, huge PMD and hugetlb paths.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21697,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/v3d: Ensure job pointer is set to NULL after job completion  After a job completes\, the corresponding pointer in the device must be set to NULL. Failing to do so triggers a warning when unloading the driver\, as it appears the job is still active. To prevent this\, assign the job pointer to NULL after completing the job\, indicating the job has finished.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22035,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  tracing: Fix use-after-free in print_graph_function_flags during tracer switching  Kairui reported a UAF issue in print_graph_function_flags() during ftrace stress testing [1]. This issue can be reproduced if puting a 'mdelay(10)' after 'mutex_unlock(&trace_types_lock)' in s_start()\, and executing the following script:    $ echo function_graph > current_tracer   $ cat trace > /dev/null &   $ sleep 5  # Ensure the 'cat' reaches the 'mdelay(10)' point   $ echo timerlat > current_tracer  The root cause lies in the two calls to print_graph_function_flags within print_trace_line during each s_show():    * One through 'iter->trace->print_line()';   * Another through 'event->funcs->trace()'\, which is hidden in     print_trace_fmt() before print_trace_line returns.  Tracer switching only updates the former\, while the latter continues to use the print_line function of the old tracer\, which in the script above is print_graph_function_flags.  Moreover\, when switching from the 'function_graph' tracer to the 'timerlat' tracer\, s_start only calls graph_trace_close of the 'function_graph' tracer to free 'iter->private'\, but does not set it to NULL. This provides an opportunity for 'event->funcs->trace()' to use an invalid 'iter->private'.  To fix this issue\, set 'iter->private' to NULL immediately after freeing it in graph_trace_close()\, ensuring that an invalid pointer is not passed to other tracers. Additionally\, clean up the unnecessary 'iter->private = NULL' during each 'cat trace' when using wakeup and irqsoff tracers.   [1] https://lore.kernel.org/all/20231112150030.84609-1-ryncsn@gmail.com/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21694,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/proc: fix softlockup in __read_vmcore (part 2)  Since commit 5cbcb62dddf5 (""fs/proc: fix softlockup in __read_vmcore"") the number of softlockups in __read_vmcore at kdump time have gone down\, but they still happen sometimes.  In a memory constrained environment like the kdump image\, a softlockup is not just a harmless message\, but it can interfere with things like RCU freeing memory\, causing the crashdump to get stuck.  The second loop in __read_vmcore has a lot more opportunities for natural sleep points\, like scheduling out while waiting for a data write to happen\, but apparently that is not always enough.  Add a cond_resched() to the second loop in __read_vmcore to (hopefully) get rid of the softlockups.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52625,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Refactor DMCUB enter/exit idle interface  [Why] We can hang in place trying to send commands when the DMCUB isn't powered on.  [How] We need to exit out of the idle state prior to sending a command\, but the process that performs the exit also invokes a command itself.  Fixing this issue involves the following:  1. Using a software state to track whether or not we need to start    the process to exit idle or notify idle.  It's possible for the hardware to have exited an idle state without driver knowledge\, but entering one is always restricted to a driver allow - which makes the SW state vs HW state mismatch issue purely one of optimization\, which should seldomly be hit\, if at all.  2. Refactor any instances of exit/notify idle to use a single wrapper    that maintains this SW state.  This works simialr to dc_allow_idle_optimizations\, but works at the DMCUB level and makes sure the state is marked prior to any notify/exit idle so we don't enter an infinite loop.  3. Make sure we exit out of idle prior to sending any commands or    waiting for DMCUB idle.  This patch takes care of 1/2. A future patch will take care of wrapping DMCUB command submission with calls to this new interface.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-9192,libc-bin,LOW,2.36-9+deb12u10,N/A,"In the GNU C Library (aka glibc or libc6) through 2.29\, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion\, as demonstrated by '(|)(\\\\1\\\\1)*' in grep\, a different issue than CVE-2018-20796. NOTE: the software maintainer disputes that this is a vulnerability because the behavior occurs only with a crafted pattern",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52624,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Wake DMCUB before executing GPINT commands  [Why] DMCUB can be in idle when we attempt to interface with the HW through the GPINT mailbox resulting in a system hang.  [How] Add dc_wake_and_execute_gpint() to wrap the wake\, execute\, sleep sequence.  If the GPINT executes successfully then DMCUB will be put back into sleep after the optional response is returned.  It functions similar to the inbox command interface.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57802,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  netrom: check buffer length before accessing it  Syzkaller reports an uninit value read from ax25cmp when sending raw message through ieee802154 implementation.  ===================================================== BUG: KMSAN: uninit-value in ax25cmp+0x3a5/0x460 net/ax25/ax25_addr.c:119  ax25cmp+0x3a5/0x460 net/ax25/ax25_addr.c:119  nr_dev_get+0x20e/0x450 net/netrom/nr_route.c:601  nr_route_frame+0x1a2/0xfc0 net/netrom/nr_route.c:774  nr_xmit+0x5a/0x1c0 net/netrom/nr_dev.c:144  __netdev_start_xmit include/linux/netdevice.h:4940 [inline]  netdev_start_xmit include/linux/netdevice.h:4954 [inline]  xmit_one net/core/dev.c:3548 [inline]  dev_hard_start_xmit+0x247/0xa10 net/core/dev.c:3564  __dev_queue_xmit+0x33b8/0x5130 net/core/dev.c:4349  dev_queue_xmit include/linux/netdevice.h:3134 [inline]  raw_sendmsg+0x654/0xc10 net/ieee802154/socket.c:299  ieee802154_sock_sendmsg+0x91/0xc0 net/ieee802154/socket.c:96  sock_sendmsg_nosec net/socket.c:730 [inline]  __sock_sendmsg net/socket.c:745 [inline]  ____sys_sendmsg+0x9c2/0xd60 net/socket.c:2584  ___sys_sendmsg+0x28d/0x3c0 net/socket.c:2638  __sys_sendmsg net/socket.c:2667 [inline]  __do_sys_sendmsg net/socket.c:2676 [inline]  __se_sys_sendmsg net/socket.c:2674 [inline]  __x64_sys_sendmsg+0x307/0x490 net/socket.c:2674  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0x44/0x110 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x63/0x6b  Uninit was created at:  slab_post_alloc_hook+0x129/0xa70 mm/slab.h:768  slab_alloc_node mm/slub.c:3478 [inline]  kmem_cache_alloc_node+0x5e9/0xb10 mm/slub.c:3523  kmalloc_reserve+0x13d/0x4a0 net/core/skbuff.c:560  __alloc_skb+0x318/0x740 net/core/skbuff.c:651  alloc_skb include/linux/skbuff.h:1286 [inline]  alloc_skb_with_frags+0xc8/0xbd0 net/core/skbuff.c:6334  sock_alloc_send_pskb+0xa80/0xbf0 net/core/sock.c:2780  sock_alloc_send_skb include/net/sock.h:1884 [inline]  raw_sendmsg+0x36d/0xc10 net/ieee802154/socket.c:282  ieee802154_sock_sendmsg+0x91/0xc0 net/ieee802154/socket.c:96  sock_sendmsg_nosec net/socket.c:730 [inline]  __sock_sendmsg net/socket.c:745 [inline]  ____sys_sendmsg+0x9c2/0xd60 net/socket.c:2584  ___sys_sendmsg+0x28d/0x3c0 net/socket.c:2638  __sys_sendmsg net/socket.c:2667 [inline]  __do_sys_sendmsg net/socket.c:2676 [inline]  __se_sys_sendmsg net/socket.c:2674 [inline]  __x64_sys_sendmsg+0x307/0x490 net/socket.c:2674  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0x44/0x110 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x63/0x6b  CPU: 0 PID: 5037 Comm: syz-executor166 Not tainted 6.7.0-rc7-syzkaller-00003-gfbafc3e621c3 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 11/17/2023 =====================================================  This issue occurs because the skb buffer is too small\, and it's actual allocation is aligned. This hides an actual issue\, which is that nr_route_frame does not validate the buffer size before using it.  Fix this issue by checking skb->len before accessing any fields in skb->data.  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-37769,libpixman-1-0,LOW,0.42.2-1,N/A,"stress-test master commit e4c878 was discovered to contain a FPE vulnerability via the component combine_inner at /pixman-combine-float.c.",|tykio/midsommar|
CVE-2022-3219,gpgv,LOW,2.2.40-1.1,N/A,"GnuPG can be made to spin on a relatively small input by (for example) crafting a public key with thousands of signatures attached\, compressed down to just a few KB.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-1916,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"A flaw was found in tiffcrop\, a program distributed by the libtiff package. A specially crafted tiff file can lead to an out-of-bounds read in the extractImageSection function in tools/tiffcrop.c\, resulting in a denial of service and limited information disclosure. This issue affects libtiff versions 4.x.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57807,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: megaraid_sas: Fix for a potential deadlock  This fixes a 'possible circular locking dependency detected' warning       CPU0                    CPU1       ----                    ----  lock(&instance->reset_mutex);                               lock(&shost->scan_mutex);                               lock(&instance->reset_mutex);  lock(&shost->scan_mutex);  Fix this by temporarily releasing the reset_mutex.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-39735,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: fix slab-out-of-bounds read in ea_get()  During the ""size_check"" label in ea_get()\, the code checks if the extended attribute list (xattr) size matches ea_size. If not\, it logs ""ea_get: invalid extended attribute"" and calls print_hex_dump().  Here\, EALIST_SIZE(ea_buf->xattr) returns 4110417968\, which exceeds INT_MAX (2\,147\,483\,647). Then ea_size is clamped:  \tint size = clamp_t(int\, ea_size\, 0\, EALIST_SIZE(ea_buf->xattr));  Although clamp_t aims to bound ea_size between 0 and 4110417968\, the upper limit is treated as an int\, causing an overflow above 2^31 - 1. This leads ""size"" to wrap around and become negative (-184549328).  The ""size"" is then passed to print_hex_dump() (called ""len"" in print_hex_dump())\, it is passed as type size_t (an unsigned type)\, this is then stored inside a variable called ""int remaining""\, which is then assigned to ""int linelen"" which is then passed to hex_dump_to_buffer(). In print_hex_dump() the for loop\, iterates through 0 to len-1\, where len is 18446744073525002176\, calling hex_dump_to_buffer() on each iteration:  \tfor (i = 0; i < len; i += rowsize) { \t\tlinelen = min(remaining\, rowsize); \t\tremaining -= rowsize;  \t\thex_dump_to_buffer(ptr + i\, linelen\, rowsize\, groupsize\, \t\t\t\t   linebuf\, sizeof(linebuf)\, ascii);  \t\t... \t}  The expected stopping condition (i < len) is effectively broken since len is corrupted and very large. This eventually leads to the ""ptr+i"" being passed to hex_dump_to_buffer() to get closer to the end of the actual bounds of ""ptr""\, eventually an out of bounds access is done in hex_dump_to_buffer() in the following for loop:  \tfor (j = 0; j < len; j++) { \t\t\tif (linebuflen < lx + 2) \t\t\t\tgoto overflow2; \t\t\tch = ptr[j]; \t\t... \t}  To fix this we should validate ""EALIST_SIZE(ea_buf->xattr)"" before it is utilised.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12378,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in ip6_ra_control in net/ipv6/ipv6_sockglue.c in the Linux kernel through 5.1.5. There is an unchecked kmalloc of new_ra\, which might allow an attacker to cause a denial of service (NULL pointer dereference and system crash). NOTE: This has been disputed as not an issue",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57948,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  mac802154: check local interfaces before deleting sdata list  syzkaller reported a corrupted list in ieee802154_if_remove. [1]  Remove an IEEE 802.15.4 network interface after unregister an IEEE 802.15.4 hardware device from the system.  CPU0\t\t\t\t\tCPU1 ====\t\t\t\t\t==== genl_family_rcv_msg_doit\t\tieee802154_unregister_hw ieee802154_del_iface\t\t\tieee802154_remove_interfaces rdev_del_virtual_intf_deprecated\tlist_del(&sdata->list) ieee802154_if_remove list_del_rcu  The net device has been unregistered\, since the rcu grace period\, unregistration must be run before ieee802154_if_remove.  To avoid this issue\, add a check for local->interfaces before deleting sdata list.  [1] kernel BUG at lib/list_debug.c:58! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 0 UID: 0 PID: 6277 Comm: syz-executor157 Not tainted 6.12.0-rc6-syzkaller-00005-g557329bcecc2 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 RIP: 0010:__list_del_entry_valid_or_report+0xf4/0x140 lib/list_debug.c:56 Code: e8 a1 7e 00 07 90 0f 0b 48 c7 c7 e0 37 60 8c 4c 89 fe e8 8f 7e 00 07 90 0f 0b 48 c7 c7 40 38 60 8c 4c 89 fe e8 7d 7e 00 07 90 <0f> 0b 48 c7 c7 a0 38 60 8c 4c 89 fe e8 6b 7e 00 07 90 0f 0b 48 c7 RSP: 0018:ffffc9000490f3d0 EFLAGS: 00010246 RAX: 000000000000004e RBX: dead000000000122 RCX: d211eee56bb28d00 RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000 RBP: ffff88805b278dd8 R08: ffffffff8174a12c R09: 1ffffffff2852f0d R10: dffffc0000000000 R11: fffffbfff2852f0e R12: dffffc0000000000 R13: dffffc0000000000 R14: dead000000000100 R15: ffff88805b278cc0 FS:  0000555572f94380(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 000056262e4a3000 CR3: 0000000078496000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  __list_del_entry_valid include/linux/list.h:124 [inline]  __list_del_entry include/linux/list.h:215 [inline]  list_del_rcu include/linux/rculist.h:157 [inline]  ieee802154_if_remove+0x86/0x1e0 net/mac802154/iface.c:687  rdev_del_virtual_intf_deprecated net/ieee802154/rdev-ops.h:24 [inline]  ieee802154_del_iface+0x2c0/0x5c0 net/ieee802154/nl-phy.c:323  genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]  genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]  genl_rcv_msg+0xb14/0xec0 net/netlink/genetlink.c:1210  netlink_rcv_skb+0x1e3/0x430 net/netlink/af_netlink.c:2551  genl_rcv+0x28/0x40 net/netlink/genetlink.c:1219  netlink_unicast_kernel net/netlink/af_netlink.c:1331 [inline]  netlink_unicast+0x7f6/0x990 net/netlink/af_netlink.c:1357  netlink_sendmsg+0x8e4/0xcb0 net/netlink/af_netlink.c:1901  sock_sendmsg_nosec net/socket.c:729 [inline]  __sock_sendmsg+0x221/0x270 net/socket.c:744  ____sys_sendmsg+0x52a/0x7e0 net/socket.c:2607  ___sys_sendmsg net/socket.c:2661 [inline]  __sys_sendmsg+0x292/0x380 net/socket.c:2690  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-12379,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in con_insert_unipair in drivers/tty/vt/consolemap.c in the Linux kernel through 5.1.5. There is a memory leak in a certain case of an ENOMEM outcome of kmalloc. NOTE: This id is disputed as not being an issue",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57949,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  irqchip/gic-v3-its: Don't enable interrupts in its_irq_set_vcpu_affinity()  The following call-chain leads to enabling interrupts in a nested interrupt disabled section:  irq_set_vcpu_affinity()   irq_get_desc_lock()      raw_spin_lock_irqsave()   <--- Disable interrupts   its_irq_set_vcpu_affinity()      guard(raw_spinlock_irq)   <--- Enables interrupts when leaving the guard()   irq_put_desc_unlock()        <--- Warns because interrupts are enabled  This was broken in commit b97e8a2f7130\, which replaced the original raw_spin_[un]lock() pair with guard(raw_spinlock_irq).  Fix the issue by using guard(raw_spinlock).  [ tglx: Massaged change log ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57804,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: mpi3mr: Fix corrupt config pages PHY state is switched in sysfs  The driver\, through the SAS transport\, exposes a sysfs interface to enable/disable PHYs in a controller/expander setup.  When multiple PHYs are disabled and enabled in rapid succession\, the persistent and current config pages related to SAS IO unit/SAS Expander pages could get corrupted.  Use separate memory for each config request.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57946,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  virtio-blk: don't keep queue frozen during system suspend  Commit 4ce6e2db00de (""virtio-blk: Ensure no requests in virtqueues before deleting vqs."") replaces queue quiesce with queue freeze in virtio-blk's PM callbacks. And the motivation is to drain inflight IOs before suspending.  block layer's queue freeze looks very handy\, but it is also easy to cause deadlock\, such as\, any attempt to call into bio_queue_enter() may run into deadlock if the queue is frozen in current context. There are all kinds of ->suspend() called in suspend context\, so keeping queue frozen in the whole suspend context isn't one good idea. And Marek reported lockdep warning[1] caused by virtio-blk's freeze queue in virtblk_freeze().  [1] https://lore.kernel.org/linux-block/ca16370e-d646-4eee-b9cc-87277c89c43c@samsung.com/  Given the motivation is to drain in-flight IOs\, it can be done by calling freeze & unfreeze\, meantime restore to previous behavior by keeping queue quiesced during suspend.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-6239,libpoppler126,LOW,22.12.0-2+b1,N/A,"A flaw was found in the Poppler's Pdfinfo utility. This issue occurs when using -dests parameter with pdfinfo utility. By using certain malformed input files\, an attacker could cause the utility to crash\, leading to a denial of service.",|tykio/midsommar|
CVE-2025-21980,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  sched: address a potential NULL pointer dereference in the GRED scheduler.  If kzalloc in gred_init returns a NULL pointer\, the code follows the error handling path\, invoking gred_destroy. This\, in turn\, calls gred_offload\, where memset could receive a NULL pointer as input\, potentially leading to a kernel crash.  When table->opt is NULL in gred_init()\, gred_change_table_def() is not called yet\, so it is not necessary to call ->ndo_setup_tc() in gred_offload().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57809,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: imx6: Fix suspend/resume support on i.MX6QDL  The suspend/resume functionality is currently broken on the i.MX6QDL platform\, as documented in the NXP errata (ERR005723):    https://www.nxp.com/docs/en/errata/IMX6DQCE.pdf  This patch addresses the issue by sharing most of the suspend/resume sequences used by other i.MX devices\, while avoiding modifications to critical registers that disrupt the PCIe functionality. It targets the same problem as the following downstream commit:    https://github.com/nxp-imx/linux-imx/commit/4e92355e1f79d225ea842511fcfd42b343b32995  Unlike the downstream commit\, this patch also resets the connected PCIe device if possible. Without this reset\, certain drivers\, such as ath10k or iwlwifi\, will crash on resume. The device reset is also done by the driver on other i.MX platforms\, making this patch consistent with existing practices.  Upon resuming\, the kernel will hang and display an error. Here's an example of the error encountered with the ath10k driver:    ath10k_pci 0000:01:00.0: Unable to change power state from D3hot to D0\, device inaccessible   Unhandled fault: imprecise external abort (0x1406) at 0x0106f944  Without this patch\, suspend/resume will fail on i.MX6QDL devices if a PCIe device is connected.  [kwilczynski: commit log\, added tag for stable releases]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26618,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  arm64/sme: Always exit sme_alloc() early with existing storage  When sme_alloc() is called with existing storage and we are not flushing we will always allocate new storage\, both leaking the existing storage and corrupting the state. Fix this by separating the checks for flushing and for existing storage as we do for SVE.  Callers that reallocate (eg\, due to changing the vector length) should call sme_free() themselves.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21981,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ice: fix memory leak in aRFS after reset  Fix aRFS (accelerated Receive Flow Steering) structures memory leak by adding a checker to verify if aRFS memory is already allocated while configuring VSI. aRFS objects are allocated in two cases: - as part of VSI initialization (at probe)\, and - as part of reset handling  However\, VSI reconfiguration executed during reset involves memory allocation one more time\, without prior releasing already allocated resources. This led to the memory leak with the following signature:  [root@os-delivery ~]# cat /sys/kernel/debug/kmemleak unreferenced object 0xff3c1ca7252e6000 (size 8192):   comm ""kworker/0:0""\, pid 8\, jiffies 4296833052   hex dump (first 32 bytes):     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................   backtrace (crc 0):     [<ffffffff991ec485>] __kmalloc_cache_noprof+0x275/0x340     [<ffffffffc0a6e06a>] ice_init_arfs+0x3a/0xe0 [ice]     [<ffffffffc09f1027>] ice_vsi_cfg_def+0x607/0x850 [ice]     [<ffffffffc09f244b>] ice_vsi_setup+0x5b/0x130 [ice]     [<ffffffffc09c2131>] ice_init+0x1c1/0x460 [ice]     [<ffffffffc09c64af>] ice_probe+0x2af/0x520 [ice]     [<ffffffff994fbcd3>] local_pci_probe+0x43/0xa0     [<ffffffff98f07103>] work_for_cpu_fn+0x13/0x20     [<ffffffff98f0b6d9>] process_one_work+0x179/0x390     [<ffffffff98f0c1e9>] worker_thread+0x239/0x340     [<ffffffff98f14abc>] kthread+0xcc/0x100     [<ffffffff98e45a6d>] ret_from_fork+0x2d/0x50     [<ffffffff98e083ba>] ret_from_fork_asm+0x1a/0x30     ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57945,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  riscv: mm: Fix the out of bound issue of vmemmap address  In sparse vmemmap model\, the virtual address of vmemmap is calculated as: ((struct page *)VMEMMAP_START - (phys_ram_base >> PAGE_SHIFT)). And the struct page's va can be calculated with an offset: (vmemmap + (pfn)).  However\, when initializing struct pages\, kernel actually starts from the first page from the same section that phys_ram_base belongs to. If the first page's physical address is not (phys_ram_base >> PAGE_SHIFT)\, then we get an va below VMEMMAP_START when calculating va for it's struct page.  For example\, if phys_ram_base starts from 0x82000000 with pfn 0x82000\, the first page in the same section is actually pfn 0x80000. During init_unavailable_range()\, we will initialize struct page for pfn 0x80000 with virtual address ((struct page *)VMEMMAP_START - 0x2000)\, which is below VMEMMAP_START as well as PCI_IO_END.  This commit fixes this bug by introducing a new variable 'vmemmap_start_pfn' which is aligned with memory section size and using it to calculate vmemmap address instead of phys_ram_base.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21986,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: switchdev: Convert blocking notification chain to a raw one  A blocking notification chain uses a read-write semaphore to protect the integrity of the chain. The semaphore is acquired for writing when adding / removing notifiers to / from the chain and acquired for reading when traversing the chain and informing notifiers about an event.  In case of the blocking switchdev notification chain\, recursive notifications are possible which leads to the semaphore being acquired twice for reading and to lockdep warnings being generated [1].  Specifically\, this can happen when the bridge driver processes a SWITCHDEV_BRPORT_UNOFFLOADED event which causes it to emit notifications about deferred events when calling switchdev_deferred_process().  Fix this by converting the notification chain to a raw notification chain in a similar fashion to the netdev notification chain. Protect the chain using the RTNL mutex by acquiring it when modifying the chain. Events are always informed under the RTNL mutex\, but add an assertion in call_switchdev_blocking_notifiers() to make sure this is not violated in the future.  Maintain the ""blocking"" prefix as events are always emitted from process context and listeners are allowed to block.  [1]: WARNING: possible recursive locking detected 6.14.0-rc4-custom-g079270089484 #1 Not tainted -------------------------------------------- ip/52731 is trying to acquire lock: ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{4:4}\, at: blocking_notifier_call_chain+0x58/0xa0  but task is already holding lock: ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{4:4}\, at: blocking_notifier_call_chain+0x58/0xa0  other info that might help us debug this: Possible unsafe locking scenario: CPU0 ---- lock((switchdev_blocking_notif_chain).rwsem); lock((switchdev_blocking_notif_chain).rwsem);  *** DEADLOCK *** May be due to missing lock nesting notation 3 locks held by ip/52731:  #0: ffffffff84f795b0 (rtnl_mutex){+.+.}-{4:4}\, at: rtnl_newlink+0x727/0x1dc0  #1: ffffffff8731f628 (&net->rtnl_mutex){+.+.}-{4:4}\, at: rtnl_newlink+0x790/0x1dc0  #2: ffffffff850918d8 ((switchdev_blocking_notif_chain).rwsem){++++}-{4:4}\, at: blocking_notifier_call_chain+0x58/0xa0  stack backtrace: ... ? __pfx_down_read+0x10/0x10 ? __pfx_mark_lock+0x10/0x10 ? __pfx_switchdev_port_attr_set_deferred+0x10/0x10 blocking_notifier_call_chain+0x58/0xa0 switchdev_port_attr_notify.constprop.0+0xb3/0x1b0 ? __pfx_switchdev_port_attr_notify.constprop.0+0x10/0x10 ? mark_held_locks+0x94/0xe0 ? switchdev_deferred_process+0x11a/0x340 switchdev_port_attr_set_deferred+0x27/0xd0 switchdev_deferred_process+0x164/0x340 br_switchdev_port_unoffload+0xc8/0x100 [bridge] br_switchdev_blocking_event+0x29f/0x580 [bridge] notifier_call_chain+0xa2/0x440 blocking_notifier_call_chain+0x6e/0xa0 switchdev_bridge_port_unoffload+0xde/0x1a0 ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47143,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  dma-debug: fix a possible deadlock on radix_lock  radix_lock() shouldn't be held while holding dma_hash_entry[idx].lock otherwise\, there's a possible deadlock scenario when dma debug API is called holding rq_lock():  CPU0                   CPU1                       CPU2 dma_free_attrs() check_unmap()          add_dma_entry()            __schedule() //out                                                   (A) rq_lock() get_hash_bucket() (A) dma_entry_hash                                                   check_sync()                        (A) radix_lock()           (W) dma_entry_hash dma_entry_free() (W) radix_lock()                        // CPU2's one                        (W) rq_lock()  CPU1 situation can happen when it extending radix tree and it tries to wake up kswapd via wake_all_kswapd().  CPU2 situation can happen while perf_event_task_sched_out() (i.e. dma sync operation is called while deleting perf_event using  etm and etr tmc which are Arm Coresight hwtracing driver backends).  To remove this possible situation\, call dma_entry_free() after put_hash_bucket() in check_unmap().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-5563,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"LibTIFF version 4.0.7 is vulnerable to a heap-based buffer over-read in tif_lzw.c resulting in DoS or code execution via a crafted bmp image to tools/bmp2tiff.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57940,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  exfat: fix the infinite loop in exfat_readdir()  If the file system is corrupted so that a cluster is linked to itself in the cluster chain\, and there is an unused directory entry in the cluster\, 'dentry' will not be incremented\, causing condition 'dentry < max_dentries' unable to prevent an infinite loop.  This infinite loop causes s_lock not to be released\, and other tasks will hang\, such as exfat_sync_fs().  This commit stops traversing the cluster chain when there is unused directory entry in the cluster to avoid this infinite loop.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47141,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  pinmux: Use sequential access to access desc->pinmux data  When two client of the same gpio call pinctrl_select_state() for the same functionality\, we are seeing NULL pointer issue while accessing desc->mux_owner.  Let's say two processes A\, B executing in pin_request() for the same pin and process A updates the desc->mux_usecount but not yet updated the desc->mux_owner while process B see the desc->mux_usecount which got updated by A path and further executes strcmp and while accessing desc->mux_owner it crashes with NULL pointer.  Serialize the access to mux related setting with a mutex lock.  \tcpu0 (process A)\t\t\tcpu1(process B)  pinctrl_select_state() {\t\t  pinctrl_select_state() {   pin_request() {\t\t\t\tpin_request() {   ... \t\t\t\t\t\t ....     } else {          desc->mux_usecount++;     \t\t\t\t\t\tdesc->mux_usecount && strcmp(desc->mux_owner\, owner)) {           if (desc->mux_usecount > 1)                return 0;          desc->mux_owner = owner;    }\t\t\t\t\t\t}",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21985,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix out-of-bound accesses  [WHAT & HOW] hpo_stream_to_link_encoder_mapping has size MAX_HPO_DP2_ENCODERS(=4)\, but location can have size up to 6. As a result\, it is necessary to check location against MAX_HPO_DP2_ENCODERS.  Similiarly\, disp_cfg_stream_location can be used as an array index which should be 0..5\, so the ASSERT's conditions should be less without equal.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56642,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  tipc: Fix use-after-free of kernel socket in cleanup_bearer().  syzkaller reported a use-after-free of UDP kernel socket in cleanup_bearer() without repro. [0][1]  When bearer_disable() calls tipc_udp_disable()\, cleanup of the UDP kernel socket is deferred by work calling cleanup_bearer().  tipc_exit_net() waits for such works to finish by checking tipc_net(net)->wq_count.  However\, the work decrements the count too early before releasing the kernel socket\, unblocking cleanup_net() and resulting in use-after-free.  Let's move the decrement after releasing the socket in cleanup_bearer().  [0]: ref_tracker: net notrefcnt@000000009b3d1faf has 1/1 users at      sk_alloc+0x438/0x608      inet_create+0x4c8/0xcb0      __sock_create+0x350/0x6b8      sock_create_kern+0x58/0x78      udp_sock_create4+0x68/0x398      udp_sock_create+0x88/0xc8      tipc_udp_enable+0x5e8/0x848      __tipc_nl_bearer_enable+0x84c/0xed8      tipc_nl_bearer_enable+0x38/0x60      genl_family_rcv_msg_doit+0x170/0x248      genl_rcv_msg+0x400/0x5b0      netlink_rcv_skb+0x1dc/0x398      genl_rcv+0x44/0x68      netlink_unicast+0x678/0x8b0      netlink_sendmsg+0x5e4/0x898      ____sys_sendmsg+0x500/0x830  [1]: BUG: KMSAN: use-after-free in udp_hashslot include/net/udp.h:85 [inline] BUG: KMSAN: use-after-free in udp_lib_unhash+0x3b8/0x930 net/ipv4/udp.c:1979  udp_hashslot include/net/udp.h:85 [inline]  udp_lib_unhash+0x3b8/0x930 net/ipv4/udp.c:1979  sk_common_release+0xaf/0x3f0 net/core/sock.c:3820  inet_release+0x1e0/0x260 net/ipv4/af_inet.c:437  inet6_release+0x6f/0xd0 net/ipv6/af_inet6.c:489  __sock_release net/socket.c:658 [inline]  sock_release+0xa0/0x210 net/socket.c:686  cleanup_bearer+0x42d/0x4c0 net/tipc/udp_media.c:819  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xcaf/0x1c90 kernel/workqueue.c:3310  worker_thread+0xf6c/0x1510 kernel/workqueue.c:3391  kthread+0x531/0x6b0 kernel/kthread.c:389  ret_from_fork+0x60/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:244  Uninit was created at:  slab_free_hook mm/slub.c:2269 [inline]  slab_free mm/slub.c:4580 [inline]  kmem_cache_free+0x207/0xc40 mm/slub.c:4682  net_free net/core/net_namespace.c:454 [inline]  cleanup_net+0x16f2/0x19d0 net/core/net_namespace.c:647  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xcaf/0x1c90 kernel/workqueue.c:3310  worker_thread+0xf6c/0x1510 kernel/workqueue.c:3391  kthread+0x531/0x6b0 kernel/kthread.c:389  ret_from_fork+0x60/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:244  CPU: 0 UID: 0 PID: 54 Comm: kworker/0:2 Not tainted 6.12.0-rc1-00131-gf66ebf37d69c #7 91723d6f74857f70725e1583cba3cf4adc716cfa Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014 Workqueue: events cleanup_bearer",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56643,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  dccp: Fix memory leak in dccp_feat_change_recv  If dccp_feat_push_confirm() fails after new value for SP feature was accepted without reconciliation ('entry == NULL' branch)\, memory allocated for that value with dccp_feat_clone_sp_val() is never freed.  Here is the kmemleak stack for this:  unreferenced object 0xffff88801d4ab488 (size 8):   comm ""syz-executor310""\, pid 1127\, jiffies 4295085598 (age 41.666s)   hex dump (first 8 bytes):     01 b4 4a 1d 80 88 ff ff                          ..J.....   backtrace:     [<00000000db7cabfe>] kmemdup+0x23/0x50 mm/util.c:128     [<0000000019b38405>] kmemdup include/linux/string.h:465 [inline]     [<0000000019b38405>] dccp_feat_clone_sp_val net/dccp/feat.c:371 [inline]     [<0000000019b38405>] dccp_feat_clone_sp_val net/dccp/feat.c:367 [inline]     [<0000000019b38405>] dccp_feat_change_recv net/dccp/feat.c:1145 [inline]     [<0000000019b38405>] dccp_feat_parse_options+0x1196/0x2180 net/dccp/feat.c:1416     [<00000000b1f6d94a>] dccp_parse_options+0xa2a/0x1260 net/dccp/options.c:125     [<0000000030d7b621>] dccp_rcv_state_process+0x197/0x13d0 net/dccp/input.c:650     [<000000001f74c72e>] dccp_v4_do_rcv+0xf9/0x1a0 net/dccp/ipv4.c:688     [<00000000a6c24128>] sk_backlog_rcv include/net/sock.h:1041 [inline]     [<00000000a6c24128>] __release_sock+0x139/0x3b0 net/core/sock.c:2570     [<00000000cf1f3a53>] release_sock+0x54/0x1b0 net/core/sock.c:3111     [<000000008422fa23>] inet_wait_for_connect net/ipv4/af_inet.c:603 [inline]     [<000000008422fa23>] __inet_stream_connect+0x5d0/0xf70 net/ipv4/af_inet.c:696     [<0000000015b6f64d>] inet_stream_connect+0x53/0xa0 net/ipv4/af_inet.c:735     [<0000000010122488>] __sys_connect_file+0x15c/0x1a0 net/socket.c:1865     [<00000000b4b70023>] __sys_connect+0x165/0x1a0 net/socket.c:1882     [<00000000f4cb3815>] __do_sys_connect net/socket.c:1892 [inline]     [<00000000f4cb3815>] __se_sys_connect net/socket.c:1889 [inline]     [<00000000f4cb3815>] __x64_sys_connect+0x6e/0xb0 net/socket.c:1889     [<00000000e7b1e839>] do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46     [<0000000055e91434>] entry_SYSCALL_64_after_hwframe+0x67/0xd1  Clean up the allocated memory in case of dccp_feat_push_confirm() failure and bail out with an error reset code.  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56640,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: fix LGR and link use-after-free issue  We encountered a LGR/link use-after-free issue\, which manifested as the LGR/link refcnt reaching 0 early and entering the clear process\, making resource access unsafe.   refcount_t: addition on 0; use-after-free.  WARNING: CPU: 14 PID: 107447 at lib/refcount.c:25 refcount_warn_saturate+0x9c/0x140  Workqueue: events smc_lgr_terminate_work [smc]  Call trace:   refcount_warn_saturate+0x9c/0x140   __smc_lgr_terminate.part.45+0x2a8/0x370 [smc]   smc_lgr_terminate_work+0x28/0x30 [smc]   process_one_work+0x1b8/0x420   worker_thread+0x158/0x510   kthread+0x114/0x118  or   refcount_t: underflow; use-after-free.  WARNING: CPU: 6 PID: 93140 at lib/refcount.c:28 refcount_warn_saturate+0xf0/0x140  Workqueue: smc_hs_wq smc_listen_work [smc]  Call trace:   refcount_warn_saturate+0xf0/0x140   smcr_link_put+0x1cc/0x1d8 [smc]   smc_conn_free+0x110/0x1b0 [smc]   smc_conn_abort+0x50/0x60 [smc]   smc_listen_find_device+0x75c/0x790 [smc]   smc_listen_work+0x368/0x8a0 [smc]   process_one_work+0x1b8/0x420   worker_thread+0x158/0x510   kthread+0x114/0x118  It is caused by repeated release of LGR/link refcnt. One suspect is that smc_conn_free() is called repeatedly because some smc_conn_free() from server listening path are not protected by sock lock.  e.g.  Calls under socklock        | smc_listen_work ------------------------------------------------------- lock_sock(sk)               | smc_conn_abort smc_conn_free               | \\- smc_conn_free \\- smcr_link_put            |    \\- smcr_link_put (duplicated) release_sock(sk)  So here add sock lock protection in smc_listen_work() path\, making it exclusive with other connection operations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56406,perl-base,HIGH,5.36.0-7+deb12u1,5.36.0-7+deb12u2,"A heap buffer overflow vulnerability was discovered in Perl.   Release branches 5.34\, 5.36\, 5.38 and 5.40 are affected\, including development versions from 5.33.1 through 5.41.10.  When there are non-ASCII bytes in the left-hand-side of the `tr` operator\, `S_do_trans_invmap` can overflow the destination pointer `d`.     $ perl -e '$_ = ""\\x{FF}"" x 1000000; tr/\\xFF/\\x{100}/;'     Segmentation fault (core dumped)  It is believed that this vulnerability can enable Denial of Service and possibly Code Execution attacks on platforms that lack sufficient defenses.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-7475,libcairo2,LOW,1.16.0-7,N/A,"Cairo version 1.15.4 is vulnerable to a NULL pointer dereference related to the FT_Load_Glyph and FT_Render_Glyph resulting in an application crash.",|tykio/midsommar|
CVE-2024-56641,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: initialize close_work early to avoid warning  We encountered a warning that close_work was canceled before initialization.    WARNING: CPU: 7 PID: 111103 at kernel/workqueue.c:3047 __flush_work+0x19e/0x1b0   Workqueue: events smc_lgr_terminate_work [smc]   RIP: 0010:__flush_work+0x19e/0x1b0   Call Trace:    ? __wake_up_common+0x7a/0x190    ? work_busy+0x80/0x80    __cancel_work_timer+0xe3/0x160    smc_close_cancel_work+0x1a/0x70 [smc]    smc_close_active_abort+0x207/0x360 [smc]    __smc_lgr_terminate.part.38+0xc8/0x180 [smc]    process_one_work+0x19e/0x340    worker_thread+0x30/0x370    ? process_one_work+0x340/0x340    kthread+0x117/0x130    ? __kthread_cancel_work+0x50/0x50    ret_from_fork+0x22/0x30  This is because when smc_close_cancel_work is triggered\, e.g. the RDMA driver is rmmod and the LGR is terminated\, the conn->close_work is flushed before initialization\, resulting in WARN_ON(!work->func).  __smc_lgr_terminate             | smc_connect_{rdma|ism} -------------------------------------------------------------                                 | smc_conn_create \t\t\t\t| \\- smc_lgr_register_conn for conn in lgr->conns_all      | \\- smc_conn_kill                |    \\- smc_close_active_abort    |       \\- smc_close_cancel_work  |          \\- cancel_work_sync    |             \\- __flush_work     | \t         (close_work)   | \t                        | smc_close_init \t                        | \\- INIT_WORK(&close_work)  So fix this by initializing close_work before establishing the connection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1148,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43 and classified as problematic. Affected by this issue is the function link_order_scan of the file ld/ldelfgen.c of the component ld. The manipulation leads to memory leak. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The code maintainer explains: ""I'm not going to commit some of the leak fixes I've been working on to the 2.44 branch due to concern that would destabilise ld. All of the reported leaks in this bugzilla have been fixed on binutils master.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56647,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: Fix icmp host relookup triggering ip_rt_bug  arp link failure may trigger ip_rt_bug while xfrm enabled\, call trace is:  WARNING: CPU: 0 PID: 0 at net/ipv4/route.c:1241 ip_rt_bug+0x14/0x20 Modules linked in: CPU: 0 UID: 0 PID: 0 Comm: swapper/0 Not tainted 6.12.0-rc6-00077-g2e1b3cc9d7f7 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP: 0010:ip_rt_bug+0x14/0x20 Call Trace:  <IRQ>  ip_send_skb+0x14/0x40  __icmp_send+0x42d/0x6a0  ipv4_link_failure+0xe2/0x1d0  arp_error_report+0x3c/0x50  neigh_invalidate+0x8d/0x100  neigh_timer_handler+0x2e1/0x330  call_timer_fn+0x21/0x120  __run_timer_base.part.0+0x1c9/0x270  run_timer_softirq+0x4c/0x80  handle_softirqs+0xac/0x280  irq_exit_rcu+0x62/0x80  sysvec_apic_timer_interrupt+0x77/0x90  The script below reproduces this scenario: ip xfrm policy add src 0.0.0.0/0 dst 0.0.0.0/0 \\ \tdir out priority 0 ptype main flag localok icmp ip l a veth1 type veth ip a a 192.168.141.111/24 dev veth0 ip l s veth0 up ping 192.168.141.155 -c 1  icmp_route_lookup() create input routes for locally generated packets while xfrm relookup ICMP traffic.Then it will set input route (dst->out = ip_rt_bug) to skb for DESTUNREACH.  For ICMP err triggered by locally generated packets\, dst->dev of output route is loopback. Generally\, xfrm relookup verification is not required on loopback interfaces (net.ipv4.conf.lo.disable_xfrm = 1).  Skip icmp relookup for locally generated packets to fix it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1149,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43. It has been classified as problematic. This affects the function xstrdup of the file libiberty/xmalloc.c of the component ld. The manipulation leads to memory leak. It is possible to initiate the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The code maintainer explains: ""I'm not going to commit some of the leak fixes I've been working on to the 2.44 branch due to concern that would destabilise ld. All of the reported leaks in this bugzilla have been fixed on binutils master.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56644,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/ipv6: release expired exception dst cached in socket  Dst objects get leaked in ip6_negative_advice() when this function is executed for an expired IPv6 route located in the exception table. There are several conditions that must be fulfilled for the leak to occur: * an ICMPv6 packet indicating a change of the MTU for the path is received\,   resulting in an exception dst being created * a TCP connection that uses the exception dst for routing packets must   start timing out so that TCP begins retransmissions * after the exception dst expires\, the FIB6 garbage collector must not run   before TCP executes ip6_negative_advice() for the expired exception dst  When TCP executes ip6_negative_advice() for an exception dst that has expired and if no other socket holds a reference to the exception dst\, the refcount of the exception dst is 2\, which corresponds to the increment made by dst_init() and the increment made by the TCP socket for which the connection is timing out. The refcount made by the socket is never released. The refcount of the dst is decremented in sk_dst_reset() but that decrement is counteracted by a dst_hold() intentionally placed just before the sk_dst_reset() in ip6_negative_advice(). After ip6_negative_advice() has finished\, there is no other object tied to the dst. The socket lost its reference stored in sk_dst_cache and the dst is no longer in the exception table. The exception dst becomes a leaked object.  As a result of this dst leak\, an unbalanced refcount is reported for the loopback device of a net namespace being destroyed under kernels that do not contain e5f80fcf869a (""ipv6: give an IPv6 dev to blackhole_netdev""): unregister_netdevice: waiting for lo to become free. Usage count = 2  Fix the dst leak by removing the dst_hold() in ip6_negative_advice(). The patch that introduced the dst_hold() in ip6_negative_advice() was 92f1655aa2b22 (""net: fix __dst_negative_advice() race""). But 92f1655aa2b22 merely refactored the code with regards to the dst refcount so the issue was present even before 92f1655aa2b22. The bug was introduced in 54c1a859efd9f (""ipv6: Don't drop cache route entry unless timer actually expired."") where the expired cached route is deleted and the sk_dst_cache member of the socket is set to NULL by calling dst_negative_advice() but the refcount belonging to the socket is left unbalanced.  The IPv4 version - ipv4_negative_advice() - is not affected by this bug. When the TCP connection times out ipv4_negative_advice() merely resets the sk_dst_cache of the socket while decrementing the refcount of the exception dst.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56645,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  can: j1939: j1939_session_new(): fix skb reference counting  Since j1939_session_skb_queue() does an extra skb_get() for each new skb\, do the same for the initial one in j1939_session_new() to avoid refcount underflow.  [mkl: clean up commit message]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53680,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipvs: fix UB due to uninitialized stack access in ip_vs_protocol_init()  Under certain kernel configurations when building with Clang/LLVM\, the compiler does not generate a return or jump as the terminator instruction for ip_vs_protocol_init()\, triggering the following objtool warning during build time:    vmlinux.o: warning: objtool: ip_vs_protocol_init() falls through to next function __initstub__kmod_ip_vs_rr__935_123_ip_vs_rr_init6()  At runtime\, this either causes an oops when trying to load the ipvs module or a boot-time panic if ipvs is built-in. This same issue has been reported by the Intel kernel test robot previously.  Digging deeper into both LLVM and the kernel code reveals this to be a undefined behavior problem. ip_vs_protocol_init() uses a on-stack buffer of 64 chars to store the registered protocol names and leaves it uninitialized after definition. The function calls strnlen() when concatenating protocol names into the buffer. With CONFIG_FORTIFY_SOURCE strnlen() performs an extra step to check whether the last byte of the input char buffer is a null character (commit 3009f891bb9f (""fortify: Allow strlen() and strnlen() to pass compile-time known lengths"")). This\, together with possibly other configurations\, cause the following IR to be generated:    define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #5 section "".init.text"" align 16 !kcfi_type !29 {     %1 = alloca [64 x i8]\, align 16     ...    14:                                               ; preds = %11     %15 = getelementptr inbounds i8\, ptr %1\, i64 63     %16 = load i8\, ptr %15\, align 1     %17 = tail call i1 @llvm.is.constant.i8(i8 %16)     %18 = icmp eq i8 %16\, 0     %19 = select i1 %17\, i1 %18\, i1 false     br i1 %19\, label %20\, label %23    20:                                               ; preds = %14     %21 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #23     ...    23:                                               ; preds = %14\, %11\, %20     %24 = call i64 @strnlen(ptr noundef nonnull dereferenceable(1) %1\, i64 noundef 64) #24     ...   }  The above code calculates the address of the last char in the buffer (value %15) and then loads from it (value %16). Because the buffer is never initialized\, the LLVM GVN pass marks value %16 as undefined:    %13 = getelementptr inbounds i8\, ptr %1\, i64 63   br i1 undef\, label %14\, label %17  This gives later passes (SCCP\, in particular) more DCE opportunities by propagating the undef value further\, and eventually removes everything after the load on the uninitialized stack location:    define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #0 section "".init.text"" align 16 !kcfi_type !11 {     %1 = alloca [64 x i8]\, align 16     ...    12:                                               ; preds = %11     %13 = getelementptr inbounds i8\, ptr %1\, i64 63     unreachable   }  In this way\, the generated native code will just fall through to the next function\, as LLVM does not generate any code for the unreachable IR instruction and leaves the function without a terminator.  Zero the on-stack buffer to avoid this possible UB.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50230,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix kernel bug due to missing clearing of checked flag  Syzbot reported that in directory operations after nilfs2 detects filesystem corruption and degrades to read-only\, __block_write_begin_int()\, which is called to prepare block writes\, may fail the BUG_ON check for accesses exceeding the folio/page size\, triggering a kernel bug.  This was found to be because the ""checked"" flag of a page/folio was not cleared when it was discarded by nilfs2's own routine\, which causes the sanity check of directory entries to be skipped when the directory page/folio is reloaded.  So\, fix that.  This was necessary when the use of nilfs2's own page discard routine was applied to more than just metadata files.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56648,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: hsr: avoid potential out-of-bound access in fill_frame_info()  syzbot is able to feed a packet with 14 bytes\, pretending it is a vlan one.  Since fill_frame_info() is relying on skb->mac_len already\, extend the check to cover this case.  BUG: KMSAN: uninit-value in fill_frame_info net/hsr/hsr_forward.c:709 [inline]  BUG: KMSAN: uninit-value in hsr_forward_skb+0x9ee/0x3b10 net/hsr/hsr_forward.c:724   fill_frame_info net/hsr/hsr_forward.c:709 [inline]   hsr_forward_skb+0x9ee/0x3b10 net/hsr/hsr_forward.c:724   hsr_dev_xmit+0x2f0/0x350 net/hsr/hsr_device.c:235   __netdev_start_xmit include/linux/netdevice.h:5002 [inline]   netdev_start_xmit include/linux/netdevice.h:5011 [inline]   xmit_one net/core/dev.c:3590 [inline]   dev_hard_start_xmit+0x247/0xa20 net/core/dev.c:3606   __dev_queue_xmit+0x366a/0x57d0 net/core/dev.c:4434   dev_queue_xmit include/linux/netdevice.h:3168 [inline]   packet_xmit+0x9c/0x6c0 net/packet/af_packet.c:276   packet_snd net/packet/af_packet.c:3146 [inline]   packet_sendmsg+0x91ae/0xa6f0 net/packet/af_packet.c:3178   sock_sendmsg_nosec net/socket.c:711 [inline]   __sock_sendmsg+0x30f/0x380 net/socket.c:726   __sys_sendto+0x594/0x750 net/socket.c:2197   __do_sys_sendto net/socket.c:2204 [inline]   __se_sys_sendto net/socket.c:2200 [inline]   __x64_sys_sendto+0x125/0x1d0 net/socket.c:2200   x64_sys_call+0x346a/0x3c30 arch/x86/include/generated/asm/syscalls_64.h:45   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xcd/0x1e0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Uninit was created at:   slab_post_alloc_hook mm/slub.c:4091 [inline]   slab_alloc_node mm/slub.c:4134 [inline]   kmem_cache_alloc_node_noprof+0x6bf/0xb80 mm/slub.c:4186   kmalloc_reserve+0x13d/0x4a0 net/core/skbuff.c:587   __alloc_skb+0x363/0x7b0 net/core/skbuff.c:678   alloc_skb include/linux/skbuff.h:1323 [inline]   alloc_skb_with_frags+0xc8/0xd00 net/core/skbuff.c:6612   sock_alloc_send_pskb+0xa81/0xbf0 net/core/sock.c:2881   packet_alloc_skb net/packet/af_packet.c:2995 [inline]   packet_snd net/packet/af_packet.c:3089 [inline]   packet_sendmsg+0x74c6/0xa6f0 net/packet/af_packet.c:3178   sock_sendmsg_nosec net/socket.c:711 [inline]   __sock_sendmsg+0x30f/0x380 net/socket.c:726   __sys_sendto+0x594/0x750 net/socket.c:2197   __do_sys_sendto net/socket.c:2204 [inline]   __se_sys_sendto net/socket.c:2200 [inline]   __x64_sys_sendto+0x125/0x1d0 net/socket.c:2200   x64_sys_call+0x346a/0x3c30 arch/x86/include/generated/asm/syscalls_64.h:45   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xcd/0x1e0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50233,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  staging: iio: frequency: ad9832: fix division by zero in ad9832_calc_freqreg()  In the ad9832_write_frequency() function\, clk_get_rate() might return 0. This can lead to a division by zero when calling ad9832_calc_freqreg(). The check if (fout > (clk_get_rate(st->mclk) / 2)) does not protect against the case when fout is 0. The ad9832_write_frequency() function is called from ad9832_write()\, and fout is derived from a text buffer\, which can contain any value.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50232,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: adc: ad7124: fix division by zero in ad7124_set_channel_odr()  In the ad7124_write_raw() function\, parameter val can potentially be zero. This may lead to a division by zero when DIV_ROUND_CLOSEST() is called within ad7124_set_channel_odr(). The ad7124_write_raw() function is invoked through the sequence: iio_write_channel_raw() -> iio_write_channel_attribute() -> iio_channel_write()\, with no checks in place to ensure val is non-zero.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1147,binutils,LOW,2.40-2,N/A,"A vulnerability has been found in GNU Binutils 2.43 and classified as problematic. Affected by this vulnerability is the function __sanitizer::internal_strlen of the file binutils/nm.c of the component nm. The manipulation of the argument const leads to buffer overflow. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53685,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ceph: give up on paths longer than PATH_MAX  If the full path to be built by ceph_mdsc_build_path() happens to be longer than PATH_MAX\, then this function will enter an endless (retry) loop\, effectively blocking the whole task.  Most of the machine becomes unusable\, making this a very simple and effective DoS vulnerability.  I cannot imagine why this retry was ever implemented\, but it seems rather useless and harmful to me.  Let's remove it and fail with ENAMETOOLONG instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50235,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: cfg80211: clear wdev->cqm_config pointer on free  When we free wdev->cqm_config when unregistering\, we also need to clear out the pointer since the same wdev/netdev may get re-registered in another network namespace\, then destroyed later\, running this code again\, which results in a double-free.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50234,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlegacy: Clear stale interrupts before resuming device  iwl4965 fails upon resume from hibernation on my laptop. The reason seems to be a stale interrupt which isn't being cleared out before interrupts are enabled. We end up with a race beween the resume trying to bring things back up\, and the restart work (queued form the interrupt handler) trying to bring things down. Eventually the whole thing blows up.  Fix the problem by clearing out any stale interrupts before interrupts get enabled during resume.  Here's a debug log of the indicent: [   12.042589] ieee80211 phy0: il_isr ISR inta 0x00000080\, enabled 0xaa00008b\, fh 0x00000000 [   12.042625] ieee80211 phy0: il4965_irq_tasklet inta 0x00000080\, enabled 0x00000000\, fh 0x00000000 [   12.042651] iwl4965 0000:10:00.0: RF_KILL bit toggled to enable radio. [   12.042653] iwl4965 0000:10:00.0: On demand firmware reload [   12.042690] ieee80211 phy0: il4965_irq_tasklet End inta 0x00000000\, enabled 0xaa00008b\, fh 0x00000000\, flags 0x00000282 [   12.052207] ieee80211 phy0: il4965_mac_start enter [   12.052212] ieee80211 phy0: il_prep_station Add STA to driver ID 31: ff:ff:ff:ff:ff:ff [   12.052244] ieee80211 phy0: il4965_set_hw_ready hardware  ready [   12.052324] ieee80211 phy0: il_apm_init Init card's basic functions [   12.052348] ieee80211 phy0: il_apm_init L1 Enabled; Disabling L0S [   12.055727] ieee80211 phy0: il4965_load_bsm Begin load bsm [   12.056140] ieee80211 phy0: il4965_verify_bsm Begin verify bsm [   12.058642] ieee80211 phy0: il4965_verify_bsm BSM bootstrap uCode image OK [   12.058721] ieee80211 phy0: il4965_load_bsm BSM write complete\, poll 1 iterations [   12.058734] ieee80211 phy0: __il4965_up iwl4965 is coming up [   12.058737] ieee80211 phy0: il4965_mac_start Start UP work done. [   12.058757] ieee80211 phy0: __il4965_down iwl4965 is going down [   12.058761] ieee80211 phy0: il_scan_cancel_timeout Scan cancel timeout [   12.058762] ieee80211 phy0: il_do_scan_abort Not performing scan to abort [   12.058765] ieee80211 phy0: il_clear_ucode_stations Clearing ucode stations in driver [   12.058767] ieee80211 phy0: il_clear_ucode_stations No active stations found to be cleared [   12.058819] ieee80211 phy0: _il_apm_stop Stop card\, put in low power state [   12.058827] ieee80211 phy0: _il_apm_stop_master stop master [   12.058864] ieee80211 phy0: il4965_clear_free_frames 0 frames on pre-allocated heap on clear. [   12.058869] ieee80211 phy0: Hardware restart was requested [   16.132299] iwl4965 0000:10:00.0: START_ALIVE timeout after 4000ms. [   16.132303] ------------[ cut here ]------------ [   16.132304] Hardware became unavailable upon resume. This could be a software issue prior to suspend or a hardware issue. [   16.132338] WARNING: CPU: 0 PID: 181 at net/mac80211/util.c:1826 ieee80211_reconfig+0x8f/0x14b0 [mac80211] [   16.132390] Modules linked in: ctr ccm sch_fq_codel xt_tcpudp xt_multiport xt_state iptable_filter iptable_nat nf_nat nf_conntrack nf_defrag_ipv4 ip_tables x_tables binfmt_misc joydev mousedev btusb btrtl btintel btbcm bluetooth ecdh_generic ecc iTCO_wdt i2c_dev iwl4965 iwlegacy coretemp snd_hda_codec_analog pcspkr psmouse mac80211 snd_hda_codec_generic libarc4 sdhci_pci cqhci sha256_generic sdhci libsha256 firewire_ohci snd_hda_intel snd_intel_dspcfg mmc_core snd_hda_codec snd_hwdep firewire_core led_class iosf_mbi snd_hda_core uhci_hcd lpc_ich crc_itu_t cfg80211 ehci_pci ehci_hcd snd_pcm usbcore mfd_core rfkill snd_timer snd usb_common soundcore video parport_pc parport intel_agp wmi intel_gtt backlight e1000e agpgart evdev [   16.132456] CPU: 0 UID: 0 PID: 181 Comm: kworker/u8:6 Not tainted 6.11.0-cl+ #143 [   16.132460] Hardware name: Hewlett-Packard HP Compaq 6910p/30BE\, BIOS 68MCU Ver. F.19 07/06/2010 [   16.132463] Workqueue: async async_run_entry_fn [   16.132469] RIP: 0010:ieee80211_reconfig+0x8f/0x14b0 [mac80211] [   16.132501] Code: da 02 00 0 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53687,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  riscv: Fix IPIs usage in kfence_protect_page()  flush_tlb_kernel_range() may use IPIs to flush the TLBs of all the cores\, which triggers the following warning when the irqs are disabled:  [    3.455330] WARNING: CPU: 1 PID: 0 at kernel/smp.c:815 smp_call_function_many_cond+0x452/0x520 [    3.456647] Modules linked in: [    3.457218] CPU: 1 UID: 0 PID: 0 Comm: swapper/1 Not tainted 6.12.0-rc7-00010-g91d3de7240b8 #1 [    3.457416] Hardware name: QEMU QEMU Virtual Machine\, BIOS [    3.457633] epc : smp_call_function_many_cond+0x452/0x520 [    3.457736]  ra : on_each_cpu_cond_mask+0x1e/0x30 [    3.457786] epc : ffffffff800b669a ra : ffffffff800b67c2 sp : ff2000000000bb50 [    3.457824]  gp : ffffffff815212b8 tp : ff6000008014f080 t0 : 000000000000003f [    3.457859]  t1 : ffffffff815221e0 t2 : 000000000000000f s0 : ff2000000000bc10 [    3.457920]  s1 : 0000000000000040 a0 : ffffffff815221e0 a1 : 0000000000000001 [    3.457953]  a2 : 0000000000010000 a3 : 0000000000000003 a4 : 0000000000000000 [    3.458006]  a5 : 0000000000000000 a6 : ffffffffffffffff a7 : 0000000000000000 [    3.458042]  s2 : ffffffff815223be s3 : 00fffffffffff000 s4 : ff600001ffe38fc0 [    3.458076]  s5 : ff600001ff950d00 s6 : 0000000200000120 s7 : 0000000000000001 [    3.458109]  s8 : 0000000000000001 s9 : ff60000080841ef0 s10: 0000000000000001 [    3.458141]  s11: ffffffff81524812 t3 : 0000000000000001 t4 : ff60000080092bc0 [    3.458172]  t5 : 0000000000000000 t6 : ff200000000236d0 [    3.458203] status: 0000000200000100 badaddr: ffffffff800b669a cause: 0000000000000003 [    3.458373] [<ffffffff800b669a>] smp_call_function_many_cond+0x452/0x520 [    3.458593] [<ffffffff800b67c2>] on_each_cpu_cond_mask+0x1e/0x30 [    3.458625] [<ffffffff8000e4ca>] __flush_tlb_range+0x118/0x1ca [    3.458656] [<ffffffff8000e6b2>] flush_tlb_kernel_range+0x1e/0x26 [    3.458683] [<ffffffff801ea56a>] kfence_protect+0xc0/0xce [    3.458717] [<ffffffff801e9456>] kfence_guarded_free+0xc6/0x1c0 [    3.458742] [<ffffffff801e9d6c>] __kfence_free+0x62/0xc6 [    3.458764] [<ffffffff801c57d8>] kfree+0x106/0x32c [    3.458786] [<ffffffff80588cf2>] detach_buf_split+0x188/0x1a8 [    3.458816] [<ffffffff8058708c>] virtqueue_get_buf_ctx+0xb6/0x1f6 [    3.458839] [<ffffffff805871da>] virtqueue_get_buf+0xe/0x16 [    3.458880] [<ffffffff80613d6a>] virtblk_done+0x5c/0xe2 [    3.458908] [<ffffffff8058766e>] vring_interrupt+0x6a/0x74 [    3.458930] [<ffffffff800747d8>] __handle_irq_event_percpu+0x7c/0xe2 [    3.458956] [<ffffffff800748f0>] handle_irq_event+0x3c/0x86 [    3.458978] [<ffffffff800786cc>] handle_simple_irq+0x9e/0xbe [    3.459004] [<ffffffff80073934>] generic_handle_domain_irq+0x1c/0x2a [    3.459027] [<ffffffff804bf87c>] imsic_handle_irq+0xba/0x120 [    3.459056] [<ffffffff80073934>] generic_handle_domain_irq+0x1c/0x2a [    3.459080] [<ffffffff804bdb76>] riscv_intc_aia_irq+0x24/0x34 [    3.459103] [<ffffffff809d0452>] handle_riscv_irq+0x2e/0x4c [    3.459133] [<ffffffff809d923e>] call_on_irq_stack+0x32/0x40  So only flush the local TLB and let the lazy kfence page fault handling deal with the faults which could happen when a core has an old protected pte version cached in its TLB. That leads to potential inaccuracies which can be tolerated when using kfence.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50237,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mac80211: do not pass a stopped vif to the driver in .get_txpower  Avoid potentially crashing in the driver because of uninitialized private data",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50236,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath10k: Fix memory leak in management tx  In the current logic\, memory is allocated for storing the MSDU context during management packet TX but this memory is not being freed during management TX completion. Similar leaks are seen in the management TX cleanup logic.  Kmemleak reports this problem as below\,  unreferenced object 0xffffff80b64ed250 (size 16):   comm ""kworker/u16:7""\, pid 148\, jiffies 4294687130 (age 714.199s)   hex dump (first 16 bytes):     00 2b d8 d8 80 ff ff ff c4 74 e9 fd 07 00 00 00  .+.......t......   backtrace:     [<ffffffe6e7b245dc>] __kmem_cache_alloc_node+0x1e4/0x2d8     [<ffffffe6e7adde88>] kmalloc_trace+0x48/0x110     [<ffffffe6bbd765fc>] ath10k_wmi_tlv_op_gen_mgmt_tx_send+0xd4/0x1d8 [ath10k_core]     [<ffffffe6bbd3eed4>] ath10k_mgmt_over_wmi_tx_work+0x134/0x298 [ath10k_core]     [<ffffffe6e78d5974>] process_scheduled_works+0x1ac/0x400     [<ffffffe6e78d60b8>] worker_thread+0x208/0x328     [<ffffffe6e78dc890>] kthread+0x100/0x1c0     [<ffffffe6e78166c0>] ret_from_fork+0x10/0x20  Free the memory during completion and cleanup to fix the leak.  Protect the mgmt_pending_tx idr_remove() operation in ath10k_wmi_tlv_op_cleanup_mgmt_tx_send() using ar->data_lock similar to other instances.  Tested-on: WCN3990 hw1.0 SNOC WLAN.HL.2.0-01387-QCAHLSWMTPLZ-1",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21766,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv4: use RCU protection in __ip_rt_update_pmtu()  __ip_rt_update_pmtu() must use RCU protection to make sure the net structure it reads does not disappear.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21767,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  clocksource: Use migrate_disable() to avoid calling get_random_u32() in atomic context  The following bug report happened with a PREEMPT_RT kernel:    BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:48   in_atomic(): 1\, irqs_disabled(): 0\, non_block: 0\, pid: 2012\, name: kwatchdog   preempt_count: 1\, expected: 0   RCU nest depth: 0\, expected: 0   get_random_u32+0x4f/0x110   clocksource_verify_choose_cpus+0xab/0x1a0   clocksource_verify_percpu.part.0+0x6b/0x330   clocksource_watchdog_kthread+0x193/0x1a0  It is due to the fact that clocksource_verify_choose_cpus() is invoked with preemption disabled.  This function invokes get_random_u32() to obtain random numbers for choosing CPUs.  The batched_entropy_32 local lock and/or the base_crng.lock spinlock in driver/char/random.c will be acquired during the call. In PREEMPT_RT kernel\, they are both sleeping locks and so cannot be acquired in atomic context.  Fix this problem by using migrate_disable() to allow smp_processor_id() to be reliably used without introducing atomic context. preempt_disable() is then called after clocksource_verify_choose_cpus() but before the clocksource measurement is being run to avoid introducing unexpected latency.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21881,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  uprobes: Reject the shared zeropage in uprobe_write_opcode()  We triggered the following crash in syzkaller tests:    BUG: Bad page state in process syz.7.38  pfn:1eff3   page: refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1eff3   flags: 0x3fffff00004004(referenced|reserved|node=0|zone=1|lastcpupid=0x1fffff)   raw: 003fffff00004004 ffffe6c6c07bfcc8 ffffe6c6c07bfcc8 0000000000000000   raw: 0000000000000000 0000000000000000 00000000fffffffe 0000000000000000   page dumped because: PAGE_FLAGS_CHECK_AT_FREE flag(s) set   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.13.0-1ubuntu1.1 04/01/2014   Call Trace:    <TASK>    dump_stack_lvl+0x32/0x50    bad_page+0x69/0xf0    free_unref_page_prepare+0x401/0x500    free_unref_page+0x6d/0x1b0    uprobe_write_opcode+0x460/0x8e0    install_breakpoint.part.0+0x51/0x80    register_for_each_vma+0x1d9/0x2b0    __uprobe_register+0x245/0x300    bpf_uprobe_multi_link_attach+0x29b/0x4f0    link_create+0x1e2/0x280    __sys_bpf+0x75f/0xac0    __x64_sys_bpf+0x1a/0x30    do_syscall_64+0x56/0x100    entry_SYSCALL_64_after_hwframe+0x78/0xe2     BUG: Bad rss-counter state mm:00000000452453e0 type:MM_FILEPAGES val:-1  The following syzkaller test case can be used to reproduce:    r2 = creat(&(0x7f0000000000)='./file0\\x00'\, 0x8)   write$nbd(r2\, &(0x7f0000000580)=ANY=[]\, 0x10)   r4 = openat(0xffffffffffffff9c\, &(0x7f0000000040)='./file0\\x00'\, 0x42\, 0x0)   mmap$IORING_OFF_SQ_RING(&(0x7f0000ffd000/0x3000)=nil\, 0x3000\, 0x0\, 0x12\, r4\, 0x0)   r5 = userfaultfd(0x80801)   ioctl$UFFDIO_API(r5\, 0xc018aa3f\, &(0x7f0000000040)={0xaa\, 0x20})   r6 = userfaultfd(0x80801)   ioctl$UFFDIO_API(r6\, 0xc018aa3f\, &(0x7f0000000140))   ioctl$UFFDIO_REGISTER(r6\, 0xc020aa00\, &(0x7f0000000100)={{&(0x7f0000ffc000/0x4000)=nil\, 0x4000}\, 0x2})   ioctl$UFFDIO_ZEROPAGE(r5\, 0xc020aa04\, &(0x7f0000000000)={{&(0x7f0000ffd000/0x1000)=nil\, 0x1000}})   r7 = bpf$PROG_LOAD(0x5\, &(0x7f0000000140)={0x2\, 0x3\, &(0x7f0000000200)=ANY=[@ANYBLOB=""1800000000120000000000000000000095""]\, &(0x7f0000000000)='GPL\\x00'\, 0x7\, 0x0\, 0x0\, 0x0\, 0x0\, '\\x00'\, 0x0\, @fallback=0x30\, 0xffffffffffffffff\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x0\, 0x10\, 0x0\, @void\, @value}\, 0x94)   bpf$BPF_LINK_CREATE_XDP(0x1c\, &(0x7f0000000040)={r7\, 0x0\, 0x30\, 0x1e\, @val=@uprobe_multi={&(0x7f0000000080)='./file0\\x00'\, &(0x7f0000000100)=[0x2]\, 0x0\, 0x0\, 0x1}}\, 0x40)  The cause is that zero pfn is set to the PTE without increasing the RSS count in mfill_atomic_pte_zeropage() and the refcount of zero folio does not increase accordingly. Then\, the operation on the same pfn is performed in uprobe_write_opcode()->__replace_page() to unconditional decrease the RSS count and old_folio's refcount.  Therefore\, two bugs are introduced:   1. The RSS count is incorrect\, when process exit\, the check_mm() report     error ""Bad rss-count"".   2. The reserved folio (zero folio) is freed when folio->refcount is zero\,     then free_pages_prepare->free_page_is_bad() report error     ""Bad page state"".  There is more\, the following warning could also theoretically be triggered:    __replace_page()     -> ...       -> folio_remove_rmap_pte()         -> VM_WARN_ON_FOLIO(is_zero_folio(folio)\, folio)  Considering that uprobe hit on the zero folio is a very rare case\, just reject zero old folio immediately after get_user_page_vma_remote().  [ mingo: Cleaned up the changelog ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21764,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ndisc: use RCU protection in ndisc_alloc_skb()  ndisc_alloc_skb() can be called without RTNL or RCU being held.  Add RCU protection to avoid possible UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21765,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: use RCU protection in ip6_default_advmss()  ip6_default_advmss() needs rcu protection to make sure the net structure it reads does not disappear.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21887,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ovl: fix UAF in ovl_dentry_update_reval by moving dput() in ovl_link_up  The issue was caused by dput(upper) being called before ovl_dentry_update_reval()\, while upper->d_flags was still accessed in ovl_dentry_remote().  Move dput(upper) after its last use to prevent use-after-free.  BUG: KASAN: slab-use-after-free in ovl_dentry_remote fs/overlayfs/util.c:162 [inline] BUG: KASAN: slab-use-after-free in ovl_dentry_update_reval+0xd2/0xf0 fs/overlayfs/util.c:167  Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:88 [inline]  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:114  print_address_description mm/kasan/report.c:377 [inline]  print_report+0xc3/0x620 mm/kasan/report.c:488  kasan_report+0xd9/0x110 mm/kasan/report.c:601  ovl_dentry_remote fs/overlayfs/util.c:162 [inline]  ovl_dentry_update_reval+0xd2/0xf0 fs/overlayfs/util.c:167  ovl_link_up fs/overlayfs/copy_up.c:610 [inline]  ovl_copy_up_one+0x2105/0x3490 fs/overlayfs/copy_up.c:1170  ovl_copy_up_flags+0x18d/0x200 fs/overlayfs/copy_up.c:1223  ovl_rename+0x39e/0x18c0 fs/overlayfs/dir.c:1136  vfs_rename+0xf84/0x20a0 fs/namei.c:4893 ...  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21762,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  arp: use RCU protection in arp_xmit()  arp_xmit() can be called without RTNL or RCU protection.  Use RCU protection to avoid potential UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21763,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  neighbour: use RCU protection in __neigh_notify()  __neigh_notify() can be called without RTNL or RCU protection.  Use RCU protection to avoid potential UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21885,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/bnxt_re: Fix the page details for the srq created by kernel consumers  While using nvme target with use_srq on\, below kernel panic is noticed.  [  549.698111] bnxt_en 0000:41:00.0 enp65s0np0: FEC autoneg off encoding: Clause 91 RS(544\,514) [  566.393619] Oops: divide error: 0000 [#1] PREEMPT SMP NOPTI .. [  566.393799]  <TASK> [  566.393807]  ? __die_body+0x1a/0x60 [  566.393823]  ? die+0x38/0x60 [  566.393835]  ? do_trap+0xe4/0x110 [  566.393847]  ? bnxt_qplib_alloc_init_hwq+0x1d4/0x580 [bnxt_re] [  566.393867]  ? bnxt_qplib_alloc_init_hwq+0x1d4/0x580 [bnxt_re] [  566.393881]  ? do_error_trap+0x7c/0x120 [  566.393890]  ? bnxt_qplib_alloc_init_hwq+0x1d4/0x580 [bnxt_re] [  566.393911]  ? exc_divide_error+0x34/0x50 [  566.393923]  ? bnxt_qplib_alloc_init_hwq+0x1d4/0x580 [bnxt_re] [  566.393939]  ? asm_exc_divide_error+0x16/0x20 [  566.393966]  ? bnxt_qplib_alloc_init_hwq+0x1d4/0x580 [bnxt_re] [  566.393997]  bnxt_qplib_create_srq+0xc9/0x340 [bnxt_re] [  566.394040]  bnxt_re_create_srq+0x335/0x3b0 [bnxt_re] [  566.394057]  ? srso_return_thunk+0x5/0x5f [  566.394068]  ? __init_swait_queue_head+0x4a/0x60 [  566.394090]  ib_create_srq_user+0xa7/0x150 [ib_core] [  566.394147]  nvmet_rdma_queue_connect+0x7d0/0xbe0 [nvmet_rdma] [  566.394174]  ? lock_release+0x22c/0x3f0 [  566.394187]  ? srso_return_thunk+0x5/0x5f  Page size and shift info is set only for the user space SRQs. Set page size and page shift for kernel space SRQs also.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21760,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ndisc: extend RCU protection in ndisc_send_skb()  ndisc_send_skb() can be called without RTNL or RCU held.  Acquire rcu_read_lock() earlier\, so that we can use dev_net_rcu() and avoid a potential UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21761,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  openvswitch: use RCU protection in ovs_vport_cmd_fill_info()  ovs_vport_cmd_fill_info() can be called without RTNL or RCU.  Use RCU protection and dev_net_rcu() to avoid potential UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21888,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Fix a WARN during dereg_mr for DM type  Memory regions (MR) of type DM (device memory) do not have an associated umem.  In the __mlx5_ib_dereg_mr() -> mlx5_free_priv_descs() flow\, the code incorrectly takes the wrong branch\, attempting to call dma_unmap_single() on a DMA address that is not mapped.  This results in a WARN [1]\, as shown below.  The issue is resolved by properly accounting for the DM type and ensuring the correct branch is selected in mlx5_free_priv_descs().  [1] WARNING: CPU: 12 PID: 1346 at drivers/iommu/dma-iommu.c:1230 iommu_dma_unmap_page+0x79/0x90 Modules linked in: ip6table_mangle ip6table_nat ip6table_filter ip6_tables iptable_mangle xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry ovelay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi ib_umad rdma_cm ib_ipoib iw_cm ib_cm mlx5_ib ib_uverbs ib_core fuse mlx5_core CPU: 12 UID: 0 PID: 1346 Comm: ibv_rc_pingpong Not tainted 6.12.0-rc7+ #1631 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 RIP: 0010:iommu_dma_unmap_page+0x79/0x90 Code: 2b 49 3b 29 72 26 49 3b 69 08 73 20 4d 89 f0 44 89 e9 4c 89 e2 48 89 ee 48 89 df 5b 5d 41 5c 41 5d 41 5e 41 5f e9 07 b8 88 ff <0f> 0b 5b 5d 41 5c 41 5d 41 5e 41 5f c3 cc cc cc cc 66 0f 1f 44 00 RSP: 0018:ffffc90001913a10 EFLAGS: 00010246 RAX: 0000000000000000 RBX: ffff88810194b0a8 RCX: 0000000000000000 RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000001 RBP: ffff88810194b0a8 R08: 0000000000000000 R09: 0000000000000000 R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000 R13: 0000000000000001 R14: 0000000000000000 R15: 0000000000000000 FS:  00007f537abdd740(0000) GS:ffff88885fb00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f537aeb8000 CR3: 000000010c248001 CR4: 0000000000372eb0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace: <TASK> ? __warn+0x84/0x190 ? iommu_dma_unmap_page+0x79/0x90 ? report_bug+0xf8/0x1c0 ? handle_bug+0x55/0x90 ? exc_invalid_op+0x13/0x60 ? asm_exc_invalid_op+0x16/0x20 ? iommu_dma_unmap_page+0x79/0x90 dma_unmap_page_attrs+0xe6/0x290 mlx5_free_priv_descs+0xb0/0xe0 [mlx5_ib] __mlx5_ib_dereg_mr+0x37e/0x520 [mlx5_ib] ? _raw_spin_unlock_irq+0x24/0x40 ? wait_for_completion+0xfe/0x130 ? rdma_restrack_put+0x63/0xe0 [ib_core] ib_dereg_mr_user+0x5f/0x120 [ib_core] ? lock_release+0xc6/0x280 destroy_hw_idr_uobject+0x1d/0x60 [ib_uverbs] uverbs_destroy_uobject+0x58/0x1d0 [ib_uverbs] uobj_destroy+0x3f/0x70 [ib_uverbs] ib_uverbs_cmd_verbs+0x3e4/0xbb0 [ib_uverbs] ? __pfx_uverbs_destroy_def_handler+0x10/0x10 [ib_uverbs] ? lock_acquire+0xc1/0x2f0 ? ib_uverbs_ioctl+0xcb/0x170 [ib_uverbs] ? ib_uverbs_ioctl+0x116/0x170 [ib_uverbs] ? lock_release+0xc6/0x280 ib_uverbs_ioctl+0xe7/0x170 [ib_uverbs] ? ib_uverbs_ioctl+0xcb/0x170 [ib_uverbs] __x64_sys_ioctl+0x1b0/0xa70 do_syscall_64+0x6b/0x140 entry_SYSCALL_64_after_hwframe+0x76/0x7e RIP: 0033:0x7f537adaf17b Code: 0f 1e fa 48 8b 05 1d ad 0c 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 0f 1f 44 00 00 f3 0f 1e fa b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d ed ac 0c 00 f7 d8 64 89 01 48 RSP: 002b:00007ffff218f0b8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010 RAX: ffffffffffffffda RBX: 00007ffff218f1d8 RCX: 00007f537adaf17b RDX: 00007ffff218f1c0 RSI: 00000000c0181b01 RDI: 0000000000000003 RBP: 00007ffff218f1a0 R08: 00007f537aa8d010 R09: 0000561ee2e4f270 R10: 00007f537aace3a8 R11: 0000000000000246 R12: 00007ffff218f190 R13: 000000000000001c R14: 0000561ee2e4d7c0 R15: 00007ffff218f450 </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21768,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: ipv6: fix dst ref loops in rpl\, seg6 and ioam6 lwtunnels  Some lwtunnels have a dst cache for post-transformation dst. If the packet destination did not change we may end up recording a reference to the lwtunnel in its own cache\, and the lwtunnel state will never be freed.  Discovered by the ioam6.sh test\, kmemleak was recently fixed to catch per-cpu memory leaks. I'm not sure if rpl and seg6 can actually hit this\, but in principle I don't see why not.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58068,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  OPP: fix dev_pm_opp_find_bw_*() when bandwidth table not initialized  If a driver calls dev_pm_opp_find_bw_ceil/floor() the retrieve bandwidth from the OPP table but the bandwidth table was not created because the interconnect properties were missing in the OPP consumer node\, the kernel will crash with:  Unable to handle kernel NULL pointer dereference at virtual address 0000000000000004 ... pc : _read_bw+0x8/0x10 lr : _opp_table_find_key+0x9c/0x174 ... Call trace:   _read_bw+0x8/0x10 (P)   _opp_table_find_key+0x9c/0x174 (L)   _find_key+0x98/0x168   dev_pm_opp_find_bw_ceil+0x50/0x88 ...  In order to fix the crash\, create an assert function to check if the bandwidth table was created before trying to get a bandwidth with _read_bw().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56691,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mfd: intel_soc_pmic_bxtwc: Use IRQ domain for USB Type-C device  While design wise the idea of converting the driver to use the hierarchy of the IRQ chips is correct\, the implementation has (inherited) flaws. This was unveiled when platform_get_irq() had started WARN() on IRQ 0 that is supposed to be a Linux IRQ number (also known as vIRQ).  Rework the driver to respect IRQ domain when creating each MFD device separately\, as the domain is not the same for all of them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56690,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  crypto: pcrypt - Call crypto layer directly when padata_do_parallel() return -EBUSY  Since commit 8f4f68e788c3 (""crypto: pcrypt - Fix hungtask for PADATA_RESET"")\, the pcrypt encryption and decryption operations return -EAGAIN when the CPU goes online or offline. In alg_test()\, a WARN is generated when pcrypt_aead_decrypt() or pcrypt_aead_encrypt() returns -EAGAIN\, the unnecessary panic will occur when panic_on_warn set 1. Fix this issue by calling crypto layer directly without parallelization in that case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50289,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  media: av7110: fix a spectre vulnerability  As warned by smatch: \tdrivers/staging/media/av7110/av7110_ca.c:270 dvb_ca_ioctl() warn: potential spectre issue 'av7110->ci_slot' [w] (local cap)  There is a spectre-related vulnerability at the code. Fix it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58069,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  rtc: pcf85063: fix potential OOB write in PCF85063 NVMEM read  The nvmem interface supports variable buffer sizes\, while the regmap interface operates with fixed-size storage. If an nvmem client uses a buffer size less than 4 bytes\, regmap_read will write out of bounds as it expects the buffer to point at an unsigned int.  Fix this by using an intermediary unsigned int to hold the value.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56693,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  brd: defer automatic disk creation until module initialization succeeds  My colleague Wupeng found the following problems during fault injection:  BUG: unable to handle page fault for address: fffffbfff809d073 PGD 6e648067 P4D 123ec8067 PUD 123ec4067 PMD 100e38067 PTE 0 Oops: Oops: 0000 [#1] PREEMPT SMP KASAN NOPTI CPU: 5 UID: 0 PID: 755 Comm: modprobe Not tainted 6.12.0-rc3+ #17 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.1-2.fc37 04/01/2014 RIP: 0010:__asan_load8+0x4c/0xa0 ... Call Trace:  <TASK>  blkdev_put_whole+0x41/0x70  bdev_release+0x1a3/0x250  blkdev_release+0x11/0x20  __fput+0x1d7/0x4a0  task_work_run+0xfc/0x180  syscall_exit_to_user_mode+0x1de/0x1f0  do_syscall_64+0x6b/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  loop_init() is calling loop_add() after __register_blkdev() succeeds and is ignoring disk_add() failure from loop_add()\, for loop_add() failure is not fatal and successfully created disks are already visible to bdev_open().  brd_init() is currently calling brd_alloc() before __register_blkdev() succeeds and is releasing successfully created disks when brd_init() returns an error. This can cause UAF for the latter two case:  case 1:     T1: modprobe brd   brd_init     brd_alloc(0) // success       add_disk         disk_scan_partitions           bdev_file_open_by_dev // alloc file           fput // won't free until back to userspace     brd_alloc(1) // failed since mem alloc error inject   // error path for modprobe will release code segment   // back to userspace   __fput     blkdev_release       bdev_release         blkdev_put_whole           bdev->bd_disk->fops->release // fops is freed now\, UAF!  case 2:     T1:                            T2: modprobe brd   brd_init     brd_alloc(0) // success                                    open(/dev/ram0)     brd_alloc(1) // fail   // error path for modprobe                                     close(/dev/ram0)                                    ...                                    /* UAF! */                                    bdev->bd_disk->fops->release  Fix this problem by following what loop_init() does. Besides\, reintroduce brd_devices_mutex to help serialize modifications to brd_list.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56692,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to do sanity check on node blkaddr in truncate_node()  syzbot reports a f2fs bug as below:  ------------[ cut here ]------------ kernel BUG at fs/f2fs/segment.c:2534! RIP: 0010:f2fs_invalidate_blocks+0x35f/0x370 fs/f2fs/segment.c:2534 Call Trace:  truncate_node+0x1ae/0x8c0 fs/f2fs/node.c:909  f2fs_remove_inode_page+0x5c2/0x870 fs/f2fs/node.c:1288  f2fs_evict_inode+0x879/0x15c0 fs/f2fs/inode.c:856  evict+0x4e8/0x9b0 fs/inode.c:723  f2fs_handle_failed_inode+0x271/0x2e0 fs/f2fs/inode.c:986  f2fs_create+0x357/0x530 fs/f2fs/namei.c:394  lookup_open fs/namei.c:3595 [inline]  open_last_lookups fs/namei.c:3694 [inline]  path_openat+0x1c03/0x3590 fs/namei.c:3930  do_filp_open+0x235/0x490 fs/namei.c:3960  do_sys_openat2+0x13e/0x1d0 fs/open.c:1415  do_sys_open fs/open.c:1430 [inline]  __do_sys_openat fs/open.c:1446 [inline]  __se_sys_openat fs/open.c:1441 [inline]  __x64_sys_openat+0x247/0x2a0 fs/open.c:1441  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f RIP: 0010:f2fs_invalidate_blocks+0x35f/0x370 fs/f2fs/segment.c:2534  The root cause is: on a fuzzed image\, blkaddr in nat entry may be corrupted\, then it will cause system panic when using it in f2fs_invalidate_blocks()\, to avoid this\, let's add sanity check on nat blkaddr in truncate_node().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21638,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: sysctl: auth_enable: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The 'net' structure can be obtained from the table->data using container_of().  Note that table->data could also be used directly\, but that would increase the size of this fix\, while 'sctp.ctl_sock' still needs to be retrieved from 'net' structure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56369,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/modes: Avoid divide by zero harder in drm_mode_vrefresh()  drm_mode_vrefresh() is trying to avoid divide by zero by checking whether htotal or vtotal are zero. But we may still end up with a div-by-zero of vtotal*htotal*...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21639,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: sysctl: rto_min/max: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The 'net' structure can be obtained from the table->data using container_of().  Note that table->data could also be used directly\, as this is the only member needed from the 'net' structure\, but that would increase the size of this fix\, to use '*data' everywhere 'net->sctp.rto_min/max' is used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56694,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: fix recursive lock when verdict program return SK_PASS  When the stream_verdict program returns SK_PASS\, it places the received skb into its own receive queue\, but a recursive lock eventually occurs\, leading to an operating system deadlock. This issue has been present since v6.9.  ''' sk_psock_strp_data_ready     write_lock_bh(&sk->sk_callback_lock)     strp_data_ready       strp_read_sock         read_sock -> tcp_read_sock           strp_recv             cb.rcv_msg -> sk_psock_strp_read               # now stream_verdict return SK_PASS without peer sock assign               __SK_PASS = sk_psock_map_verd(SK_PASS\, NULL)               sk_psock_verdict_apply                 sk_psock_skb_ingress_self                   sk_psock_skb_ingress_enqueue                     sk_psock_data_ready                       read_lock_bh(&sk->sk_callback_lock) <= dead lock  '''  This topic has been discussed before\, but it has not been fixed. Previous discussion: https://lore.kernel.org/all/6684a5864ec86_403d20898@john.notmuch",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-4010,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A flaw was found in the USB Host Controller Driver framework in the Linux kernel. The usb_giveback_urb function has a logic loophole in its implementation. Due to the inappropriate judgment condition of the goto statement\, the function cannot return under the input of a specific malformed descriptor file\, so it falls into an endless loop\, resulting in a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50280,linux-libc-dev,LOW,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  dm cache: fix flushing uninitialized delayed_work on cache_ctr error  An unexpected WARN_ON from flush_work() may occur when cache creation fails\, caused by destroying the uninitialized delayed_work waker in the error path of cache_create(). For example\, the warning appears on the superblock checksum error.  Reproduce steps:  dmsetup create cmeta --table ""0 8192 linear /dev/sdc 0"" dmsetup create cdata --table ""0 65536 linear /dev/sdc 8192"" dmsetup create corig --table ""0 524288 linear /dev/sdc 262144"" dd if=/dev/urandom of=/dev/mapper/cmeta bs=4k count=1 oflag=direct dmsetup create cache --table ""0 524288 cache /dev/mapper/cmeta \\ /dev/mapper/cdata /dev/mapper/corig 128 2 metadata2 writethrough smq 0""  Kernel logs:  (snip) WARNING: CPU: 0 PID: 84 at kernel/workqueue.c:4178 __flush_work+0x5d4/0x890  Fix by pulling out the cancel_delayed_work_sync() from the constructor's error path. This patch doesn't affect the use-after-free fix for concurrent dm_resume and dm_destroy (commit 6a459d8edbdb (""dm cache: Fix UAF in destroy()"")) as cache_dtr is not changed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21634,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  cgroup/cpuset: remove kernfs active break  A warning was found:  WARNING: CPU: 10 PID: 3486953 at fs/kernfs/file.c:828 CPU: 10 PID: 3486953 Comm: rmdir Kdump: loaded Tainted: G RIP: 0010:kernfs_should_drain_open_files+0x1a1/0x1b0 RSP: 0018:ffff8881107ef9e0 EFLAGS: 00010202 RAX: 0000000080000002 RBX: ffff888154738c00 RCX: dffffc0000000000 RDX: 0000000000000007 RSI: 0000000000000004 RDI: ffff888154738c04 RBP: ffff888154738c04 R08: ffffffffaf27fa15 R09: ffffed102a8e7180 R10: ffff888154738c07 R11: 0000000000000000 R12: ffff888154738c08 R13: ffff888750f8c000 R14: ffff888750f8c0e8 R15: ffff888154738ca0 FS:  00007f84cd0be740(0000) GS:ffff8887ddc00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000555f9fbe00c8 CR3: 0000000153eec001 CR4: 0000000000370ee0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  kernfs_drain+0x15e/0x2f0  __kernfs_remove+0x165/0x300  kernfs_remove_by_name_ns+0x7b/0xc0  cgroup_rm_file+0x154/0x1c0  cgroup_addrm_files+0x1c2/0x1f0  css_clear_dir+0x77/0x110  kill_css+0x4c/0x1b0  cgroup_destroy_locked+0x194/0x380  cgroup_rmdir+0x2a/0x140  It can be explained by: rmdir \t\t\t\techo 1 > cpuset.cpus \t\t\t\tkernfs_fop_write_iter // active=0 cgroup_rm_file kernfs_remove_by_name_ns\tkernfs_get_active // active=1 __kernfs_remove\t\t\t\t\t  // active=0x80000002 kernfs_drain\t\t\tcpuset_write_resmask wait_event //waiting (active == 0x80000001) \t\t\t\tkernfs_break_active_protection \t\t\t\t// active = 0x80000001 // continue \t\t\t\tkernfs_unbreak_active_protection \t\t\t\t// active = 0x80000002 ... kernfs_should_drain_open_files // warning occurs \t\t\t\tkernfs_put_active  This warning is caused by 'kernfs_break_active_protection' when it is writing to cpuset.cpus\, and the cgroup is removed concurrently.  The commit 3a5a6d0c2b03 (""cpuset: don't nest cgroup_mutex inside get_online_cpus()"") made cpuset_hotplug_workfn asynchronous\, This change involves calling flush_work()\, which can create a multiple processes circular locking dependency that involve cgroup_mutex\, potentially leading to a deadlock. To avoid deadlock. the commit 76bb5ab8f6e3 (""cpuset: break kernfs active protection in cpuset_write_resmask()"") added 'kernfs_break_active_protection' in the cpuset_write_resmask. This could lead to this warning.  After the commit 2125c0034c5d (""cgroup/cpuset: Make cpuset hotplug processing synchronous"")\, the cpuset_write_resmask no longer needs to wait the hotplug to finish\, which means that concurrent hotplug and cpuset operations are no longer possible. Therefore\, the deadlock doesn't exist anymore and it does not have to 'break active protection' now. To fix this warning\, just remove kernfs_break_active_protection operation in the 'cpuset_write_resmask'.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21635,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rds: sysctl: rds_tcp_{rcv\,snd}buf: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The per-netns structure can be obtained from the table->data using container_of()\, then the 'net' one can be retrieved from the listen socket (if available).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58061,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mac80211: prohibit deactivating all links  In the internal API this calls this is a WARN_ON\, but that should remain since internally we want to know about bugs that may cause this. Prevent deactivating all links in the debugfs write directly.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56698,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: dwc3: gadget: Fix looping of queued SG entries  The dwc3_request->num_queued_sgs is decremented on completion. If a partially completed request is handled\, then the dwc3_request->num_queued_sgs no longer reflects the total number of num_queued_sgs (it would be cleared).  Correctly check the number of request SG entries remained to be prepare and queued. Failure to do this may cause null pointer dereference when accessing non-existent SG entry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21636,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: sysctl: plpmtud_probe_interval: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The 'net' structure can be obtained from the table->data using container_of().  Note that table->data could also be used directly\, as this is the only member needed from the 'net' structure\, but that would increase the size of this fix\, to use '*data' everywhere 'net->sctp.probe_interval' is used.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50282,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: add missing size check in amdgpu_debugfs_gprwave_read()  Avoid a possible buffer overflow if size is larger than 4K.  (cherry picked from commit f5d873f5825b40d886d03bd2aede91d4cf002434)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21637,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: sysctl: udp_port: avoid using current->nsproxy  As mentioned in a previous commit of this series\, using the 'net' structure via 'current' is not recommended for different reasons:  - Inconsistency: getting info from the reader's/writer's netns vs only   from the opener's netns.  - current->nsproxy can be NULL in some cases\, resulting in an 'Oops'   (null-ptr-deref)\, e.g. when the current task is exiting\, as spotted by   syzbot [1] using acct(2).  The 'net' structure can be obtained from the table->data using container_of().  Note that table->data could also be used directly\, but that would increase the size of this fix\, while 'sctp.ctl_sock' still needs to be retrieved from 'net' structure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58063,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtlwifi: fix memory leaks and invalid access at probe error path  Deinitialize at reverse order when probe fails.  When init_sw_vars fails\, rtl_deinit_core should not be called\, specially now that it destroys the rtl_wq workqueue.  And call rtl_pci_deinit and deinit_sw_vars\, otherwise\, memory will be leaked.  Remove pci_set_drvdata call as it will already be cleaned up by the core driver code and could lead to memory leaks too. cf. commit 8d450935ae7f (""wireless: rtlwifi: remove unnecessary pci_set_drvdata()"") and commit 3d86b93064c7 (""rtlwifi: Fix PCI probe error path orphaned memory"").",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50283,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix slab-use-after-free in smb3_preauth_hash_rsp  ksmbd_user_session_put should be called under smb3_preauth_hash_rsp(). It will avoid freeing session before calling smb3_preauth_hash_rsp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50284,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: Fix the missing xa_store error check  xa_store() can fail\, it return xa_err(-EINVAL) if the entry cannot be stored in an XArray\, or xa_err(-ENOMEM) if memory allocation failed\, so check error for xa_store() to fix it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50285,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: check outstanding simultaneous SMB operations  If Client send simultaneous SMB operations to ksmbd\, It exhausts too much memory through the ""ksmbd_work_cache”. It will cause OOM issue. ksmbd has a credit mechanism but it can't handle this problem. This patch add the check if it exceeds max credits to prevent this problem by assuming that one smb request consumes at least one credit.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21631,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  block\, bfq: fix waker_bfqq UAF after bfq_split_bfqq()  Our syzkaller report a following UAF for v6.6:  BUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958 Read of size 8 at addr ffff8881b57147d8 by task fsstress/232726  CPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39 Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:88 [inline]  dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106  print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364  print_report+0x3e/0x70 mm/kasan/report.c:475  kasan_report+0xb8/0xf0 mm/kasan/report.c:588  hlist_add_head include/linux/list.h:1023 [inline]  bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958  bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271  bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323  blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660  blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143  __submit_bio+0xa0/0x6b0 block/blk-core.c:639  __submit_bio_noacct_mq block/blk-core.c:718 [inline]  submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747  submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847  __ext4_read_bh fs/ext4/super.c:205 [inline]  ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230  __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567  ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947  ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182  ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660  ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569  iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91  iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80  ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051  ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220  do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811  __do_sys_ioctl fs/ioctl.c:869 [inline]  __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857  do_syscall_x64 arch/x86/entry/common.c:51 [inline]  do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81  entry_SYSCALL_64_after_hwframe+0x78/0xe2  Allocated by task 232719:  kasan_save_stack+0x22/0x50 mm/kasan/common.c:45  kasan_set_track+0x25/0x30 mm/kasan/common.c:52  __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328  kasan_slab_alloc include/linux/kasan.h:188 [inline]  slab_post_alloc_hook mm/slab.h:768 [inline]  slab_alloc_node mm/slub.c:3492 [inline]  kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537  bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869  bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776  bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938  bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271  bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323  blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660  blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143  __submit_bio+0xa0/0x6b0 block/blk-core.c:639  __submit_bio_noacct_mq block/blk-core.c:718 [inline]  submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747  submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847  __ext4_read_bh fs/ext4/super.c:205 [inline]  ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217  ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242  ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958  __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671  ext4_lookup_entry fs/ext4/namei.c:1774 [inline]  ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842  ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839  __lookup_slow+0x257/0x480 fs/namei.c:1696  lookup_slow fs/namei.c:1713 [inline]  walk_component+0x454/0x5c0 fs/namei.c:2004  link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331  link_path_walk fs/namei.c:3826 [inline]  path_openat+0x1b9/0x520 fs/namei.c:3826  do_filp_open+0x1b7/0x400 fs/namei.c:3857  do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428  do_sys_open fs/open.c:1443 [inline]  __do_sys_openat fs/open.c:1459 [inline]  __se_sys_openat fs/open.c:1454 [inline]  __x64_sys_openat+0x148/0x200 fs/open.c:1454  do_syscall_x64 arch/x86/entry/common.c:51 [inline]  do_syscall_6 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42322,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipvs: properly dereference pe in ip_vs_add_service  Use pe directly to resolve sparse warning:    net/netfilter/ipvs/ip_vs_ctl.c:1471:27: warning: dereference of noderef expression",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50286,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix slab-use-after-free in ksmbd_smb2_session_create  There is a race condition between ksmbd_smb2_session_create and ksmbd_expire_session. This patch add missing sessions_table_lock while adding/deleting session from global session table.",|tykio/ner-redact||tykio/smart-ner-redact|
TEMP-0000000-F7A20F,linux-libc-dev,LOW,6.1.115-1,N/A,"No description",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50287,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: v4l2-tpg: prevent the risk of a division by zero  As reported by Coverity\, the logic at tpg_precalculate_line() blindly rescales the buffer even when scaled_witdh is equal to zero. If this ever happens\, this will cause a division by zero.  Instead\, add a WARN_ON_ONCE() to trigger such cases and return without doing any precalculation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56787,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  soc: imx8m: Probe the SoC driver as platform driver  With driver_async_probe=* on kernel command line\, the following trace is produced because on i.MX8M Plus hardware because the soc-imx8m.c driver calls of_clk_get_by_name() which returns -EPROBE_DEFER because the clock driver is not yet probed. This was not detected during regular testing without driver_async_probe.  Convert the SoC code to platform driver and instantiate a platform device in its current device_initcall() to probe the platform driver. Rework .soc_revision callback to always return valid error code and return SoC revision via parameter. This way\, if anything in the .soc_revision callback return -EPROBE_DEFER\, it gets propagated to .probe and the .probe will get retried later.  "" ------------[ cut here ]------------ WARNING: CPU: 1 PID: 1 at drivers/soc/imx/soc-imx8m.c:115 imx8mm_soc_revision+0xdc/0x180 CPU: 1 UID: 0 PID: 1 Comm: swapper/0 Not tainted 6.11.0-next-20240924-00002-g2062bb554dea #603 Hardware name: DH electronics i.MX8M Plus DHCOM Premium Developer Kit (3) (DT) pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : imx8mm_soc_revision+0xdc/0x180 lr : imx8mm_soc_revision+0xd0/0x180 sp : ffff8000821fbcc0 x29: ffff8000821fbce0 x28: 0000000000000000 x27: ffff800081810120 x26: ffff8000818a9970 x25: 0000000000000006 x24: 0000000000824311 x23: ffff8000817f42c8 x22: ffff0000df8be210 x21: fffffffffffffdfb x20: ffff800082780000 x19: 0000000000000001 x18: ffffffffffffffff x17: ffff800081fff418 x16: ffff8000823e1000 x15: ffff0000c03b65e8 x14: ffff0000c00051b0 x13: ffff800082790000 x12: 0000000000000801 x11: ffff80008278ffff x10: ffff80008209d3a6 x9 : ffff80008062e95c x8 : ffff8000821fb9a0 x7 : 0000000000000000 x6 : 00000000000080e3 x5 : ffff0000df8c03d8 x4 : 0000000000000000 x3 : 0000000000000000 x2 : 0000000000000000 x1 : fffffffffffffdfb x0 : fffffffffffffdfb Call trace:  imx8mm_soc_revision+0xdc/0x180  imx8_soc_init+0xb0/0x1e0  do_one_initcall+0x94/0x1a8  kernel_init_freeable+0x240/0x2a8  kernel_init+0x28/0x140  ret_from_fork+0x10/0x20 ---[ end trace 0000000000000000 ]--- SoC: i.MX8MP revision 1.1 """,|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21735,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFC: nci: Add bounds checking in nci_hci_create_pipe()  The ""pipe"" variable is a u8 which comes from the network.  If it's more than 127\, then it results in memory corruption in the caller\, nci_hci_connect_gate().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21734,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  misc: fastrpc: Fix copy buffer page size  For non-registered buffer\, fastrpc driver copies the buffer and pass it to the remote subsystem. There is a problem with current implementation of page size calculation which is not considering the offset in the calculation. This might lead to passing of improper and out-of-bounds page size which could result in memory issue. Calculate page start and page end using the offset adjusted address instead of absolute address.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56786,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: put bpf_link's program when link is safe to be deallocated  In general\, BPF link's underlying BPF program should be considered to be reachable through attach hook -> link -> prog chain\, and\, pessimistically\, we have to assume that as long as link's memory is not safe to free\, attach hook's code might hold a pointer to BPF program and use it.  As such\, it's not (generally) correct to put link's program early before waiting for RCU GPs to go through. More eager bpf_prog_put() that we currently do is mostly correct due to BPF program's release code doing similar RCU GP waiting\, but as will be shown in the following patches\, BPF program can be non-sleepable (and\, thus\, reliant on only ""classic"" RCU GP)\, while BPF link's attach hook can have sleepable semantics and needs to be protected by RCU Tasks Trace\, and for such cases BPF link has to go through RCU Tasks Trace + ""classic"" RCU GPs before being deallocated. And so\, if we put BPF program early\, we might free BPF program before we free BPF link\, leading to use-after-free situation.  So\, this patch defers bpf_prog_put() until we are ready to perform bpf_link's deallocation. At worst\, this delays BPF program freeing by one extra RCU GP\, but that seems completely acceptable. Alternatively\, we'd need more elaborate ways to determine BPF hook\, BPF link\, and BPF program lifetimes\, and how they relate to each other\, which seems like an unnecessary complication.  Note\, for most BPF links we still will perform eager bpf_prog_put() and link dealloc\, so for those BPF links there are no observable changes whatsoever. Only BPF links that use deferred dealloc might notice slightly delayed freeing of BPF programs.  Also\, to reduce code and logic duplication\, extract program put + link dealloc logic into bpf_link_dealloc() helper.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53213,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: usb: lan78xx: Fix double free issue with interrupt buffer allocation  In lan78xx_probe()\, the buffer `buf` was being freed twice: once implicitly through `usb_free_urb(dev->urb_intr)` with the `URB_FREE_BUFFER` flag and again explicitly by `kfree(buf)`. This caused a double free issue.  To resolve this\, reordered `kmalloc()` and `usb_alloc_urb()` calls to simplify the initialization sequence and removed the redundant `kfree(buf)`.  Now\, `buf` is allocated after `usb_alloc_urb()`\, ensuring it is correctly managed by  `usb_fill_int_urb()` and freed by `usb_free_urb()` as intended.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56785,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  MIPS: Loongson64: DTS: Really fix PCIe port nodes for ls7a  Fix the dtc warnings:      arch/mips/boot/dts/loongson/ls7a-pch.dtsi:68.16-416.5: Warning (interrupt_provider): /bus@10000000/pci@1a000000: '#interrupt-cells' found\, but node is not an interrupt provider     arch/mips/boot/dts/loongson/ls7a-pch.dtsi:68.16-416.5: Warning (interrupt_provider): /bus@10000000/pci@1a000000: '#interrupt-cells' found\, but node is not an interrupt provider     arch/mips/boot/dts/loongson/loongson64g_4core_ls7a.dtb: Warning (interrupt_map): Failed prerequisite 'interrupt_provider'  And a runtime warning introduced in commit 045b14ca5c36 (""of: WARN on deprecated #address-cells/#size-cells handling""):      WARNING: CPU: 0 PID: 1 at drivers/of/base.c:106 of_bus_n_addr_cells+0x9c/0xe0     Missing '#address-cells' in /bus@10000000/pci@1a000000/pci_bridge@9\,0  The fix is similar to commit d89a415ff8d5 (""MIPS: Loongson64: DTS: Fix PCIe port nodes for ls7a"")\, which has fixed the issue for ls2k (despite its subject mentions ls7a).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53210,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  s390/iucv: MSG_PEEK causes memory leak in iucv_sock_destruct()  Passing MSG_PEEK flag to skb_recv_datagram() increments skb refcount (skb->users) and iucv_sock_recvmsg() does not decrement skb refcount at exit. This results in skb memory leak in skb_queue_purge() and WARN_ON in iucv_sock_destruct() during socket close. To fix this decrease skb refcount by one if MSG_PEEK is set in order to prevent memory leak and WARN_ON.  WARNING: CPU: 2 PID: 6292 at net/iucv/af_iucv.c:286 iucv_sock_destruct+0x144/0x1a0 [af_iucv] CPU: 2 PID: 6292 Comm: afiucv_test_msg Kdump: loaded Tainted: G        W          6.10.0-rc7 #1 Hardware name: IBM 3931 A01 704 (z/VM 7.3.0) Call Trace:         [<001587c682c4aa98>] iucv_sock_destruct+0x148/0x1a0 [af_iucv]         [<001587c682c4a9d0>] iucv_sock_destruct+0x80/0x1a0 [af_iucv]         [<001587c704117a32>] __sk_destruct+0x52/0x550         [<001587c704104a54>] __sock_release+0xa4/0x230         [<001587c704104c0c>] sock_close+0x2c/0x40         [<001587c702c5f5a8>] __fput+0x2e8/0x970         [<001587c7024148c4>] task_work_run+0x1c4/0x2c0         [<001587c7023b0716>] do_exit+0x996/0x1050         [<001587c7023b13aa>] do_group_exit+0x13a/0x360         [<001587c7023b1626>] __s390x_sys_exit_group+0x56/0x60         [<001587c7022bccca>] do_syscall+0x27a/0x380         [<001587c7049a6a0c>] __do_syscall+0x9c/0x160         [<001587c7049ce8a8>] system_call+0x70/0x98         Last Breaking-Event-Address:         [<001587c682c4a9d4>] iucv_sock_destruct+0x84/0x1a0 [af_iucv]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21736,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix possible int overflows in nilfs_fiemap()  Since nilfs_bmap_lookup_contig() in nilfs_fiemap() calculates its result by being prepared to go through potentially maxblocks == INT_MAX blocks\, the value in n may experience an overflow caused by left shift of blkbits.  While it is extremely unlikely to occur\, play it safe and cast right hand expression to wider type to mitigate the issue.  Found by Linux Verification Center (linuxtesting.org) with static analysis tool SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53138,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5e: kTLS\, Fix incorrect page refcounting  The kTLS tx handling code is using a mix of get_page() and page_ref_inc() APIs to increment the page reference. But on the release path (mlx5e_ktls_tx_handle_resync_dump_comp())\, only put_page() is used.  This is an issue when using pages from large folios: the get_page() references are stored on the folio page while the page_ref_inc() references are stored directly in the given page. On release the folio page will be dereferenced too many times.  This was found while doing kTLS testing with sendfile() + ZC when the served file was read from NFS on a kernel with NFS large folios support (commit 49b29a573da8 (""nfs: add support for large folios"")).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52596,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sysctl: Fix out of bounds access for empty sysctl registers  When registering tables to the sysctl subsystem there is a check to see if header is a permanently empty directory (used for mounts). This check evaluates the first element of the ctl_table. This results in an out of bounds evaluation when registering empty directories.  The function register_sysctl_mount_point now passes a ctl_table of size 1 instead of size 0. It now relies solely on the type to identify a permanently empty register.  Make sure that the ctl_table has at least one element before testing for permanent emptiness.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56784,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Adding array index check to prevent memory corruption  [Why & How] Array indices out of bound caused memory corruption. Adding checks to ensure that array index stays in bound.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21731,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  nbd: don't allow reconnect after disconnect  Following process can cause nbd_config UAF:  1) grab nbd_config temporarily;  2) nbd_genl_disconnect() flush all recv_work() and release the initial reference:    nbd_genl_disconnect    nbd_disconnect_and_put     nbd_disconnect      flush_workqueue(nbd->recv_workq)     if (test_and_clear_bit(NBD_RT_HAS_CONFIG_REF\, ...))      nbd_config_put      -> due to step 1)\, reference is still not zero  3) nbd_genl_reconfigure() queue recv_work() again;    nbd_genl_reconfigure    config = nbd_get_config_unlocked(nbd)    if (!config)    -> succeed    if (!test_bit(NBD_RT_BOUND\, ...))    -> succeed    nbd_reconnect_socket     queue_work(nbd->recv_workq\, &args->work)  4) step 1) release the reference;  5) Finially\, recv_work() will trigger UAF:    recv_work    nbd_config_put(nbd)    -> nbd_config is freed    atomic_dec(&config->recv_threads)    -> UAF  Fix the problem by clearing NBD_RT_BOUND in nbd_genl_disconnect()\, so that nbd_genl_reconfigure() will fail.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56783,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nft_socket: remove WARN_ON_ONCE on maximum cgroup level  cgroup maximum depth is INT_MAX by default\, there is a cgroup toggle to restrict this maximum depth to a more reasonable value not to harm performance. Remove unnecessary WARN_ON_ONCE which is reachable from userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43868,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  riscv/purgatory: align riscv_kernel_entry  When alignment handling is delegated to the kernel\, everything must be word-aligned in purgatory\, since the trap handler is then set to the kexec one. Without the alignment\, hitting the exception would ultimately crash. On other occasions\, the kernel's handler would take care of exceptions. This has been tested on a JH7110 SoC with oreboot and its SBI delegating unaligned access exceptions and the kernel configured to handle them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52591,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  reiserfs: Avoid touching renamed directory if parent does not change  The VFS will not be locking moved directory if its parent does not change. Change reiserfs rename code to avoid touching renamed directory if its parent does not change as without locking that can corrupt the filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21928,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: intel-ish-hid: Fix use-after-free issue in ishtp_hid_remove()  The system can experience a random crash a few minutes after the driver is removed. This issue occurs due to improper handling of memory freeing in the ishtp_hid_remove() function.  The function currently frees the `driver_data` directly within the loop that destroys the HID devices\, which can lead to accessing freed memory. Specifically\, `hid_destroy_device()` uses `driver_data` when it calls `hid_ishtp_set_feature()` to power off the sensor\, so freeing `driver_data` beforehand can result in accessing invalid memory.  This patch resolves the issue by storing the `driver_data` in a temporary variable before calling `hid_destroy_device()`\, and then freeing the `driver_data` after the device is destroyed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53216,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: release svc_expkey/svc_export with rcu_work  The last reference for `cache_head` can be reduced to zero in `c_show` and `e_show`(using `rcu_read_lock` and `rcu_read_unlock`). Consequently\, `svc_export_put` and `expkey_put` will be invoked\, leading to two issues:  1. The `svc_export_put` will directly free ex_uuid. However\,    `e_show`/`c_show` will access `ex_uuid` after `cache_put`\, which can    trigger a use-after-free issue\, shown below.     ==================================================================    BUG: KASAN: slab-use-after-free in svc_export_show+0x362/0x430 [nfsd]    Read of size 1 at addr ff11000010fdc120 by task cat/870     CPU: 1 UID: 0 PID: 870 Comm: cat Not tainted 6.12.0-rc3+ #1    Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS    1.16.1-2.fc37 04/01/2014    Call Trace:     <TASK>     dump_stack_lvl+0x53/0x70     print_address_description.constprop.0+0x2c/0x3a0     print_report+0xb9/0x280     kasan_report+0xae/0xe0     svc_export_show+0x362/0x430 [nfsd]     c_show+0x161/0x390 [sunrpc]     seq_read_iter+0x589/0x770     seq_read+0x1e5/0x270     proc_reg_read+0xe1/0x140     vfs_read+0x125/0x530     ksys_read+0xc1/0x160     do_syscall_64+0x5f/0x170     entry_SYSCALL_64_after_hwframe+0x76/0x7e     Allocated by task 830:     kasan_save_stack+0x20/0x40     kasan_save_track+0x14/0x30     __kasan_kmalloc+0x8f/0xa0     __kmalloc_node_track_caller_noprof+0x1bc/0x400     kmemdup_noprof+0x22/0x50     svc_export_parse+0x8a9/0xb80 [nfsd]     cache_do_downcall+0x71/0xa0 [sunrpc]     cache_write_procfs+0x8e/0xd0 [sunrpc]     proc_reg_write+0xe1/0x140     vfs_write+0x1a5/0x6d0     ksys_write+0xc1/0x160     do_syscall_64+0x5f/0x170     entry_SYSCALL_64_after_hwframe+0x76/0x7e     Freed by task 868:     kasan_save_stack+0x20/0x40     kasan_save_track+0x14/0x30     kasan_save_free_info+0x3b/0x60     __kasan_slab_free+0x37/0x50     kfree+0xf3/0x3e0     svc_export_put+0x87/0xb0 [nfsd]     cache_purge+0x17f/0x1f0 [sunrpc]     nfsd_destroy_serv+0x226/0x2d0 [nfsd]     nfsd_svc+0x125/0x1e0 [nfsd]     write_threads+0x16a/0x2a0 [nfsd]     nfsctl_transaction_write+0x74/0xa0 [nfsd]     vfs_write+0x1a5/0x6d0     ksys_write+0xc1/0x160     do_syscall_64+0x5f/0x170     entry_SYSCALL_64_after_hwframe+0x76/0x7e  2. We cannot sleep while using `rcu_read_lock`/`rcu_read_unlock`.    However\, `svc_export_put`/`expkey_put` will call path_put\, which    subsequently triggers a sleeping operation due to the following    `dput`.     =============================    WARNING: suspicious RCU usage    5.10.0-dirty #141 Not tainted    -----------------------------    ...    Call Trace:    dump_stack+0x9a/0xd0    ___might_sleep+0x231/0x240    dput+0x39/0x600    path_put+0x1b/0x30    svc_export_put+0x17/0x80    e_show+0x1c9/0x200    seq_read_iter+0x63f/0x7c0    seq_read+0x226/0x2d0    vfs_read+0x113/0x2c0    ksys_read+0xc9/0x170    do_syscall_64+0x33/0x40    entry_SYSCALL_64_after_hwframe+0x67/0xd1  Fix these issues by using `rcu_work` to help release `svc_expkey`/`svc_export`. This approach allows for an asynchronous context to invoke `path_put` and also facilitates the freeing of `uuid/exp/key` after an RCU grace period.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56782,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ACPI: x86: Add adev NULL check to acpi_quirk_skip_serdev_enumeration()  acpi_dev_hid_match() does not check for adev == NULL\, dereferencing it unconditional.  Add a check for adev being NULL before calling acpi_dev_hid_match().  At the moment acpi_quirk_skip_serdev_enumeration() is never called with a controller_parent without an ACPI companion\, but better safe than sorry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53217,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFSD: Prevent NULL dereference in nfsd4_process_cb_update()  @ses is initialized to NULL. If __nfsd4_find_backchannel() finds no available backchannel session\, setup_callback_client() will try to dereference @ses and segfault.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52590,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: Avoid touching renamed directory if parent does not change  The VFS will not be locking moved directory if its parent does not change. Change ocfs2 rename code to avoid touching renamed directory if its parent does not change as without locking that can corrupt the filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56781,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/prom_init: Fixup missing powermac #size-cells  On some powermacs `escc` nodes are missing `#size-cells` properties\, which is deprecated and now triggers a warning at boot since commit 045b14ca5c36 (""of: WARN on deprecated #address-cells/#size-cells handling"").  For example:    Missing '#size-cells' in /pci@f2000000/mac-io@c/escc@13000   WARNING: CPU: 0 PID: 0 at drivers/of/base.c:133 of_bus_n_size_cells+0x98/0x108   Hardware name: PowerMac3\,1 7400 0xc0209 PowerMac   ...   Call Trace:     of_bus_n_size_cells+0x98/0x108 (unreliable)     of_bus_default_count_cells+0x40/0x60     __of_get_address+0xc8/0x21c     __of_address_to_resource+0x5c/0x228     pmz_init_port+0x5c/0x2ec     pmz_probe.isra.0+0x144/0x1e4     pmz_console_init+0x10/0x48     console_init+0xcc/0x138     start_kernel+0x5c4/0x694  As powermacs boot via prom_init it's possible to add the missing properties to the device tree during boot\, avoiding the warning. Note that `escc-legacy` nodes are also missing `#size-cells` properties\, but they are skipped by the macio driver\, so leave them alone.  Depends-on: 045b14ca5c36 (""of: WARN on deprecated #address-cells/#size-cells handling"")",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53214,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  vfio/pci: Properly hide first-in-list PCIe extended capability  There are cases where a PCIe extended capability should be hidden from the user. For example\, an unknown capability (i.e.\, capability with ID greater than PCI_EXT_CAP_ID_MAX) or a capability that is intentionally chosen to be hidden from the user.  Hiding a capability is done by virtualizing and modifying the 'Next Capability Offset' field of the previous capability so it points to the capability after the one that should be hidden.  The special case where the first capability in the list should be hidden is handled differently because there is no previous capability that can be modified. In this case\, the capability ID and version are zeroed while leaving the next pointer intact. This hides the capability and leaves an anchor for the rest of the capability list.  However\, today\, hiding the first capability in the list is not done properly if the capability is unknown\, as struct vfio_pci_core_device->pci_config_map is set to the capability ID during initialization but the capability ID is not properly checked later when used in vfio_config_do_rw(). This leads to the following warning [1] and to an out-of-bounds access to ecap_perms array.  Fix it by checking cap_id in vfio_config_do_rw()\, and if it is greater than PCI_EXT_CAP_ID_MAX\, use an alternative struct perm_bits for direct read only access instead of the ecap_perms array.  Note that this is safe since the above is the only case where cap_id can exceed PCI_EXT_CAP_ID_MAX (except for the special capabilities\, which are already checked before).  [1]  WARNING: CPU: 118 PID: 5329 at drivers/vfio/pci/vfio_pci_config.c:1900 vfio_pci_config_rw+0x395/0x430 [vfio_pci_core] CPU: 118 UID: 0 PID: 5329 Comm: simx-qemu-syste Not tainted 6.12.0+ #1 (snip) Call Trace:  <TASK>  ? show_regs+0x69/0x80  ? __warn+0x8d/0x140  ? vfio_pci_config_rw+0x395/0x430 [vfio_pci_core]  ? report_bug+0x18f/0x1a0  ? handle_bug+0x63/0xa0  ? exc_invalid_op+0x19/0x70  ? asm_exc_invalid_op+0x1b/0x20  ? vfio_pci_config_rw+0x395/0x430 [vfio_pci_core]  ? vfio_pci_config_rw+0x244/0x430 [vfio_pci_core]  vfio_pci_rw+0x101/0x1b0 [vfio_pci_core]  vfio_pci_core_read+0x1d/0x30 [vfio_pci_core]  vfio_device_fops_read+0x27/0x40 [vfio]  vfs_read+0xbd/0x340  ? vfio_device_fops_unl_ioctl+0xbb/0x740 [vfio]  ? __rseq_handle_notify_resume+0xa4/0x4b0  __x64_sys_pread64+0x96/0xc0  x64_sys_call+0x1c3d/0x20d0  do_syscall_64+0x4d/0x120  entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42252,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  closures: Change BUG_ON() to WARN_ON()  If a BUG_ON() can be hit in the wild\, it shouldn't be a BUG_ON()  For reference\, this has popped up once in the CI\, and we'll need more info to debug it:  03240 ------------[ cut here ]------------ 03240 kernel BUG at lib/closure.c:21! 03240 kernel BUG at lib/closure.c:21! 03240 Internal error: Oops - BUG: 00000000f2000800 [#1] SMP 03240 Modules linked in: 03240 CPU: 15 PID: 40534 Comm: kworker/u80:1 Not tainted 6.10.0-rc4-ktest-ga56da69799bd #25570 03240 Hardware name: linux\,dummy-virt (DT) 03240 Workqueue: btree_update btree_interior_update_work 03240 pstate: 00001005 (nzcv daif -PAN -UAO -TCO -DIT +SSBS BTYPE=--) 03240 pc : closure_put+0x224/0x2a0 03240 lr : closure_put+0x24/0x2a0 03240 sp : ffff0000d12071c0 03240 x29: ffff0000d12071c0 x28: dfff800000000000 x27: ffff0000d1207360 03240 x26: 0000000000000040 x25: 0000000000000040 x24: 0000000000000040 03240 x23: ffff0000c1f20180 x22: 0000000000000000 x21: ffff0000c1f20168 03240 x20: 0000000040000000 x19: ffff0000c1f20140 x18: 0000000000000001 03240 x17: 0000000000003aa0 x16: 0000000000003ad0 x15: 1fffe0001c326974 03240 x14: 0000000000000a1e x13: 0000000000000000 x12: 1fffe000183e402d 03240 x11: ffff6000183e402d x10: dfff800000000000 x9 : ffff6000183e402e 03240 x8 : 0000000000000001 x7 : 00009fffe7c1bfd3 x6 : ffff0000c1f2016b 03240 x5 : ffff0000c1f20168 x4 : ffff6000183e402e x3 : ffff800081391954 03240 x2 : 0000000000000001 x1 : 0000000000000000 x0 : 00000000a8000000 03240 Call trace: 03240  closure_put+0x224/0x2a0 03240  bch2_check_for_deadlock+0x910/0x1028 03240  bch2_six_check_for_deadlock+0x1c/0x30 03240  six_lock_slowpath.isra.0+0x29c/0xed0 03240  six_lock_ip_waiter+0xa8/0xf8 03240  __bch2_btree_node_lock_write+0x14c/0x298 03240  bch2_trans_lock_write+0x6d4/0xb10 03240  __bch2_trans_commit+0x135c/0x5520 03240  btree_interior_update_work+0x1248/0x1c10 03240  process_scheduled_works+0x53c/0xd90 03240  worker_thread+0x370/0x8c8 03240  kthread+0x258/0x2e8 03240  ret_from_fork+0x10/0x20 03240 Code: aa1303e0 d63f0020 a94363f7 17ffff8c (d4210000) 03240 ---[ end trace 0000000000000000 ]--- 03240 Kernel panic - not syncing: Oops - BUG: Fatal exception 03240 SMP: stopping secondary CPUs 03241 SMP: failed to stop secondary CPUs 13\,15 03241 Kernel Offset: disabled 03241 CPU features: 0x00\,00000003\,80000008\,4240500b 03241 Memory Limit: none 03241 ---[ end Kernel panic - not syncing: Oops - BUG: Fatal exception ]--- 03246 ========= FAILED TIMEOUT copygc_torture_no_checksum in 7200s",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-47658,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/pm: fix a potential gpu_metrics_table memory leak  Memory is allocated for gpu_metrics_table in renoir_init_smc_tables()\, but not freed in int smu_v12_0_fini_smc_tables(). Free it!",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21732,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Fix a race for an ODP MR which leads to CQE with error  This patch addresses a race condition for an ODP MR that can result in a CQE with an error on the UMR QP.  During the __mlx5_ib_dereg_mr() flow\, the following sequence of calls occurs:  mlx5_revoke_mr()  mlx5r_umr_revoke_mr()  mlx5r_umr_post_send_wait()  At this point\, the lkey is freed from the hardware's perspective.  However\, concurrently\, mlx5_ib_invalidate_range() might be triggered by another task attempting to invalidate a range for the same freed lkey.  This task will:  - Acquire the umem_odp->umem_mutex lock.  - Call mlx5r_umr_update_xlt() on the UMR QP.  - Since the lkey has already been freed\, this can lead to a CQE error\,    causing the UMR QP to enter an error state [1].  To resolve this race condition\, the umem_odp->umem_mutex lock is now also acquired as part of the mlx5_revoke_mr() scope.  Upon successful revoke\, we set umem_odp->private which points to that MR to NULL\, preventing any further invalidation attempts on its lkey.  [1] From dmesg:     infiniband rocep8s0f0: dump_cqe:277:(pid 0): WC error: 6\, Message: memory bind operation error    cqe_dump: 00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    cqe_dump: 00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    cqe_dump: 00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    cqe_dump: 00000030: 00 00 00 00 08 00 78 06 25 00 11 b9 00 0e dd d2     WARNING: CPU: 15 PID: 1506 at drivers/infiniband/hw/mlx5/umr.c:394 mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib]    Modules linked in: ip6table_mangle ip6table_natip6table_filter ip6_tables iptable_mangle xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay rpcrdma rdma_ucm ib_iser libiscsi scsi_transport_iscsi rdma_cm iw_cm ib_umad ib_ipoib ib_cm mlx5_ib ib_uverbs ib_core fuse mlx5_core    CPU: 15 UID: 0 PID: 1506 Comm: ibv_rc_pingpong Not tainted 6.12.0-rc7+ #1626    Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014    RIP: 0010:mlx5r_umr_post_send_wait+0x15a/0x2b0 [mlx5_ib]    [..]    Call Trace:    <TASK>    mlx5r_umr_update_xlt+0x23c/0x3e0 [mlx5_ib]    mlx5_ib_invalidate_range+0x2e1/0x330 [mlx5_ib]    __mmu_notifier_invalidate_range_start+0x1e1/0x240    zap_page_range_single+0xf1/0x1a0    madvise_vma_behavior+0x677/0x6e0    do_madvise+0x1a2/0x4b0    __x64_sys_madvise+0x25/0x30    do_syscall_64+0x6b/0x140    entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56780,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  quota: flush quota_release_work upon quota writeback  One of the paths quota writeback is called from is:  freeze_super()   sync_filesystem()     ext4_sync_fs()       dquot_writeback_dquots()  Since we currently don't always flush the quota_release_work queue in this path\, we can end up with the following race:   1. dquot are added to releasing_dquots list during regular operations.  2. FS Freeze starts\, however\, this does not flush the quota_release_work queue.  3. Freeze completes.  4. Kernel eventually tries to flush the workqueue while FS is frozen which     hits a WARN_ON since transaction gets started during frozen state:    ext4_journal_check_start+0x28/0x110 [ext4] (unreliable)   __ext4_journal_start_sb+0x64/0x1c0 [ext4]   ext4_release_dquot+0x90/0x1d0 [ext4]   quota_release_workfn+0x43c/0x4d0  Which is the following line:    WARN_ON(sb->s_writers.frozen == SB_FREEZE_COMPLETE);  Which ultimately results in generic/390 failing due to dmesg noise. This was detected on powerpc machine 15 cores.  To avoid this\, make sure to flush the workqueue during dquot_writeback_dquots() so we dont have any pending workitems after freeze.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53215,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  svcrdma: fix miss destroy percpu_counter in svc_rdma_proc_init()  There's issue as follows: RPC: Registered rdma transport module. RPC: Registered rdma backchannel transport module. RPC: Unregistered rdma transport module. RPC: Unregistered rdma backchannel transport module. BUG: unable to handle page fault for address: fffffbfff80c609a PGD 123fee067 P4D 123fee067 PUD 123fea067 PMD 10c624067 PTE 0 Oops: Oops: 0000 [#1] PREEMPT SMP KASAN NOPTI RIP: 0010:percpu_counter_destroy_many+0xf7/0x2a0 Call Trace:  <TASK>  __die+0x1f/0x70  page_fault_oops+0x2cd/0x860  spurious_kernel_fault+0x36/0x450  do_kern_addr_fault+0xca/0x100  exc_page_fault+0x128/0x150  asm_exc_page_fault+0x26/0x30  percpu_counter_destroy_many+0xf7/0x2a0  mmdrop+0x209/0x350  finish_task_switch.isra.0+0x481/0x840  schedule_tail+0xe/0xd0  ret_from_fork+0x23/0x80  ret_from_fork_asm+0x1a/0x30  </TASK>  If register_sysctl() return NULL\, then svc_rdma_proc_cleanup() will not destroy the percpu counters which init in svc_rdma_proc_init(). If CONFIG_HOTPLUG_CPU is enabled\, residual nodes may be in the 'percpu_counters' list. The above issue may occur once the module is removed. If the CONFIG_HOTPLUG_CPU configuration is not enabled\, memory leakage occurs. To solve above issue just destroy all percpu counters when register_sysctl() return NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21924,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: hns3: make sure ptp clock is unregister and freed if hclge_ptp_get_cycle returns an error  During the initialization of ptp\, hclge_ptp_get_cycle might return an error and returned directly without unregister clock and free it. To avoid that\, call hclge_ptp_destroy_clock to unregist and free clock if hclge_ptp_get_cycle failed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53133,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Handle dml allocation failure to avoid crash  [Why] In the case where a dml allocation fails for any reason\, the current state's dml contexts would no longer be valid. Then subsequent calls dc_state_copy_internal would shallow copy invalid memory and if the new state was released\, a double free would occur.  [How] Reset dml pointers in new_state to NULL and avoid invalid pointer  (cherry picked from commit bcafdc61529a48f6f06355d78eb41b3aeda5296c)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-45346,libsqlite3-0,LOW,3.40.1-2+deb12u1,N/A,"A Memory Leak vulnerability exists in SQLite Project SQLite3 3.35.1 and 3.37.0 via maliciously crafted SQL Queries (made via editing the Database File)\, it is possible to query a record\, and leak subsequent bytes of memory that extend beyond the record\, which could let a malicious user obtain sensitive information. NOTE: The developer disputes this as a vulnerability stating that If you give SQLite a corrupted database file and submit a query against the database\, it might read parts of the database that you did not intend or expect.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21925,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  llc: do not use skb_get() before dev_queue_xmit()  syzbot is able to crash hosts [1]\, using llc and devices not supporting IFF_TX_SKB_SHARING.  In this case\, e1000 driver calls eth_skb_pad()\, while the skb is shared.  Simply replace skb_get() by skb_clone() in net/llc/llc_s_ac.c  Note that e1000 driver might have an issue with pktgen\, because it does not clear IFF_TX_SKB_SHARING\, this is an orthogonal change.  We need to audit other skb_get() uses in net/llc.  [1]  kernel BUG at net/core/skbuff.c:2178 ! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN NOPTI CPU: 0 UID: 0 PID: 16371 Comm: syz.2.2764 Not tainted 6.14.0-rc4-syzkaller-00052-gac9c34d1e45a #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014  RIP: 0010:pskb_expand_head+0x6ce/0x1240 net/core/skbuff.c:2178 Call Trace:  <TASK>   __skb_pad+0x18a/0x610 net/core/skbuff.c:2466   __skb_put_padto include/linux/skbuff.h:3843 [inline]   skb_put_padto include/linux/skbuff.h:3862 [inline]   eth_skb_pad include/linux/etherdevice.h:656 [inline]   e1000_xmit_frame+0x2d99/0x5800 drivers/net/ethernet/intel/e1000/e1000_main.c:3128   __netdev_start_xmit include/linux/netdevice.h:5151 [inline]   netdev_start_xmit include/linux/netdevice.h:5160 [inline]   xmit_one net/core/dev.c:3806 [inline]   dev_hard_start_xmit+0x9a/0x7b0 net/core/dev.c:3822   sch_direct_xmit+0x1ae/0xc30 net/sched/sch_generic.c:343   __dev_xmit_skb net/core/dev.c:4045 [inline]   __dev_queue_xmit+0x13d4/0x43e0 net/core/dev.c:4621   dev_queue_xmit include/linux/netdevice.h:3313 [inline]   llc_sap_action_send_test_c+0x268/0x320 net/llc/llc_s_ac.c:144   llc_exec_sap_trans_actions net/llc/llc_sap.c:153 [inline]   llc_sap_next_state net/llc/llc_sap.c:182 [inline]   llc_sap_state_process+0x239/0x510 net/llc/llc_sap.c:209   llc_ui_sendmsg+0xd0d/0x14e0 net/llc/af_llc.c:993   sock_sendmsg_nosec net/socket.c:718 [inline]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53218,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix race in concurrent f2fs_stop_gc_thread  In my test case\, concurrent calls to f2fs shutdown report the following stack trace:   Oops: general protection fault\, probably for non-canonical address 0xc6cfff63bb5513fc: 0000 [#1] PREEMPT SMP PTI  CPU: 0 UID: 0 PID: 678 Comm: f2fs_rep_shutdo Not tainted 6.12.0-rc5-next-20241029-g6fb2fa9805c5-dirty #85  Call Trace:   <TASK>   ? show_regs+0x8b/0xa0   ? __die_body+0x26/0xa0   ? die_addr+0x54/0x90   ? exc_general_protection+0x24b/0x5c0   ? asm_exc_general_protection+0x26/0x30   ? kthread_stop+0x46/0x390   f2fs_stop_gc_thread+0x6c/0x110   f2fs_do_shutdown+0x309/0x3a0   f2fs_ioc_shutdown+0x150/0x1c0   __f2fs_ioctl+0xffd/0x2ac0   f2fs_ioctl+0x76/0xe0   vfs_ioctl+0x23/0x60   __x64_sys_ioctl+0xce/0xf0   x64_sys_call+0x2b1b/0x4540   do_syscall_64+0xa7/0x240   entry_SYSCALL_64_after_hwframe+0x76/0x7e  The root cause is a race condition in f2fs_stop_gc_thread() called from different f2fs shutdown paths:    [CPU0]                       [CPU1]   ----------------------       -----------------------   f2fs_stop_gc_thread          f2fs_stop_gc_thread                                  gc_th = sbi->gc_thread     gc_th = sbi->gc_thread     kfree(gc_th)     sbi->gc_thread = NULL                                  < gc_th != NULL >                                  kthread_stop(gc_th->f2fs_gc_task) //UAF  The commit c7f114d864ac (""f2fs: fix to avoid use-after-free in f2fs_stop_gc_thread()"") attempted to fix this issue by using a read semaphore to prevent races between shutdown and remount threads\, but it fails to prevent all race conditions.  Fix it by converting to write lock of s_umount in f2fs_do_shutdown().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53131,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix null-ptr-deref in block_touch_buffer tracepoint  Patch series ""nilfs2: fix null-ptr-deref bugs on block tracepoints"".  This series fixes null pointer dereference bugs that occur when using nilfs2 and two block-related tracepoints.   This patch (of 2):  It has been reported that when using ""block:block_touch_buffer"" tracepoint\, touch_buffer() called from __nilfs_get_folio_block() causes a NULL pointer dereference\, or a general protection fault when KASAN is enabled.  This happens because since the tracepoint was added in touch_buffer()\, it references the dev_t member bh->b_bdev->bd_dev regardless of whether the buffer head has a pointer to a block_device structure.  In the current implementation\, the block_device structure is set after the function returns to the caller.  Here\, touch_buffer() is used to mark the folio/page that owns the buffer head as accessed\, but the common search helper for folio/page used by the caller function was optimized to mark the folio/page as accessed when it was reimplemented a long time ago\, eliminating the need to call touch_buffer() here in the first place.  So this solves the issue by eliminating the touch_buffer() call itself.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21926,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: gso: fix ownership in __udp_gso_segment  In __udp_gso_segment the skb destructor is removed before segmenting the skb but the socket reference is kept as-is. This is an issue if the original skb is later orphaned as we can hit the following bug:    kernel BUG at ./include/linux/skbuff.h:3312!  (skb_orphan)   RIP: 0010:ip_rcv_core+0x8b2/0xca0   Call Trace:    ip_rcv+0xab/0x6e0    __netif_receive_skb_one_core+0x168/0x1b0    process_backlog+0x384/0x1100    __napi_poll.constprop.0+0xa1/0x370    net_rx_action+0x925/0xe50  The above can happen following a sequence of events when using OpenVSwitch\, when an OVS_ACTION_ATTR_USERSPACE action precedes an OVS_ACTION_ATTR_OUTPUT action:  1. OVS_ACTION_ATTR_USERSPACE is handled (in do_execute_actions): the skb    goes through queue_gso_packets and then __udp_gso_segment\, where its    destructor is removed. 2. The segments' data are copied and sent to userspace. 3. OVS_ACTION_ATTR_OUTPUT is handled (in do_execute_actions) and the    same original skb is sent to its path. 4. If it later hits skb_orphan\, we hit the bug.  Fix this by also removing the reference to the socket in __udp_gso_segment.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53219,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  virtiofs: use pages instead of pointer for kernel direct IO  When trying to insert a 10MB kernel module kept in a virtio-fs with cache disabled\, the following warning was reported:    ------------[ cut here ]------------   WARNING: CPU: 1 PID: 404 at mm/page_alloc.c:4551 ......   Modules linked in:   CPU: 1 PID: 404 Comm: insmod Not tainted 6.9.0-rc5+ #123   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996) ......   RIP: 0010:__alloc_pages+0x2bf/0x380   ......   Call Trace:    <TASK>    ? __warn+0x8e/0x150    ? __alloc_pages+0x2bf/0x380    __kmalloc_large_node+0x86/0x160    __kmalloc+0x33c/0x480    virtio_fs_enqueue_req+0x240/0x6d0    virtio_fs_wake_pending_and_unlock+0x7f/0x190    queue_request_and_unlock+0x55/0x60    fuse_simple_request+0x152/0x2b0    fuse_direct_io+0x5d2/0x8c0    fuse_file_read_iter+0x121/0x160    __kernel_read+0x151/0x2d0    kernel_read+0x45/0x50    kernel_read_file+0x1a9/0x2a0    init_module_from_file+0x6a/0xe0    idempotent_init_module+0x175/0x230    __x64_sys_finit_module+0x5d/0xb0    x64_sys_call+0x1c3/0x9e0    do_syscall_64+0x3d/0xc0    entry_SYSCALL_64_after_hwframe+0x4b/0x53    ......    </TASK>   ---[ end trace 0000000000000000 ]---  The warning is triggered as follows:  1) syscall finit_module() handles the module insertion and it invokes kernel_read_file() to read the content of the module first.  2) kernel_read_file() allocates a 10MB buffer by using vmalloc() and passes it to kernel_read(). kernel_read() constructs a kvec iter by using iov_iter_kvec() and passes it to fuse_file_read_iter().  3) virtio-fs disables the cache\, so fuse_file_read_iter() invokes fuse_direct_io(). As for now\, the maximal read size for kvec iter is only limited by fc->max_read. For virtio-fs\, max_read is UINT_MAX\, so fuse_direct_io() doesn't split the 10MB buffer. It saves the address and the size of the 10MB-sized buffer in out_args[0] of a fuse request and passes the fuse request to virtio_fs_wake_pending_and_unlock().  4) virtio_fs_wake_pending_and_unlock() uses virtio_fs_enqueue_req() to queue the request. Because virtiofs need DMA-able address\, so virtio_fs_enqueue_req() uses kmalloc() to allocate a bounce buffer for all fuse args\, copies these args into the bounce buffer and passed the physical address of the bounce buffer to virtiofsd. The total length of these fuse args for the passed fuse request is about 10MB\, so copy_args_to_argbuf() invokes kmalloc() with a 10MB size parameter and it triggers the warning in __alloc_pages():  \tif (WARN_ON_ONCE_GFP(order > MAX_PAGE_ORDER\, gfp)) \t\treturn NULL;  5) virtio_fs_enqueue_req() will retry the memory allocation in a kworker\, but it won't help\, because kmalloc() will always return NULL due to the abnormal size and finit_module() will hang forever.  A feasible solution is to limit the value of max_read for virtio-fs\, so the length passed to kmalloc() will be limited. However it will affect the maximal read size for normal read. And for virtio-fs write initiated from kernel\, it has the similar problem but now there is no way to limit fc->max_write in kernel.  So instead of limiting both the values of max_read and max_write in kernel\, introducing use_pages_for_kvec_io in fuse_conn and setting it as true in virtiofs. When use_pages_for_kvec_io is enabled\, fuse will use pages instead of pointer to pass the KVEC_IO data.  After switching to pages for KVEC_IO data\, these pages will be used for DMA through virtio-fs. If these pages are backed by vmalloc()\, {flush|invalidate}_kernel_vmap_range() are necessary to flush or invalidate the cache before the DMA operation. So add two new fields in fuse_args_pages to record the base address of vmalloc area and the condition indicating whether invalidation is needed. Perform the flush in fuse_get_user_pages() for write operations and the invalidation in fuse_release_user_pages() for read operations.  It may seem necessary to introduce another fie ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53130,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nilfs2: fix null-ptr-deref in block_dirty_buffer tracepoint  When using the ""block:block_dirty_buffer"" tracepoint\, mark_buffer_dirty() may cause a NULL pointer dereference\, or a general protection fault when KASAN is enabled.  This happens because\, since the tracepoint was added in mark_buffer_dirty()\, it references the dev_t member bh->b_bdev->bd_dev regardless of whether the buffer head has a pointer to a block_device structure.  In the current implementation\, nilfs_grab_buffer()\, which grabs a buffer to read (or create) a block of metadata\, including b-tree node blocks\, does not set the block device\, but instead does so only if the buffer is not in the ""uptodate"" state for each of its caller block reading functions.  However\, if the uptodate flag is set on a folio/page\, and the buffer heads are detached from it by try_to_free_buffers()\, and new buffer heads are then attached by create_empty_buffers()\, the uptodate flag may be restored to each buffer without the block device being set to bh->b_bdev\, and mark_buffer_dirty() may be called later in that state\, resulting in the bug mentioned above.  Fix this issue by making nilfs_grab_buffer() always set the block device of the super block structure to the buffer head\, regardless of the state of the buffer's uptodate flag.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21927,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nvme-tcp: fix potential memory corruption in nvme_tcp_recv_pdu()  nvme_tcp_recv_pdu() doesn't check the validity of the header length. When header digests are enabled\, a target might send a packet with an invalid header length (e.g. 255)\, causing nvme_tcp_verify_hdgst() to access memory outside the allocated area and cause memory corruptions by overwriting it with the calculated digest.  Fix this by rejecting packets with an unexpected header length.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21739,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: core: Fix use-after free in init error and remove paths  devm_blk_crypto_profile_init() registers a cleanup handler to run when the associated (platform-) device is being released. For UFS\, the crypto private data and pointers are stored as part of the ufs_hba's data structure 'struct ufs_hba::crypto_profile'. This structure is allocated as part of the underlying ufshcd and therefore Scsi_host allocation.  During driver release or during error handling in ufshcd_pltfrm_init()\, this structure is released as part of ufshcd_dealloc_host() before the (platform-) device associated with the crypto call above is released. Once this device is released\, the crypto cleanup code will run\, using the just-released 'struct ufs_hba::crypto_profile'. This causes a use-after-free situation:    Call trace:    kfree+0x60/0x2d8 (P)    kvfree+0x44/0x60    blk_crypto_profile_destroy_callback+0x28/0x70    devm_action_release+0x1c/0x30    release_nodes+0x6c/0x108    devres_release_all+0x98/0x100    device_unbind_cleanup+0x20/0x70    really_probe+0x218/0x2d0  In other words\, the initialisation code flow is:    platform-device probe     ufshcd_pltfrm_init()       ufshcd_alloc_host()         scsi_host_alloc()           allocation of struct ufs_hba           creation of scsi-host devices     devm_blk_crypto_profile_init()       devm registration of cleanup handler using platform-device  and during error handling of ufshcd_pltfrm_init() or during driver removal:    ufshcd_dealloc_host()     scsi_host_put()       put_device(scsi-host)         release of struct ufs_hba   put_device(platform-device)     crypto cleanup handler  To fix this use-after free\, change ufshcd_alloc_host() to register a devres action to automatically cleanup the underlying SCSI device on ufshcd destruction\, without requiring explicit calls to ufshcd_dealloc_host(). This way:      * the crypto profile and all other ufs_hba-owned resources are       destroyed before SCSI (as they've been registered after)     * a memleak is plugged in tc-dwc-g210-pci.c remove() as a       side-effect     * EXPORT_SYMBOL_GPL(ufshcd_dealloc_host) can be removed fully as       it's not needed anymore     * no future drivers using ufshcd_alloc_host() could ever forget       adding the cleanup",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21920,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  vlan: enforce underlying device type  Currently\, VLAN devices can be created on top of non-ethernet devices.  Besides the fact that it doesn't make much sense\, this also causes a bug which leaks the address of a kernel function to usermode.  When creating a VLAN device\, we initialize GARP (garp_init_applicant) and MRP (mrp_init_applicant) for the underlying device.  As part of the initialization process\, we add the multicast address of each applicant to the underlying device\, by calling dev_mc_add.  __dev_mc_add uses dev->addr_len to determine the length of the new multicast address.  This causes an out-of-bounds read if dev->addr_len is greater than 6\, since the multicast addresses provided by GARP and MRP are only 6 bytes long.  This behaviour can be reproduced using the following commands:  ip tunnel add gretest mode ip6gre local ::1 remote ::2 dev lo ip l set up dev gretest ip link add link gretest name vlantest type vlan id 100  Then\, the following command will display the address of garp_pdu_rcv:  ip maddr show | grep 01:80:c2:00:00:21  Fix the bug by enforcing the type of the underlying device during VLAN device initialization.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21738,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ata: libata-sff: Ensure that we cannot write outside the allocated buffer  reveliofuzzing reported that a SCSI_IOCTL_SEND_COMMAND ioctl with out_len set to 0xd42\, SCSI command set to ATA_16 PASS-THROUGH\, ATA command set to ATA_NOP\, and protocol set to ATA_PROT_PIO\, can cause ata_pio_sector() to write outside the allocated buffer\, overwriting random memory.  While a ATA device is supposed to abort a ATA_NOP command\, there does seem to be a bug either in libata-sff or QEMU\, where either this status is not set\, or the status is cleared before read by ata_sff_hsm_move(). Anyway\, that is most likely a separate bug.  Looking at __atapi_pio_bytes()\, it already has a safety check to ensure that __atapi_pio_bytes() cannot write outside the allocated buffer.  Add a similar check to ata_pio_sector()\, such that also ata_pio_sector() cannot write outside the allocated buffer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53136,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: revert ""mm: shmem: fix data-race in shmem_getattr()""  Revert d949d1d14fa2 (""mm: shmem: fix data-race in shmem_getattr()"") as suggested by Chuck [1].  It is causing deadlocks when accessing tmpfs over NFS.  As Hugh commented\, ""added just to silence a syzbot sanitizer splat: added where there has never been any practical problem"".",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21922,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ppp: Fix KMSAN uninit-value warning with bpf  Syzbot caught an ""KMSAN: uninit-value"" warning [1]\, which is caused by the ppp driver not initializing a 2-byte header when using socket filter.  The following code can generate a PPP filter BPF program: ''' struct bpf_program fp; pcap_t *handle; handle = pcap_open_dead(DLT_PPP_PPPD\, 65535); pcap_compile(handle\, &fp\, ""ip and outbound""\, 0\, 0); bpf_dump(&fp\, 1); ''' Its output is: ''' (000) ldh [2] (001) jeq #0x21 jt 2 jf 5 (002) ldb [0] (003) jeq #0x1 jt 4 jf 5 (004) ret #65535 (005) ret #0 ''' Wen can find similar code at the following link: https://github.com/ppp-project/ppp/blob/master/pppd/options.c#L1680 The maintainer of this code repository is also the original maintainer of the ppp driver.  As you can see the BPF program skips 2 bytes of data and then reads the 'Protocol' field to determine if it's an IP packet. Then it read the first byte of the first 2 bytes to determine the direction.  The issue is that only the first byte indicating direction is initialized in current ppp driver code while the second byte is not initialized.  For normal BPF programs generated by libpcap\, uninitialized data won't be used\, so it's not a problem. However\, for carefully crafted BPF programs\, such as those generated by syzkaller [2]\, which start reading from offset 0\, the uninitialized data will be used and caught by KMSAN.  [1] https://syzkaller.appspot.com/bug?extid=853242d9c9917165d791 [2] https://syzkaller.appspot.com/text?tag=ReproC&x=11994913980000",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53135,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: VMX: Bury Intel PT virtualization (guest/host mode) behind CONFIG_BROKEN  Hide KVM's pt_mode module param behind CONFIG_BROKEN\, i.e. disable support for virtualizing Intel PT via guest/host mode unless BROKEN=y.  There are myriad bugs in the implementation\, some of which are fatal to the guest\, and others which put the stability and health of the host at risk.  For guest fatalities\, the most glaring issue is that KVM fails to ensure tracing is disabled\, and *stays* disabled prior to VM-Enter\, which is necessary as hardware disallows loading (the guest's) RTIT_CTL if tracing is enabled (enforced via a VMX consistency check).  Per the SDM:    If the logical processor is operating with Intel PT enabled (if   IA32_RTIT_CTL.TraceEn = 1) at the time of VM entry\, the ""load   IA32_RTIT_CTL"" VM-entry control must be 0.  On the host side\, KVM doesn't validate the guest CPUID configuration provided by userspace\, and even worse\, uses the guest configuration to decide what MSRs to save/load at VM-Enter and VM-Exit.  E.g. configuring guest CPUID to enumerate more address ranges than are supported in hardware will result in KVM trying to passthrough\, save\, and load non-existent MSRs\, which generates a variety of WARNs\, ToPA ERRORs in the host\, a potential deadlock\, etc.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53134,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  pmdomain: imx93-blk-ctrl: correct remove path  The check condition should be 'i < bc->onecell_data.num_domains'\, not 'bc->onecell_data.num_domains' which will make the look never finish and cause kernel panic.  Also disable runtime to address ""imx93-blk-ctrl 4ac10000.system-controller: Unbalanced pm_runtime_enable!""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-39329,libopenjp2-7,MEDIUM,2.5.0-2+deb12u1,N/A,"A flaw was found in OpenJPEG. A resource exhaustion can occur in the opj_t1_decode_cblks function in tcd.c through a crafted image file\, causing a denial of service.",|tykio/midsommar|
CVE-2023-39328,libopenjp2-7,MEDIUM,2.5.0-2+deb12u1,N/A,"A vulnerability was found in OpenJPEG similar to CVE-2019-6988. This flaw allows an attacker to bypass existing protections and cause an application crash through a maliciously crafted file.",|tykio/midsommar|
CVE-2024-46825,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: use IWL_FW_CHECK for link ID check  The lookup function iwl_mvm_rcu_fw_link_id_to_link_conf() is normally called with input from the firmware\, so it should use IWL_FW_CHECK() instead of WARN_ON().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-39508,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring/io-wq: Use set_bit() and test_bit() at worker->flags  Utilize set_bit() and test_bit() on worker->flags within io_uring/io-wq to address potential data races.  The structure io_worker->flags may be accessed through various data paths\, leading to concurrency issues. When KCSAN is enabled\, it reveals data races occurring in io_worker_handle_work and io_wq_activate_free_worker functions.  \t BUG: KCSAN: data-race in io_worker_handle_work / io_wq_activate_free_worker \t write to 0xffff8885c4246404 of 4 bytes by task 49071 on cpu 28: \t io_worker_handle_work (io_uring/io-wq.c:434 io_uring/io-wq.c:569) \t io_wq_worker (io_uring/io-wq.c:?) <snip>  \t read to 0xffff8885c4246404 of 4 bytes by task 49024 on cpu 5: \t io_wq_activate_free_worker (io_uring/io-wq.c:? io_uring/io-wq.c:285) \t io_wq_enqueue (io_uring/io-wq.c:947) \t io_queue_iowq (io_uring/io_uring.c:524) \t io_req_task_submit (io_uring/io_uring.c:1511) \t io_handle_tw_list (io_uring/io_uring.c:1198) <snip>  Line numbers against commit 18daea77cca6 (""Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm"").  These races involve writes and reads to the same memory location by different tasks running on different CPUs. To mitigate this\, refactor the code to use atomic operations such as set_bit()\, test_bit()\, and clear_bit() instead of basic ""and"" and ""or"" operations. This ensures thread-safe manipulation of worker flags.  Also\, move `create_index` to avoid holes in the structure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-52559,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/msm/gem: prevent integer overflow in msm_ioctl_gem_submit()  The ""submit->cmd[i].size"" and ""submit->cmd[i].offset"" variables are u32 values that come from the user via the submit_lookup_cmds() function. This addition could lead to an integer wrapping bug so use size_add() to prevent that.  Patchwork: https://patchwork.freedesktop.org/patch/624696/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46823,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  kunit/overflow: Fix UB in overflow_allocation_test  The 'device_name' array doesn't exist out of the 'overflow_allocation_test' function scope. However\, it is being used as a driver name when calling 'kunit_driver_create' from 'kunit_device_register'. It produces the kernel panic with KASAN enabled.  Since this variable is used in one place only\, remove it and pass the device name into kunit_device_register directly as an ascii string.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-6461,libcairo2,LOW,1.16.0-7,N/A,"An issue was discovered in cairo 1.16.0. There is an assertion problem in the function _cairo_arc_in_direction in the file cairo-arc.c.",|tykio/midsommar|
CVE-2018-20796,libc-bin,LOW,2.36-9+deb12u10,N/A,"In the GNU C Library (aka glibc or libc6) through 2.29\, check_dst_limits_calc_pos_1 in posix/regexec.c has Uncontrolled Recursion\, as demonstrated by '(\\227|)(\\\\1\\\\1|t1|\\\\\\2537)+' in grep.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-6462,libcairo2,LOW,1.16.0-7,N/A,"An issue was discovered in cairo 1.16.0. There is an infinite loop in the function _arc_error_normalized in the file cairo-arc.c\, related to _arc_max_angle_for_tolerance_normalized.",|tykio/midsommar|
CVE-2024-57857,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/siw: Remove direct link to net_device  Do not manage a per device direct link to net_device. Rely on associated ib_devices net_device management\, not doubling the effort locally. A badly managed local link to net_device was causing a 'KASAN: slab-use-after-free' exception during siw_query_port() call.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57850,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  jffs2: Prevent rtime decompress memory corruption  The rtime decompression routine does not fully check bounds during the entirety of the decompression pass and can corrupt memory outside the decompression buffer if the compressed data is corrupted. This adds the required check to prevent this failure mode.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57852,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  firmware: qcom: scm: smc: Handle missing SCM device  Commit ca61d6836e6f (""firmware: qcom: scm: fix a NULL-pointer dereference"") makes it explicit that qcom_scm_get_tzmem_pool() can return NULL\, therefore its users should handle this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-39327,libopenjp2-7,MEDIUM,2.5.0-2+deb12u1,N/A,"A flaw was found in OpenJPEG. Maliciously constructed pictures can cause the program to enter a large loop and continuously print warning messages on the terminal.",|tykio/midsommar|
CVE-2024-26822,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: set correct id\, uid and cruid for multiuser automounts  When uid\, gid and cruid are not specified\, we need to dynamically set them into the filesystem context used for automounting otherwise they'll end up reusing the values from the parent mount.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-20846,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"Out-of-bounds accesses in the functions pi_next_lrcp\, pi_next_rlcp\, pi_next_rpcl\, pi_next_pcrl\, pi_next_rpcl\, and pi_next_cprl in openmj2/pi.c in OpenJPEG through 2.3.0 allow remote attackers to cause a denial of service (application crash).",|tykio/midsommar|
CVE-2024-26783,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/vmscan: fix a bug calling wakeup_kswapd() with a wrong zone index  With numa balancing on\, when a numa system is running where a numa node doesn't have its local memory so it has no managed zones\, the following oops has been observed.  It's because wakeup_kswapd() is called with a wrong zone index\, -1.  Fixed it by checking the index before calling wakeup_kswapd().  > BUG: unable to handle page fault for address: 00000000000033f3 > #PF: supervisor read access in kernel mode > #PF: error_code(0x0000) - not-present page > PGD 0 P4D 0 > Oops: 0000 [#1] PREEMPT SMP NOPTI > CPU: 2 PID: 895 Comm: masim Not tainted 6.6.0-dirty #255 > Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS >    rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014 > RIP: 0010:wakeup_kswapd (./linux/mm/vmscan.c:7812) > Code: (omitted) > RSP: 0000:ffffc90004257d58 EFLAGS: 00010286 > RAX: ffffffffffffffff RBX: ffff88883fff0480 RCX: 0000000000000003 > RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88883fff0480 > RBP: ffffffffffffffff R08: ff0003ffffffffff R09: ffffffffffffffff > R10: ffff888106c95540 R11: 0000000055555554 R12: 0000000000000003 > R13: 0000000000000000 R14: 0000000000000000 R15: ffff88883fff0940 > FS:  00007fc4b8124740(0000) GS:ffff888827c00000(0000) knlGS:0000000000000000 > CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 > CR2: 00000000000033f3 CR3: 000000026cc08004 CR4: 0000000000770ee0 > DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 > DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 > PKRU: 55555554 > Call Trace: >  <TASK> > ? __die > ? page_fault_oops > ? __pte_offset_map_lock > ? exc_page_fault > ? asm_exc_page_fault > ? wakeup_kswapd > migrate_misplaced_page > __handle_mm_fault > handle_mm_fault > do_user_addr_fault > exc_page_fault > asm_exc_page_fault > RIP: 0033:0x55b897ba0808 > Code: (omitted) > RSP: 002b:00007ffeefa821a0 EFLAGS: 00010287 > RAX: 000055b89983acd0 RBX: 00007ffeefa823f8 RCX: 000055b89983acd0 > RDX: 00007fc2f8122010 RSI: 0000000000020000 RDI: 000055b89983acd0 > RBP: 00007ffeefa821a0 R08: 0000000000000037 R09: 0000000000000075 > R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000000 > R13: 00007ffeefa82410 R14: 000055b897ba5dd8 R15: 00007fc4b8340000 >  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52761,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  riscv: VMAP_STACK overflow detection thread-safe  commit 31da94c25aea (""riscv: add VMAP_STACK overflow detection"") added support for CONFIG_VMAP_STACK. If overflow is detected\, CPU switches to `shadow_stack` temporarily before switching finally to per-cpu `overflow_stack`.  If two CPUs/harts are racing and end up in over flowing kernel stack\, one or both will end up corrupting each other state because `shadow_stack` is not per-cpu. This patch optimizes per-cpu overflow stack switch by directly picking per-cpu `overflow_stack` and gets rid of `shadow_stack`.  Following are the changes in this patch   - Defines an asm macro to obtain per-cpu symbols in destination    register.  - In entry.S\, when overflow is detected\, per-cpu overflow stack is    located using per-cpu asm macro. Computing per-cpu symbol requires    a temporary register. x31 is saved away into CSR_SCRATCH    (CSR_SCRATCH is anyways zero since we're in kernel).  Please see Links for additional relevant disccussion and alternative solution.  Tested by `echo EXHAUST_STACK > /sys/kernel/debug/provoke-crash/DIRECT` Kernel crash log below   Insufficient stack space to handle exception!/debug/provoke-crash/DIRECT  Task stack:     [0xff20000010a98000..0xff20000010a9c000]  Overflow stack: [0xff600001f7d98370..0xff600001f7d99370]  CPU: 1 PID: 205 Comm: bash Not tainted 6.1.0-rc2-00001-g328a1f96f7b9 #34  Hardware name: riscv-virtio\,qemu (DT)  epc : __memset+0x60/0xfc   ra : recursive_loop+0x48/0xc6 [lkdtm]  epc : ffffffff808de0e4 ra : ffffffff0163a752 sp : ff20000010a97e80   gp : ffffffff815c0330 tp : ff600000820ea280 t0 : ff20000010a97e88   t1 : 000000000000002e t2 : 3233206874706564 s0 : ff20000010a982b0   s1 : 0000000000000012 a0 : ff20000010a97e88 a1 : 0000000000000000   a2 : 0000000000000400 a3 : ff20000010a98288 a4 : 0000000000000000   a5 : 0000000000000000 a6 : fffffffffffe43f0 a7 : 00007fffffffffff   s2 : ff20000010a97e88 s3 : ffffffff01644680 s4 : ff20000010a9be90   s5 : ff600000842ba6c0 s6 : 00aaaaaac29e42b0 s7 : 00fffffff0aa3684   s8 : 00aaaaaac2978040 s9 : 0000000000000065 s10: 00ffffff8a7cad10   s11: 00ffffff8a76a4e0 t3 : ffffffff815dbaf4 t4 : ffffffff815dbaf4   t5 : ffffffff815dbab8 t6 : ff20000010a9bb48  status: 0000000200000120 badaddr: ff20000010a97e88 cause: 000000000000000f  Kernel panic - not syncing: Kernel stack overflow  CPU: 1 PID: 205 Comm: bash Not tainted 6.1.0-rc2-00001-g328a1f96f7b9 #34  Hardware name: riscv-virtio\,qemu (DT)  Call Trace:  [<ffffffff80006754>] dump_backtrace+0x30/0x38  [<ffffffff808de798>] show_stack+0x40/0x4c  [<ffffffff808ea2a8>] dump_stack_lvl+0x44/0x5c  [<ffffffff808ea2d8>] dump_stack+0x18/0x20  [<ffffffff808dec06>] panic+0x126/0x2fe  [<ffffffff800065ea>] walk_stackframe+0x0/0xf0  [<ffffffff0163a752>] recursive_loop+0x48/0xc6 [lkdtm]  SMP: stopping secondary CPUs  ---[ end Kernel panic - not syncing: Kernel stack overflow ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56633,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  tcp_bpf: Fix the sk_mem_uncharge logic in tcp_bpf_sendmsg  The current sk memory accounting logic in __SK_REDIRECT is pre-uncharging tosend bytes\, which is either msg->sg.size or a smaller value apply_bytes.  Potential problems with this strategy are as follows:  - If the actual sent bytes are smaller than tosend\, we need to charge some   bytes back\, as in line 487\, which is okay but seems not clean.  - When tosend is set to apply_bytes\, as in line 417\, and (ret < 0)\, we may   miss uncharging (msg->sg.size - apply_bytes) bytes.  [...] 415 tosend = msg->sg.size; 416 if (psock->apply_bytes && psock->apply_bytes < tosend) 417   tosend = psock->apply_bytes; [...] 443 sk_msg_return(sk\, msg\, tosend); 444 release_sock(sk); 446 origsize = msg->sg.size; 447 ret = tcp_bpf_sendmsg_redir(sk_redir\, redir_ingress\, 448                             msg\, tosend\, flags); 449 sent = origsize - msg->sg.size; [...] 454 lock_sock(sk); 455 if (unlikely(ret < 0)) { 456   int free = sk_msg_free_nocharge(sk\, msg); 458   if (!cork) 459     *copied -= free; 460 } [...] 487 if (eval == __SK_REDIRECT) 488   sk_mem_charge(sk\, tosend - sent); [...]  When running the selftest test_txmsg_redir_wait_sndmem with txmsg_apply\, the following warning will be reported:  ------------[ cut here ]------------ WARNING: CPU: 6 PID: 57 at net/ipv4/af_inet.c:156 inet_sock_destruct+0x190/0x1a0 Modules linked in: CPU: 6 UID: 0 PID: 57 Comm: kworker/6:0 Not tainted 6.12.0-rc1.bm.1-amd64+ #43 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.12.0-1 04/01/2014 Workqueue: events sk_psock_destroy RIP: 0010:inet_sock_destruct+0x190/0x1a0 RSP: 0018:ffffad0a8021fe08 EFLAGS: 00010206 RAX: 0000000000000011 RBX: ffff9aab4475b900 RCX: ffff9aab481a0800 RDX: 0000000000000303 RSI: 0000000000000011 RDI: ffff9aab4475b900 RBP: ffff9aab4475b990 R08: 0000000000000000 R09: ffff9aab40050ec0 R10: 0000000000000000 R11: ffff9aae6fdb1d01 R12: ffff9aab49c60400 R13: ffff9aab49c60598 R14: ffff9aab49c60598 R15: dead000000000100 FS:  0000000000000000(0000) GS:ffff9aae6fd80000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007ffec7e47bd8 CR3: 00000001a1a1c004 CR4: 0000000000770ef0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 PKRU: 55555554 Call Trace: <TASK> ? __warn+0x89/0x130 ? inet_sock_destruct+0x190/0x1a0 ? report_bug+0xfc/0x1e0 ? handle_bug+0x5c/0xa0 ? exc_invalid_op+0x17/0x70 ? asm_exc_invalid_op+0x1a/0x20 ? inet_sock_destruct+0x190/0x1a0 __sk_destruct+0x25/0x220 sk_psock_destroy+0x2b2/0x310 process_scheduled_works+0xa3/0x3e0 worker_thread+0x117/0x240 ? __pfx_worker_thread+0x10/0x10 kthread+0xcf/0x100 ? __pfx_kthread+0x10/0x10 ret_from_fork+0x31/0x40 ? __pfx_kthread+0x10/0x10 ret_from_fork_asm+0x1a/0x30 </TASK> ---[ end trace 0000000000000000 ]---  In __SK_REDIRECT\, a more concise way is delaying the uncharging after sent bytes are finalized\, and uncharge this value. When (ret < 0)\, we shall invoke sk_msg_free.  Same thing happens in case __SK_DROP\, when tosend is set to apply_bytes\, we may miss uncharging (msg->sg.size - apply_bytes) bytes. The same warning will be reported in selftest.  [...] 468 case __SK_DROP: 469 default: 470 sk_msg_free_partial(sk\, msg\, tosend); 471 sk_msg_apply_bytes(psock\, tosend); 472 *copied -= (tosend + delta); 473 return -EACCES; [...]  So instead of sk_msg_free_partial we can do sk_msg_free here.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49901,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/msm/adreno: Assign msm_gpu->pdev earlier to avoid nullptrs  There are some cases\, such as the one uncovered by Commit 46d4efcccc68 (""drm/msm/a6xx: Avoid a nullptr dereference when speedbin setting fails"") where  msm_gpu_cleanup() : platform_set_drvdata(gpu->pdev\, NULL);  is called on gpu->pdev == NULL\, as the GPU device has not been fully initialized yet.  Turns out that there's more than just the aforementioned path that causes this to happen (e.g. the case when there's speedbin data in the catalog\, but opp-supported-hw is missing in DT).  Assigning msm_gpu->pdev earlier seems like the least painful solution to this\, therefore do so.  Patchwork: https://patchwork.freedesktop.org/patch/602742/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2007-5686,login,LOW,1:4.13+dfsg1-1+b1,N/A,"initscripts in rPath Linux 1 sets insecure permissions for the /var/log/btmp file\, which allows local users to obtain sensitive information regarding authentication attempts.  NOTE: because sshd detects the insecure permissions and does not log certain events\, this also prevents sshd from logging failed authentication attempts by remote attackers.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57889,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  pinctrl: mcp23s08: Fix sleeping in atomic context due to regmap locking  If a device uses MCP23xxx IO expander to receive IRQs\, the following bug can happen:    BUG: sleeping function called from invalid context     at kernel/locking/mutex.c:283   in_atomic(): 1\, irqs_disabled(): 1\, non_block: 0\, ...   preempt_count: 1\, expected: 0   ...   Call Trace:   ...   __might_resched+0x104/0x10e   __might_sleep+0x3e/0x62   mutex_lock+0x20/0x4c   regmap_lock_mutex+0x10/0x18   regmap_update_bits_base+0x2c/0x66   mcp23s08_irq_set_type+0x1ae/0x1d6   __irq_set_trigger+0x56/0x172   __setup_irq+0x1e6/0x646   request_threaded_irq+0xb6/0x160   ...  We observed the problem while experimenting with a touchscreen driver which used MCP23017 IO expander (I2C).  The regmap in the pinctrl-mcp23s08 driver uses a mutex for protection from concurrent accesses\, which is the default for regmaps without .fast_io\, .disable_locking\, etc.  mcp23s08_irq_set_type() calls regmap_update_bits_base()\, and the latter locks the mutex.  However\, __setup_irq() locks desc->lock spinlock before calling these functions. As a result\, the system tries to lock the mutex whole holding the spinlock.  It seems\, the internal regmap locks are not needed in this driver at all. mcp->lock seems to protect the regmap from concurrent accesses already\, except\, probably\, in mcp_pinconf_get/set.  mcp23s08_irq_set_type() and mcp23s08_irq_mask/unmask() are called under chip_bus_lock()\, which calls mcp23s08_irq_bus_lock(). The latter takes mcp->lock and enables regmap caching\, so that the potentially slow I2C accesses are deferred until chip_bus_unlock().  The accesses to the regmap from mcp23s08_probe_one() do not need additional locking.  In all remaining places where the regmap is accessed\, except mcp_pinconf_get/set()\, the driver already takes mcp->lock.  This patch adds locking in mcp_pinconf_get/set() and disables internal locking in the regmap config. Among other things\, it fixes the sleeping in atomic context described above.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56631,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: sg: Fix slab-use-after-free read in sg_release()  Fix a use-after-free bug in sg_release()\, detected by syzbot with KASAN:  BUG: KASAN: slab-use-after-free in lock_release+0x151/0xa30 kernel/locking/lockdep.c:5838 __mutex_unlock_slowpath+0xe2/0x750 kernel/locking/mutex.c:912 sg_release+0x1f4/0x2e0 drivers/scsi/sg.c:407  In sg_release()\, the function kref_put(&sfp->f_ref\, sg_remove_sfp) is called before releasing the open_rel_lock mutex. The kref_put() call may decrement the reference count of sfp to zero\, triggering its cleanup through sg_remove_sfp(). This cleanup includes scheduling deferred work via sg_remove_sfp_usercontext()\, which ultimately frees sfp.  After kref_put()\, sg_release() continues to unlock open_rel_lock and may reference sfp or sdp. If sfp has already been freed\, this results in a slab-use-after-free error.  Move the kref_put(&sfp->f_ref\, sg_remove_sfp) call after unlocking the open_rel_lock mutex. This ensures:   - No references to sfp or sdp occur after the reference count is    decremented.   - Cleanup functions such as sg_remove_sfp() and    sg_remove_sfp_usercontext() can safely execute without impacting the    mutex handling in sg_release().  The fix has been tested and validated by syzbot. This patch closes the bug reported at the following syzkaller link and ensures proper sequencing of resource cleanup and mutex operations\, eliminating the risk of use-after-free errors in sg_release().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57888,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  workqueue: Do not warn when cancelling WQ_MEM_RECLAIM work from !WQ_MEM_RECLAIM worker  After commit 746ae46c1113 (""drm/sched: Mark scheduler work queues with WQ_MEM_RECLAIM"") amdgpu started seeing the following warning:   [ ] workqueue: WQ_MEM_RECLAIM sdma0:drm_sched_run_job_work [gpu_sched] is flushing !WQ_MEM_RECLAIM events:amdgpu_device_delay_enable_gfx_off [amdgpu] ...  [ ] Workqueue: sdma0 drm_sched_run_job_work [gpu_sched] ...  [ ] Call Trace:  [ ]  <TASK> ...  [ ]  ? check_flush_dependency+0xf5/0x110 ...  [ ]  cancel_delayed_work_sync+0x6e/0x80  [ ]  amdgpu_gfx_off_ctrl+0xab/0x140 [amdgpu]  [ ]  amdgpu_ring_alloc+0x40/0x50 [amdgpu]  [ ]  amdgpu_ib_schedule+0xf4/0x810 [amdgpu]  [ ]  ? drm_sched_run_job_work+0x22c/0x430 [gpu_sched]  [ ]  amdgpu_job_run+0xaa/0x1f0 [amdgpu]  [ ]  drm_sched_run_job_work+0x257/0x430 [gpu_sched]  [ ]  process_one_work+0x217/0x720 ...  [ ]  </TASK>  The intent of the verifcation done in check_flush_depedency is to ensure forward progress during memory reclaim\, by flagging cases when either a memory reclaim process\, or a memory reclaim work item is flushed from a context not marked as memory reclaim safe.  This is correct when flushing\, but when called from the cancel(_delayed)_work_sync() paths it is a false positive because work is either already running\, or will not be running at all. Therefore cancelling it is safe and we can relax the warning criteria by letting the helper know of the calling context.  References: 746ae46c1113 (""drm/sched: Mark scheduler work queues with WQ_MEM_RECLAIM"")",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56630,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: free inode when ocfs2_get_init_inode() fails  syzbot is reporting busy inodes after unmount\, for commit 9c89fe0af826 (""ocfs2: Handle error from dquot_initialize()"") forgot to call iput() when new_inode() succeeded and dquot_initialize() failed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44949,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  parisc: fix a possible DMA corruption  ARCH_DMA_MINALIGN was defined as 16 - this is too small - it may be possible that two unrelated 16-byte allocations share a cache line. If one of these allocations is written using DMA and the other is written using cached write\, the value that was written with DMA may be corrupted.  This commit changes ARCH_DMA_MINALIGN to be 128 on PA20 and 32 on PA1.1 - that's the largest possible cache line size.  As different parisc microarchitectures have different cache line size\, we define arch_slab_minalign()\, cache_line_size() and dma_get_cache_alignment() so that the kernel may tune slab cache parameters dynamically\, based on the detected cache line size.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-4214,libpng16-16,LOW,1.6.39-2,N/A,"A heap overflow flaw was found in libpngs' pngimage.c program. This flaw allows an attacker with local network access to pass a specially crafted PNG file to the pngimage utility\, causing an application to crash\, leading to a denial of service.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56637,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: ipset: Hold module reference while requesting a module  User space may unload ip_set.ko while it is itself requesting a set type backend module\, leading to a kernel crash. The race condition may be provoked by inserting an mdelay() right after the nfnl_unlock() call.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35869,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: guarantee refcounted children from parent session  Avoid potential use-after-free bugs when walking DFS referrals\, mounting and performing DFS failover by ensuring that all children from parent @tcon->ses are also refcounted.  They're all needed across the entire DFS mount.  Get rid of @tcon->dfs_ses_list while we're at it\, too.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56636,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  geneve: do not assume mac header is set in geneve_xmit_skb()  We should not assume mac header is set in output path.  Use skb_eth_hdr() instead of eth_hdr() to fix the issue.  sysbot reported the following :   WARNING: CPU: 0 PID: 11635 at include/linux/skbuff.h:3052 skb_mac_header include/linux/skbuff.h:3052 [inline]  WARNING: CPU: 0 PID: 11635 at include/linux/skbuff.h:3052 eth_hdr include/linux/if_ether.h:24 [inline]  WARNING: CPU: 0 PID: 11635 at include/linux/skbuff.h:3052 geneve_xmit_skb drivers/net/geneve.c:898 [inline]  WARNING: CPU: 0 PID: 11635 at include/linux/skbuff.h:3052 geneve_xmit+0x4c38/0x5730 drivers/net/geneve.c:1039 Modules linked in: CPU: 0 UID: 0 PID: 11635 Comm: syz.4.1423 Not tainted 6.12.0-syzkaller-10296-gaaf20f870da0 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024  RIP: 0010:skb_mac_header include/linux/skbuff.h:3052 [inline]  RIP: 0010:eth_hdr include/linux/if_ether.h:24 [inline]  RIP: 0010:geneve_xmit_skb drivers/net/geneve.c:898 [inline]  RIP: 0010:geneve_xmit+0x4c38/0x5730 drivers/net/geneve.c:1039 Code: 21 c6 02 e9 35 d4 ff ff e8 a5 48 4c fb 90 0f 0b 90 e9 fd f5 ff ff e8 97 48 4c fb 90 0f 0b 90 e9 d8 f5 ff ff e8 89 48 4c fb 90 <0f> 0b 90 e9 41 e4 ff ff e8 7b 48 4c fb 90 0f 0b 90 e9 cd e7 ff ff RSP: 0018:ffffc90003b2f870 EFLAGS: 00010283 RAX: 000000000000037a RBX: 000000000000ffff RCX: ffffc9000dc3d000 RDX: 0000000000080000 RSI: ffffffff86428417 RDI: 0000000000000003 RBP: ffffc90003b2f9f0 R08: 0000000000000003 R09: 000000000000ffff R10: 000000000000ffff R11: 0000000000000002 R12: ffff88806603c000 R13: 0000000000000000 R14: ffff8880685b2780 R15: 0000000000000e23 FS:  00007fdc2deed6c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000001b30a1dff8 CR3: 0000000056b8c000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   __netdev_start_xmit include/linux/netdevice.h:5002 [inline]   netdev_start_xmit include/linux/netdevice.h:5011 [inline]   __dev_direct_xmit+0x58a/0x720 net/core/dev.c:4490   dev_direct_xmit include/linux/netdevice.h:3181 [inline]   packet_xmit+0x1e4/0x360 net/packet/af_packet.c:285   packet_snd net/packet/af_packet.c:3146 [inline]   packet_sendmsg+0x2700/0x5660 net/packet/af_packet.c:3178   sock_sendmsg_nosec net/socket.c:711 [inline]   __sock_sendmsg net/socket.c:726 [inline]   __sys_sendto+0x488/0x4f0 net/socket.c:2197   __do_sys_sendto net/socket.c:2204 [inline]   __se_sys_sendto net/socket.c:2200 [inline]   __x64_sys_sendto+0xe0/0x1c0 net/socket.c:2200   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-0564,linux-libc-dev,LOW,6.1.115-1,N/A,"A flaw was found in the Linux kernel's memory deduplication mechanism. The max page sharing of Kernel Samepage Merging (KSM)\, added in Linux kernel version 4.4.0-96.119\, can create a side channel. When the attacker and the victim share the same host and the default setting of KSM is ""max page sharing=256""\, it is possible for the attacker to time the unmap to merge with the victim's page. The unmapping time depends on whether it merges with the victim's page and additional physical pages are created beyond the KSM's ""max page share"". Through these operations\, the attacker can leak the victim's page.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56558,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: make sure exp active before svc_export_show  The function `e_show` was called with protection from RCU. This only ensures that `exp` will not be freed. Therefore\, the reference count for `exp` can drop to zero\, which will trigger a refcount use-after-free warning when `exp_get` is called. To resolve this issue\, use `cache_get_rcu` to ensure that `exp` remains active.  ------------[ cut here ]------------ refcount_t: addition on 0; use-after-free. WARNING: CPU: 3 PID: 819 at lib/refcount.c:25 refcount_warn_saturate+0xb1/0x120 CPU: 3 UID: 0 PID: 819 Comm: cat Not tainted 6.12.0-rc3+ #1 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.1-2.fc37 04/01/2014 RIP: 0010:refcount_warn_saturate+0xb1/0x120 ... Call Trace:  <TASK>  e_show+0x20b/0x230 [nfsd]  seq_read_iter+0x589/0x770  seq_read+0x1e5/0x270  vfs_read+0x125/0x530  ksys_read+0xc1/0x160  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56634,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  gpio: grgpio: Add NULL check in grgpio_probe  devm_kasprintf() can return a NULL pointer on failure\,but this returned value in grgpio_probe is not checked. Add NULL check in grgpio_probe\, to handle kernel NULL pointer dereference error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49906,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check null pointer before try to access it  [why & how] Change the order of the pipe_ctx->plane_state check to ensure that plane_state is not null before accessing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57883,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm: hugetlb: independent PMD page table shared count  The folio refcount may be increased unexpectly through try_get_folio() by caller such as split_huge_pages.  In huge_pmd_unshare()\, we use refcount to check whether a pmd page table is shared.  The check is incorrect if the refcount is increased by the above caller\, and this can cause the page table leaked:   BUG: Bad page state in process sh  pfn:109324  page: refcount:0 mapcount:0 mapping:0000000000000000 index:0x66 pfn:0x109324  flags: 0x17ffff800000000(node=0|zone=2|lastcpupid=0xfffff)  page_type: f2(table)  raw: 017ffff800000000 0000000000000000 0000000000000000 0000000000000000  raw: 0000000000000066 0000000000000000 00000000f2000000 0000000000000000  page dumped because: nonzero mapcount  ...  CPU: 31 UID: 0 PID: 7515 Comm: sh Kdump: loaded Tainted: G    B              6.13.0-rc2master+ #7  Tainted: [B]=BAD_PAGE  Hardware name: QEMU KVM Virtual Machine\, BIOS 0.0.0 02/06/2015  Call trace:   show_stack+0x20/0x38 (C)   dump_stack_lvl+0x80/0xf8   dump_stack+0x18/0x28   bad_page+0x8c/0x130   free_page_is_bad_report+0xa4/0xb0   free_unref_page+0x3cc/0x620   __folio_put+0xf4/0x158   split_huge_pages_all+0x1e0/0x3e8   split_huge_pages_write+0x25c/0x2d8   full_proxy_write+0x64/0xd8   vfs_write+0xcc/0x280   ksys_write+0x70/0x110   __arm64_sys_write+0x24/0x38   invoke_syscall+0x50/0x120   el0_svc_common.constprop.0+0xc8/0xf0   do_el0_svc+0x24/0x38   el0_svc+0x34/0x128   el0t_64_sync_handler+0xc8/0xd0   el0t_64_sync+0x190/0x198  The issue may be triggered by damon\, offline_page\, page_idle\, etc\, which will increase the refcount of page table.  1. The page table itself will be discarded after reporting the    ""nonzero mapcount"".  2. The HugeTLB page mapped by the page table miss freeing since we    treat the page table as shared and a shared page table will not be    unmapped.  Fix it by introducing independent PMD page table shared count.  As described by comment\, pt_index/pt_mm/pt_frag_refcount are used for s390 gmap\, x86 pgds and powerpc\, pt_share_count is used for x86/arm64/riscv pmds\, so we can reuse the field as pt_share_count.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49909,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL check for function pointer in dcn32_set_output_transfer_func  This commit adds a null check for the set_output_gamma function pointer in the dcn32_set_output_transfer_func function. Previously\, set_output_gamma was being checked for null\, but then it was being dereferenced without any null check. This could lead to a null pointer dereference if set_output_gamma is null.  To fix this\, we now ensure that set_output_gamma is not null before dereferencing it. We do this by adding a null check for set_output_gamma before the call to set_output_gamma.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50051,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  spi: mpc52xx: Add cancel_work_sync before module remove  If we remove the module which will call mpc52xx_spi_remove it will free 'ms' through spi_unregister_controller. while the work ms->work will be used. The sequence of operations that may lead to a UAF bug.  Fix it by ensuring that the work is canceled before proceeding with the cleanup in mpc52xx_spi_remove.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44942,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to do sanity check on F2FS_INLINE_DATA flag in inode during GC  syzbot reports a f2fs bug as below:  ------------[ cut here ]------------ kernel BUG at fs/f2fs/inline.c:258! CPU: 1 PID: 34 Comm: kworker/u8:2 Not tainted 6.9.0-rc6-syzkaller-00012-g9e4bc4bcae01 #0 RIP: 0010:f2fs_write_inline_data+0x781/0x790 fs/f2fs/inline.c:258 Call Trace:  f2fs_write_single_data_page+0xb65/0x1d60 fs/f2fs/data.c:2834  f2fs_write_cache_pages fs/f2fs/data.c:3133 [inline]  __f2fs_write_data_pages fs/f2fs/data.c:3288 [inline]  f2fs_write_data_pages+0x1efe/0x3a90 fs/f2fs/data.c:3315  do_writepages+0x35b/0x870 mm/page-writeback.c:2612  __writeback_single_inode+0x165/0x10b0 fs/fs-writeback.c:1650  writeback_sb_inodes+0x905/0x1260 fs/fs-writeback.c:1941  wb_writeback+0x457/0xce0 fs/fs-writeback.c:2117  wb_do_writeback fs/fs-writeback.c:2264 [inline]  wb_workfn+0x410/0x1090 fs/fs-writeback.c:2304  process_one_work kernel/workqueue.c:3254 [inline]  process_scheduled_works+0xa12/0x17c0 kernel/workqueue.c:3335  worker_thread+0x86d/0xd70 kernel/workqueue.c:3416  kthread+0x2f2/0x390 kernel/kthread.c:388  ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  The root cause is: inline_data inode can be fuzzed\, so that there may be valid blkaddr in its direct node\, once f2fs triggers background GC to migrate the block\, it will hit f2fs_bug_on() during dirty page writeback.  Let's add sanity check on F2FS_INLINE_DATA flag in inode during GC\, so that\, it can forbid migrating inline_data inode's data block for fixing.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57882,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: fix TCP options overflow.  Syzbot reported the following splat:  Oops: general protection fault\, probably for non-canonical address 0xdffffc0000000001: 0000 [#1] PREEMPT SMP KASAN PTI KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f] CPU: 1 UID: 0 PID: 5836 Comm: sshd Not tainted 6.13.0-rc3-syzkaller #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 11/25/2024 RIP: 0010:_compound_head include/linux/page-flags.h:242 [inline] RIP: 0010:put_page+0x23/0x260 include/linux/mm.h:1552 Code: 90 90 90 90 90 90 90 55 41 57 41 56 53 49 89 fe 48 bd 00 00 00 00 00 fc ff df e8 f8 5e 12 f8 49 8d 5e 08 48 89 d8 48 c1 e8 03 <80> 3c 28 00 74 08 48 89 df e8 8f c7 78 f8 48 8b 1b 48 89 de 48 83 RSP: 0000:ffffc90003916c90 EFLAGS: 00010202 RAX: 0000000000000001 RBX: 0000000000000008 RCX: ffff888030458000 RDX: 0000000000000100 RSI: 0000000000000000 RDI: 0000000000000000 RBP: dffffc0000000000 R08: ffffffff898ca81d R09: 1ffff110054414ac R10: dffffc0000000000 R11: ffffed10054414ad R12: 0000000000000007 R13: ffff88802a20a542 R14: 0000000000000000 R15: 0000000000000000 FS:  00007f34f496e800(0000) GS:ffff8880b8700000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f9d6ec9ec28 CR3: 000000004d260000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  skb_page_unref include/linux/skbuff_ref.h:43 [inline]  __skb_frag_unref include/linux/skbuff_ref.h:56 [inline]  skb_release_data+0x483/0x8a0 net/core/skbuff.c:1119  skb_release_all net/core/skbuff.c:1190 [inline]  __kfree_skb+0x55/0x70 net/core/skbuff.c:1204  tcp_clean_rtx_queue net/ipv4/tcp_input.c:3436 [inline]  tcp_ack+0x2442/0x6bc0 net/ipv4/tcp_input.c:4032  tcp_rcv_state_process+0x8eb/0x44e0 net/ipv4/tcp_input.c:6805  tcp_v4_do_rcv+0x77d/0xc70 net/ipv4/tcp_ipv4.c:1939  tcp_v4_rcv+0x2dc0/0x37f0 net/ipv4/tcp_ipv4.c:2351  ip_protocol_deliver_rcu+0x22e/0x440 net/ipv4/ip_input.c:205  ip_local_deliver_finish+0x341/0x5f0 net/ipv4/ip_input.c:233  NF_HOOK+0x3a4/0x450 include/linux/netfilter.h:314  NF_HOOK+0x3a4/0x450 include/linux/netfilter.h:314  __netif_receive_skb_one_core net/core/dev.c:5672 [inline]  __netif_receive_skb+0x2bf/0x650 net/core/dev.c:5785  process_backlog+0x662/0x15b0 net/core/dev.c:6117  __napi_poll+0xcb/0x490 net/core/dev.c:6883  napi_poll net/core/dev.c:6952 [inline]  net_rx_action+0x89b/0x1240 net/core/dev.c:7074  handle_softirqs+0x2d4/0x9b0 kernel/softirq.c:561  __do_softirq kernel/softirq.c:595 [inline]  invoke_softirq kernel/softirq.c:435 [inline]  __irq_exit_rcu+0xf7/0x220 kernel/softirq.c:662  irq_exit_rcu+0x9/0x30 kernel/softirq.c:678  instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1049 [inline]  sysvec_apic_timer_interrupt+0x57/0xc0 arch/x86/kernel/apic/apic.c:1049  asm_sysvec_apic_timer_interrupt+0x1a/0x20 arch/x86/include/asm/idtentry.h:702 RIP: 0033:0x7f34f4519ad5 Code: 85 d2 74 0d 0f 10 02 48 8d 54 24 20 0f 11 44 24 20 64 8b 04 25 18 00 00 00 85 c0 75 27 41 b8 08 00 00 00 b8 0f 01 00 00 0f 05 <48> 3d 00 f0 ff ff 76 75 48 8b 15 24 73 0d 00 f7 d8 64 89 02 48 83 RSP: 002b:00007ffec5b32ce0 EFLAGS: 00000246 RAX: 0000000000000001 RBX: 00000000000668a0 RCX: 00007f34f4519ad5 RDX: 00007ffec5b32d00 RSI: 0000000000000004 RDI: 0000564f4bc6cae0 RBP: 0000564f4bc6b5a0 R08: 0000000000000008 R09: 0000000000000000 R10: 00007ffec5b32de8 R11: 0000000000000246 R12: 0000564f48ea8aa4 R13: 0000000000000001 R14: 0000564f48ea93e8 R15: 00007ffec5b32d68  </TASK>  Eric noted a probable shinfo->nr_frags corruption\, which indeed occurs.  The root cause is a buggy MPTCP option len computation in some circumstances: the ADD_ADDR option should be mutually exclusive with DSS since the blamed commit.  Still\, mptcp_established_options_add_addr() tries to set the relevant info in mptcp_out_options\, if  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56557,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  iio: adc: ad7923: Fix buffer overflow for tx_buf and ring_xfer  The AD7923 was updated to support devices with 8 channels\, but the size of tx_buf and ring_xfer was not increased accordingly\, leading to a potential buffer overflow in ad7923_update_scan_mode().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49908,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null check for 'afb' in amdgpu_dm_update_cursor (v2)  This commit adds a null check for the 'afb' variable in the amdgpu_dm_update_cursor function. Previously\, 'afb' was assumed to be null at line 8388\, but was used later in the code without a null check. This could potentially lead to a null pointer dereference.  Changes since v1: - Moved the null check for 'afb' to the line where 'afb' is used. (Alex)  Fixes the below: drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.c:8433 amdgpu_dm_update_cursor() \terror: we previously assumed 'afb' could be null (see line 8388)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26691,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: arm64: Fix circular locking dependency  The rule inside kvm enforces that the vcpu->mutex is taken *inside* kvm->lock. The rule is violated by the pkvm_create_hyp_vm() which acquires the kvm->lock while already holding the vcpu->mutex lock from kvm_vcpu_ioctl(). Avoid the circular locking dependency altogether by protecting the hyp vm handle with the config_lock\, much like we already do for other forms of VM-scoped data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44941,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to cover read extent cache access with lock  syzbot reports a f2fs bug as below:  BUG: KASAN: slab-use-after-free in sanity_check_extent_cache+0x370/0x410 fs/f2fs/extent_cache.c:46 Read of size 4 at addr ffff8880739ab220 by task syz-executor200/5097  CPU: 0 PID: 5097 Comm: syz-executor200 Not tainted 6.9.0-rc6-syzkaller #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 03/27/2024 Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:88 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114  print_address_description mm/kasan/report.c:377 [inline]  print_report+0x169/0x550 mm/kasan/report.c:488  kasan_report+0x143/0x180 mm/kasan/report.c:601  sanity_check_extent_cache+0x370/0x410 fs/f2fs/extent_cache.c:46  do_read_inode fs/f2fs/inode.c:509 [inline]  f2fs_iget+0x33e1/0x46e0 fs/f2fs/inode.c:560  f2fs_nfs_get_inode+0x74/0x100 fs/f2fs/super.c:3237  generic_fh_to_dentry+0x9f/0xf0 fs/libfs.c:1413  exportfs_decode_fh_raw+0x152/0x5f0 fs/exportfs/expfs.c:444  exportfs_decode_fh+0x3c/0x80 fs/exportfs/expfs.c:584  do_handle_to_path fs/fhandle.c:155 [inline]  handle_to_path fs/fhandle.c:210 [inline]  do_handle_open+0x495/0x650 fs/fhandle.c:226  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf5/0x240 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  We missed to cover sanity_check_extent_cache() w/ extent cache lock\, so\, below race case may happen\, result in use after free issue.  - f2fs_iget  - do_read_inode   - f2fs_init_read_extent_tree   : add largest extent entry in to cache \t\t\t\t\t- shrink \t\t\t\t\t - f2fs_shrink_read_extent_tree \t\t\t\t\t  - __shrink_extent_tree \t\t\t\t\t   - __detach_extent_node \t\t\t\t\t   : drop largest extent entry   - sanity_check_extent_cache   : access et->largest w/o lock  let's refactor sanity_check_extent_cache() to avoid extent cache access and call it before f2fs_init_read_extent_tree() to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35866,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix potential UAF in cifs_dump_full_key()  Skip sessions that are being teared down (status == SES_EXITING) to avoid UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-9083,libpoppler126,LOW,22.12.0-2+b1,N/A,"poppler 0.54.0\, as used in Evince and other products\, has a NULL pointer dereference in the JPXStream::readUByte function in JPXStream.cc. For example\, the perf_test utility will crash (segmentation fault) when parsing an invalid PDF file.",|tykio/midsommar|
CVE-2024-57887,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm: adv7511: Fix use-after-free in adv7533_attach_dsi()  The host_node pointer was assigned and freed in adv7533_parse_dt()\, and later\, adv7533_attach_dsi() uses the same. Fix this use-after-free issue by dropping of_node_put() in adv7533_parse_dt() and calling of_node_put() in error path of probe() and also in the remove().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50055,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  driver core: bus: Fix double free in driver API bus_register()  For bus_register()\, any error which happens after kset_register() will cause that @priv are freed twice\, fixed by setting @priv with NULL after the first free.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35860,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: support deferring bpf_link dealloc to after RCU grace period  BPF link for some program types is passed as a ""context"" which can be used by those BPF programs to look up additional information. E.g.\, for multi-kprobes and multi-uprobes\, link is used to fetch BPF cookie values.  Because of this runtime dependency\, when bpf_link refcnt drops to zero there could still be active BPF programs running accessing link data.  This patch adds generic support to defer bpf_link dealloc callback to after RCU GP\, if requested. This is done by exposing two different deallocation callbacks\, one synchronous and one deferred. If deferred one is provided\, bpf_link_free() will schedule dealloc_deferred() callback to happen after RCU GP.  BPF is using two flavors of RCU: ""classic"" non-sleepable one and RCU tasks trace one. The latter is used when sleepable BPF programs are used. bpf_link_free() accommodates that by checking underlying BPF program's sleepable flag\, and goes either through normal RCU GP only for non-sleepable\, or through RCU tasks trace GP *and* then normal RCU GP (taking into account rcu_trace_implies_rcu_gp() optimization)\, if BPF program is sleepable.  We use this for multi-kprobe and multi-uprobe links\, which dereference link during program run. We also preventively switch raw_tp link to use deferred dealloc callback\, as upcoming changes in bpf-next tree expose raw_tp link data (specifically\, cookie value) to BPF program at runtime as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50057,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: tipd: Free IRQ only if it was requested before  In polling mode\, if no IRQ was requested there is no need to free it. Call devm_free_irq() only if client->irq is set. This fixes the warning caused by the tps6598x module removal:  WARNING: CPU: 2 PID: 333 at kernel/irq/devres.c:144 devm_free_irq+0x80/0x8c ... ... Call trace:   devm_free_irq+0x80/0x8c   tps6598x_remove+0x28/0x88 [tps6598x]   i2c_device_remove+0x2c/0x9c   device_remove+0x4c/0x80   device_release_driver_internal+0x1cc/0x228   driver_detach+0x50/0x98   bus_remove_driver+0x6c/0xbc   driver_unregister+0x30/0x60   i2c_del_driver+0x54/0x64   tps6598x_i2c_driver_exit+0x18/0xc3c [tps6598x]   __arm64_sys_delete_module+0x184/0x264   invoke_syscall+0x48/0x110   el0_svc_common.constprop.0+0xc8/0xe8   do_el0_svc+0x20/0x2c   el0_svc+0x28/0x98   el0t_64_sync_handler+0x13c/0x158   el0t_64_sync+0x190/0x194",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57884,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: vmscan: account for free pages to prevent infinite Loop in throttle_direct_reclaim()  The task sometimes continues looping in throttle_direct_reclaim() because allow_direct_reclaim(pgdat) keeps returning false.     #0 [ffff80002cb6f8d0] __switch_to at ffff8000080095ac  #1 [ffff80002cb6f900] __schedule at ffff800008abbd1c  #2 [ffff80002cb6f990] schedule at ffff800008abc50c  #3 [ffff80002cb6f9b0] throttle_direct_reclaim at ffff800008273550  #4 [ffff80002cb6fa20] try_to_free_pages at ffff800008277b68  #5 [ffff80002cb6fae0] __alloc_pages_nodemask at ffff8000082c4660  #6 [ffff80002cb6fc50] alloc_pages_vma at ffff8000082e4a98  #7 [ffff80002cb6fca0] do_anonymous_page at ffff80000829f5a8  #8 [ffff80002cb6fce0] __handle_mm_fault at ffff8000082a5974  #9 [ffff80002cb6fd90] handle_mm_fault at ffff8000082a5bd4  At this point\, the pgdat contains the following two zones:          NODE: 4  ZONE: 0  ADDR: ffff00817fffe540  NAME: ""DMA32""           SIZE: 20480  MIN/LOW/HIGH: 11/28/45           VM_STAT:                 NR_FREE_PAGES: 359         NR_ZONE_INACTIVE_ANON: 18813           NR_ZONE_ACTIVE_ANON: 0         NR_ZONE_INACTIVE_FILE: 50           NR_ZONE_ACTIVE_FILE: 0           NR_ZONE_UNEVICTABLE: 0         NR_ZONE_WRITE_PENDING: 0                      NR_MLOCK: 0                     NR_BOUNCE: 0                    NR_ZSPAGES: 0             NR_FREE_CMA_PAGES: 0          NODE: 4  ZONE: 1  ADDR: ffff00817fffec00  NAME: ""Normal""           SIZE: 8454144  PRESENT: 98304  MIN/LOW/HIGH: 68/166/264           VM_STAT:                 NR_FREE_PAGES: 146         NR_ZONE_INACTIVE_ANON: 94668           NR_ZONE_ACTIVE_ANON: 3         NR_ZONE_INACTIVE_FILE: 735           NR_ZONE_ACTIVE_FILE: 78           NR_ZONE_UNEVICTABLE: 0         NR_ZONE_WRITE_PENDING: 0                      NR_MLOCK: 0                     NR_BOUNCE: 0                    NR_ZSPAGES: 0             NR_FREE_CMA_PAGES: 0  In allow_direct_reclaim()\, while processing ZONE_DMA32\, the sum of inactive/active file-backed pages calculated in zone_reclaimable_pages() based on the result of zone_page_state_snapshot() is zero.    Additionally\, since this system lacks swap\, the calculation of inactive/ active anonymous pages is skipped.          crash> p nr_swap_pages         nr_swap_pages = $1937 = {           counter = 0         }  As a result\, ZONE_DMA32 is deemed unreclaimable and skipped\, moving on to the processing of the next zone\, ZONE_NORMAL\, despite ZONE_DMA32 having free pages significantly exceeding the high watermark.  The problem is that the pgdat->kswapd_failures hasn't been incremented.          crash> px ((struct pglist_data *) 0xffff00817fffe540)->kswapd_failures         $1935 = 0x0  This is because the node deemed balanced.  The node balancing logic in balance_pgdat() evaluates all zones collectively.  If one or more zones (e.g.\, ZONE_DMA32) have enough free pages to meet their watermarks\, the entire node is deemed balanced.  This causes balance_pgdat() to exit early before incrementing the kswapd_failures\, as it considers the overall memory state acceptable\, even though some zones (like ZONE_NORMAL) remain under significant pressure.   The patch ensures that zone_reclaimable_pages() includes free pages (NR_FREE_PAGES) in its calculation when no other reclaimable pages are available (e.g.\, file-backed or anonymous pages).  This change prevents zones like ZONE_DMA32\, which have sufficient free pages\, from being mistakenly deemed unreclaimable.  By doing so\, the patch ensures proper node balancing\, avoids masking pressure on other zones like ZONE_NORMAL\, and prevents infinite loops in throttle_direct_reclaim() caused by allow_direct_reclaim(pgdat) repeatedly returning false.   The kernel hangs due to a task stuck in throttle_direct_reclaim()\, caused by a node being incorrectly deemed balanced despite pressure in certain zones\, such as ZONE_NORMAL.  This issue arises from zone_reclaimable_pages ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50056,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: uvc: Fix ERR_PTR dereference in uvc_v4l2.c  Fix potential dereferencing of ERR_PTR() in find_format_by_pix() and uvc_v4l2_enum_format().  Fix the following smatch errors:  drivers/usb/gadget/function/uvc_v4l2.c:124 find_format_by_pix() error: 'fmtdesc' dereferencing possible ERR_PTR()  drivers/usb/gadget/function/uvc_v4l2.c:392 uvc_v4l2_enum_format() error: 'fmtdesc' dereferencing possible ERR_PTR()  Also\, fix similar issue in uvc_v4l2_try_format() for potential dereferencing of ERR_PTR().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56551,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: fix usage slab after free  [  +0.000021] BUG: KASAN: slab-use-after-free in drm_sched_entity_flush+0x6cb/0x7a0 [gpu_sched] [  +0.000027] Read of size 8 at addr ffff8881b8605f88 by task amd_pci_unplug/2147  [  +0.000023] CPU: 6 PID: 2147 Comm: amd_pci_unplug Not tainted 6.10.0+ #1 [  +0.000016] Hardware name: ASUS System Product Name/ROG STRIX B550-F GAMING (WI-FI)\, BIOS 1401 12/03/2020 [  +0.000016] Call Trace: [  +0.000008]  <TASK> [  +0.000009]  dump_stack_lvl+0x76/0xa0 [  +0.000017]  print_report+0xce/0x5f0 [  +0.000017]  ? drm_sched_entity_flush+0x6cb/0x7a0 [gpu_sched] [  +0.000019]  ? srso_return_thunk+0x5/0x5f [  +0.000015]  ? kasan_complete_mode_report_info+0x72/0x200 [  +0.000016]  ? drm_sched_entity_flush+0x6cb/0x7a0 [gpu_sched] [  +0.000019]  kasan_report+0xbe/0x110 [  +0.000015]  ? drm_sched_entity_flush+0x6cb/0x7a0 [gpu_sched] [  +0.000023]  __asan_report_load8_noabort+0x14/0x30 [  +0.000014]  drm_sched_entity_flush+0x6cb/0x7a0 [gpu_sched] [  +0.000020]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? __kasan_check_write+0x14/0x30 [  +0.000016]  ? __pfx_drm_sched_entity_flush+0x10/0x10 [gpu_sched] [  +0.000020]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? __kasan_check_write+0x14/0x30 [  +0.000013]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? enable_work+0x124/0x220 [  +0.000015]  ? __pfx_enable_work+0x10/0x10 [  +0.000013]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? free_large_kmalloc+0x85/0xf0 [  +0.000016]  drm_sched_entity_destroy+0x18/0x30 [gpu_sched] [  +0.000020]  amdgpu_vce_sw_fini+0x55/0x170 [amdgpu] [  +0.000735]  ? __kasan_check_read+0x11/0x20 [  +0.000016]  vce_v4_0_sw_fini+0x80/0x110 [amdgpu] [  +0.000726]  amdgpu_device_fini_sw+0x331/0xfc0 [amdgpu] [  +0.000679]  ? mutex_unlock+0x80/0xe0 [  +0.000017]  ? __pfx_amdgpu_device_fini_sw+0x10/0x10 [amdgpu] [  +0.000662]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? __kasan_check_write+0x14/0x30 [  +0.000013]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? mutex_unlock+0x80/0xe0 [  +0.000016]  amdgpu_driver_release_kms+0x16/0x80 [amdgpu] [  +0.000663]  drm_minor_release+0xc9/0x140 [drm] [  +0.000081]  drm_release+0x1fd/0x390 [drm] [  +0.000082]  __fput+0x36c/0xad0 [  +0.000018]  __fput_sync+0x3c/0x50 [  +0.000014]  __x64_sys_close+0x7d/0xe0 [  +0.000014]  x64_sys_call+0x1bc6/0x2680 [  +0.000014]  do_syscall_64+0x70/0x130 [  +0.000014]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? irqentry_exit_to_user_mode+0x60/0x190 [  +0.000015]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? irqentry_exit+0x43/0x50 [  +0.000012]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? exc_page_fault+0x7c/0x110 [  +0.000015]  entry_SYSCALL_64_after_hwframe+0x76/0x7e [  +0.000014] RIP: 0033:0x7ffff7b14f67 [  +0.000013] Code: ff e8 0d 16 02 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 f3 0f 1e fa 64 8b 04 25 18 00 00 00 85 c0 75 10 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 41 c3 48 83 ec 18 89 7c 24 0c e8 73 ba f7 ff [  +0.000026] RSP: 002b:00007fffffffe378 EFLAGS: 00000246 ORIG_RAX: 0000000000000003 [  +0.000019] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007ffff7b14f67 [  +0.000014] RDX: 0000000000000000 RSI: 00007ffff7f6f47a RDI: 0000000000000003 [  +0.000014] RBP: 00007fffffffe3a0 R08: 0000555555569890 R09: 0000000000000000 [  +0.000014] R10: 0000000000000000 R11: 0000000000000246 R12: 00007fffffffe5c8 [  +0.000013] R13: 00005555555552a9 R14: 0000555555557d48 R15: 00007ffff7ffd040 [  +0.000020]  </TASK>  [  +0.000016] Allocated by task 383 on cpu 7 at 26.880319s: [  +0.000014]  kasan_save_stack+0x28/0x60 [  +0.000008]  kasan_save_track+0x18/0x70 [  +0.000007]  kasan_save_alloc_info+0x38/0x60 [  +0.000007]  __kasan_kmalloc+0xc1/0xd0 [  +0.000007]  kmalloc_trace_noprof+0x180/0x380 [  +0.000007]  drm_sched_init+0x411/0xec0 [gpu_sched] [  +0.000012]  amdgpu_device_init+0x695f/0xa610 [amdgpu] [  +0.000658]  amdgpu_driver_load_kms+0x1a/0x120 [amdgpu] [  +0.000662]  amdgpu_pci_p ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56769,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: dvb-frontends: dib3000mb: fix uninit-value in dib3000_write_reg  Syzbot reports [1] an uninitialized value issue found by KMSAN in dib3000_read_reg().  Local u8 rb[2] is used in i2c_transfer() as a read buffer; in case that call fails\, the buffer may end up with some undefined values.  Since no elaborate error handling is expected in dib3000_write_reg()\, simply zero out rb buffer to mitigate the problem.  [1] Syzkaller report dvb-usb: bulk message failed: -22 (6/0) ===================================================== BUG: KMSAN: uninit-value in dib3000mb_attach+0x2d8/0x3c0 drivers/media/dvb-frontends/dib3000mb.c:758  dib3000mb_attach+0x2d8/0x3c0 drivers/media/dvb-frontends/dib3000mb.c:758  dibusb_dib3000mb_frontend_attach+0x155/0x2f0 drivers/media/usb/dvb-usb/dibusb-mb.c:31  dvb_usb_adapter_frontend_init+0xed/0x9a0 drivers/media/usb/dvb-usb/dvb-usb-dvb.c:290  dvb_usb_adapter_init drivers/media/usb/dvb-usb/dvb-usb-init.c:90 [inline]  dvb_usb_init drivers/media/usb/dvb-usb/dvb-usb-init.c:186 [inline]  dvb_usb_device_init+0x25a8/0x3760 drivers/media/usb/dvb-usb/dvb-usb-init.c:310  dibusb_probe+0x46/0x250 drivers/media/usb/dvb-usb/dibusb-mb.c:110 ... Local variable rb created at:  dib3000_read_reg+0x86/0x4e0 drivers/media/dvb-frontends/dib3000mb.c:54  dib3000mb_attach+0x123/0x3c0 drivers/media/dvb-frontends/dib3000mb.c:758 ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50121,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: cancel nfsd_shrinker_work using sync mode in nfs4_state_shutdown_net  In the normal case\, when we excute `echo 0 > /proc/fs/nfsd/threads`\, the function `nfs4_state_destroy_net` in `nfs4_state_shutdown_net` will release all resources related to the hashed `nfs4_client`. If the `nfsd_client_shrinker` is running concurrently\, the `expire_client` function will first unhash this client and then destroy it. This can lead to the following warning. Additionally\, numerous use-after-free errors may occur as well.  nfsd_client_shrinker         echo 0 > /proc/fs/nfsd/threads  expire_client                nfsd_shutdown_net   unhash_client                ...                                nfs4_state_shutdown_net                                  /* won't wait shrinker exit */   /*                             cancel_work(&nn->nfsd_shrinker_work)    * nfsd_file for this          /* won't destroy unhashed client1 */    * client1 still alive         nfs4_state_destroy_net    */                                 nfsd_file_cache_shutdown                                  /* trigger warning */                                  kmem_cache_destroy(nfsd_file_slab)                                  kmem_cache_destroy(nfsd_file_mark_slab)   /* release nfsd_file and mark */   __destroy_client  ==================================================================== BUG nfsd_file (Not tainted): Objects remaining in nfsd_file on __kmem_cache_shutdown() -------------------------------------------------------------------- CPU: 4 UID: 0 PID: 764 Comm: sh Not tainted 6.12.0-rc3+ #1   dump_stack_lvl+0x53/0x70  slab_err+0xb0/0xf0  __kmem_cache_shutdown+0x15c/0x310  kmem_cache_destroy+0x66/0x160  nfsd_file_cache_shutdown+0xac/0x210 [nfsd]  nfsd_destroy_serv+0x251/0x2a0 [nfsd]  nfsd_svc+0x125/0x1e0 [nfsd]  write_threads+0x16a/0x2a0 [nfsd]  nfsctl_transaction_write+0x74/0xa0 [nfsd]  vfs_write+0x1a5/0x6d0  ksys_write+0xc1/0x160  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  ==================================================================== BUG nfsd_file_mark (Tainted: G    B   W         ): Objects remaining nfsd_file_mark on __kmem_cache_shutdown() --------------------------------------------------------------------   dump_stack_lvl+0x53/0x70  slab_err+0xb0/0xf0  __kmem_cache_shutdown+0x15c/0x310  kmem_cache_destroy+0x66/0x160  nfsd_file_cache_shutdown+0xc8/0x210 [nfsd]  nfsd_destroy_serv+0x251/0x2a0 [nfsd]  nfsd_svc+0x125/0x1e0 [nfsd]  write_threads+0x16a/0x2a0 [nfsd]  nfsctl_transaction_write+0x74/0xa0 [nfsd]  vfs_write+0x1a5/0x6d0  ksys_write+0xc1/0x160  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  To resolve this issue\, cancel `nfsd_shrinker_work` using synchronous mode in nfs4_state_shutdown_net.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43098,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  i3c: Use i3cdev->desc->info instead of calling i3c_device_get_info() to avoid deadlock  A deadlock may happen since the i3c_master_register() acquires &i3cbus->lock twice. See the log below. Use i3cdev->desc->info instead of calling i3c_device_info() to avoid acquiring the lock twice.  v2:   - Modified the title and commit message  ============================================ WARNING: possible recursive locking detected 6.11.0-mainline -------------------------------------------- init/1 is trying to acquire lock: f1ffff80a6a40dc0 (&i3cbus->lock){++++}-{3:3}\, at: i3c_bus_normaluse_lock  but task is already holding lock: f1ffff80a6a40dc0 (&i3cbus->lock){++++}-{3:3}\, at: i3c_master_register  other info that might help us debug this:  Possible unsafe locking scenario:         CPU0        ----   lock(&i3cbus->lock);   lock(&i3cbus->lock);   *** DEADLOCK ***   May be due to missing lock nesting notation  2 locks held by init/1:  #0: fcffff809b6798f8 (&dev->mutex){....}-{3:3}\, at: __driver_attach  #1: f1ffff80a6a40dc0 (&i3cbus->lock){++++}-{3:3}\, at: i3c_master_register  stack backtrace: CPU: 6 UID: 0 PID: 1 Comm: init Call trace:  dump_backtrace+0xfc/0x17c  show_stack+0x18/0x28  dump_stack_lvl+0x40/0xc0  dump_stack+0x18/0x24  print_deadlock_bug+0x388/0x390  __lock_acquire+0x18bc/0x32ec  lock_acquire+0x134/0x2b0  down_read+0x50/0x19c  i3c_bus_normaluse_lock+0x14/0x24  i3c_device_get_info+0x24/0x58  i3c_device_uevent+0x34/0xa4  dev_uevent+0x310/0x384  kobject_uevent_env+0x244/0x414  kobject_uevent+0x14/0x20  device_add+0x278/0x460  device_register+0x20/0x34  i3c_master_register_new_i3c_devs+0x78/0x154  i3c_master_register+0x6a0/0x6d4  mtk_i3c_master_probe+0x3b8/0x4d8  platform_probe+0xa0/0xe0  really_probe+0x114/0x454  __driver_probe_device+0xa0/0x15c  driver_probe_device+0x3c/0x1ac  __driver_attach+0xc4/0x1f0  bus_for_each_dev+0x104/0x160  driver_attach+0x24/0x34  bus_add_driver+0x14c/0x294  driver_register+0x68/0x104  __platform_driver_register+0x20/0x30  init_module+0x20/0xfe4  do_one_initcall+0x184/0x464  do_init_module+0x58/0x1ec  load_module+0xefc/0x10c8  __arm64_sys_finit_module+0x238/0x33c  invoke_syscall+0x58/0x10c  el0_svc_common+0xa8/0xdc  do_el0_svc+0x1c/0x28  el0_svc+0x50/0xac  el0t_64_sync_handler+0x70/0xbc  el0t_64_sync+0x1a8/0x1ac",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-16232,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"LibTIFF 4.0.8 has multiple memory leak vulnerabilities\, which allow attackers to cause a denial of service (memory consumption)\, as demonstrated by tif_open.c\, tif_lzw.c\, and tif_aux.c. NOTE: Third parties were unable to reproduce the issue",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-19449,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel 5.0.21\, mounting a crafted f2fs filesystem image can lead to slab-out-of-bounds read access in f2fs_build_segment_manager in fs/f2fs/segment.c\, related to init_min_max_mtime in fs/f2fs/segment.c (because the second argument to get_seg_entry is not validated).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-6988,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"An issue was discovered in OpenJPEG 2.3.0. It allows remote attackers to cause a denial of service (attempted excessive memory allocation) in opj_calloc in openjp2/opj_malloc.c\, when called from opj_tcd_init_tile in openjp2/tcd.c\, as demonstrated by the 64-bit opj_decompress.",|tykio/midsommar|
CVE-2024-50126,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: sched: use RCU read-side critical section in taprio_dump()  Fix possible use-after-free in 'taprio_dump()' by adding RCU read-side critical section there. Never seen on x86 but found on a KASAN-enabled arm64 system when investigating https://syzkaller.appspot.com/bug?extid=b65e0af58423fc8a73aa:  [T15862] BUG: KASAN: slab-use-after-free in taprio_dump+0xa0c/0xbb0 [T15862] Read of size 4 at addr ffff0000d4bb88f8 by task repro/15862 [T15862] [T15862] CPU: 0 UID: 0 PID: 15862 Comm: repro Not tainted 6.11.0-rc1-00293-gdefaf1a2113a-dirty #2 [T15862] Hardware name: QEMU QEMU Virtual Machine\, BIOS edk2-20240524-5.fc40 05/24/2024 [T15862] Call trace: [T15862]  dump_backtrace+0x20c/0x220 [T15862]  show_stack+0x2c/0x40 [T15862]  dump_stack_lvl+0xf8/0x174 [T15862]  print_report+0x170/0x4d8 [T15862]  kasan_report+0xb8/0x1d4 [T15862]  __asan_report_load4_noabort+0x20/0x2c [T15862]  taprio_dump+0xa0c/0xbb0 [T15862]  tc_fill_qdisc+0x540/0x1020 [T15862]  qdisc_notify.isra.0+0x330/0x3a0 [T15862]  tc_modify_qdisc+0x7b8/0x1838 [T15862]  rtnetlink_rcv_msg+0x3c8/0xc20 [T15862]  netlink_rcv_skb+0x1f8/0x3d4 [T15862]  rtnetlink_rcv+0x28/0x40 [T15862]  netlink_unicast+0x51c/0x790 [T15862]  netlink_sendmsg+0x79c/0xc20 [T15862]  __sock_sendmsg+0xe0/0x1a0 [T15862]  ____sys_sendmsg+0x6c0/0x840 [T15862]  ___sys_sendmsg+0x1ac/0x1f0 [T15862]  __sys_sendmsg+0x110/0x1d0 [T15862]  __arm64_sys_sendmsg+0x74/0xb0 [T15862]  invoke_syscall+0x88/0x2e0 [T15862]  el0_svc_common.constprop.0+0xe4/0x2a0 [T15862]  do_el0_svc+0x44/0x60 [T15862]  el0_svc+0x50/0x184 [T15862]  el0t_64_sync_handler+0x120/0x12c [T15862]  el0t_64_sync+0x190/0x194 [T15862] [T15862] Allocated by task 15857: [T15862]  kasan_save_stack+0x3c/0x70 [T15862]  kasan_save_track+0x20/0x3c [T15862]  kasan_save_alloc_info+0x40/0x60 [T15862]  __kasan_kmalloc+0xd4/0xe0 [T15862]  __kmalloc_cache_noprof+0x194/0x334 [T15862]  taprio_change+0x45c/0x2fe0 [T15862]  tc_modify_qdisc+0x6a8/0x1838 [T15862]  rtnetlink_rcv_msg+0x3c8/0xc20 [T15862]  netlink_rcv_skb+0x1f8/0x3d4 [T15862]  rtnetlink_rcv+0x28/0x40 [T15862]  netlink_unicast+0x51c/0x790 [T15862]  netlink_sendmsg+0x79c/0xc20 [T15862]  __sock_sendmsg+0xe0/0x1a0 [T15862]  ____sys_sendmsg+0x6c0/0x840 [T15862]  ___sys_sendmsg+0x1ac/0x1f0 [T15862]  __sys_sendmsg+0x110/0x1d0 [T15862]  __arm64_sys_sendmsg+0x74/0xb0 [T15862]  invoke_syscall+0x88/0x2e0 [T15862]  el0_svc_common.constprop.0+0xe4/0x2a0 [T15862]  do_el0_svc+0x44/0x60 [T15862]  el0_svc+0x50/0x184 [T15862]  el0t_64_sync_handler+0x120/0x12c [T15862]  el0t_64_sync+0x190/0x194 [T15862] [T15862] Freed by task 6192: [T15862]  kasan_save_stack+0x3c/0x70 [T15862]  kasan_save_track+0x20/0x3c [T15862]  kasan_save_free_info+0x4c/0x80 [T15862]  poison_slab_object+0x110/0x160 [T15862]  __kasan_slab_free+0x3c/0x74 [T15862]  kfree+0x134/0x3c0 [T15862]  taprio_free_sched_cb+0x18c/0x220 [T15862]  rcu_core+0x920/0x1b7c [T15862]  rcu_core_si+0x10/0x1c [T15862]  handle_softirqs+0x2e8/0xd64 [T15862]  __do_softirq+0x14/0x20",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-25433,libtiff6,MEDIUM,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"libtiff 4.5.0 is vulnerable to Buffer Overflow via /libtiff/tools/tiffcrop.c:8499. Incorrect updating of buffer size after rotateImage() in tiffcrop cause heap-buffer-overflow and SEGV.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26982,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  Squashfs: check the inode number is not the invalid value of zero  Syskiller has produced an out of bounds access in fill_meta_index().  That out of bounds access is ultimately caused because the inode has an inode number with the invalid value of zero\, which was not checked.  The reason this causes the out of bounds access is due to following sequence of events:  1. Fill_meta_index() is called to allocate (via empty_meta_index())    and fill a metadata index.  It however suffers a data read error    and aborts\, invalidating the newly returned empty metadata index.    It does this by setting the inode number of the index to zero\,    which means unused (zero is not a valid inode number).  2. When fill_meta_index() is subsequently called again on another    read operation\, locate_meta_index() returns the previous index    because it matches the inode number of 0.  Because this index    has been returned it is expected to have been filled\, and because    it hasn't been\, an out of bounds access is performed.  This patch adds a sanity check which checks that the inode number is not zero when the inode is created and returns -EINVAL if it is.  [phillip@squashfs.org.uk: whitespace fix]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56763,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  tracing: Prevent bad count for tracing_cpumask_write  If a large count is provided\, it will trigger a warning in bitmap_parse_user. Also check zero for it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56765,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/pseries/vas: Add close() callback in vas_vm_ops struct  The mapping VMA address is saved in VAS window struct when the paste address is mapped. This VMA address is used during migration to unmap the paste address if the window is active. The paste address mapping will be removed when the window is closed or with the munmap(). But the VMA address in the VAS window is not updated with munmap() which is causing invalid access during migration.  The KASAN report shows: [16386.254991] BUG: KASAN: slab-use-after-free in reconfig_close_windows+0x1a0/0x4e8 [16386.255043] Read of size 8 at addr c00000014a819670 by task drmgr/696928  [16386.255096] CPU: 29 UID: 0 PID: 696928 Comm: drmgr Kdump: loaded Tainted: G    B              6.11.0-rc5-nxgzip #2 [16386.255128] Tainted: [B]=BAD_PAGE [16386.255148] Hardware name: IBM\,9080-HEX Power11 (architected) 0x820200 0xf000007 of:IBM\,FW1110.00 (NH1110_016) hv:phyp pSeries [16386.255181] Call Trace: [16386.255202] [c00000016b297660] [c0000000018ad0ac] dump_stack_lvl+0x84/0xe8 (unreliable) [16386.255246] [c00000016b297690] [c0000000006e8a90] print_report+0x19c/0x764 [16386.255285] [c00000016b297760] [c0000000006e9490] kasan_report+0x128/0x1f8 [16386.255309] [c00000016b297880] [c0000000006eb5c8] __asan_load8+0xac/0xe0 [16386.255326] [c00000016b2978a0] [c00000000013f898] reconfig_close_windows+0x1a0/0x4e8 [16386.255343] [c00000016b297990] [c000000000140e58] vas_migration_handler+0x3a4/0x3fc [16386.255368] [c00000016b297a90] [c000000000128848] pseries_migrate_partition+0x4c/0x4c4 ...  [16386.256136] Allocated by task 696554 on cpu 31 at 16377.277618s: [16386.256149]  kasan_save_stack+0x34/0x68 [16386.256163]  kasan_save_track+0x34/0x80 [16386.256175]  kasan_save_alloc_info+0x58/0x74 [16386.256196]  __kasan_slab_alloc+0xb8/0xdc [16386.256209]  kmem_cache_alloc_noprof+0x200/0x3d0 [16386.256225]  vm_area_alloc+0x44/0x150 [16386.256245]  mmap_region+0x214/0x10c4 [16386.256265]  do_mmap+0x5fc/0x750 [16386.256277]  vm_mmap_pgoff+0x14c/0x24c [16386.256292]  ksys_mmap_pgoff+0x20c/0x348 [16386.256303]  sys_mmap+0xd0/0x160 ...  [16386.256350] Freed by task 0 on cpu 31 at 16386.204848s: [16386.256363]  kasan_save_stack+0x34/0x68 [16386.256374]  kasan_save_track+0x34/0x80 [16386.256384]  kasan_save_free_info+0x64/0x10c [16386.256396]  __kasan_slab_free+0x120/0x204 [16386.256415]  kmem_cache_free+0x128/0x450 [16386.256428]  vm_area_free_rcu_cb+0xa8/0xd8 [16386.256441]  rcu_do_batch+0x2c8/0xcf0 [16386.256458]  rcu_core+0x378/0x3c4 [16386.256473]  handle_softirqs+0x20c/0x60c [16386.256495]  do_softirq_own_stack+0x6c/0x88 [16386.256509]  do_softirq_own_stack+0x58/0x88 [16386.256521]  __irq_exit_rcu+0x1a4/0x20c [16386.256533]  irq_exit+0x20/0x38 [16386.256544]  interrupt_async_exit_prepare.constprop.0+0x18/0x2c ...  [16386.256717] Last potentially related work creation: [16386.256729]  kasan_save_stack+0x34/0x68 [16386.256741]  __kasan_record_aux_stack+0xcc/0x12c [16386.256753]  __call_rcu_common.constprop.0+0x94/0xd04 [16386.256766]  vm_area_free+0x28/0x3c [16386.256778]  remove_vma+0xf4/0x114 [16386.256797]  do_vmi_align_munmap.constprop.0+0x684/0x870 [16386.256811]  __vm_munmap+0xe0/0x1f8 [16386.256821]  sys_munmap+0x54/0x6c [16386.256830]  system_call_exception+0x1a0/0x4a0 [16386.256841]  system_call_vectored_common+0x15c/0x2ec  [16386.256868] The buggy address belongs to the object at c00000014a819670                 which belongs to the cache vm_area_struct of size 168 [16386.256887] The buggy address is located 0 bytes inside of                 freed 168-byte region [c00000014a819670\, c00000014a819718)  [16386.256915] The buggy address belongs to the physical page: [16386.256928] page: refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x14a81 [16386.256950] memcg:c0000000ba430001 [16386.256961] anon flags: 0x43ffff800000000(node=4|zone=0|lastcpupid=0x7ffff) [16386.256975] page_type: 0xfdffffff(slab) [16386 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-0597,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A flaw possibility of memory leak in the Linux kernel cpu_entry_area mapping of X86 CPU data to memory was found in the way user can guess location of exception stack(s) or other important data. A local user could use this flaw to get access to some important data with expected location in memory.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56767,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  dmaengine: at_xdmac: avoid null_prt_deref in at_xdmac_prep_dma_memset  The at_xdmac_memset_create_desc may return NULL\, which will lead to a null pointer dereference. For example\, the len input is error\, or the atchan->free_descs_list is empty and memory is exhausted. Therefore\, add check to avoid this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-39282,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: wwan: t7xx: Fix FSM command timeout issue  When driver processes the internal state change command\, it use an asynchronous thread to process the command operation. If the main thread detects that the task has timed out\, the asynchronous thread will panic when executing the completion notification because the main thread completion object has been released.  BUG: unable to handle page fault for address: fffffffffffffff8 PGD 1f283a067 P4D 1f283a067 PUD 1f283c067 PMD 0 Oops: 0000 [#1] PREEMPT SMP NOPTI RIP: 0010:complete_all+0x3e/0xa0 [...] Call Trace:  <TASK>  ? __die_body+0x68/0xb0  ? page_fault_oops+0x379/0x3e0  ? exc_page_fault+0x69/0xa0  ? asm_exc_page_fault+0x22/0x30  ? complete_all+0x3e/0xa0  fsm_main_thread+0xa3/0x9c0 [mtk_t7xx (HASH:1400 5)]  ? __pfx_autoremove_wake_function+0x10/0x10  kthread+0xd8/0x110  ? __pfx_fsm_main_thread+0x10/0x10 [mtk_t7xx (HASH:1400 5)]  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x38/0x50  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1b/0x30  </TASK> [...] CR2: fffffffffffffff8 ---[ end trace 0000000000000000 ]---  Use the reference counter to ensure safe release as Sergey suggests: https://lore.kernel.org/all/da90f64c-260a-4329-87bf-1f9ff20a5951@gmail.com/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56766,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mtd: rawnand: fix double free in atmel_pmecc_create_user()  The ""user"" pointer was converted from being allocated with kzalloc() to being allocated by devm_kzalloc().  Calling kfree(user) will lead to a double free.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-45336,stdlib,MEDIUM,v1.23.2,1.22.11	 1.23.5	 1.24.0-rc.2,"The HTTP client drops sensitive headers after following a cross-domain redirect. For example\, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com. In the event that the client received a subsequent same-domain redirect\, however\, the sensitive headers would be restored. For example\, a chain of redirects from a.com/\, to b.com/1\, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",|tykio/midsommar|
CVE-2025-37860,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sfc: fix NULL dereferences in ef100_process_design_param()  Since cited commit\, ef100_probe_main() and hence also  ef100_check_design_params() run before efx->net_dev is created;  consequently\, we cannot netif_set_tso_max_size() or _segs() at this  point. Move those netif calls to ef100_probe_netdev()\, and also replace  netif_err within the design params code with pci_err.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36908,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  blk-iocost: do not WARN if iocg was already offlined  In iocg_pay_debt()\, warn is triggered if 'active_list' is empty\, which is intended to confirm iocg is active when it has debt. However\, warn can be triggered during a blkcg or disk removal\, if iocg_waitq_timer_fn() is run at that time:    WARNING: CPU: 0 PID: 2344971 at block/blk-iocost.c:1402 iocg_pay_debt+0x14c/0x190   Call trace:   iocg_pay_debt+0x14c/0x190   iocg_kick_waitq+0x438/0x4c0   iocg_waitq_timer_fn+0xd8/0x130   __run_hrtimer+0x144/0x45c   __hrtimer_run_queues+0x16c/0x244   hrtimer_interrupt+0x2cc/0x7b0  The warn in this situation is meaningless. Since this iocg is being removed\, the state of the 'active_list' is irrelevant\, and 'waitq_timer' is canceled after removing 'active_list' in ioc_pd_free()\, which ensures iocg is freed after iocg_waitq_timer_fn() returns.  Therefore\, add the check if iocg was already offlined to avoid warn when removing a blkcg or disk.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36907,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  SUNRPC: add a missing rpc_stat for TCP TLS  Commit 1548036ef120 (""nfs: make the rpc_stat per net namespace"") added functionality to specify rpc_stats function but missed adding it to the TCP TLS functionality. As the result\, mounting with xprtsec=tls lead to the following kernel oops.  [  128.984192] Unable to handle kernel NULL pointer dereference at virtual address 000000000000001c [  128.985058] Mem abort info: [  128.985372]   ESR = 0x0000000096000004 [  128.985709]   EC = 0x25: DABT (current EL)\, IL = 32 bits [  128.986176]   SET = 0\, FnV = 0 [  128.986521]   EA = 0\, S1PTW = 0 [  128.986804]   FSC = 0x04: level 0 translation fault [  128.987229] Data abort info: [  128.987597]   ISV = 0\, ISS = 0x00000004\, ISS2 = 0x00000000 [  128.988169]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [  128.988811]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [  128.989302] user pgtable: 4k pages\, 48-bit VAs\, pgdp=0000000106c84000 [  128.990048] [000000000000001c] pgd=0000000000000000\, p4d=0000000000000000 [  128.990736] Internal error: Oops: 0000000096000004 [#1] SMP [  128.991168] Modules linked in: nfs_layout_nfsv41_files rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace netfs uinput dm_mod nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 rfkill ip_set nf_tables nfnetlink qrtr vsock_loopback vmw_vsock_virtio_transport_common vmw_vsock_vmci_transport vsock sunrpc vfat fat uvcvideo videobuf2_vmalloc videobuf2_memops uvc videobuf2_v4l2 videodev videobuf2_common mc vmw_vmci xfs libcrc32c e1000e crct10dif_ce ghash_ce sha2_ce vmwgfx nvme sha256_arm64 nvme_core sr_mod cdrom sha1_ce drm_ttm_helper ttm drm_kms_helper drm sg fuse [  128.996466] CPU: 0 PID: 179 Comm: kworker/u4:26 Kdump: loaded Not tainted 6.8.0-rc6+ #12 [  128.997226] Hardware name: VMware\, Inc. VMware20\,1/VBSA\, BIOS VMW201.00V.21805430.BA64.2305221830 05/22/2023 [  128.998084] Workqueue: xprtiod xs_tcp_tls_setup_socket [sunrpc] [  128.998701] pstate: 81400005 (Nzcv daif +PAN -UAO -TCO +DIT -SSBS BTYPE=--) [  128.999384] pc : call_start+0x74/0x138 [sunrpc] [  128.999809] lr : __rpc_execute+0xb8/0x3e0 [sunrpc] [  129.000244] sp : ffff8000832b3a00 [  129.000508] x29: ffff8000832b3a00 x28: ffff800081ac79c0 x27: ffff800081ac7000 [  129.001111] x26: 0000000004248060 x25: 0000000000000000 x24: ffff800081596008 [  129.001757] x23: ffff80007b087240 x22: ffff00009a509d30 x21: 0000000000000000 [  129.002345] x20: ffff000090075600 x19: ffff00009a509d00 x18: ffffffffffffffff [  129.002912] x17: 733d4d4554535953 x16: 42555300312d746e x15: ffff8000832b3a88 [  129.003464] x14: ffffffffffffffff x13: ffff8000832b3a7d x12: 0000000000000008 [  129.004021] x11: 0101010101010101 x10: ffff8000150cb560 x9 : ffff80007b087c00 [  129.004577] x8 : ffff00009a509de0 x7 : 0000000000000000 x6 : 00000000be8c4ee3 [  129.005026] x5 : 0000000000000000 x4 : 0000000000000000 x3 : ffff000094d56680 [  129.005425] x2 : ffff80007b0637f8 x1 : ffff000090075600 x0 : ffff00009a509d00 [  129.005824] Call trace: [  129.005967]  call_start+0x74/0x138 [sunrpc] [  129.006233]  __rpc_execute+0xb8/0x3e0 [sunrpc] [  129.006506]  rpc_execute+0x160/0x1d8 [sunrpc] [  129.006778]  rpc_run_task+0x148/0x1f8 [sunrpc] [  129.007204]  tls_probe+0x80/0xd0 [sunrpc] [  129.007460]  rpc_ping+0x28/0x80 [sunrpc] [  129.007715]  rpc_create_xprt+0x134/0x1a0 [sunrpc] [  129.007999]  rpc_create+0x128/0x2a0 [sunrpc] [  129.008264]  xs_tcp_tls_setup_socket+0xdc/0x508 [sunrpc] [  129.008583]  process_one_work+0x174/0x3c8 [  129.008813]  worker_thread+0x2c8/0x3e0 [  129.009033]  kthread+0x100/0x110 [  129.009225]  ret_from_fork+0x10/0x20 [  129.009432] Code: f0ffffc2 911fe042 aa1403e1 aa1303e0 (b9401c83)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21802,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: hns3: fix oops when unload drivers paralleling  When unload hclge driver\, it tries to disable sriov first for each ae_dev node from hnae3_ae_dev_list. If user unloads hns3 driver at the time\, because it removes all the ae_dev nodes\, and it may cause oops.  But we can't simply use hnae3_common_lock for this. Because in the process flow of pci_disable_sriov()\, it will trigger the remove flow of VF\, which will also take hnae3_common_lock.  To fixes it\, introduce a new mutex to protect the unload process.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2013-4392,libsystemd0,LOW,252.36-1~deb12u1,N/A,"systemd\, when updating file permissions\, allows local users to change the permissions and SELinux security contexts for arbitrary files via a symlink attack on unspecified files.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-12928,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel 4.15.0\, a NULL pointer dereference was discovered in hfs_ext_read_extent in hfs.ko. This can occur during a mount of a crafted hfs filesystem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-37925,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  jfs: reject on-disk inodes of an unsupported type  Syzbot has reported the following BUG:  kernel BUG at fs/inode.c:668! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 3 UID: 0 PID: 139 Comm: jfsCommit Not tainted 6.12.0-rc4-syzkaller-00085-g4e46774408d9 #0 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-3.fc41 04/01/2014 RIP: 0010:clear_inode+0x168/0x190 Code: 4c 89 f7 e8 ba fe e5 ff e9 61 ff ff ff 44 89 f1 80 e1 07 80 c1 03 38 c1 7c c1 4c 89 f7 e8 90 ff e5 ff eb b7  0b e8 01 5d 7f ff 90 0f 0b e8 f9 5c 7f ff 90 0f 0b e8 f1 5c 7f RSP: 0018:ffffc900027dfae8 EFLAGS: 00010093 RAX: ffffffff82157a87 RBX: 0000000000000001 RCX: ffff888104d4b980 RDX: 0000000000000000 RSI: 0000000000000001 RDI: 0000000000000000 RBP: ffffc900027dfc90 R08: ffffffff82157977 R09: fffff520004fbf38 R10: dffffc0000000000 R11: fffff520004fbf38 R12: dffffc0000000000 R13: ffff88811315bc00 R14: ffff88811315bda8 R15: ffff88811315bb80 FS:  0000000000000000(0000) GS:ffff888135f00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00005565222e0578 CR3: 0000000026ef0000 CR4: 00000000000006f0 Call Trace:  <TASK>  ? __die_body+0x5f/0xb0  ? die+0x9e/0xc0  ? do_trap+0x15a/0x3a0  ? clear_inode+0x168/0x190  ? do_error_trap+0x1dc/0x2c0  ? clear_inode+0x168/0x190  ? __pfx_do_error_trap+0x10/0x10  ? report_bug+0x3cd/0x500  ? handle_invalid_op+0x34/0x40  ? clear_inode+0x168/0x190  ? exc_invalid_op+0x38/0x50  ? asm_exc_invalid_op+0x1a/0x20  ? clear_inode+0x57/0x190  ? clear_inode+0x167/0x190  ? clear_inode+0x168/0x190  ? clear_inode+0x167/0x190  jfs_evict_inode+0xb5/0x440  ? __pfx_jfs_evict_inode+0x10/0x10  evict+0x4ea/0x9b0  ? __pfx_evict+0x10/0x10  ? iput+0x713/0xa50  txUpdateMap+0x931/0xb10  ? __pfx_txUpdateMap+0x10/0x10  jfs_lazycommit+0x49a/0xb80  ? _raw_spin_unlock_irqrestore+0x8f/0x140  ? lockdep_hardirqs_on+0x99/0x150  ? __pfx_jfs_lazycommit+0x10/0x10  ? __pfx_default_wake_function+0x10/0x10  ? __kthread_parkme+0x169/0x1d0  ? __pfx_jfs_lazycommit+0x10/0x10  kthread+0x2f2/0x390  ? __pfx_jfs_lazycommit+0x10/0x10  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x4d/0x80  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK>  This happens when 'clear_inode()' makes an attempt to finalize an underlying JFS inode of unknown type. According to JFS layout description from https://jfs.sourceforge.net/project/pub/jfslayout.pdf\, inode types from 5 to 15 are reserved for future extensions and should not be encountered on a valid filesystem. So add an extra check for valid inode type in 'copy_from_dinode()'.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21801,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: ravb: Fix missing rtnl lock in suspend/resume path  Fix the suspend/resume path by ensuring the rtnl lock is held where required. Calls to ravb_open\, ravb_close and wol operations must be performed under the rtnl lock to prevent conflicts with ongoing ndo operations.  Without this fix\, the following warning is triggered: [   39.032969] ============================= [   39.032983] WARNING: suspicious RCU usage [   39.033019] ----------------------------- [   39.033033] drivers/net/phy/phy_device.c:2004 suspicious rcu_dereference_protected() usage! ... [   39.033597] stack backtrace: [   39.033613] CPU: 0 UID: 0 PID: 174 Comm: python3 Not tainted 6.13.0-rc7-next-20250116-arm64-renesas-00002-g35245dfdc62c #7 [   39.033623] Hardware name: Renesas SMARC EVK version 2 based on r9a08g045s33 (DT) [   39.033628] Call trace: [   39.033633]  show_stack+0x14/0x1c (C) [   39.033652]  dump_stack_lvl+0xb4/0xc4 [   39.033664]  dump_stack+0x14/0x1c [   39.033671]  lockdep_rcu_suspicious+0x16c/0x22c [   39.033682]  phy_detach+0x160/0x190 [   39.033694]  phy_disconnect+0x40/0x54 [   39.033703]  ravb_close+0x6c/0x1cc [   39.033714]  ravb_suspend+0x48/0x120 [   39.033721]  dpm_run_callback+0x4c/0x14c [   39.033731]  device_suspend+0x11c/0x4dc [   39.033740]  dpm_suspend+0xdc/0x214 [   39.033748]  dpm_suspend_start+0x48/0x60 [   39.033758]  suspend_devices_and_enter+0x124/0x574 [   39.033769]  pm_suspend+0x1ac/0x274 [   39.033778]  state_store+0x88/0x124 [   39.033788]  kobj_attr_store+0x14/0x24 [   39.033798]  sysfs_kf_write+0x48/0x6c [   39.033808]  kernfs_fop_write_iter+0x118/0x1a8 [   39.033817]  vfs_write+0x27c/0x378 [   39.033825]  ksys_write+0x64/0xf4 [   39.033833]  __arm64_sys_write+0x18/0x20 [   39.033841]  invoke_syscall+0x44/0x104 [   39.033852]  el0_svc_common.constprop.0+0xb4/0xd4 [   39.033862]  do_el0_svc+0x18/0x20 [   39.033870]  el0_svc+0x3c/0xf0 [   39.033880]  el0t_64_sync_handler+0xc0/0xc4 [   39.033888]  el0t_64_sync+0x154/0x158 [   39.041274] ravb 11c30000.ethernet eth0: Link is Down",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36903,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: Fix potential uninit-value access in __ip6_make_skb()  As it was done in commit fc1092f51567 (""ipv4: Fix uninit-value access in __ip_make_skb()"") for IPv4\, check FLOWI_FLAG_KNOWN_NH on fl6->flowi6_flags instead of testing HDRINCL on the socket to avoid a race condition which causes uninit-value access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21806,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: let net.core.dev_weight always be non-zero  The following problem was encountered during stability test:  (NULL net_device): NAPI poll function process_backlog+0x0/0x530 \\ \treturned 1\, exceeding its budget of 0. ------------[ cut here ]------------ list_add double add: new=ffff88905f746f48\, prev=ffff88905f746f48\, \\ \tnext=ffff88905f746e40. WARNING: CPU: 18 PID: 5462 at lib/list_debug.c:35 \\ \t__list_add_valid_or_report+0xf3/0x130 CPU: 18 UID: 0 PID: 5462 Comm: ping Kdump: loaded Not tainted 6.13.0-rc7+ RIP: 0010:__list_add_valid_or_report+0xf3/0x130 Call Trace: ? __warn+0xcd/0x250 ? __list_add_valid_or_report+0xf3/0x130 enqueue_to_backlog+0x923/0x1070 netif_rx_internal+0x92/0x2b0 __netif_rx+0x15/0x170 loopback_xmit+0x2ef/0x450 dev_hard_start_xmit+0x103/0x490 __dev_queue_xmit+0xeac/0x1950 ip_finish_output2+0x6cc/0x1620 ip_output+0x161/0x270 ip_push_pending_frames+0x155/0x1a0 raw_sendmsg+0xe13/0x1550 __sys_sendto+0x3bf/0x4e0 __x64_sys_sendto+0xdc/0x1b0 do_syscall_64+0x5b/0x170 entry_SYSCALL_64_after_hwframe+0x76/0x7e  The reproduction command is as follows:   sysctl -w net.core.dev_weight=0   ping 127.0.0.1  This is because when the napi's weight is set to 0\, process_backlog() may return 0 and clear the NAPI_STATE_SCHED bit of napi->state\, causing this napi to be re-polled in net_rx_action() until __do_softirq() times out. Since the NAPI_STATE_SCHED bit has been cleared\, napi_schedule_rps() can be retriggered in enqueue_to_backlog()\, causing this issue.  Making the napi's weight always non-zero solves this problem.  Triggering this issue requires system-wide admin (setting is not namespaced).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21804,linux-libc-dev,LOW,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: rcar-ep: Fix incorrect variable used when calling devm_request_mem_region()  The rcar_pcie_parse_outbound_ranges() uses the devm_request_mem_region() macro to request a needed resource. A string variable that lives on the stack is then used to store a dynamically computed resource name\, which is then passed on as one of the macro arguments. This can lead to undefined behavior.  Depending on the current contents of the memory\, the manifestations of errors may vary. One possible output may be as follows:    $ cat /proc/iomem   30000000-37ffffff :   38000000-3fffffff :  Sometimes\, garbage may appear after the colon.  In very rare cases\, if no NULL-terminator is found in memory\, the system might crash because the string iterator will overrun which can lead to access of unmapped memory above the stack.  Thus\, fix this by replacing outbound_name with the name of the previously requested resource. With the changes applied\, the output will be as follows:    $ cat /proc/iomem   30000000-37ffffff : memory2   38000000-3fffffff : memory3  [kwilczynski: commit log]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26767,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: fixed integer types and null check locations  [why]: issues fixed: - comparison with wider integer type in loop condition which can cause infinite loops - pointer dereference before null check",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-40364,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring: fix io_req_prep_async with provided buffers  io_req_prep_async() can import provided buffers\, commit the ring state by giving up on that before\, it'll be reimported later if needed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-48881,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bcache: revert replacing IS_ERR_OR_NULL with IS_ERR again  Commit 028ddcac477b (""bcache: Remove unnecessary NULL point check in node allocations"") leads a NULL pointer deference in cache_set_flush().  1721         if (!IS_ERR_OR_NULL(c->root)) 1722                 list_add(&c->root->list\, &c->btree_cache);  >From the above code in cache_set_flush()\, if previous registration code fails before allocating c->root\, it is possible c->root is NULL as what it is initialized. __bch_btree_node_alloc() never returns NULL but c->root is possible to be NULL at above line 1721.  This patch replaces IS_ERR() by IS_ERR_OR_NULL() to fix this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26768,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Change acpi_core_pic[NR_CPUS] to acpi_core_pic[MAX_CORE_PIC]  With default config\, the value of NR_CPUS is 64. When HW platform has more then 64 cpus\, system will crash on these platforms. MAX_CORE_PIC is the maximum cpu number in MADT table (max physical number) which can exceed the supported maximum cpu number (NR_CPUS\, max logical number)\, but kernel should not crash. Kernel should boot cpus with NR_CPUS\, let the remainder cpus stay in BIOS.  The potential crash reason is that the array acpi_core_pic[NR_CPUS] can be overflowed when parsing MADT table\, and it is obvious that CORE_PIC should be corresponding to physical core rather than logical core\, so it is better to define the array as acpi_core_pic[MAX_CORE_PIC].  With the patch\, system can boot up 64 vcpus with qemu parameter -smp 128\, otherwise system will crash with the following message.  [    0.000000] CPU 0 Unable to handle kernel paging request at virtual address 0000420000004259\, era == 90000000037a5f0c\, ra == 90000000037a46ec [    0.000000] Oops[#1]: [    0.000000] CPU: 0 PID: 0 Comm: swapper Not tainted 6.8.0-rc2+ #192 [    0.000000] Hardware name: QEMU QEMU Virtual Machine\, BIOS unknown 2/2/2022 [    0.000000] pc 90000000037a5f0c ra 90000000037a46ec tp 9000000003c90000 sp 9000000003c93d60 [    0.000000] a0 0000000000000019 a1 9000000003d93bc0 a2 0000000000000000 a3 9000000003c93bd8 [    0.000000] a4 9000000003c93a74 a5 9000000083c93a67 a6 9000000003c938f0 a7 0000000000000005 [    0.000000] t0 0000420000004201 t1 0000000000000000 t2 0000000000000001 t3 0000000000000001 [    0.000000] t4 0000000000000003 t5 0000000000000000 t6 0000000000000030 t7 0000000000000063 [    0.000000] t8 0000000000000014 u0 ffffffffffffffff s9 0000000000000000 s0 9000000003caee98 [    0.000000] s1 90000000041b0480 s2 9000000003c93da0 s3 9000000003c93d98 s4 9000000003c93d90 [    0.000000] s5 9000000003caa000 s6 000000000a7fd000 s7 000000000f556b60 s8 000000000e0a4330 [    0.000000]    ra: 90000000037a46ec platform_init+0x214/0x250 [    0.000000]   ERA: 90000000037a5f0c efi_runtime_init+0x30/0x94 [    0.000000]  CRMD: 000000b0 (PLV0 -IE -DA +PG DACF=CC DACM=CC -WE) [    0.000000]  PRMD: 00000000 (PPLV0 -PIE -PWE) [    0.000000]  EUEN: 00000000 (-FPE -SXE -ASXE -BTE) [    0.000000]  ECFG: 00070800 (LIE=11 VS=7) [    0.000000] ESTAT: 00010000 [PIL] (IS= ECode=1 EsubCode=0) [    0.000000]  BADV: 0000420000004259 [    0.000000]  PRID: 0014c010 (Loongson-64bit\, Loongson-3A5000) [    0.000000] Modules linked in: [    0.000000] Process swapper (pid: 0\, threadinfo=(____ptrval____)\, task=(____ptrval____)) [    0.000000] Stack : 9000000003c93a14 9000000003800898 90000000041844f8 90000000037a46ec [    0.000000]         000000000a7fd000 0000000008290000 0000000000000000 0000000000000000 [    0.000000]         0000000000000000 0000000000000000 00000000019d8000 000000000f556b60 [    0.000000]         000000000a7fd000 000000000f556b08 9000000003ca7700 9000000003800000 [    0.000000]         9000000003c93e50 9000000003800898 9000000003800108 90000000037a484c [    0.000000]         000000000e0a4330 000000000f556b60 000000000a7fd000 000000000f556b08 [    0.000000]         9000000003ca7700 9000000004184000 0000000000200000 000000000e02b018 [    0.000000]         000000000a7fd000 90000000037a0790 9000000003800108 0000000000000000 [    0.000000]         0000000000000000 000000000e0a4330 000000000f556b60 000000000a7fd000 [    0.000000]         000000000f556b08 000000000eaae298 000000000eaa5040 0000000000200000 [    0.000000]         ... [    0.000000] Call Trace: [    0.000000] [<90000000037a5f0c>] efi_runtime_init+0x30/0x94 [    0.000000] [<90000000037a46ec>] platform_init+0x214/0x250 [    0.000000] [<90000000037a484c>] setup_arch+0x124/0x45c [    0.000000] [<90000000037a0790>] start_kernel+0x90/0x670 [    0.000000] [<900000000378b0d8>] kernel_entry+0xd8/0xdc",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41031,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/filemap: skip to create PMD-sized page cache if needed  On ARM64\, HPAGE_PMD_ORDER is 13 when the base page size is 64KB.  The PMD-sized page cache can't be supported by xarray as the following error messages indicate.  ------------[ cut here ]------------ WARNING: CPU: 35 PID: 7484 at lib/xarray.c:1025 xas_split_alloc+0xf8/0x128 Modules linked in: nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib  \\ nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct    \\ nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4    \\ ip_set rfkill nf_tables nfnetlink vfat fat virtio_balloon drm      \\ fuse xfs libcrc32c crct10dif_ce ghash_ce sha2_ce sha256_arm64      \\ sha1_ce virtio_net net_failover virtio_console virtio_blk failover \\ dimlib virtio_mmio CPU: 35 PID: 7484 Comm: test Kdump: loaded Tainted: G W 6.10.0-rc5-gavin+ #9 Hardware name: QEMU KVM Virtual Machine\, BIOS edk2-20240524-1.el9 05/24/2024 pstate: 83400005 (Nzcv daif +PAN -UAO +TCO +DIT -SSBS BTYPE=--) pc : xas_split_alloc+0xf8/0x128 lr : split_huge_page_to_list_to_order+0x1c4/0x720 sp : ffff800087a4f6c0 x29: ffff800087a4f6c0 x28: ffff800087a4f720 x27: 000000001fffffff x26: 0000000000000c40 x25: 000000000000000d x24: ffff00010625b858 x23: ffff800087a4f720 x22: ffffffdfc0780000 x21: 0000000000000000 x20: 0000000000000000 x19: ffffffdfc0780000 x18: 000000001ff40000 x17: 00000000ffffffff x16: 0000018000000000 x15: 51ec004000000000 x14: 0000e00000000000 x13: 0000000000002000 x12: 0000000000000020 x11: 51ec000000000000 x10: 51ece1c0ffff8000 x9 : ffffbeb961a44d28 x8 : 0000000000000003 x7 : ffffffdfc0456420 x6 : ffff0000e1aa6eb8 x5 : 20bf08b4fe778fca x4 : ffffffdfc0456420 x3 : 0000000000000c40 x2 : 000000000000000d x1 : 000000000000000c x0 : 0000000000000000 Call trace:  xas_split_alloc+0xf8/0x128  split_huge_page_to_list_to_order+0x1c4/0x720  truncate_inode_partial_folio+0xdc/0x160  truncate_inode_pages_range+0x1b4/0x4a8  truncate_pagecache_range+0x84/0xa0  xfs_flush_unmap_range+0x70/0x90 [xfs]  xfs_file_fallocate+0xfc/0x4d8 [xfs]  vfs_fallocate+0x124/0x2e8  ksys_fallocate+0x4c/0xa0  __arm64_sys_fallocate+0x24/0x38  invoke_syscall.constprop.0+0x7c/0xd8  do_el0_svc+0xb4/0xd0  el0_svc+0x44/0x1d8  el0t_64_sync_handler+0x134/0x150  el0t_64_sync+0x17c/0x180  Fix it by skipping to allocate PMD-sized page cache when its size is larger than MAX_PAGECACHE_ORDER.  For this specific case\, we will fall to regular path where the readahead window is determined by BDI's sysfs file (read_ahead_kb).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35946,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw89: fix null pointer access when abort scan  During cancel scan we might use vif that weren't scanning. Fix this by using the actual scanning vif.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22066,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: imx-card: Add NULL check in imx_card_probe()  devm_kasprintf() returns NULL when memory allocation fails. Currently\, imx_card_probe() does not check for this case\, which results in a NULL pointer dereference.  Add NULL check after devm_kasprintf() to prevent this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21878,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  i2c: npcm: disable interrupt enable bit before devm_request_irq  The customer reports that there is a soft lockup issue related to the i2c driver. After checking\, the i2c module was doing a tx transfer and the bmc machine reboots in the middle of the i2c transaction\, the i2c module keeps the status without being reset.  Due to such an i2c module status\, the i2c irq handler keeps getting triggered since the i2c irq handler is registered in the kernel booting process after the bmc machine is doing a warm rebooting. The continuous triggering is stopped by the soft lockup watchdog timer.  Disable the interrupt enable bit in the i2c module before calling devm_request_irq to fix this issue since the i2c relative status bit is read-only.  Here is the soft lockup log. [   28.176395] watchdog: BUG: soft lockup - CPU#0 stuck for 26s! [swapper/0:1] [   28.183351] Modules linked in: [   28.186407] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.15.120-yocto-s-dirty-bbebc78 #1 [   28.201174] pstate: 40000005 (nZcv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--) [   28.208128] pc : __do_softirq+0xb0/0x368 [   28.212055] lr : __do_softirq+0x70/0x368 [   28.215972] sp : ffffff8035ebca00 [   28.219278] x29: ffffff8035ebca00 x28: 0000000000000002 x27: ffffff80071a3780 [   28.226412] x26: ffffffc008bdc000 x25: ffffffc008bcc640 x24: ffffffc008be50c0 [   28.233546] x23: ffffffc00800200c x22: 0000000000000000 x21: 000000000000001b [   28.240679] x20: 0000000000000000 x19: ffffff80001c3200 x18: ffffffffffffffff [   28.247812] x17: ffffffc02d2e0000 x16: ffffff8035eb8b40 x15: 00001e8480000000 [   28.254945] x14: 02c3647e37dbfcb6 x13: 02c364f2ab14200c x12: 0000000002c364f2 [   28.262078] x11: 00000000fa83b2da x10: 000000000000b67e x9 : ffffffc008010250 [   28.269211] x8 : 000000009d983d00 x7 : 7fffffffffffffff x6 : 0000036d74732434 [   28.276344] x5 : 00ffffffffffffff x4 : 0000000000000015 x3 : 0000000000000198 [   28.283476] x2 : ffffffc02d2e0000 x1 : 00000000000000e0 x0 : ffffffc008bdcb40 [   28.290611] Call trace: [   28.293052]  __do_softirq+0xb0/0x368 [   28.296625]  __irq_exit_rcu+0xe0/0x100 [   28.300374]  irq_exit+0x14/0x20 [   28.303513]  handle_domain_irq+0x68/0x90 [   28.307440]  gic_handle_irq+0x78/0xb0 [   28.311098]  call_on_irq_stack+0x20/0x38 [   28.315019]  do_interrupt_handler+0x54/0x5c [   28.319199]  el1_interrupt+0x2c/0x4c [   28.322777]  el1h_64_irq_handler+0x14/0x20 [   28.326872]  el1h_64_irq+0x74/0x78 [   28.330269]  __setup_irq+0x454/0x780 [   28.333841]  request_threaded_irq+0xd0/0x1b4 [   28.338107]  devm_request_threaded_irq+0x84/0x100 [   28.342809]  npcm_i2c_probe_bus+0x188/0x3d0 [   28.346990]  platform_probe+0x6c/0xc4 [   28.350653]  really_probe+0xcc/0x45c [   28.354227]  __driver_probe_device+0x8c/0x160 [   28.358578]  driver_probe_device+0x44/0xe0 [   28.362670]  __driver_attach+0x124/0x1d0 [   28.366589]  bus_for_each_dev+0x7c/0xe0 [   28.370426]  driver_attach+0x28/0x30 [   28.373997]  bus_add_driver+0x124/0x240 [   28.377830]  driver_register+0x7c/0x124 [   28.381662]  __platform_driver_register+0x2c/0x34 [   28.386362]  npcm_i2c_init+0x3c/0x5c [   28.389937]  do_one_initcall+0x74/0x230 [   28.393768]  kernel_init_freeable+0x24c/0x2b4 [   28.398126]  kernel_init+0x28/0x130 [   28.401614]  ret_from_fork+0x10/0x20 [   28.405189] Kernel panic - not syncing: softlockup: hung tasks [   28.411011] SMP: stopping secondary CPUs [   28.414933] Kernel Offset: disabled [   28.418412] CPU features: 0x00000000\,00000802 [   28.427644] Rebooting in 20 seconds..",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52676,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Guard stack limits against 32bit overflow  This patch promotes the arithmetic around checking stack bounds to be done in the 64-bit domain\, instead of the current 32bit. The arithmetic implies adding together a 64-bit register with a int offset. The register was checked to be below 1<<29 when it was variable\, but not when it was fixed. The offset either comes from an instruction (in which case it is 16 bit)\, from another register (in which case the caller checked it to be below 1<<29 [1])\, or from the size of an argument to a kfunc (in which case it can be a u32 [2]). Between the register being inconsistently checked to be below 1<<29\, and the offset being up to an u32\, it appears that we were open to overflowing the `int`s which were currently used for arithmetic.  [1] https://github.com/torvalds/linux/blob/815fb87b753055df2d9e50f6cd80eb10235fe3e9/kernel/bpf/verifier.c#L7494-L7498 [2] https://github.com/torvalds/linux/blob/815fb87b753055df2d9e50f6cd80eb10235fe3e9/kernel/bpf/verifier.c#L11904",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35945,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: phy: phy_device: Prevent nullptr exceptions on ISR  If phydev->irq is set unconditionally\, check for valid interrupt handler or fall back to polling mode to prevent nullptr exceptions in interrupt service routine.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22060,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: mvpp2: Prevent parser TCAM memory corruption  Protect the parser TCAM/SRAM memory\, and the cached (shadow) SRAM information\, from concurrent modifications.  Both the TCAM and SRAM tables are indirectly accessed by configuring an index register that selects the row to read or write to. This means that operations must be atomic in order to\, e.g.\, avoid spreading writes across multiple rows. Since the shadow SRAM array is used to find free rows in the hardware table\, it must also be protected in order to avoid TOCTOU errors where multiple cores allocate the same row.  This issue was detected in a situation where `mvpp2_set_rx_mode()` ran concurrently on two CPUs. In this particular case the MVPP2_PE_MAC_UC_PROMISCUOUS entry was corrupted\, causing the classifier unit to drop all incoming unicast - indicated by the `rx_classifier_drops` counter.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35942,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  pmdomain: imx8mp-blk-ctrl: imx8mp_blk: Add fdcc clock to hdmimix domain  According to i.MX8MP RM and HDMI ADD\, the fdcc clock is part of hdmi rx verification IP that should not enable for HDMI TX. But actually if the clock is disabled before HDMI/LCDIF probe\, LCDIF will not get pixel clock from HDMI PHY and print the error logs:  [CRTC:39:crtc-2] vblank wait timed out WARNING: CPU: 2 PID: 9 at drivers/gpu/drm/drm_atomic_helper.c:1634 drm_atomic_helper_wait_for_vblanks.part.0+0x23c/0x260  Add fdcc clock to LCDIF and HDMI TX power domains to fix the issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52671,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix hang/underflow when transitioning to ODM4:1  [Why] Under some circumstances\, disabling an OPTC and attempting to reclaim its OPP(s) for a different OPTC could cause a hang/underflow due to OPPs not being properly disconnected from the disabled OPTC.  [How] Ensure that all OPPs are unassigned from an OPTC when it gets disabled.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22062,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: add mutual exclusion in proc_sctp_do_udp_port()  We must serialize calls to sctp_udp_sock_stop() and sctp_udp_sock_start() or risk a crash as syzbot reported:  Oops: general protection fault\, probably for non-canonical address 0xdffffc000000000d: 0000 [#1] SMP KASAN PTI KASAN: null-ptr-deref in range [0x0000000000000068-0x000000000000006f] CPU: 1 UID: 0 PID: 6551 Comm: syz.1.44 Not tainted 6.14.0-syzkaller-g7f2ff7b62617 #0 PREEMPT(full) Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 02/12/2025  RIP: 0010:kernel_sock_shutdown+0x47/0x70 net/socket.c:3653 Call Trace:  <TASK>   udp_tunnel_sock_release+0x68/0x80 net/ipv4/udp_tunnel_core.c:181   sctp_udp_sock_stop+0x71/0x160 net/sctp/protocol.c:930   proc_sctp_do_udp_port+0x264/0x450 net/sctp/sysctl.c:553   proc_sys_call_handler+0x3d0/0x5b0 fs/proc/proc_sysctl.c:601   iter_file_splice_write+0x91c/0x1150 fs/splice.c:738   do_splice_from fs/splice.c:935 [inline]   direct_splice_actor+0x18f/0x6c0 fs/splice.c:1158   splice_direct_to_actor+0x342/0xa30 fs/splice.c:1102   do_splice_direct_actor fs/splice.c:1201 [inline]   do_splice_direct+0x174/0x240 fs/splice.c:1227   do_sendfile+0xafd/0xe50 fs/read_write.c:1368   __do_sys_sendfile64 fs/read_write.c:1429 [inline]   __se_sys_sendfile64 fs/read_write.c:1415 [inline]   __x64_sys_sendfile64+0x1d8/0x220 fs/read_write.c:1415   do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22063,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netlabel: Fix NULL pointer exception caused by CALIPSO on IPv4 sockets  When calling netlbl_conn_setattr()\, addr->sa_family is used to determine the function behavior. If sk is an IPv4 socket\, but the connect function is called with an IPv6 address\, the function calipso_sock_setattr() is triggered. Inside this function\, the following code is executed:  sk_fullsock(__sk) ? inet_sk(__sk)->pinet6 : NULL;  Since sk is an IPv4 socket\, pinet6 is NULL\, leading to a null pointer dereference.  This patch fixes the issue by checking if inet6_sk(sk) returns a NULL pointer before accessing pinet6.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52673,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix a debugfs null pointer error  [WHY & HOW] Check whether get_subvp_en() callback exists before calling it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22125,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md/raid1\,raid10: don't ignore IO flags  If blk-wbt is enabled by default\, it's found that raid write performance is quite bad because all IO are throttled by wbt of underlying disks\, due to flag REQ_IDLE is ignored. And turns out this behaviour exist since blk-wbt is introduced.  Other than REQ_IDLE\, other flags should not be ignored as well\, for example REQ_META can be set for filesystems\, clearing it can cause priority reverse problems; And REQ_NOWAIT should not be cleared as well\, because io will wait instead of failing directly in underlying disks.  Fix those problems by keep IO flags from master bio.  Fises: f51d46d0e7cb (""md: add support for REQ_NOWAIT"")",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21872,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  efi: Don't map the entire mokvar table to determine its size  Currently\, when validating the mokvar table\, we (re)map the entire table on each iteration of the loop\, adding space as we discover new entries. If the table grows over a certain size\, this fails due to limitations of early_memmap()\, and we get a failure and traceback:    ------------[ cut here ]------------   WARNING: CPU: 0 PID: 0 at mm/early_ioremap.c:139 __early_ioremap+0xef/0x220   ...   Call Trace:    <TASK>    ? __early_ioremap+0xef/0x220    ? __warn.cold+0x93/0xfa    ? __early_ioremap+0xef/0x220    ? report_bug+0xff/0x140    ? early_fixup_exception+0x5d/0xb0    ? early_idt_handler_common+0x2f/0x3a    ? __early_ioremap+0xef/0x220    ? efi_mokvar_table_init+0xce/0x1d0    ? setup_arch+0x864/0xc10    ? start_kernel+0x6b/0xa10    ? x86_64_start_reservations+0x24/0x30    ? x86_64_start_kernel+0xed/0xf0    ? common_startup_64+0x13e/0x141    </TASK>   ---[ end trace 0000000000000000 ]---   mokvar: Failed to map EFI MOKvar config table pa=0x7c4c3000\, size=265187.  Mapping the entire structure isn't actually necessary\, as we don't ever need more than one entry header mapped at once.  Changes efi_mokvar_table_init() to only map each entry header\, not the entire table\, when determining the table size.  Since we're not mapping any data past the variable name\, it also changes the code to enforce that each variable name is NUL terminated\, rather than attempting to verify it in place.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46870,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Disable DMCUB timeout for DCN35  [Why] DMCUB can intermittently take longer than expected to process commands.  Old ASIC policy was to continue while logging a diagnostic error - which works fine for ASIC without IPS\, but with IPS this could lead to a race condition where we attempt to access DCN state while it's inaccessible\, leading to a system hang when the NIU port is not disabled or register accesses that timeout and the display configuration in an undefined state.  [How] We need to investigate why these accesses take longer than expected\, but for now we should disable the timeout on DCN35 to avoid this race condition. Since the waits happen only at lower interrupt levels the risk of taking too long at higher IRQ and causing a system watchdog timeout are minimal.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38553,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: fec: remove .ndo_poll_controller to avoid deadlocks  There is a deadlock issue found in sungem driver\, please refer to the commit ac0a230f719b (""eth: sungem: remove .ndo_poll_controller to avoid deadlocks""). The root cause of the issue is that netpoll is in atomic context and disable_irq() is called by .ndo_poll_controller interface of sungem driver\, however\, disable_irq() might sleep. After analyzing the implementation of fec_poll_controller()\, the fec driver should have the same issue. Due to the fec driver uses NAPI for TX completions\, the .ndo_poll_controller is unnecessary to be implemented in the fec driver\, so fec_poll_controller() can be safely removed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22127,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix potential deadloop in prepare_compress_overwrite()  Jan Prusakowski reported a kernel hang issue as below:  When running xfstests on linux-next kernel (6.14.0-rc3\, 6.12) I encountered a problem in generic/475 test where fsstress process gets blocked in __f2fs_write_data_pages() and the test hangs. The options I used are:  MKFS_OPTIONS  -- -O compression -O extra_attr -O project_quota -O quota /dev/vdc MOUNT_OPTIONS -- -o acl\,user_xattr -o discard\,compress_extension=* /dev/vdc /vdc  INFO: task kworker/u8:0:11 blocked for more than 122 seconds.       Not tainted 6.14.0-rc3-xfstests-lockdep #1 ""echo 0 > /proc/sys/kernel/hung_task_timeout_secs"" disables this message. task:kworker/u8:0    state:D stack:0     pid:11    tgid:11    ppid:2      task_flags:0x4208160 flags:0x00004000 Workqueue: writeback wb_workfn (flush-253:0) Call Trace:  <TASK>  __schedule+0x309/0x8e0  schedule+0x3a/0x100  schedule_preempt_disabled+0x15/0x30  __mutex_lock+0x59a/0xdb0  __f2fs_write_data_pages+0x3ac/0x400  do_writepages+0xe8/0x290  __writeback_single_inode+0x5c/0x360  writeback_sb_inodes+0x22f/0x570  wb_writeback+0xb0/0x410  wb_do_writeback+0x47/0x2f0  wb_workfn+0x5a/0x1c0  process_one_work+0x223/0x5b0  worker_thread+0x1d5/0x3c0  kthread+0xfd/0x230  ret_from_fork+0x31/0x50  ret_from_fork_asm+0x1a/0x30  </TASK>  The root cause is: once generic/475 starts toload error table to dm device\, f2fs_prepare_compress_overwrite() will loop reading compressed cluster pages due to IO error\, meanwhile it has held .writepages lock\, it can block all other writeback tasks.  Let's fix this issue w/ below changes: - add f2fs_handle_page_eio() in prepare_compress_overwrite() to detect IO error. - detect cp_error earler in f2fs_read_multi_pages().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21870,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: SOF: ipc4-topology: Harden loops for looking up ALH copiers  Other\, non DAI copier widgets could have the same  stream name (sname) as the ALH copier and in that case the copier->data is NULL\, no alh_data is attached\, which could lead to NULL pointer dereference. We could check for this NULL pointer in sof_ipc4_prepare_copier_module() and avoid the crash\, but a similar loop in sof_ipc4_widget_setup_comp_dai() will miscalculate the ALH device count\, causing broken audio.  The correct fix is to harden the matching logic by making sure that the 1. widget is a DAI widget - so dai = w->private is valid 2. the dai (and thus the copier) is ALH copier",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22126,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  md: fix mddev uaf while iterating all_mddevs list  While iterating all_mddevs list from md_notify_reboot() and md_exit()\, list_for_each_entry_safe is used\, and this can race with deletint the next mddev\, causing UAF:  t1: spin_lock //list_for_each_entry_safe(mddev\, n\, ...)  mddev_get(mddev1)  // assume mddev2 is the next entry  spin_unlock             t2:             //remove mddev2             ...             mddev_free             spin_lock             list_del             spin_unlock             kfree(mddev2)  mddev_put(mddev1)  spin_lock  //continue dereference mddev2->all_mddevs  The old helper for_each_mddev() actually grab the reference of mddev2 while holding the lock\, to prevent from being freed. This problem can be fixed the same way\, however\, the code will be complex.  Hence switch to use list_for_each_entry\, in this case mddev_put() can free the mddev1 and it's not safe as well. Refer to md_seq_show()\, also factor out a helper mddev_put_locked() to fix this problem.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21871,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  tee: optee: Fix supplicant wait loop  OP-TEE supplicant is a user-space daemon and it's possible for it be hung or crashed or killed in the middle of processing an OP-TEE RPC call. It becomes more complicated when there is incorrect shutdown ordering of the supplicant process vs the OP-TEE client application which can eventually lead to system hang-up waiting for the closure of the client application.  Allow the client process waiting in kernel for supplicant response to be killed rather than indefinitely waiting in an unkillable state. Also\, a normal uninterruptible wait should not have resulted in the hung-task watchdog getting triggered\, but the endless loop would.  This fixes issues observed during system reboot/shutdown when supplicant got hung for some reason or gets crashed/killed which lead to client getting hung in an unkillable state. It in turn lead to system being in hung up state requiring hard power off/on to recover.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22121,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ext4: fix out-of-bound read in ext4_xattr_inode_dec_ref_all()  There's issue as follows: BUG: KASAN: use-after-free in ext4_xattr_inode_dec_ref_all+0x6ff/0x790 Read of size 4 at addr ffff88807b003000 by task syz-executor.0/15172  CPU: 3 PID: 15172 Comm: syz-executor.0 Call Trace:  __dump_stack lib/dump_stack.c:82 [inline]  dump_stack+0xbe/0xfd lib/dump_stack.c:123  print_address_description.constprop.0+0x1e/0x280 mm/kasan/report.c:400  __kasan_report.cold+0x6c/0x84 mm/kasan/report.c:560  kasan_report+0x3a/0x50 mm/kasan/report.c:585  ext4_xattr_inode_dec_ref_all+0x6ff/0x790 fs/ext4/xattr.c:1137  ext4_xattr_delete_inode+0x4c7/0xda0 fs/ext4/xattr.c:2896  ext4_evict_inode+0xb3b/0x1670 fs/ext4/inode.c:323  evict+0x39f/0x880 fs/inode.c:622  iput_final fs/inode.c:1746 [inline]  iput fs/inode.c:1772 [inline]  iput+0x525/0x6c0 fs/inode.c:1758  ext4_orphan_cleanup fs/ext4/super.c:3298 [inline]  ext4_fill_super+0x8c57/0xba40 fs/ext4/super.c:5300  mount_bdev+0x355/0x410 fs/super.c:1446  legacy_get_tree+0xfe/0x220 fs/fs_context.c:611  vfs_get_tree+0x8d/0x2f0 fs/super.c:1576  do_new_mount fs/namespace.c:2983 [inline]  path_mount+0x119a/0x1ad0 fs/namespace.c:3316  do_mount+0xfc/0x110 fs/namespace.c:3329  __do_sys_mount fs/namespace.c:3540 [inline]  __se_sys_mount+0x219/0x2e0 fs/namespace.c:3514  do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46  entry_SYSCALL_64_after_hwframe+0x67/0xd1  Memory state around the buggy address:  ffff88807b002f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ffff88807b002f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 >ffff88807b003000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff                    ^  ffff88807b003080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ffff88807b003100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  Above issue happens as ext4_xattr_delete_inode() isn't check xattr is valid if xattr is in inode. To solve above issue call xattr_check_inode() check if xattr if valid in inode. In fact\, we can directly verify in ext4_iget_extra_inode()\, so that there is no divergent verification.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-37838,linux-libc-dev,UNKNOWN,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  HSI: ssi_protocol: Fix use after free vulnerability in ssi_protocol Driver Due to Race Condition  In the ssi_protocol_probe() function\, &ssi->work is bound with ssip_xmit_work()\, In ssip_pn_setup()\, the ssip_pn_xmit() function within the ssip_pn_ops structure is capable of starting the work.  If we remove the module which will call ssi_protocol_remove() to make a cleanup\, it will free ssi through kfree(ssi)\, while the work mentioned above will be used. The sequence of operations that may lead to a UAF bug is as follows:  CPU0                                    CPU1                          | ssip_xmit_work ssi_protocol_remove     | kfree(ssi);             |                         | struct hsi_client *cl = ssi->cl;                         | // use ssi  Fix it by ensuring that the work is canceled before proceeding with the cleanup in ssi_protocol_remove().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21877,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usbnet: gl620a: fix endpoint checking in genelink_bind()  Syzbot reports [1] a warning in usb_submit_urb() triggered by inconsistencies between expected and actually present endpoints in gl620a driver. Since genelink_bind() does not properly verify whether specified eps are in fact provided by the device\, in this case\, an artificially manufactured one\, one may get a mismatch.  Fix the issue by resorting to a usbnet utility function usbnet_get_endpoints()\, usually reserved for this very problem. Check for endpoints and return early before proceeding further if any are missing.  [1] Syzbot report: usb 5-1: Manufacturer: syz usb 5-1: SerialNumber: syz usb 5-1: config 0 descriptor?? gl620a 5-1:0.23 usb0: register 'gl620a' at usb-dummy_hcd.0-1\, ... ------------[ cut here ]------------ usb 5-1: BOGUS urb xfer\, pipe 3 != type 1 WARNING: CPU: 2 PID: 1841 at drivers/usb/core/urb.c:503 usb_submit_urb+0xe4b/0x1730 drivers/usb/core/urb.c:503 Modules linked in: CPU: 2 UID: 0 PID: 1841 Comm: kworker/2:2 Not tainted 6.12.0-syzkaller-07834-g06afb0f36106 #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 Workqueue: mld mld_ifc_work RIP: 0010:usb_submit_urb+0xe4b/0x1730 drivers/usb/core/urb.c:503 ... Call Trace:  <TASK>  usbnet_start_xmit+0x6be/0x2780 drivers/net/usb/usbnet.c:1467  __netdev_start_xmit include/linux/netdevice.h:5002 [inline]  netdev_start_xmit include/linux/netdevice.h:5011 [inline]  xmit_one net/core/dev.c:3590 [inline]  dev_hard_start_xmit+0x9a/0x7b0 net/core/dev.c:3606  sch_direct_xmit+0x1ae/0xc30 net/sched/sch_generic.c:343  __dev_xmit_skb net/core/dev.c:3827 [inline]  __dev_queue_xmit+0x13d4/0x43e0 net/core/dev.c:4400  dev_queue_xmit include/linux/netdevice.h:3168 [inline]  neigh_resolve_output net/core/neighbour.c:1514 [inline]  neigh_resolve_output+0x5bc/0x950 net/core/neighbour.c:1494  neigh_output include/net/neighbour.h:539 [inline]  ip6_finish_output2+0xb1b/0x2070 net/ipv6/ip6_output.c:141  __ip6_finish_output net/ipv6/ip6_output.c:215 [inline]  ip6_finish_output+0x3f9/0x1360 net/ipv6/ip6_output.c:226  NF_HOOK_COND include/linux/netfilter.h:303 [inline]  ip6_output+0x1f8/0x540 net/ipv6/ip6_output.c:247  dst_output include/net/dst.h:450 [inline]  NF_HOOK include/linux/netfilter.h:314 [inline]  NF_HOOK include/linux/netfilter.h:308 [inline]  mld_sendpack+0x9f0/0x11d0 net/ipv6/mcast.c:1819  mld_send_cr net/ipv6/mcast.c:2120 [inline]  mld_ifc_work+0x740/0xca0 net/ipv6/mcast.c:2651  process_one_work+0x9c5/0x1ba0 kernel/workqueue.c:3229  process_scheduled_works kernel/workqueue.c:3310 [inline]  worker_thread+0x6c8/0xf00 kernel/workqueue.c:3391  kthread+0x2c1/0x3a0 kernel/kthread.c:389  ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38557,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: Reload only IB representors upon lag disable/enable  On lag disable\, the bond IB device along with all of its representors are destroyed\, and then the slaves' representors get reloaded.  In case the slave IB representor load fails\, the eswitch error flow unloads all representors\, including ethernet representors\, where the netdevs get detached and removed from lag bond. Such flow is inaccurate as the lag driver is not responsible for loading/unloading ethernet representors. Furthermore\, the flow described above begins by holding lag lock to prevent bond changes during disable flow. However\, when reaching the ethernet representors detachment from lag\, the lag lock is required again\, triggering the following deadlock:  Call trace: __switch_to+0xf4/0x148 __schedule+0x2c8/0x7d0 schedule+0x50/0xe0 schedule_preempt_disabled+0x18/0x28 __mutex_lock.isra.13+0x2b8/0x570 __mutex_lock_slowpath+0x1c/0x28 mutex_lock+0x4c/0x68 mlx5_lag_remove_netdev+0x3c/0x1a0 [mlx5_core] mlx5e_uplink_rep_disable+0x70/0xa0 [mlx5_core] mlx5e_detach_netdev+0x6c/0xb0 [mlx5_core] mlx5e_netdev_change_profile+0x44/0x138 [mlx5_core] mlx5e_netdev_attach_nic_profile+0x28/0x38 [mlx5_core] mlx5e_vport_rep_unload+0x184/0x1b8 [mlx5_core] mlx5_esw_offloads_rep_load+0xd8/0xe0 [mlx5_core] mlx5_eswitch_reload_reps+0x74/0xd0 [mlx5_core] mlx5_disable_lag+0x130/0x138 [mlx5_core] mlx5_lag_disable_change+0x6c/0x70 [mlx5_core] // hold ldev->lock mlx5_devlink_eswitch_mode_set+0xc0/0x410 [mlx5_core] devlink_nl_cmd_eswitch_set_doit+0xdc/0x180 genl_family_rcv_msg_doit.isra.17+0xe8/0x138 genl_rcv_msg+0xe4/0x220 netlink_rcv_skb+0x44/0x108 genl_rcv+0x40/0x58 netlink_unicast+0x198/0x268 netlink_sendmsg+0x1d4/0x418 sock_sendmsg+0x54/0x60 __sys_sendto+0xf4/0x120 __arm64_sys_sendto+0x30/0x40 el0_svc_common+0x8c/0x120 do_el0_svc+0x30/0xa0 el0_svc+0x20/0x30 el0_sync_handler+0x90/0xb8 el0_sync+0x160/0x180  Thus\, upon lag enable/disable\, load and unload only the IB representors of the slaves preventing the deadlock mentioned above.  While at it\, refactor the mlx5_esw_offloads_rep_load() function to have a static helper method for its internal logic\, in symmetry with the representor unload design.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21875,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: always handle address removal under msk socket lock  Syzkaller reported a lockdep splat in the PM control path:    WARNING: CPU: 0 PID: 6693 at ./include/net/sock.h:1711 sock_owned_by_me include/net/sock.h:1711 [inline]   WARNING: CPU: 0 PID: 6693 at ./include/net/sock.h:1711 msk_owned_by_me net/mptcp/protocol.h:363 [inline]   WARNING: CPU: 0 PID: 6693 at ./include/net/sock.h:1711 mptcp_pm_nl_addr_send_ack+0x57c/0x610 net/mptcp/pm_netlink.c:788   Modules linked in:   CPU: 0 UID: 0 PID: 6693 Comm: syz.0.205 Not tainted 6.14.0-rc2-syzkaller-00303-gad1b832bf1cf #0   Hardware name: Google Compute Engine/Google Compute Engine\, BIOS Google 12/27/2024   RIP: 0010:sock_owned_by_me include/net/sock.h:1711 [inline]   RIP: 0010:msk_owned_by_me net/mptcp/protocol.h:363 [inline]   RIP: 0010:mptcp_pm_nl_addr_send_ack+0x57c/0x610 net/mptcp/pm_netlink.c:788   Code: 5b 41 5c 41 5d 41 5e 41 5f 5d c3 cc cc cc cc e8 ca 7b d3 f5 eb b9 e8 c3 7b d3 f5 90 0f 0b 90 e9 dd fb ff ff e8 b5 7b d3 f5 90 <0f> 0b 90 e9 3e fb ff ff 44 89 f1 80 e1 07 38 c1 0f 8c eb fb ff ff   RSP: 0000:ffffc900034f6f60 EFLAGS: 00010283   RAX: ffffffff8bee3c2b RBX: 0000000000000001 RCX: 0000000000080000   RDX: ffffc90004d42000 RSI: 000000000000a407 RDI: 000000000000a408   RBP: ffffc900034f7030 R08: ffffffff8bee37f6 R09: 0100000000000000   R10: dffffc0000000000 R11: ffffed100bcc62e4 R12: ffff88805e6316e0   R13: ffff88805e630c00 R14: dffffc0000000000 R15: ffff88805e630c00   FS:  00007f7e9a7e96c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 0000001b2fd18ff8 CR3: 0000000032c24000 CR4: 00000000003526f0   DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000   DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400   Call Trace:    <TASK>    mptcp_pm_remove_addr+0x103/0x1d0 net/mptcp/pm.c:59    mptcp_pm_remove_anno_addr+0x1f4/0x2f0 net/mptcp/pm_netlink.c:1486    mptcp_nl_remove_subflow_and_signal_addr net/mptcp/pm_netlink.c:1518 [inline]    mptcp_pm_nl_del_addr_doit+0x118d/0x1af0 net/mptcp/pm_netlink.c:1629    genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]    genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]    genl_rcv_msg+0xb1f/0xec0 net/netlink/genetlink.c:1210    netlink_rcv_skb+0x206/0x480 net/netlink/af_netlink.c:2543    genl_rcv+0x28/0x40 net/netlink/genetlink.c:1219    netlink_unicast_kernel net/netlink/af_netlink.c:1322 [inline]    netlink_unicast+0x7f6/0x990 net/netlink/af_netlink.c:1348    netlink_sendmsg+0x8de/0xcb0 net/netlink/af_netlink.c:1892    sock_sendmsg_nosec net/socket.c:718 [inline]    __sock_sendmsg+0x221/0x270 net/socket.c:733    ____sys_sendmsg+0x53a/0x860 net/socket.c:2573    ___sys_sendmsg net/socket.c:2627 [inline]    __sys_sendmsg+0x269/0x350 net/socket.c:2659    do_syscall_x64 arch/x86/entry/common.c:52 [inline]    do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83    entry_SYSCALL_64_after_hwframe+0x77/0x7f   RIP: 0033:0x7f7e9998cde9   Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48   RSP: 002b:00007f7e9a7e9038 EFLAGS: 00000246 ORIG_RAX: 000000000000002e   RAX: ffffffffffffffda RBX: 00007f7e99ba5fa0 RCX: 00007f7e9998cde9   RDX: 000000002000c094 RSI: 0000400000000000 RDI: 0000000000000007   RBP: 00007f7e99a0e2a0 R08: 0000000000000000 R09: 0000000000000000   R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000   R13: 0000000000000000 R14: 00007f7e99ba5fa0 R15: 00007fff49231088  Indeed the PM can try to send a RM_ADDR over a msk without acquiring first the msk socket lock.  The bugged code-path comes from an early optimization: when there are no subflows\, the PM should (usually) not send RM_ADDR notifications.  The above statement is incorrect\, as without locks another process could concur ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35949,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: make sure that WRITTEN is set on all metadata blocks  We previously would call btrfs_check_leaf() if we had the check integrity code enabled\, which meant that we could only run the extended leaf checks if we had WRITTEN set on the header flags.  This leaves a gap in our checking\, because we could end up with corruption on disk where WRITTEN isn't set on the leaf\, and then the extended leaf checks don't get run which we rely on to validate all of the item pointers to make sure we don't access memory outside of the extent buffer.  However\, since 732fab95abe2 (""btrfs: check-integrity: remove CONFIG_BTRFS_FS_CHECK_INTEGRITY option"") we no longer call btrfs_check_leaf() from btrfs_mark_buffer_dirty()\, which means we only ever call it on blocks that are being written out\, and thus have WRITTEN set\, or that are being read in\, which should have WRITTEN set.  Add checks to make sure we have WRITTEN set appropriately\, and then make sure __btrfs_check_leaf() always does the item checking.  This will protect us from file systems that have been corrupted and no longer have WRITTEN set on some of the blocks.  This was hit on a crafted image tweaking the WRITTEN bit and reported by KASAN as out-of-bound access in the eb accessors. The example is a dir item at the end of an eb.    [2.042] BTRFS warning (device loop1): bad eb member start: ptr 0x3fff start 30572544 member offset 16410 size 2   [2.040] general protection fault\, probably for non-canonical address 0xe0009d1000000003: 0000 [#1] PREEMPT SMP KASAN NOPTI   [2.537] KASAN: maybe wild-memory-access in range [0x0005088000000018-0x000508800000001f]   [2.729] CPU: 0 PID: 2587 Comm: mount Not tainted 6.8.2 #1   [2.729] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014   [2.621] RIP: 0010:btrfs_get_16+0x34b/0x6d0   [2.621] RSP: 0018:ffff88810871fab8 EFLAGS: 00000206   [2.621] RAX: 0000a11000000003 RBX: ffff888104ff8720 RCX: ffff88811b2288c0   [2.621] RDX: dffffc0000000000 RSI: ffffffff81dd8aca RDI: ffff88810871f748   [2.621] RBP: 000000000000401a R08: 0000000000000001 R09: ffffed10210e3ee9   [2.621] R10: ffff88810871f74f R11: 205d323430333737 R12: 000000000000001a   [2.621] R13: 000508800000001a R14: 1ffff110210e3f5d R15: ffffffff850011e8   [2.621] FS:  00007f56ea275840(0000) GS:ffff88811b200000(0000) knlGS:0000000000000000   [2.621] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   [2.621] CR2: 00007febd13b75c0 CR3: 000000010bb50000 CR4: 00000000000006f0   [2.621] Call Trace:   [2.621]  <TASK>   [2.621]  ? show_regs+0x74/0x80   [2.621]  ? die_addr+0x46/0xc0   [2.621]  ? exc_general_protection+0x161/0x2a0   [2.621]  ? asm_exc_general_protection+0x26/0x30   [2.621]  ? btrfs_get_16+0x33a/0x6d0   [2.621]  ? btrfs_get_16+0x34b/0x6d0   [2.621]  ? btrfs_get_16+0x33a/0x6d0   [2.621]  ? __pfx_btrfs_get_16+0x10/0x10   [2.621]  ? __pfx_mutex_unlock+0x10/0x10   [2.621]  btrfs_match_dir_item_name+0x101/0x1a0   [2.621]  btrfs_lookup_dir_item+0x1f3/0x280   [2.621]  ? __pfx_btrfs_lookup_dir_item+0x10/0x10   [2.621]  btrfs_get_tree+0xd25/0x1910  [ copy more details from report ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-29482,libheif1,MEDIUM,1.15.1-1+deb12u1,N/A,"Buffer Overflow vulnerability in libheif 1.19.7 allows a local attacker to execute arbitrary code via the SAO (Sample Adaptive Offset) processing of libde265.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57931,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  selinux: ignore unknown extended permissions  When evaluating extended permissions\, ignore unknown permissions instead of calling BUG(). This commit ensures that future permissions can be added without interfering with older kernels.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57930,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  tracing: Have process_string() also allow arrays  In order to catch a common bug where a TRACE_EVENT() TP_fast_assign() assigns an address of an allocated string to the ring buffer and then references it in TP_printk()\, which can be executed hours later when the string is free\, the function test_event_printk() runs on all events as they are registered to make sure there's no unwanted dereferencing.  It calls process_string() to handle cases in TP_printk() format that has ""%s"". It returns whether or not the string is safe. But it can have some false positives.  For instance\, xe_bo_move() has:   TP_printk(""move_lacks_source:%s\, migrate object %p [size %zu] from %s to %s device_id:%s""\,             __entry->move_lacks_source ? ""yes"" : ""no""\, __entry->bo\, __entry->size\,             xe_mem_type_to_name[__entry->old_placement]\,             xe_mem_type_to_name[__entry->new_placement]\, __get_str(device_id))  Where the ""%s"" references into xe_mem_type_to_name[]. This is an array of pointers that should be safe for the event to access. Instead of flagging this as a bad reference\, if a reference points to an array\, where the record field is the index\, consider it safe.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-39616,libaom3,HIGH,3.6.0-1+deb12u1,N/A,"AOMedia v3.0.0 to v3.5.0 was discovered to contain an invalid read memory access via the component assign_frame_buffer_p in av1/common/av1_common_int.h.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46772,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check denominator crb_pipes before used  [WHAT & HOW] A denominator cannot be 0\, and is checked before used.  This fixes 2 DIVIDE_BY_ZERO issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26739,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: act_mirred: don't override retval if we already lost the skb  If we're redirecting the skb\, and haven't called tcf_mirred_forward()\, yet\, we need to tell the core to drop the skb by setting the retcode to SHOT. If we have called tcf_mirred_forward()\, however\, the skb is out of our hands and returning SHOT will lead to UaF.  Move the retval override to the error path which actually need it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-25265,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel through 5.16.10\, certain binary files may have the exec-all attribute if they were built in approximately 2003 (e.g.\, with GCC 3.2.2 and Linux kernel 2.4.20). This can cause execution of bytes located in supposedly non-executable regions of a file.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46776,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Run DC_LOG_DC after checking link->link_enc  [WHAT] The DC_LOG_DC should be run after link->link_enc is checked\, not before.  This fixes 1 REVERSE_INULL issue reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57939,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  riscv: Fix sleeping in invalid context in die()  die() can be called in exception handler\, and therefore cannot sleep. However\, die() takes spinlock_t which can sleep with PREEMPT_RT enabled. That causes the following warning:  BUG: sleeping function called from invalid context at kernel/locking/spinlock_rt.c:48 in_atomic(): 1\, irqs_disabled(): 1\, non_block: 0\, pid: 285\, name: mutex preempt_count: 110001\, expected: 0 RCU nest depth: 0\, expected: 0 CPU: 0 UID: 0 PID: 285 Comm: mutex Not tainted 6.12.0-rc7-00022-ge19049cf7d56-dirty #234 Hardware name: riscv-virtio\,qemu (DT) Call Trace:     dump_backtrace+0x1c/0x24     show_stack+0x2c/0x38     dump_stack_lvl+0x5a/0x72     dump_stack+0x14/0x1c     __might_resched+0x130/0x13a     rt_spin_lock+0x2a/0x5c     die+0x24/0x112     do_trap_insn_illegal+0xa0/0xea     _new_vmalloc_restore_context_a0+0xcc/0xd8 Oops - illegal instruction [#1]  Switch to use raw_spinlock_t\, which does not sleep even with PREEMPT_RT enabled.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46775,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Validate function returns  [WHAT & HOW] Function return values must be checked before data can be used in subsequent functions.  This fixes 4 CHECKED_RETURN issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57938,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/sctp: Prevent autoclose integer overflow in sctp_association_init()  While by default max_autoclose equals to INT_MAX / HZ\, one may set net.sctp.max_autoclose to UINT_MAX. There is code in sctp_association_init() that can consequently trigger overflow.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46774,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  powerpc/rtas: Prevent Spectre v1 gadget construction in sys_rtas()  Smatch warns:    arch/powerpc/kernel/rtas.c:1932 __do_sys_rtas() warn: potential   spectre issue 'args.args' [r] (local cap)  The 'nargs' and 'nret' locals come directly from a user-supplied buffer and are used as indexes into a small stack-based array and as inputs to copy_to_user() after they are subject to bounds checks.  Use array_index_nospec() after the bounds checks to clamp these values for speculative execution.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21656,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  hwmon: (drivetemp) Fix driver producing garbage data when SCSI errors occur  scsi_execute_cmd() function can return both negative (linux codes) and positive (scsi_cmnd result field) error codes.  Currently the driver just passes error codes of scsi_execute_cmd() to hwmon core\, which is incorrect because hwmon only checks for negative error codes. This leads to hwmon reporting uninitialized data to userspace in case of SCSI errors (for example if the disk drive was disconnected).  This patch checks scsi_execute_cmd() output and returns -EIO if it's error code is positive.  [groeck: Avoid inline variable declaration for portability]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50262,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix out-of-bounds write in trie_get_next_key()  trie_get_next_key() allocates a node stack with size trie->max_prefixlen\, while it writes (trie->max_prefixlen + 1) nodes to the stack when it has full paths from the root to leaves. For example\, consider a trie with max_prefixlen is 8\, and the nodes with key 0x00/0\, 0x00/1\, 0x00/2\, ... 0x00/8 inserted. Subsequent calls to trie_get_next_key with _key with .prefixlen = 8 make 9 nodes be written on the node stack with size 8.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58083,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: Explicitly verify target vCPU is online in kvm_get_vcpu()  Explicitly verify the target vCPU is fully online _prior_ to clamping the index in kvm_get_vcpu().  If the index is ""bad""\, the nospec clamping will generate '0'\, i.e. KVM will return vCPU0 instead of NULL.  In practice\, the bug is unlikely to cause problems\, as it will only come into play if userspace or the guest is buggy or misbehaving\, e.g. KVM may send interrupts to vCPU0 instead of dropping them on the floor.  However\, returning vCPU0 when it shouldn't exist per online_vcpus is problematic now that KVM uses an xarray for the vCPUs array\, as KVM needs to insert into the xarray before publishing the vCPU to userspace (see commit c5b077549136 (""KVM: Convert the kvm->vcpus array to a xarray""))\, i.e. before vCPU creation is guaranteed to succeed.  As a result\, incorrectly providing access to vCPU0 will trigger a use-after-free if vCPU0 is dereferenced and kvm_vm_ioctl_create_vcpu() bails out of vCPU creation due to an error and frees vCPU0.  Commit afb2acb2e3a3 (""KVM: Fix vcpu_array[0] races"") papered over that issue\, but in doing so introduced an unsolvable teardown conundrum.  Preventing accesses to vCPU0 before it's fully online will allow reverting commit afb2acb2e3a3\, without re-introducing the vcpu_array[0] UAF race.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58080,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  clk: qcom: dispcc-sm6350: Add missing parent_map for a clock  If a clk_rcg2 has a parent\, it should also have parent_map defined\, otherwise we'll get a NULL pointer dereference when calling clk_set_rate like the following:    [    3.388105] Call trace:   [    3.390664]  qcom_find_src_index+0x3c/0x70 (P)   [    3.395301]  qcom_find_src_index+0x1c/0x70 (L)   [    3.399934]  _freq_tbl_determine_rate+0x48/0x100   [    3.404753]  clk_rcg2_determine_rate+0x1c/0x28   [    3.409387]  clk_core_determine_round_nolock+0x58/0xe4   [    3.421414]  clk_core_round_rate_nolock+0x48/0xfc   [    3.432974]  clk_core_round_rate_nolock+0xd0/0xfc   [    3.444483]  clk_core_set_rate_nolock+0x8c/0x300   [    3.455886]  clk_set_rate+0x38/0x14c  Add the parent_map property for the clock where it's missing and also un-inline the parent_data as well to keep the matching parent_map and parent_data together.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21655,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring/eventfd: ensure io_eventfd_signal() defers another RCU period  io_eventfd_do_signal() is invoked from an RCU callback\, but when dropping the reference to the io_ev_fd\, it calls io_eventfd_free() directly if the refcount drops to zero. This isn't correct\, as any potential freeing of the io_ev_fd should be deferred another RCU grace period.  Just call io_eventfd_put() rather than open-code the dec-and-test and free\, which will correctly defer it another RCU grace period.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50261,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  macsec: Fix use-after-free while sending the offloading packet  KASAN reports the following UAF. The metadata_dst\, which is used to store the SCI value for macsec offload\, is already freed by metadata_dst_free() in macsec_free_netdev()\, while driver still use it for sending the packet.  To fix this issue\, dst_release() is used instead to release metadata_dst. So it is not freed instantly in macsec_free_netdev() if still referenced by skb.   BUG: KASAN: slab-use-after-free in mlx5e_xmit+0x1e8f/0x4190 [mlx5_core]  Read of size 2 at addr ffff88813e42e038 by task kworker/7:2/714  [...]  Workqueue: mld mld_ifc_work  Call Trace:   <TASK>   dump_stack_lvl+0x51/0x60   print_report+0xc1/0x600   kasan_report+0xab/0xe0   mlx5e_xmit+0x1e8f/0x4190 [mlx5_core]   dev_hard_start_xmit+0x120/0x530   sch_direct_xmit+0x149/0x11e0   __qdisc_run+0x3ad/0x1730   __dev_queue_xmit+0x1196/0x2ed0   vlan_dev_hard_start_xmit+0x32e/0x510 [8021q]   dev_hard_start_xmit+0x120/0x530   __dev_queue_xmit+0x14a7/0x2ed0   macsec_start_xmit+0x13e9/0x2340   dev_hard_start_xmit+0x120/0x530   __dev_queue_xmit+0x14a7/0x2ed0   ip6_finish_output2+0x923/0x1a70   ip6_finish_output+0x2d7/0x970   ip6_output+0x1ce/0x3a0   NF_HOOK.constprop.0+0x15f/0x190   mld_sendpack+0x59a/0xbd0   mld_ifc_work+0x48a/0xa80   process_one_work+0x5aa/0xe50   worker_thread+0x79c/0x1290   kthread+0x28f/0x350   ret_from_fork+0x2d/0x70   ret_from_fork_asm+0x11/0x20   </TASK>   Allocated by task 3922:   kasan_save_stack+0x20/0x40   kasan_save_track+0x10/0x30   __kasan_kmalloc+0x77/0x90   __kmalloc_noprof+0x188/0x400   metadata_dst_alloc+0x1f/0x4e0   macsec_newlink+0x914/0x1410   __rtnl_newlink+0xe08/0x15b0   rtnl_newlink+0x5f/0x90   rtnetlink_rcv_msg+0x667/0xa80   netlink_rcv_skb+0x12c/0x360   netlink_unicast+0x551/0x770   netlink_sendmsg+0x72d/0xbd0   __sock_sendmsg+0xc5/0x190   ____sys_sendmsg+0x52e/0x6a0   ___sys_sendmsg+0xeb/0x170   __sys_sendmsg+0xb5/0x140   do_syscall_64+0x4c/0x100   entry_SYSCALL_64_after_hwframe+0x4b/0x53   Freed by task 4011:   kasan_save_stack+0x20/0x40   kasan_save_track+0x10/0x30   kasan_save_free_info+0x37/0x50   poison_slab_object+0x10c/0x190   __kasan_slab_free+0x11/0x30   kfree+0xe0/0x290   macsec_free_netdev+0x3f/0x140   netdev_run_todo+0x450/0xc70   rtnetlink_rcv_msg+0x66f/0xa80   netlink_rcv_skb+0x12c/0x360   netlink_unicast+0x551/0x770   netlink_sendmsg+0x72d/0xbd0   __sock_sendmsg+0xc5/0x190   ____sys_sendmsg+0x52e/0x6a0   ___sys_sendmsg+0xeb/0x170   __sys_sendmsg+0xb5/0x140   do_syscall_64+0x4c/0x100   entry_SYSCALL_64_after_hwframe+0x4b/0x53",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1176,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43 and classified as critical. This issue affects the function _bfd_elf_gc_mark_rsec of the file elflink.c of the component ld. The manipulation leads to heap-based buffer overflow. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. The patch is named f9978defb6fab0bd8583942d97c112b0932ac814. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58086,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/v3d: Stop active perfmon if it is being destroyed  If the active performance monitor (`v3d->active_perfmon`) is being destroyed\, stop it first. Currently\, the active perfmon is not stopped during destruction\, leaving the `v3d->active_perfmon` pointer stale. This can lead to undefined behavior and instability.  This patch ensures that the active perfmon is stopped before being destroyed\, aligning with the behavior introduced in commit 7d1fd3638ee3 (""drm/v3d: Stop the active perfmon before being destroyed"").",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21653,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  net_sched: cls_flow: validate TCA_FLOW_RSHIFT attribute  syzbot found that TCA_FLOW_RSHIFT attribute was not validated. Right shitfing a 32bit integer is undefined for large shift values.  UBSAN: shift-out-of-bounds in net/sched/cls_flow.c:329:23 shift exponent 9445 is too large for 32-bit type 'u32' (aka 'unsigned int') CPU: 1 UID: 0 PID: 54 Comm: kworker/u8:3 Not tainted 6.13.0-rc3-syzkaller-00180-g4f619d518db9 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: ipv6_addrconf addrconf_dad_work Call Trace:  <TASK>   __dump_stack lib/dump_stack.c:94 [inline]   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120   ubsan_epilogue lib/ubsan.c:231 [inline]   __ubsan_handle_shift_out_of_bounds+0x3c8/0x420 lib/ubsan.c:468   flow_classify+0x24d5/0x25b0 net/sched/cls_flow.c:329   tc_classify include/net/tc_wrapper.h:197 [inline]   __tcf_classify net/sched/cls_api.c:1771 [inline]   tcf_classify+0x420/0x1160 net/sched/cls_api.c:1867   sfb_classify net/sched/sch_sfb.c:260 [inline]   sfb_enqueue+0x3ad/0x18b0 net/sched/sch_sfb.c:318   dev_qdisc_enqueue+0x4b/0x290 net/core/dev.c:3793   __dev_xmit_skb net/core/dev.c:3889 [inline]   __dev_queue_xmit+0xf0e/0x3f50 net/core/dev.c:4400   dev_queue_xmit include/linux/netdevice.h:3168 [inline]   neigh_hh_output include/net/neighbour.h:523 [inline]   neigh_output include/net/neighbour.h:537 [inline]   ip_finish_output2+0xd41/0x1390 net/ipv4/ip_output.c:236   iptunnel_xmit+0x55d/0x9b0 net/ipv4/ip_tunnel_core.c:82   udp_tunnel_xmit_skb+0x262/0x3b0 net/ipv4/udp_tunnel_core.c:173   geneve_xmit_skb drivers/net/geneve.c:916 [inline]   geneve_xmit+0x21dc/0x2d00 drivers/net/geneve.c:1039   __netdev_start_xmit include/linux/netdevice.h:5002 [inline]   netdev_start_xmit include/linux/netdevice.h:5011 [inline]   xmit_one net/core/dev.c:3590 [inline]   dev_hard_start_xmit+0x27a/0x7d0 net/core/dev.c:3606   __dev_queue_xmit+0x1b73/0x3f50 net/core/dev.c:4434",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58087,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix racy issue from session lookup and expire  Increment the session reference count within the lock for lookup to avoid racy issue with session expire.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50267,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  USB: serial: io_edgeport: fix use after free in debug printk  The ""dev_dbg(&urb->dev->dev\, ..."" which happens after usb_free_urb(urb) is a use after free of the ""urb"" pointer.  Store the ""dev"" pointer at the start of the function to avoid this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2010-4651,patch,LOW,2.7.6-7,N/A,"Directory traversal vulnerability in util.c in GNU patch 2.6.1 and earlier allows user-assisted remote attackers to create or overwrite arbitrary files via a filename that is specified with a .. (dot dot) or full pathname\, a related issue to CVE-2010-1679.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50264,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  vsock/virtio: Initialization of the dangling pointer occurring in vsk->trans  During loopback communication\, a dangling pointer can be created in vsk->trans\, potentially leading to a Use-After-Free condition.  This issue is resolved by initializing vsk->trans to NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21651,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: hns3: don't auto enable misc vector  Currently\, there is a time window between misc irq enabled and service task inited. If an interrupte is reported at this time\, it will cause warning like below:  [   16.324639] Call trace: [   16.324641]  __queue_delayed_work+0xb8/0xe0 [   16.324643]  mod_delayed_work_on+0x78/0xd0 [   16.324655]  hclge_errhand_task_schedule+0x58/0x90 [hclge] [   16.324662]  hclge_misc_irq_handle+0x168/0x240 [hclge] [   16.324666]  __handle_irq_event_percpu+0x64/0x1e0 [   16.324667]  handle_irq_event+0x80/0x170 [   16.324670]  handle_fasteoi_edge_irq+0x110/0x2bc [   16.324671]  __handle_domain_irq+0x84/0xfc [   16.324673]  gic_handle_irq+0x88/0x2c0 [   16.324674]  el1_irq+0xb8/0x140 [   16.324677]  arch_cpu_idle+0x18/0x40 [   16.324679]  default_idle_call+0x5c/0x1bc [   16.324682]  cpuidle_idle_call+0x18c/0x1c4 [   16.324684]  do_idle+0x174/0x17c [   16.324685]  cpu_startup_entry+0x30/0x6c [   16.324687]  secondary_start_kernel+0x1a4/0x280 [   16.324688] ---[ end trace 6aa0bff672a964aa ]---  So don't auto enable misc vector when request irq..",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58085,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  tomoyo: don't emit warning in tomoyo_write_control()  syzbot is reporting too large allocation warning at tomoyo_write_control()\, for one can write a very very long line without new line character. To fix this warning\, I use __GFP_NOWARN rather than checking for KMALLOC_MAX_SIZE\, for practically a valid line should be always shorter than 32KB where the ""too small to fail"" memory-allocation rule applies.  One might try to write a valid line that is longer than 32KB\, but such request will likely fail with -ENOMEM. Therefore\, I feel that separately returning -EINVAL when a line is longer than KMALLOC_MAX_SIZE is redundant. There is no need to distinguish over-32KB and over-KMALLOC_MAX_SIZE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50265,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: remove entry once instead of null-ptr-dereference in ocfs2_xa_remove()  Syzkaller is able to provoke null-ptr-dereference in ocfs2_xa_remove():  [   57.319872] (a.out\,1161\,7):ocfs2_xa_remove:2028 ERROR: status = -12 [   57.320420] (a.out\,1161\,7):ocfs2_xa_cleanup_value_truncate:1999 ERROR: Partial truncate while removing xattr overlay.upper.  Leaking 1 clusters and removing the entry [   57.321727] BUG: kernel NULL pointer dereference\, address: 0000000000000004 [...] [   57.325727] RIP: 0010:ocfs2_xa_block_wipe_namevalue+0x2a/0xc0 [...] [   57.331328] Call Trace: [   57.331477]  <TASK> [...] [   57.333511]  ? do_user_addr_fault+0x3e5/0x740 [   57.333778]  ? exc_page_fault+0x70/0x170 [   57.334016]  ? asm_exc_page_fault+0x2b/0x30 [   57.334263]  ? __pfx_ocfs2_xa_block_wipe_namevalue+0x10/0x10 [   57.334596]  ? ocfs2_xa_block_wipe_namevalue+0x2a/0xc0 [   57.334913]  ocfs2_xa_remove_entry+0x23/0xc0 [   57.335164]  ocfs2_xa_set+0x704/0xcf0 [   57.335381]  ? _raw_spin_unlock+0x1a/0x40 [   57.335620]  ? ocfs2_inode_cache_unlock+0x16/0x20 [   57.335915]  ? trace_preempt_on+0x1e/0x70 [   57.336153]  ? start_this_handle+0x16c/0x500 [   57.336410]  ? preempt_count_sub+0x50/0x80 [   57.336656]  ? _raw_read_unlock+0x20/0x40 [   57.336906]  ? start_this_handle+0x16c/0x500 [   57.337162]  ocfs2_xattr_block_set+0xa6/0x1e0 [   57.337424]  __ocfs2_xattr_set_handle+0x1fd/0x5d0 [   57.337706]  ? ocfs2_start_trans+0x13d/0x290 [   57.337971]  ocfs2_xattr_set+0xb13/0xfb0 [   57.338207]  ? dput+0x46/0x1c0 [   57.338393]  ocfs2_xattr_trusted_set+0x28/0x30 [   57.338665]  ? ocfs2_xattr_trusted_set+0x28/0x30 [   57.338948]  __vfs_removexattr+0x92/0xc0 [   57.339182]  __vfs_removexattr_locked+0xd5/0x190 [   57.339456]  ? preempt_count_sub+0x50/0x80 [   57.339705]  vfs_removexattr+0x5f/0x100 [...]  Reproducer uses faultinject facility to fail ocfs2_xa_remove() -> ocfs2_xa_value_truncate() with -ENOMEM.  In this case the comment mentions that we can return 0 if ocfs2_xa_cleanup_value_truncate() is going to wipe the entry anyway. But the following 'rc' check is wrong and execution flow do 'ocfs2_xa_remove_entry(loc);' twice: * 1st: in ocfs2_xa_cleanup_value_truncate(); * 2nd: returning back to ocfs2_xa_remove() instead of going to 'out'.  Fix this by skipping the 2nd removal of the same entry and making syzkaller repro happy.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-5709,libgssapi-krb5-2,LOW,1.20.1-2+deb12u2,N/A,"An issue was discovered in MIT Kerberos 5 (aka krb5) through 1.16. There is a variable ""dbentry->n_key_data"" in kadmin/dbutil/dump.c that can store 16-bit data but unknowingly the developer has assigned a ""u4"" variable to it\, which is for 32-bit data. An attacker can use this vulnerability to affect other artifacts of the database as we know that a Kerberos database dump file contains trusted data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50268,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: fix potential out of bounds in ucsi_ccg_update_set_new_cam_cmd()  The ""*cmd"" variable can be controlled by the user via debugfs.  That means ""new_cam"" can be as high as 255 while the size of the uc->updated[] array is UCSI_MAX_ALTMODES (30).  The call tree is: ucsi_cmd() // val comes from simple_attr_write_xsigned() -> ucsi_send_command()    -> ucsi_send_command_common()       -> ucsi_run_command() // calls ucsi->ops->sync_control()          -> ucsi_ccg_sync_control()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16234,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/net/wireless/intel/iwlwifi/pcie/trans.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58089,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix double accounting race when btrfs_run_delalloc_range() failed  [BUG] When running btrfs with block size (4K) smaller than page size (64K\, aarch64)\, there is a very high chance to crash the kernel at generic/750\, with the following messages: (before the call traces\, there are 3 extra debug messages added)    BTRFS warning (device dm-3): read-write for sector size 4096 with page size 65536 is experimental   BTRFS info (device dm-3): checking UUID tree   hrtimer: interrupt took 5451385 ns   BTRFS error (device dm-3): cow_file_range failed\, root=4957 inode=257 start=1605632 len=69632: -28   BTRFS error (device dm-3): run_delalloc_nocow failed\, root=4957 inode=257 start=1605632 len=69632: -28   BTRFS error (device dm-3): failed to run delalloc range\, root=4957 ino=257 folio=1572864 submit_bitmap=8-15 start=1605632 len=69632: -28   ------------[ cut here ]------------   WARNING: CPU: 2 PID: 3020984 at ordered-data.c:360 can_finish_ordered_extent+0x370/0x3b8 [btrfs]   CPU: 2 UID: 0 PID: 3020984 Comm: kworker/u24:1 Tainted: G           OE      6.13.0-rc1-custom+ #89   Tainted: [O]=OOT_MODULE\, [E]=UNSIGNED_MODULE   Hardware name: QEMU KVM Virtual Machine\, BIOS unknown 2/2/2022   Workqueue: events_unbound btrfs_async_reclaim_data_space [btrfs]   pc : can_finish_ordered_extent+0x370/0x3b8 [btrfs]   lr : can_finish_ordered_extent+0x1ec/0x3b8 [btrfs]   Call trace:    can_finish_ordered_extent+0x370/0x3b8 [btrfs] (P)    can_finish_ordered_extent+0x1ec/0x3b8 [btrfs] (L)    btrfs_mark_ordered_io_finished+0x130/0x2b8 [btrfs]    extent_writepage+0x10c/0x3b8 [btrfs]    extent_write_cache_pages+0x21c/0x4e8 [btrfs]    btrfs_writepages+0x94/0x160 [btrfs]    do_writepages+0x74/0x190    filemap_fdatawrite_wbc+0x74/0xa0    start_delalloc_inodes+0x17c/0x3b0 [btrfs]    btrfs_start_delalloc_roots+0x17c/0x288 [btrfs]    shrink_delalloc+0x11c/0x280 [btrfs]    flush_space+0x288/0x328 [btrfs]    btrfs_async_reclaim_data_space+0x180/0x228 [btrfs]    process_one_work+0x228/0x680    worker_thread+0x1bc/0x360    kthread+0x100/0x118    ret_from_fork+0x10/0x20   ---[ end trace 0000000000000000 ]---   BTRFS critical (device dm-3): bad ordered extent accounting\, root=4957 ino=257 OE offset=1605632 OE len=16384 to_dec=16384 left=0   BTRFS critical (device dm-3): bad ordered extent accounting\, root=4957 ino=257 OE offset=1622016 OE len=12288 to_dec=12288 left=0   Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008   BTRFS critical (device dm-3): bad ordered extent accounting\, root=4957 ino=257 OE offset=1634304 OE len=8192 to_dec=4096 left=0   CPU: 1 UID: 0 PID: 3286940 Comm: kworker/u24:3 Tainted: G        W  OE      6.13.0-rc1-custom+ #89   Hardware name: QEMU KVM Virtual Machine\, BIOS unknown 2/2/2022   Workqueue:  btrfs_work_helper [btrfs] (btrfs-endio-write)   pstate: 404000c5 (nZcv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : process_one_work+0x110/0x680   lr : worker_thread+0x1bc/0x360   Call trace:    process_one_work+0x110/0x680 (P)    worker_thread+0x1bc/0x360 (L)    worker_thread+0x1bc/0x360    kthread+0x100/0x118    ret_from_fork+0x10/0x20   Code: f84086a1 f9000fe1 53041c21 b9003361 (f9400661)   ---[ end trace 0000000000000000 ]---   Kernel panic - not syncing: Oops: Fatal exception   SMP: stopping secondary CPUs   SMP: failed to stop secondary CPUs 2-3   Dumping ftrace buffer:      (ftrace buffer empty)   Kernel Offset: 0x275bb9540000 from 0xffff800080000000   PHYS_OFFSET: 0xffff8fbba0000000   CPU features: 0x100\,00000070\,00801250\,8201720b  [CAUSE] The above warning is triggered immediately after the delalloc range failure\, this happens in the following sequence:  - Range [1568K\, 1636K) is dirty     1536K  1568K     1600K    1636K  1664K    |      |/////////|////////|      |    Where 1536K\, 1600K and 1664K are page boundaries (64K page size)  - Enter extent_writepage() for page 1536K  - Enter run_delalloc_nocow() with locke ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50269,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: musb: sunxi: Fix accessing an released usb phy  Commit 6ed05c68cbca (""usb: musb: sunxi: Explicitly release USB PHY on exit"") will cause that usb phy @glue->xceiv is accessed after released.  1) register platform driver @sunxi_musb_driver // get the usb phy @glue->xceiv sunxi_musb_probe() -> devm_usb_get_phy().  2) register and unregister platform driver @musb_driver musb_probe() -> sunxi_musb_init() use the phy here //the phy is released here musb_remove() -> sunxi_musb_exit() -> devm_usb_put_phy()  3) register @musb_driver again musb_probe() -> sunxi_musb_init() use the phy here but the phy has been released at 2). ...  Fixed by reverting the commit\, namely\, removing devm_usb_put_phy() from sunxi_musb_exit().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16233,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/scsi/qla2xxx/qla_os.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1179,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43. It has been rated as critical. Affected by this issue is the function bfd_putl64 of the file bfd/libbfd.c of the component ld. The manipulation leads to memory corruption. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 2.44 is able to address this issue. It is recommended to upgrade the affected component. The code maintainer explains\, that ""[t]his bug has been fixed at some point between the 2.43 and 2.44 releases"".",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16232,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/net/wireless/marvell/libertas/if_sdio.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1178,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43. It has been declared as problematic. Affected by this vulnerability is the function bfd_putl64 of the file libbfd.c of the component ld. The manipulation leads to memory corruption. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. The identifier of the patch is 75086e9de1707281172cc77f178e7949a4414ed0. It is recommended to apply a patch to fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16231,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/net/fjes/fjes_main.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21658,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: avoid NULL pointer dereference if no valid extent tree  [BUG] Syzbot reported a crash with the following call trace:    BTRFS info (device loop0): scrub: started on devid 1   BUG: kernel NULL pointer dereference\, address: 0000000000000208   #PF: supervisor read access in kernel mode   #PF: error_code(0x0000) - not-present page   PGD 106e70067 P4D 106e70067 PUD 107143067 PMD 0   Oops: Oops: 0000 [#1] PREEMPT SMP NOPTI   CPU: 1 UID: 0 PID: 689 Comm: repro Kdump: loaded Tainted: G           O       6.13.0-rc4-custom+ #206   Tainted: [O]=OOT_MODULE   Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS unknown 02/02/2022   RIP: 0010:find_first_extent_item+0x26/0x1f0 [btrfs]   Call Trace:    <TASK>    scrub_find_fill_first_stripe+0x13d/0x3b0 [btrfs]    scrub_simple_mirror+0x175/0x260 [btrfs]    scrub_stripe+0x5d4/0x6c0 [btrfs]    scrub_chunk+0xbb/0x170 [btrfs]    scrub_enumerate_chunks+0x2f4/0x5f0 [btrfs]    btrfs_scrub_dev+0x240/0x600 [btrfs]    btrfs_ioctl+0x1dc8/0x2fa0 [btrfs]    ? do_sys_openat2+0xa5/0xf0    __x64_sys_ioctl+0x97/0xc0    do_syscall_64+0x4f/0x120    entry_SYSCALL_64_after_hwframe+0x76/0x7e    </TASK>  [CAUSE] The reproducer is using a corrupted image where extent tree root is corrupted\, thus forcing to use ""rescue=all\,ro"" mount option to mount the image.  Then it triggered a scrub\, but since scrub relies on extent tree to find where the data/metadata extents are\, scrub_find_fill_first_stripe() relies on an non-empty extent root.  But unfortunately scrub_find_fill_first_stripe() doesn't really expect an NULL pointer for extent root\, it use extent_root to grab fs_info and triggered a NULL pointer dereference.  [FIX] Add an extra check for a valid extent root at the beginning of scrub_find_fill_first_stripe().  The new error path is introduced by 42437a6386ff (""btrfs: introduce mount option rescue=ignorebadroots"")\, but that's pretty old\, and later commit b979547513ff (""btrfs: scrub: introduce helper to find and fill sector info for a scrub_stripe"") changed how we do scrub.  So for kernels older than 6.6\, the fix will need manual backport.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16230,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/gpu/drm/radeon/radeon_display.c in the Linux kernel 5.2.14 does not check the alloc_workqueue return value\, leading to a NULL pointer dereference. NOTE: A third-party software maintainer states that the work queue allocation is happening during device initialization\, which for a graphics card occurs during boot. It is not attacker controllable and OOM at that time is highly unlikely",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21946,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix out-of-bounds in parse_sec_desc()  If osidoffset\, gsidoffset and dacloffset could be greater than smb_ntsd struct size. If it is smaller\, It could cause slab-out-of-bounds. And when validating sid\, It need to check it included subauth array size.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21947,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix type confusion via race condition when using ipc_msg_send_request  req->handle is allocated using ksmbd_acquire_id(&ipc_ida)\, based on ida_alloc. req->handle from ksmbd_ipc_login_request and FSCTL_PIPE_TRANSCEIVE ioctl can be same and it could lead to type confusion between messages\, resulting in access to unexpected parts of memory after an incorrect delivery. ksmbd check type of ipc response but missing add continue to check next ipc reponse.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36951,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdkfd: range check cp bad op exception interrupts  Due to a CP interrupt bug\, bad packet garbage exception codes are raised. Do a range check so that the debugger and runtime do not receive garbage codes. Update the user api to guard exception code type checking as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21944,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix bug on trap in smb2_lock  If lock count is greater than 1\, flags could be old value. It should be checked with flags of smb_lock\, not flags. It will cause bug-on trap from locks_free_lock in error handling routine.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21945,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix use-after-free in smb2_lock  If smb_lock->zero_len has value\, ->llist of smb_lock is not delete and flock is old one. It will cause use-after-free on error handling routine.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21943,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  gpio: aggregator: protect driver attr handlers against module unload  Both new_device_store and delete_device_store touch module global resources (e.g. gpio_aggregator_lock). To prevent race conditions with module unload\, a reference needs to be held.  Add try_module_get() in these handlers.  For new_device_store\, this eliminates what appears to be the most dangerous scenario: if an id is allocated from gpio_aggregator_idr but platform_device_register has not yet been called or completed\, a concurrent module unload could fail to unregister/delete the device\, leaving behind a dangling platform device/GPIO forwarder. This can result in various issues. The following simple reproducer demonstrates these problems:    #!/bin/bash   while :; do     # note: whether 'gpiochip0 0' exists or not does not matter.     echo 'gpiochip0 0' > /sys/bus/platform/drivers/gpio-aggregator/new_device   done &   while :; do     modprobe gpio-aggregator     modprobe -r gpio-aggregator   done &   wait    Starting with the following warning\, several kinds of warnings will appear   and the system may become unstable:    ------------[ cut here ]------------   list_del corruption\, ffff888103e2e980->next is LIST_POISON1 (dead000000000100)   WARNING: CPU: 1 PID: 1327 at lib/list_debug.c:56 __list_del_entry_valid_or_report+0xa3/0x120   [...]   RIP: 0010:__list_del_entry_valid_or_report+0xa3/0x120   [...]   Call Trace:    <TASK>    ? __list_del_entry_valid_or_report+0xa3/0x120    ? __warn.cold+0x93/0xf2    ? __list_del_entry_valid_or_report+0xa3/0x120    ? report_bug+0xe6/0x170    ? __irq_work_queue_local+0x39/0xe0    ? handle_bug+0x58/0x90    ? exc_invalid_op+0x13/0x60    ? asm_exc_invalid_op+0x16/0x20    ? __list_del_entry_valid_or_report+0xa3/0x120    gpiod_remove_lookup_table+0x22/0x60    new_device_store+0x315/0x350 [gpio_aggregator]    kernfs_fop_write_iter+0x137/0x1f0    vfs_write+0x262/0x430    ksys_write+0x60/0xd0    do_syscall_64+0x6c/0x180    entry_SYSCALL_64_after_hwframe+0x76/0x7e    [...]    </TASK>   ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21941,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix null check for pipe_ctx->plane_state in resource_build_scaling_params  Null pointer dereference issue could occur when pipe_ctx->plane_state is null. The fix adds a check to ensure 'pipe_ctx->plane_state' is not null before accessing. This prevents a null pointer dereference.  Found by code review.  (cherry picked from commit 63e6a77ccf239337baa9b1e7787cde9fa0462092)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53079,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/thp: fix deferred split unqueue naming and locking  Recent changes are putting more pressure on THP deferred split queues: under load revealing long-standing races\, causing list_del corruptions\, ""Bad page state""s and worse (I keep BUGs in both of those\, so usually don't get to see how badly they end up without).  The relevant recent changes being 6.8's mTHP\, 6.10's mTHP swapout\, and 6.12's mTHP swapin\, improved swap allocation\, and underused THP splitting.  Before fixing locking: rename misleading folio_undo_large_rmappable()\, which does not undo large_rmappable\, to folio_unqueue_deferred_split()\, which is what it does.  But that and its out-of-line __callee are mm internals of very limited usability: add comment and WARN_ON_ONCEs to check usage; and return a bool to say if a deferred split was unqueued\, which can then be used in WARN_ON_ONCEs around safety checks (sparing callers the arcane conditionals in __folio_unqueue_deferred_split()).  Just omit the folio_unqueue_deferred_split() from free_unref_folios()\, all of whose callers now call it beforehand (and if any forget then bad_page() will tell) - except for its caller put_pages_list()\, which itself no longer has any callers (and will be deleted separately).  Swapout: mem_cgroup_swapout() has been resetting folio->memcg_data 0 without checking and unqueueing a THP folio from deferred split list; which is unfortunate\, since the split_queue_lock depends on the memcg (when memcg is enabled); so swapout has been unqueueing such THPs later\, when freeing the folio\, using the pgdat's lock instead: potentially corrupting the memcg's list.  __remove_mapping() has frozen refcount to 0 here\, so no problem with calling folio_unqueue_deferred_split() before resetting memcg_data.  That goes back to 5.4 commit 87eaceb3faa5 (""mm: thp: make deferred split shrinker memcg aware""): which included a check on swapcache before adding to deferred queue\, but no check on deferred queue before adding THP to swapcache.  That worked fine with the usual sequence of events in reclaim (though there were a couple of rare ways in which a THP on deferred queue could have been swapped out)\, but 6.12 commit dafff3f4c850 (""mm: split underused THPs"") avoids splitting underused THPs in reclaim\, which makes swapcache THPs on deferred queue commonplace.  Keep the check on swapcache before adding to deferred queue?  Yes: it is no longer essential\, but preserves the existing behaviour\, and is likely to be a worthwhile optimization (vmstat showed much more traffic on the queue under swapping load if the check was removed); update its comment.  Memcg-v1 move (deprecated): mem_cgroup_move_account() has been changing folio->memcg_data without checking and unqueueing a THP folio from the deferred list\, sometimes corrupting ""from"" memcg's list\, like swapout.  Refcount is non-zero here\, so folio_unqueue_deferred_split() can only be used in a WARN_ON_ONCE to validate the fix\, which must be done earlier: mem_cgroup_move_charge_pte_range() first try to split the THP (splitting of course unqueues)\, or skip it if that fails.  Not ideal\, but moving charge has been requested\, and khugepaged should repair the THP later: nobody wants new custom unqueueing code just for this deprecated case.  The 87eaceb3faa5 commit did have the code to move from one deferred list to another (but was not conscious of its unsafety while refcount non-0); but that was removed by 5.6 commit fac0516b5534 (""mm: thp: don't need care deferred split queue in memcg charge move path"")\, which argued that the existence of a PMD mapping guarantees that the THP cannot be on a deferred list.  As above\, false in rare cases\, and now commonly false.  Backport to 6.11 should be straightforward.  Earlier backports must take care that other _deferred_list fixes and dependencies are included.  There is not a strong case for backports\, but they can fix cornercases.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-29923,github.com/redis/go-redis/v9,LOW,v9.5.3,9.7.3	 9.6.3	 9.5.5,"go-redis is the official Redis client library for the Go programming language. Prior to 9.5.5\, 9.6.3\, and 9.7.3\, go-redis potentially responds out of order when `CLIENT SETINFO` times out during connection establishment. This can happen when the client is configured to transmit its identity\, there are network connectivity issues\, or the client was configured with aggressive timeouts. The problem occurs for multiple use cases. For sticky connections\, you receive persistent out-of-order responses for the lifetime of the connection. All commands in the pipeline receive incorrect responses. When used with the default ConnPool once a connection is returned after use with ConnPool#Put the read buffer will be checked and the connection will be marked as bad due to the unread data. This means that at most one out-of-order response before the connection is discarded. This issue is fixed in 9.5.5\, 9.6.3\, and 9.7.3. You can prevent the vulnerability by setting the flag DisableIndentity to true when constructing the client instance.",|tykio/midsommar|
CVE-2024-27062,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nouveau: lock the client object tree.  It appears the client object tree has no locking unless I've missed something else. Fix races around adding/removing client objects\, mostly vram bar mappings.   4562.099306] general protection fault\, probably for non-canonical address 0x6677ed422bceb80c: 0000 [#1] PREEMPT SMP PTI [ 4562.099314] CPU: 2 PID: 23171 Comm: deqp-vk Not tainted 6.8.0-rc6+ #27 [ 4562.099324] Hardware name: Gigabyte Technology Co.\, Ltd. Z390 I AORUS PRO WIFI/Z390 I AORUS PRO WIFI-CF\, BIOS F8 11/05/2021 [ 4562.099330] RIP: 0010:nvkm_object_search+0x1d/0x70 [nouveau] [ 4562.099503] Code: 90 90 90 90 90 90 90 90 90 90 90 90 90 66 0f 1f 00 0f 1f 44 00 00 48 89 f8 48 85 f6 74 39 48 8b 87 a0 00 00 00 48 85 c0 74 12 <48> 8b 48 f8 48 39 ce 73 15 48 8b 40 10 48 85 c0 75 ee 48 c7 c0 fe [ 4562.099506] RSP: 0000:ffffa94cc420bbf8 EFLAGS: 00010206 [ 4562.099512] RAX: 6677ed422bceb814 RBX: ffff98108791f400 RCX: ffff9810f26b8f58 [ 4562.099517] RDX: 0000000000000000 RSI: ffff9810f26b9158 RDI: ffff98108791f400 [ 4562.099519] RBP: ffff9810f26b9158 R08: 0000000000000000 R09: 0000000000000000 [ 4562.099521] R10: ffffa94cc420bc48 R11: 0000000000000001 R12: ffff9810f02a7cc0 [ 4562.099526] R13: 0000000000000000 R14: 00000000000000ff R15: 0000000000000007 [ 4562.099528] FS:  00007f629c5017c0(0000) GS:ffff98142c700000(0000) knlGS:0000000000000000 [ 4562.099534] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 4562.099536] CR2: 00007f629a882000 CR3: 000000017019e004 CR4: 00000000003706f0 [ 4562.099541] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [ 4562.099542] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [ 4562.099544] Call Trace: [ 4562.099555]  <TASK> [ 4562.099573]  ? die_addr+0x36/0x90 [ 4562.099583]  ? exc_general_protection+0x246/0x4a0 [ 4562.099593]  ? asm_exc_general_protection+0x26/0x30 [ 4562.099600]  ? nvkm_object_search+0x1d/0x70 [nouveau] [ 4562.099730]  nvkm_ioctl+0xa1/0x250 [nouveau] [ 4562.099861]  nvif_object_map_handle+0xc8/0x180 [nouveau] [ 4562.099986]  nouveau_ttm_io_mem_reserve+0x122/0x270 [nouveau] [ 4562.100156]  ? dma_resv_test_signaled+0x26/0xb0 [ 4562.100163]  ttm_bo_vm_fault_reserved+0x97/0x3c0 [ttm] [ 4562.100182]  ? __mutex_unlock_slowpath+0x2a/0x270 [ 4562.100189]  nouveau_ttm_fault+0x69/0xb0 [nouveau] [ 4562.100356]  __do_fault+0x32/0x150 [ 4562.100362]  do_fault+0x7c/0x560 [ 4562.100369]  __handle_mm_fault+0x800/0xc10 [ 4562.100382]  handle_mm_fault+0x17c/0x3e0 [ 4562.100388]  do_user_addr_fault+0x208/0x860 [ 4562.100395]  exc_page_fault+0x7f/0x200 [ 4562.100402]  asm_exc_page_fault+0x26/0x30 [ 4562.100412] RIP: 0033:0x9b9870 [ 4562.100419] Code: 85 a8 f7 ff ff 8b 8d 80 f7 ff ff 89 08 e9 18 f2 ff ff 0f 1f 84 00 00 00 00 00 44 89 32 e9 90 fa ff ff 0f 1f 84 00 00 00 00 00 <44> 89 32 e9 f8 f1 ff ff 0f 1f 84 00 00 00 00 00 66 44 89 32 e9 e7 [ 4562.100422] RSP: 002b:00007fff9ba2dc70 EFLAGS: 00010246 [ 4562.100426] RAX: 0000000000000004 RBX: 000000000dd65e10 RCX: 000000fff0000000 [ 4562.100428] RDX: 00007f629a882000 RSI: 00007f629a882000 RDI: 0000000000000066 [ 4562.100432] RBP: 00007fff9ba2e570 R08: 0000000000000000 R09: 0000000123ddf000 [ 4562.100434] R10: 0000000000000001 R11: 0000000000000246 R12: 000000007fffffff [ 4562.100436] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000 [ 4562.100446]  </TASK> [ 4562.100448] Modules linked in: nf_conntrack_netbios_ns nf_conntrack_broadcast nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ip_set nf_tables libcrc32c nfnetlink cmac bnep sunrpc iwlmvm intel_rapl_msr intel_rapl_common snd_sof_pci_intel_cnl x86_pkg_temp_thermal intel_powerclamp snd_sof_intel_hda_common mac80211 coretemp snd_soc_acpi_intel_match kvm_intel snd_soc_acpi snd_soc_hdac_hda snd_sof_pci snd_sof_xtensa_dsp snd_sof_intel_hda_mlink  ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53072,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86/amd/pmc: Detect when STB is not available  Loading the amd_pmc module as:      amd_pmc enable_stb=1  ...can result in the following messages in the kernel ring buffer:      amd_pmc AMDI0009:00: SMU cmd failed. err: 0xff     ioremap on RAM at 0x0000000000000000 - 0x0000000000ffffff     WARNING: CPU: 10 PID: 2151 at arch/x86/mm/ioremap.c:217 __ioremap_caller+0x2cd/0x340  Further debugging reveals that this occurs when the requests for S2D_PHYS_ADDR_LOW and S2D_PHYS_ADDR_HIGH return a value of 0\, indicating that the STB is inaccessible. To prevent the ioremap warning and provide clarity to the user\, handle the invalid address and display an error message.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-25740,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A memory leak flaw was found in the UBI driver in drivers/mtd/ubi/attach.c in the Linux kernel through 6.7.4 for UBI_IOCATT\, because kobj->name is not released.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21948,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: appleir: Fix potential NULL dereference at raw event handle  Syzkaller reports a NULL pointer dereference issue in input_event().  BUG: KASAN: null-ptr-deref in instrument_atomic_read include/linux/instrumented.h:68 [inline] BUG: KASAN: null-ptr-deref in _test_bit include/asm-generic/bitops/instrumented-non-atomic.h:141 [inline] BUG: KASAN: null-ptr-deref in is_event_supported drivers/input/input.c:67 [inline] BUG: KASAN: null-ptr-deref in input_event+0x42/0xa0 drivers/input/input.c:395 Read of size 8 at addr 0000000000000028 by task syz-executor199/2949  CPU: 0 UID: 0 PID: 2949 Comm: syz-executor199 Not tainted 6.13.0-rc4-syzkaller-00076-gf097a36ef88d #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:  <IRQ>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120  kasan_report+0xd9/0x110 mm/kasan/report.c:602  check_region_inline mm/kasan/generic.c:183 [inline]  kasan_check_range+0xef/0x1a0 mm/kasan/generic.c:189  instrument_atomic_read include/linux/instrumented.h:68 [inline]  _test_bit include/asm-generic/bitops/instrumented-non-atomic.h:141 [inline]  is_event_supported drivers/input/input.c:67 [inline]  input_event+0x42/0xa0 drivers/input/input.c:395  input_report_key include/linux/input.h:439 [inline]  key_down drivers/hid/hid-appleir.c:159 [inline]  appleir_raw_event+0x3e5/0x5e0 drivers/hid/hid-appleir.c:232  __hid_input_report.constprop.0+0x312/0x440 drivers/hid/hid-core.c:2111  hid_ctrl+0x49f/0x550 drivers/hid/usbhid/hid-core.c:484  __usb_hcd_giveback_urb+0x389/0x6e0 drivers/usb/core/hcd.c:1650  usb_hcd_giveback_urb+0x396/0x450 drivers/usb/core/hcd.c:1734  dummy_timer+0x17f7/0x3960 drivers/usb/gadget/udc/dummy_hcd.c:1993  __run_hrtimer kernel/time/hrtimer.c:1739 [inline]  __hrtimer_run_queues+0x20a/0xae0 kernel/time/hrtimer.c:1803  hrtimer_run_softirq+0x17d/0x350 kernel/time/hrtimer.c:1820  handle_softirqs+0x206/0x8d0 kernel/softirq.c:561  __do_softirq kernel/softirq.c:595 [inline]  invoke_softirq kernel/softirq.c:435 [inline]  __irq_exit_rcu+0xfa/0x160 kernel/softirq.c:662  irq_exit_rcu+0x9/0x30 kernel/softirq.c:678  instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1049 [inline]  sysvec_apic_timer_interrupt+0x90/0xb0 arch/x86/kernel/apic/apic.c:1049  </IRQ>  <TASK>  asm_sysvec_apic_timer_interrupt+0x1a/0x20 arch/x86/include/asm/idtentry.h:702  __mod_timer+0x8f6/0xdc0 kernel/time/timer.c:1185  add_timer+0x62/0x90 kernel/time/timer.c:1295  schedule_timeout+0x11f/0x280 kernel/time/sleep_timeout.c:98  usbhid_wait_io+0x1c7/0x380 drivers/hid/usbhid/hid-core.c:645  usbhid_init_reports+0x19f/0x390 drivers/hid/usbhid/hid-core.c:784  hiddev_ioctl+0x1133/0x15b0 drivers/hid/usbhid/hiddev.c:794  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:906 [inline]  __se_sys_ioctl fs/ioctl.c:892 [inline]  __x64_sys_ioctl+0x190/0x200 fs/ioctl.c:892  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  </TASK>  This happens due to the malformed report items sent by the emulated device which results in a report\, that has no fields\, being added to the report list. Due to this appleir_input_configured() is never called\, hidinput_connect() fails which results in the HID_CLAIMED_INPUT flag is not being set. However\, it  does not make appleir_probe() fail and lets the event callback to be called without the associated input device.  Thus\, add a check for the HID_CLAIMED_INPUT flag and leave the event hook early if the driver didn't claim any input_dev for some reason. Moreover\, some other hid drivers accessing input_dev in their event callbacks do have similar checks\, too.  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53070,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: dwc3: fix fault at system suspend if device was already runtime suspended  If the device was already runtime suspended then during system suspend we cannot access the device registers else it will crash.  Also we cannot access any registers after dwc3_core_exit() on some platforms so move the dwc3_enable_susphy() call to the top.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-25743,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel through 6.9\, an untrusted hypervisor can inject virtual interrupts 0 and 14 at any point in time and can trigger the SIGFPE signal handler in userspace applications. This affects AMD SEV-SNP and AMD SEV-ES.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56433,login,LOW,1:4.13+dfsg1-1+b1,N/A,"shadow-utils (aka shadow) 4.4 through 4.17.0 establishes a default /etc/subuid behavior (e.g.\, uid 100000 through 165535 for the first user account) that can realistically conflict with the uids of users defined on locally administered networks\, potentially leading to account takeover\, e.g.\, by leveraging newuidmap for access to an NFS home directory (or same-host resources in the case of remote logins by these local network users). NOTE: it may also be argued that system administrators should not have assigned uids\, within local networks\, that are within the range that can occur in /etc/subuid.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21949,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: Set hugetlb mmap base address aligned with pmd size  With ltp test case ""testcases/bin/hugefork02""\, there is a dmesg error report message such as:   kernel BUG at mm/hugetlb.c:5550!  Oops - BUG[#1]:  CPU: 0 UID: 0 PID: 1517 Comm: hugefork02 Not tainted 6.14.0-rc2+ #241  Hardware name: QEMU QEMU Virtual Machine\, BIOS unknown 2/2/2022  pc 90000000004eaf1c ra 9000000000485538 tp 900000010edbc000 sp 900000010edbf940  a0 900000010edbfb00 a1 9000000108d20280 a2 00007fffe9474000 a3 00007ffff3474000  a4 0000000000000000 a5 0000000000000003 a6 00000000003cadd3 a7 0000000000000000  t0 0000000001ffffff t1 0000000001474000 t2 900000010ecd7900 t3 00007fffe9474000  t4 00007fffe9474000 t5 0000000000000040 t6 900000010edbfb00 t7 0000000000000001  t8 0000000000000005 u0 90000000004849d0 s9 900000010edbfa00 s0 9000000108d20280  s1 00007fffe9474000 s2 0000000002000000 s3 9000000108d20280 s4 9000000002b38b10  s5 900000010edbfb00 s6 00007ffff3474000 s7 0000000000000406 s8 900000010edbfa08     ra: 9000000000485538 unmap_vmas+0x130/0x218    ERA: 90000000004eaf1c __unmap_hugepage_range+0x6f4/0x7d0   PRMD: 00000004 (PPLV0 +PIE -PWE)   EUEN: 00000007 (+FPE +SXE +ASXE -BTE)   ECFG: 00071c1d (LIE=0\,2-4\,10-12 VS=7)  ESTAT: 000c0000 [BRK] (IS= ECode=12 EsubCode=0)  PRID: 0014c010 (Loongson-64bit\, Loongson-3A5000)  Process hugefork02 (pid: 1517\, threadinfo=00000000a670eaf4\, task=000000007a95fc64)  Call Trace:  [<90000000004eaf1c>] __unmap_hugepage_range+0x6f4/0x7d0  [<9000000000485534>] unmap_vmas+0x12c/0x218  [<9000000000494068>] exit_mmap+0xe0/0x308  [<900000000025fdc4>] mmput+0x74/0x180  [<900000000026a284>] do_exit+0x294/0x898  [<900000000026aa30>] do_group_exit+0x30/0x98  [<900000000027bed4>] get_signal+0x83c/0x868  [<90000000002457b4>] arch_do_signal_or_restart+0x54/0xfa0  [<90000000015795e8>] irqentry_exit_to_user_mode+0xb8/0x138  [<90000000002572d0>] tlb_do_page_fault_1+0x114/0x1b4  The problem is that base address allocated from hugetlbfs is not aligned with pmd size. Here add a checking for hugetlbfs and align base address with pmd size. After this patch the test case ""testcases/bin/hugefork02"" passes to run.  This is similar to the commit 7f24cbc9c4d42db8a3c8484d1 (""mm/mmap: teach generic_get_unmapped_area{_topdown} to handle hugetlb mappings"").",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-25742,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel before 6.9\, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handler. This affects AMD SEV-SNP and AMD SEV-ES.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22086,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Fix mlx5_poll_one() cur_qp update flow  When cur_qp isn't NULL\, in order to avoid fetching the QP from the radix tree again we check if the next cqe QP is identical to the one we already have.  The bug however is that we are checking if the QP is identical by checking the QP number inside the CQE against the QP number inside the mlx5_ib_qp\, but that's wrong since the QP number from the CQE is from FW so it should be matched against mlx5_core_qp which is our FW QP number.  Otherwise we could use the wrong QP when handling a CQE which could cause the kernel trace below.  This issue is mainly noticeable over QPs 0 & 1\, since for now they are the only QPs in our driver whereas the QP number inside mlx5_ib_qp doesn't match the QP number inside mlx5_core_qp.  BUG: kernel NULL pointer dereference\, address: 0000000000000012  #PF: supervisor read access in kernel mode  #PF: error_code(0x0000) - not-present page  PGD 0 P4D 0  Oops: Oops: 0000 [#1] SMP  CPU: 0 UID: 0 PID: 7927 Comm: kworker/u62:1 Not tainted 6.14.0-rc3+ #189  Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014  Workqueue: ib-comp-unb-wq ib_cq_poll_work [ib_core]  RIP: 0010:mlx5_ib_poll_cq+0x4c7/0xd90 [mlx5_ib]  Code: 03 00 00 8d 58 ff 21 cb 66 39 d3 74 39 48 c7 c7 3c 89 6e a0 0f b7 db e8 b7 d2 b3 e0 49 8b 86 60 03 00 00 48 c7 c7 4a 89 6e a0 <0f> b7 5c 98 02 e8 9f d2 b3 e0 41 0f b7 86 78 03 00 00 83 e8 01 21  RSP: 0018:ffff88810511bd60 EFLAGS: 00010046  RAX: 0000000000000010 RBX: 0000000000000000 RCX: 0000000000000000  RDX: 0000000000000000 RSI: ffff88885fa1b3c0 RDI: ffffffffa06e894a  RBP: 00000000000000b0 R08: 0000000000000000 R09: ffff88810511bc10  R10: 0000000000000001 R11: 0000000000000001 R12: ffff88810d593000  R13: ffff88810e579108 R14: ffff888105146000 R15: 00000000000000b0  FS:  0000000000000000(0000) GS:ffff88885fa00000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 0000000000000012 CR3: 00000001077e6001 CR4: 0000000000370eb0  Call Trace:   <TASK>   ? __die+0x20/0x60   ? page_fault_oops+0x150/0x3e0   ? exc_page_fault+0x74/0x130   ? asm_exc_page_fault+0x22/0x30   ? mlx5_ib_poll_cq+0x4c7/0xd90 [mlx5_ib]   __ib_process_cq+0x5a/0x150 [ib_core]   ib_cq_poll_work+0x31/0x90 [ib_core]   process_one_work+0x169/0x320   worker_thread+0x288/0x3a0   ? work_busy+0xb0/0xb0   kthread+0xd7/0x1f0   ? kthreads_online_cpu+0x130/0x130   ? kthreads_online_cpu+0x130/0x130   ret_from_fork+0x2d/0x50   ? kthreads_online_cpu+0x130/0x130   ret_from_fork_asm+0x11/0x20   </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58051,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipmi: ipmb: Add check devm_kasprintf() returned value  devm_kasprintf() can return a NULL pointer on failure but this returned value is not checked.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42315,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  exfat: fix potential deadlock on __exfat_get_dentry_set  When accessing a file with more entries than ES_MAX_ENTRY_NUM\, the bh-array is allocated in __exfat_get_entry_set. The problem is that the bh-array is allocated with GFP_KERNEL. It does not make sense. In the following cases\, a deadlock for sbi->s_lock between the two processes may occur.         CPU0                CPU1        ----                ----   kswapd    balance_pgdat     lock(fs_reclaim)                       exfat_iterate                        lock(&sbi->s_lock)                        exfat_readdir                         exfat_get_uniname_from_ext_entry                          exfat_get_dentry_set                           __exfat_get_dentry_set                            kmalloc_array                             ...                             lock(fs_reclaim)     ...     evict      exfat_evict_inode       lock(&sbi->s_lock)  To fix this\, let's allocate bh-array with GFP_NOFS.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58053,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rxrpc: Fix handling of received connection abort  Fix the handling of a connection abort that we've received.  Though the abort is at the connection level\, it needs propagating to the calls on that connection.  Whilst the propagation bit is performed\, the calls aren't then woken up to go and process their termination\, and as no further input is forthcoming\, they just hang.  Also add some tracing for the logging of connection aborts.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42317,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/huge_memory: avoid PMD-size page cache if needed  xarray can't support arbitrary page cache size.  the largest and supported page cache size is defined as MAX_PAGECACHE_ORDER by commit 099d90642a71 (""mm/filemap: make MAX_PAGECACHE_ORDER acceptable to xarray"").  However\, it's possible to have 512MB page cache in the huge memory's collapsing path on ARM64 system whose base page size is 64KB.  512MB page cache is breaking the limitation and a warning is raised when the xarray entry is split as shown in the following example.  [root@dhcp-10-26-1-207 ~]# cat /proc/1/smaps | grep KernelPageSize KernelPageSize:       64 kB [root@dhcp-10-26-1-207 ~]# cat /tmp/test.c    : int main(int argc\, char **argv) { \tconst char *filename = TEST_XFS_FILENAME; \tint fd = 0; \tvoid *buf = (void *)-1\, *p; \tint pgsize = getpagesize(); \tint ret = 0;  \tif (pgsize != 0x10000) { \t\tfprintf(stdout\, ""System with 64KB base page size is required!\\n""); \t\treturn -EPERM; \t}  \tsystem(""echo 0 > /sys/devices/virtual/bdi/253:0/read_ahead_kb""); \tsystem(""echo 1 > /proc/sys/vm/drop_caches"");  \t/* Open the xfs file */ \tfd = open(filename\, O_RDONLY); \tassert(fd > 0);  \t/* Create VMA */ \tbuf = mmap(NULL\, TEST_MEM_SIZE\, PROT_READ\, MAP_SHARED\, fd\, 0); \tassert(buf != (void *)-1); \tfprintf(stdout\, ""mapped buffer at 0x%p\\n""\, buf);  \t/* Populate VMA */ \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_NOHUGEPAGE); \tassert(ret == 0); \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_POPULATE_READ); \tassert(ret == 0);  \t/* Collapse VMA */ \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_HUGEPAGE); \tassert(ret == 0); \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_COLLAPSE); \tif (ret) { \t\tfprintf(stdout\, ""Error %d to madvise(MADV_COLLAPSE)\\n""\, errno); \t\tgoto out; \t}  \t/* Split xarray entry. Write permission is needed */ \tmunmap(buf\, TEST_MEM_SIZE); \tbuf = (void *)-1; \tclose(fd); \tfd = open(filename\, O_RDWR); \tassert(fd > 0); \tfallocate(fd\, FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE\,  \t\t  TEST_MEM_SIZE - pgsize\, pgsize); out: \tif (buf != (void *)-1) \t\tmunmap(buf\, TEST_MEM_SIZE); \tif (fd > 0) \t\tclose(fd);  \treturn ret; }  [root@dhcp-10-26-1-207 ~]# gcc /tmp/test.c -o /tmp/test [root@dhcp-10-26-1-207 ~]# /tmp/test  ------------[ cut here ]------------  WARNING: CPU: 25 PID: 7560 at lib/xarray.c:1025 xas_split_alloc+0xf8/0x128  Modules linked in: nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib    \\  nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct      \\  nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4      \\  ip_set rfkill nf_tables nfnetlink vfat fat virtio_balloon drm fuse   \\  xfs libcrc32c crct10dif_ce ghash_ce sha2_ce sha256_arm64 virtio_net  \\  sha1_ce net_failover virtio_blk virtio_console failover dimlib virtio_mmio  CPU: 25 PID: 7560 Comm: test Kdump: loaded Not tainted 6.10.0-rc7-gavin+ #9  Hardware name: QEMU KVM Virtual Machine\, BIOS edk2-20240524-1.el9 05/24/2024  pstate: 83400005 (Nzcv daif +PAN -UAO +TCO +DIT -SSBS BTYPE=--)  pc : xas_split_alloc+0xf8/0x128  lr : split_huge_page_to_list_to_order+0x1c4/0x780  sp : ffff8000ac32f660  x29: ffff8000ac32f660 x28: ffff0000e0969eb0 x27: ffff8000ac32f6c0  x26: 0000000000000c40 x25: ffff0000e0969eb0 x24: 000000000000000d  x23: ffff8000ac32f6c0 x22: ffffffdfc0700000 x21: 0000000000000000  x20: 0000000000000000 x19: ffffffdfc0700000 x18: 0000000000000000  x17: 0000000000000000 x16: ffffd5f3708ffc70 x15: 0000000000000000  x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000  x11: ffffffffffffffc0 x10: 0000000000000040 x9 : ffffd5f3708e692c  x8 : 0000000000000003 x7 : 0000000000000000 x6 : ffff0000e0969eb8  x5 : ffffd5f37289e378 x4 : 0000000000000000 x3 : 0000000000000c40  x2 : 000000000000000d x1 : 000000000000000c x0 : 0000000000000000  Call trace:   xas_split_alloc+0xf8/0x128   split_huge_page_to_list_to_order+0x1c4/0x780   truncate_inode_partial_folio+0xdc/0x160   truncate_inode_pages_range+0x1b4/0x4a8   truncate_pagecache_range+0x84/0xa ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-45341,stdlib,MEDIUM,v1.23.2,1.22.11	 1.23.5	 1.24.0-rc.2,"A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain. Certificates containing URIs are not permitted in the web PKI\, so this only affects users of private PKIs which make use of URIs.",|tykio/midsommar|
CVE-2024-58052,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Fix potential NULL pointer dereference in atomctrl_get_smc_sclk_range_table  The function atomctrl_get_smc_sclk_range_table() does not check the return value of smu_atom_get_data_table(). If smu_atom_get_data_table() fails to retrieve SMU_Info table\, it returns NULL which is later dereferenced.  Found by Linux Verification Center (linuxtesting.org) with SVACE.  In practice this should never happen as this code only gets called on polaris chips and the vbios data table will always be present on those chips.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42125,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw89: fw: scan offload prohibit all 6 GHz channel if no 6 GHz sband  We have some policy via BIOS to block uses of 6 GHz. In this case\, 6 GHz sband will be NULL even if it is WiFi 7 chip. So\, add NULL handling here to avoid crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42122,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add NULL pointer check for kzalloc  [Why & How] Check return pointer of kzalloc before using it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58055,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: gadget: f_tcm: Don't free command immediately  Don't prematurely free the command. Wait for the status completion of the sense status. It can be freed then. Otherwise we will double-free the command.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22083,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  vhost-scsi: Fix handling of multiple calls to vhost_scsi_set_endpoint  If vhost_scsi_set_endpoint is called multiple times without a vhost_scsi_clear_endpoint between them\, we can hit multiple bugs found by Haoran Zhang:  1. Use-after-free when no tpgs are found:  This fixes a use after free that occurs when vhost_scsi_set_endpoint is called more than once and calls after the first call do not find any tpgs to add to the vs_tpg. When vhost_scsi_set_endpoint first finds tpgs to add to the vs_tpg array match=true\, so we will do:  vhost_vq_set_backend(vq\, vs_tpg); ...  kfree(vs->vs_tpg); vs->vs_tpg = vs_tpg;  If vhost_scsi_set_endpoint is called again and no tpgs are found match=false so we skip the vhost_vq_set_backend call leaving the pointer to the vs_tpg we then free via:  kfree(vs->vs_tpg); vs->vs_tpg = vs_tpg;  If a scsi request is then sent we do:  vhost_scsi_handle_vq -> vhost_scsi_get_req -> vhost_vq_get_backend  which sees the vs_tpg we just did a kfree on.  2. Tpg dir removal hang:  This patch fixes an issue where we cannot remove a LIO/target layer tpg (and structs above it like the target) dir due to the refcount dropping to -1.  The problem is that if vhost_scsi_set_endpoint detects a tpg is already in the vs->vs_tpg array or if the tpg has been removed so target_depend_item fails\, the undepend goto handler will do target_undepend_item on all tpgs in the vs_tpg array dropping their refcount to 0. At this time vs_tpg contains both the tpgs we have added in the current vhost_scsi_set_endpoint call as well as tpgs we added in previous calls which are also in vs->vs_tpg.  Later\, when vhost_scsi_clear_endpoint runs it will do target_undepend_item on all the tpgs in the vs->vs_tpg which will drop their refcount to -1. Userspace will then not be able to remove the tpg and will hang when it tries to do rmdir on the tpg dir.  3. Tpg leak:  This fixes a bug where we can leak tpgs and cause them to be un-removable because the target name is overwritten when vhost_scsi_set_endpoint is called multiple times but with different target names.  The bug occurs if a user has called VHOST_SCSI_SET_ENDPOINT and setup a vhost-scsi device to target/tpg mapping\, then calls VHOST_SCSI_SET_ENDPOINT again with a new target name that has tpgs we haven't seen before (target1 has tpg1 but target2 has tpg2). When this happens we don't teardown the old target tpg mapping and just overwrite the target name and the vs->vs_tpg array. Later when we do vhost_scsi_clear_endpoint\, we are passed in either target1 or target2's name and we will only match that target's tpgs when we loop over the vs->vs_tpg. We will then return from the function without doing target_undepend_item on the tpgs.  Because of all these bugs\, it looks like being able to call vhost_scsi_set_endpoint multiple times was never supported. The major user\, QEMU\, already has checks to prevent this use case. So to fix the issues\, this patch prevents vhost_scsi_set_endpoint from being called if it's already successfully added tpgs. To add\, remove or change the tpg config or target name\, you must do a vhost_scsi_clear_endpoint first.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58054,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  staging: media: max96712: fix kernel oops when removing module  The following kernel oops is thrown when trying to remove the max96712 module:  Unable to handle kernel paging request at virtual address 00007375746174db Mem abort info:   ESR = 0x0000000096000004   EC = 0x25: DABT (current EL)\, IL = 32 bits   SET = 0\, FnV = 0   EA = 0\, S1PTW = 0   FSC = 0x04: level 0 translation fault Data abort info:   ISV = 0\, ISS = 0x00000004\, ISS2 = 0x00000000   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 user pgtable: 4k pages\, 48-bit VAs\, pgdp=000000010af89000 [00007375746174db] pgd=0000000000000000\, p4d=0000000000000000 Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP Modules linked in: crct10dif_ce polyval_ce mxc_jpeg_encdec flexcan     snd_soc_fsl_sai snd_soc_fsl_asoc_card snd_soc_fsl_micfil dwc_mipi_csi2     imx_csi_formatter polyval_generic v4l2_jpeg imx_pcm_dma can_dev     snd_soc_imx_audmux snd_soc_wm8962 snd_soc_imx_card snd_soc_fsl_utils     max96712(C-) rpmsg_ctrl rpmsg_char pwm_fan fuse     [last unloaded: imx8_isi] CPU: 0 UID: 0 PID: 754 Comm: rmmod \t    Tainted: G         C    6.12.0-rc6-06364-g327fec852c31 #17 Tainted: [C]=CRAP Hardware name: NXP i.MX95 19X19 board (DT) pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : led_put+0x1c/0x40 lr : v4l2_subdev_put_privacy_led+0x48/0x58 sp : ffff80008699bbb0 x29: ffff80008699bbb0 x28: ffff00008ac233c0 x27: 0000000000000000 x26: 0000000000000000 x25: 0000000000000000 x24: 0000000000000000 x23: ffff000080cf1170 x22: ffff00008b53bd00 x21: ffff8000822ad1c8 x20: ffff000080ff5c00 x19: ffff00008b53be40 x18: 0000000000000000 x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000 x14: 0000000000000004 x13: ffff0000800f8010 x12: 0000000000000000 x11: ffff000082acf5c0 x10: ffff000082acf478 x9 : ffff0000800f8010 x8 : 0101010101010101 x7 : 7f7f7f7f7f7f7f7f x6 : fefefeff6364626d x5 : 8080808000000000 x4 : 0000000000000020 x3 : 00000000553a3dc1 x2 : ffff00008ac233c0 x1 : ffff00008ac233c0 x0 : ff00737574617473 Call trace:  led_put+0x1c/0x40  v4l2_subdev_put_privacy_led+0x48/0x58  v4l2_async_unregister_subdev+0x2c/0x1a4  max96712_remove+0x1c/0x38 [max96712]  i2c_device_remove+0x2c/0x9c  device_remove+0x4c/0x80  device_release_driver_internal+0x1cc/0x228  driver_detach+0x4c/0x98  bus_remove_driver+0x6c/0xbc  driver_unregister+0x30/0x60  i2c_del_driver+0x54/0x64  max96712_i2c_driver_exit+0x18/0x1d0 [max96712]  __arm64_sys_delete_module+0x1a4/0x290  invoke_syscall+0x48/0x10c  el0_svc_common.constprop.0+0xc0/0xe0  do_el0_svc+0x1c/0x28  el0_svc+0x34/0xd8  el0t_64_sync_handler+0x120/0x12c  el0t_64_sync+0x190/0x194 Code: f9000bf3 aa0003f3 f9402800 f9402000 (f9403400) ---[ end trace 0000000000000000 ]---  This happens because in v4l2_i2c_subdev_init()\, the i2c_set_cliendata() is called again and the data is overwritten to point to sd\, instead of priv. So\, in remove()\, the wrong pointer is passed to v4l2_async_unregister_subdev()\, leading to a crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42123,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: fix double free err_addr pointer warnings  In amdgpu_umc_bad_page_polling_timeout\, the amdgpu_umc_handle_bad_pages will be run many times so that double free err_addr in some special case. So set the err_addr to NULL to avoid the warnings.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53239,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: 6fire: Release resources at card release  The current 6fire code tries to release the resources right after the call of usb6fire_chip_abort().  But at this moment\, the card object might be still in use (as we're calling snd_card_free_when_closed()).  For avoid potential UAFs\, move the release of resources to the card's private_free instead of the manual call of usb6fire_chip_destroy() at the USB disconnect callback.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-7531,libnss3,MEDIUM,2:3.87.1-1+deb12u1,N/A,"Calling `PK11_Encrypt()` in NSS using CKM_CHACHA20 and the same buffer for input and output can result in plaintext on an Intel Sandy Bridge processor. In Firefox this only affects the QUIC header protection feature when the connection is using the ChaCha20-Poly1305 cipher suite. The most likely outcome is connection failure\, but if the connection persists despite the high packet loss it could be possible for a network observer to identify packets as coming from the same source despite a network path change. This vulnerability affects Firefox < 129\, Firefox ESR < 115.14\, and Firefox ESR < 128.1.",|tykio/midsommar|
CVE-2025-21719,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipmr: do not call mr_mfc_uses_dev() for unres entries  syzbot found that calling mr_mfc_uses_dev() for unres entries would crash [1]\, because c->mfc_un.res.minvif / c->mfc_un.res.maxvif alias to ""struct sk_buff_head unresolved""\, which contain two pointers.  This code never worked\, lets remove it.  [1] Unable to handle kernel paging request at virtual address ffff5fff2d536613 KASAN: maybe wild-memory-access in range [0xfffefff96a9b3098-0xfffefff96a9b309f] Modules linked in: CPU: 1 UID: 0 PID: 7321 Comm: syz.0.16 Not tainted 6.13.0-rc7-syzkaller-g1950a0af2d55 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 pstate: 80400005 (Nzcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)  pc : mr_mfc_uses_dev net/ipv4/ipmr_base.c:290 [inline]  pc : mr_table_dump+0x5a4/0x8b0 net/ipv4/ipmr_base.c:334  lr : mr_mfc_uses_dev net/ipv4/ipmr_base.c:289 [inline]  lr : mr_table_dump+0x694/0x8b0 net/ipv4/ipmr_base.c:334 Call trace:   mr_mfc_uses_dev net/ipv4/ipmr_base.c:290 [inline] (P)   mr_table_dump+0x5a4/0x8b0 net/ipv4/ipmr_base.c:334 (P)   mr_rtm_dumproute+0x254/0x454 net/ipv4/ipmr_base.c:382   ipmr_rtm_dumproute+0x248/0x4b4 net/ipv4/ipmr.c:2648   rtnl_dump_all+0x2e4/0x4e8 net/core/rtnetlink.c:4327   rtnl_dumpit+0x98/0x1d0 net/core/rtnetlink.c:6791   netlink_dump+0x4f0/0xbc0 net/netlink/af_netlink.c:2317   netlink_recvmsg+0x56c/0xe64 net/netlink/af_netlink.c:1973   sock_recvmsg_nosec net/socket.c:1033 [inline]   sock_recvmsg net/socket.c:1055 [inline]   sock_read_iter+0x2d8/0x40c net/socket.c:1125   new_sync_read fs/read_write.c:484 [inline]   vfs_read+0x740/0x970 fs/read_write.c:565   ksys_read+0x15c/0x26c fs/read_write.c:708",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42069,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: mana: Fix possible double free in error handling path  When auxiliary_device_add() returns error and then calls auxiliary_device_uninit()\, callback function adev_release calls kfree(madev). We shouldn't call kfree(madev) again in the error handling path. Set 'madev' to NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22081,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Fix a couple integer overflows on 32bit systems  On 32bit systems the ""off + sizeof(struct NTFS_DE)"" addition can have an integer wrapping issue.  Fix it by using size_add().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58056,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  remoteproc: core: Fix ida_free call while not allocated  In the rproc_alloc() function\, on error\, put_device(&rproc->dev) is called\, leading to the call of the rproc_type_release() function. An error can occurs before ida_alloc is called.  In such case in rproc_type_release()\, the condition (rproc->index >= 0) is true as rproc->index has been  initialized to 0. ida_free() is called reporting a warning: [    4.181906] WARNING: CPU: 1 PID: 24 at lib/idr.c:525 ida_free+0x100/0x164 [    4.186378] stm32-display-dsi 5a000000.dsi: Fixed dependency cycle(s) with /soc/dsi@5a000000/panel@0 [    4.188854] ida_free called for id=0 which is not allocated. [    4.198256] mipi-dsi 5a000000.dsi.0: Fixed dependency cycle(s) with /soc/dsi@5a000000 [    4.203556] Modules linked in: panel_orisetech_otm8009a dw_mipi_dsi_stm(+) gpu_sched dw_mipi_dsi stm32_rproc stm32_crc32 stm32_ipcc(+) optee(+) [    4.224307] CPU: 1 UID: 0 PID: 24 Comm: kworker/u10:0 Not tainted 6.12.0 #442 [    4.231481] Hardware name: STM32 (Device Tree Support) [    4.236627] Workqueue: events_unbound deferred_probe_work_func [    4.242504] Call trace: [    4.242522]  unwind_backtrace from show_stack+0x10/0x14 [    4.250218]  show_stack from dump_stack_lvl+0x50/0x64 [    4.255274]  dump_stack_lvl from __warn+0x80/0x12c [    4.260134]  __warn from warn_slowpath_fmt+0x114/0x188 [    4.265199]  warn_slowpath_fmt from ida_free+0x100/0x164 [    4.270565]  ida_free from rproc_type_release+0x38/0x60 [    4.275832]  rproc_type_release from device_release+0x30/0xa0 [    4.281601]  device_release from kobject_put+0xc4/0x294 [    4.286762]  kobject_put from rproc_alloc.part.0+0x208/0x28c [    4.292430]  rproc_alloc.part.0 from devm_rproc_alloc+0x80/0xc4 [    4.298393]  devm_rproc_alloc from stm32_rproc_probe+0xd0/0x844 [stm32_rproc] [    4.305575]  stm32_rproc_probe [stm32_rproc] from platform_probe+0x5c/0xbc  Calling ida_alloc earlier in rproc_alloc ensures that the rproc->index is properly set.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42239,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fail bpf_timer_cancel when callback is being cancelled  Given a schedule:  timer1 cb\t\t\ttimer2 cb  bpf_timer_cancel(timer2);\tbpf_timer_cancel(timer1);  Both bpf_timer_cancel calls would wait for the other callback to finish executing\, introducing a lockup.  Add an atomic_t count named 'cancelling' in bpf_hrtimer. This keeps track of all in-flight cancellation requests for a given BPF timer. Whenever cancelling a BPF timer\, we must check if we have outstanding cancellation requests\, and if so\, we must fail the operation with an error (-EDEADLK) since cancellation is synchronous and waits for the callback to finish executing. This implies that we can enter a deadlock situation involving two or more timer callbacks executing in parallel and attempting to cancel one another.  Note that we avoid incrementing the cancelling counter for the target timer (the one being cancelled) if bpf_timer_cancel is not invoked from a callback\, to avoid spurious errors. The whole point of detecting cur->cancelling and returning -EDEADLK is to not enter a busy wait loop (which may or may not lead to a lockup). This does not apply in case the caller is in a non-callback context\, the other side can continue to cancel as it sees fit without running into errors.  Background on prior attempts:  Earlier versions of this patch used a bool 'cancelling' bit and used the following pattern under timer->lock to publish cancellation status.  lock(t->lock); t->cancelling = true; mb(); if (cur->cancelling) \treturn -EDEADLK; unlock(t->lock); hrtimer_cancel(t->timer); t->cancelling = false;  The store outside the critical section could overwrite a parallel requests t->cancelling assignment to true\, to ensure the parallely executing callback observes its cancellation status.  It would be necessary to clear this cancelling bit once hrtimer_cancel is done\, but lack of serialization introduced races. Another option was explored where bpf_timer_start would clear the bit when (re)starting the timer under timer->lock. This would ensure serialized access to the cancelling bit\, but may allow it to be cleared before in-flight hrtimer_cancel has finished executing\, such that lockups can occur again.  Thus\, we choose an atomic counter to keep track of all outstanding cancellation requests and use it to prevent lockups in case callbacks attempt to cancel each other while executing in parallel.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21718,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: rose: fix timer races against user threads  Rose timers only acquire the socket spinlock\, without checking if the socket is owned by one user thread.  Add a check and rearm the timers if needed.  BUG: KASAN: slab-use-after-free in rose_timer_expiry+0x31d/0x360 net/rose/rose_timer.c:174 Read of size 2 at addr ffff88802f09b82a by task swapper/0/0  CPU: 0 UID: 0 PID: 0 Comm: swapper/0 Not tainted 6.13.0-rc5-syzkaller-00172-gd1bf27c4e176 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Call Trace:  <IRQ>   __dump_stack lib/dump_stack.c:94 [inline]   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120   print_address_description mm/kasan/report.c:378 [inline]   print_report+0x169/0x550 mm/kasan/report.c:489   kasan_report+0x143/0x180 mm/kasan/report.c:602   rose_timer_expiry+0x31d/0x360 net/rose/rose_timer.c:174   call_timer_fn+0x187/0x650 kernel/time/timer.c:1793   expire_timers kernel/time/timer.c:1844 [inline]   __run_timers kernel/time/timer.c:2418 [inline]   __run_timer_base+0x66a/0x8e0 kernel/time/timer.c:2430   run_timer_base kernel/time/timer.c:2439 [inline]   run_timer_softirq+0xb7/0x170 kernel/time/timer.c:2449   handle_softirqs+0x2d4/0x9b0 kernel/softirq.c:561   __do_softirq kernel/softirq.c:595 [inline]   invoke_softirq kernel/softirq.c:435 [inline]   __irq_exit_rcu+0xf7/0x220 kernel/softirq.c:662   irq_exit_rcu+0x9/0x30 kernel/softirq.c:678   instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1049 [inline]   sysvec_apic_timer_interrupt+0xa6/0xc0 arch/x86/kernel/apic/apic.c:1049  </IRQ>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53234,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  erofs: handle NONHEAD !delta[1] lclusters gracefully  syzbot reported a WARNING in iomap_iter_done:  iomap_fiemap+0x73b/0x9b0 fs/iomap/fiemap.c:80  ioctl_fiemap fs/ioctl.c:220 [inline]  Generally\, NONHEAD lclusters won't have delta[1]==0\, except for crafted images and filesystems created by pre-1.0 mkfs versions.  Previously\, it would immediately bail out if delta[1]==0\, which led to inadequate decompressed lengths (thus FIEMAP is impacted).  Treat it as delta[1]=1 to work around these legacy mkfs versions.  `lclusterbits > 14` is illegal for compact indexes\, error out too.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42067,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Take return from set_memory_rox() into account with bpf_jit_binary_lock_ro()  set_memory_rox() can fail\, leaving memory unprotected.  Check return and bail out when bpf_jit_binary_lock_ro() returns an error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38949,libde265-0,MEDIUM,1.0.11-1+deb12u2,N/A,"Heap Buffer Overflow vulnerability in Libde265 v1.0.15 allows attackers to crash the application via crafted payload to display444as420 function at sdl.cc",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21716,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  vxlan: Fix uninit-value in vxlan_vnifilter_dump()  KMSAN reported an uninit-value access in vxlan_vnifilter_dump() [1].  If the length of the netlink message payload is less than sizeof(struct tunnel_msg)\, vxlan_vnifilter_dump() accesses bytes beyond the message. This can lead to uninit-value access. Fix this by returning an error in such situations.  [1] BUG: KMSAN: uninit-value in vxlan_vnifilter_dump+0x328/0x920 drivers/net/vxlan/vxlan_vnifilter.c:422  vxlan_vnifilter_dump+0x328/0x920 drivers/net/vxlan/vxlan_vnifilter.c:422  rtnl_dumpit+0xd5/0x2f0 net/core/rtnetlink.c:6786  netlink_dump+0x93e/0x15f0 net/netlink/af_netlink.c:2317  __netlink_dump_start+0x716/0xd60 net/netlink/af_netlink.c:2432  netlink_dump_start include/linux/netlink.h:340 [inline]  rtnetlink_dump_start net/core/rtnetlink.c:6815 [inline]  rtnetlink_rcv_msg+0x1256/0x14a0 net/core/rtnetlink.c:6882  netlink_rcv_skb+0x467/0x660 net/netlink/af_netlink.c:2542  rtnetlink_rcv+0x35/0x40 net/core/rtnetlink.c:6944  netlink_unicast_kernel net/netlink/af_netlink.c:1321 [inline]  netlink_unicast+0xed6/0x1290 net/netlink/af_netlink.c:1347  netlink_sendmsg+0x1092/0x1230 net/netlink/af_netlink.c:1891  sock_sendmsg_nosec net/socket.c:711 [inline]  __sock_sendmsg+0x330/0x3d0 net/socket.c:726  ____sys_sendmsg+0x7f4/0xb50 net/socket.c:2583  ___sys_sendmsg+0x271/0x3b0 net/socket.c:2637  __sys_sendmsg net/socket.c:2669 [inline]  __do_sys_sendmsg net/socket.c:2674 [inline]  __se_sys_sendmsg net/socket.c:2672 [inline]  __x64_sys_sendmsg+0x211/0x3e0 net/socket.c:2672  x64_sys_call+0x3878/0x3d90 arch/x86/include/generated/asm/syscalls_64.h:47  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xd9/0x1d0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Uninit was created at:  slab_post_alloc_hook mm/slub.c:4110 [inline]  slab_alloc_node mm/slub.c:4153 [inline]  kmem_cache_alloc_node_noprof+0x800/0xe80 mm/slub.c:4205  kmalloc_reserve+0x13b/0x4b0 net/core/skbuff.c:587  __alloc_skb+0x347/0x7d0 net/core/skbuff.c:678  alloc_skb include/linux/skbuff.h:1323 [inline]  netlink_alloc_large_skb+0xa5/0x280 net/netlink/af_netlink.c:1196  netlink_sendmsg+0xac9/0x1230 net/netlink/af_netlink.c:1866  sock_sendmsg_nosec net/socket.c:711 [inline]  __sock_sendmsg+0x330/0x3d0 net/socket.c:726  ____sys_sendmsg+0x7f4/0xb50 net/socket.c:2583  ___sys_sendmsg+0x271/0x3b0 net/socket.c:2637  __sys_sendmsg net/socket.c:2669 [inline]  __do_sys_sendmsg net/socket.c:2674 [inline]  __se_sys_sendmsg net/socket.c:2672 [inline]  __x64_sys_sendmsg+0x211/0x3e0 net/socket.c:2672  x64_sys_call+0x3878/0x3d90 arch/x86/include/generated/asm/syscalls_64.h:47  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xd9/0x1d0 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  CPU: 0 UID: 0 PID: 30991 Comm: syz.4.10630 Not tainted 6.12.0-10694-gc44daa7e3c73 #29 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-3.fc41 04/01/2014",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58058,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ubifs: skip dumping tnc tree when zroot is null  Clearing slab cache will free all znode in memory and make c->zroot.znode = NULL\, then dumping tnc tree will access c->zroot.znode which cause null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21715,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: davicom: fix UAF in dm9000_drv_remove  dm is netdev private data and it cannot be used after free_netdev() call. Using dm after free_netdev() can cause UAF bug. Fix it by moving free_netdev() at the end of the function.  This is similar to the issue fixed in commit ad297cd2db89 (""net: qcom/emac: fix UAF in emac_remove"").  This bug is detected by our static analysis tool.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-0400,linux-libc-dev,LOW,6.1.115-1,N/A,"An out-of-bounds read vulnerability was discovered in linux kernel in the smc protocol stack\, causing remote dos.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-1121,linux-libc-dev,LOW,6.1.115-1,N/A,"procps-ng\, procps is vulnerable to a process hiding through race condition. Since the kernel's proc_pid_readdir() returns PID entries in ascending numeric order\, a process occupying a high PID can use inotify events to determine when the process list is being scanned\, and fork/exec to obtain a lower PID\, thus avoiding enumeration. An unprivileged attacker can hide a process from procps-ng's utilities by exploiting a race condition in reading /proc/PID entries. This vulnerability affects procps and procps-ng up to version 3.3.15\, newer versions might be affected also.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21714,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/mlx5: Fix implicit ODP use after free  Prevent double queueing of implicit ODP mr destroy work by using __xa_cmpxchg() to make sure this is the only time we are destroying this specific mr.  Without this change\, we could try to invalidate this mr twice\, which in turn could result in queuing a MR work destroy twice\, and eventually the second work could execute after the MR was freed due to the first work\, causing a user after free and trace below.     refcount_t: underflow; use-after-free.    WARNING: CPU: 2 PID: 12178 at lib/refcount.c:28 refcount_warn_saturate+0x12b/0x130    Modules linked in: bonding ib_ipoib vfio_pci ip_gre geneve nf_tables ip6_gre gre ip6_tunnel tunnel6 ipip tunnel4 ib_umad rdma_ucm mlx5_vfio_pci vfio_pci_core vfio_iommu_type1 mlx5_ib vfio ib_uverbs mlx5_core iptable_raw openvswitch nsh rpcrdma ib_iser libiscsi scsi_transport_iscsi rdma_cm iw_cm ib_cm ib_core xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xt_addrtype iptable_nat nf_nat br_netfilter rpcsec_gss_krb5 auth_rpcgss oid_registry overlay zram zsmalloc fuse [last unloaded: ib_uverbs]    CPU: 2 PID: 12178 Comm: kworker/u20:5 Not tainted 6.5.0-rc1_net_next_mlx5_58c644e #1    Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014    Workqueue: events_unbound free_implicit_child_mr_work [mlx5_ib]    RIP: 0010:refcount_warn_saturate+0x12b/0x130    Code: 48 c7 c7 38 95 2a 82 c6 05 bc c6 fe 00 01 e8 0c 66 aa ff 0f 0b 5b c3 48 c7 c7 e0 94 2a 82 c6 05 a7 c6 fe 00 01 e8 f5 65 aa ff <0f> 0b 5b c3 90 8b 07 3d 00 00 00 c0 74 12 83 f8 01 74 13 8d 50 ff    RSP: 0018:ffff8881008e3e40 EFLAGS: 00010286    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000027    RDX: ffff88852c91b5c8 RSI: 0000000000000001 RDI: ffff88852c91b5c0    RBP: ffff8881dacd4e00 R08: 00000000ffffffff R09: 0000000000000019    R10: 000000000000072e R11: 0000000063666572 R12: ffff88812bfd9e00    R13: ffff8881c792d200 R14: ffff88810011c005 R15: ffff8881002099c0    FS:  0000000000000000(0000) GS:ffff88852c900000(0000) knlGS:0000000000000000    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033    CR2: 00007f5694b5e000 CR3: 00000001153f6003 CR4: 0000000000370ea0    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400    Call Trace:     <TASK>     ? refcount_warn_saturate+0x12b/0x130     free_implicit_child_mr_work+0x180/0x1b0 [mlx5_ib]     process_one_work+0x1cc/0x3c0     worker_thread+0x218/0x3c0     kthread+0xc6/0xf0     ret_from_fork+0x1f/0x30     </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47658,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  crypto: stm32/cryp - call finalize with bh disabled  The finalize operation in interrupt mode produce a produces a spinlock recursion warning. The reason is the fact that BH must be disabled during this process.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53237,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: fix use-after-free in device_for_each_child()  Syzbot has reported the following KASAN splat:  BUG: KASAN: slab-use-after-free in device_for_each_child+0x18f/0x1a0 Read of size 8 at addr ffff88801f605308 by task kbnepd bnep0/4980  CPU: 0 UID: 0 PID: 4980 Comm: kbnepd bnep0 Not tainted 6.12.0-rc4-00161-gae90f6a6170d #1 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-2.fc40 04/01/2014 Call Trace:  <TASK>  dump_stack_lvl+0x100/0x190  ? device_for_each_child+0x18f/0x1a0  print_report+0x13a/0x4cb  ? __virt_addr_valid+0x5e/0x590  ? __phys_addr+0xc6/0x150  ? device_for_each_child+0x18f/0x1a0  kasan_report+0xda/0x110  ? device_for_each_child+0x18f/0x1a0  ? __pfx_dev_memalloc_noio+0x10/0x10  device_for_each_child+0x18f/0x1a0  ? __pfx_device_for_each_child+0x10/0x10  pm_runtime_set_memalloc_noio+0xf2/0x180  netdev_unregister_kobject+0x1ed/0x270  unregister_netdevice_many_notify+0x123c/0x1d80  ? __mutex_trylock_common+0xde/0x250  ? __pfx_unregister_netdevice_many_notify+0x10/0x10  ? trace_contention_end+0xe6/0x140  ? __mutex_lock+0x4e7/0x8f0  ? __pfx_lock_acquire.part.0+0x10/0x10  ? rcu_is_watching+0x12/0xc0  ? unregister_netdev+0x12/0x30  unregister_netdevice_queue+0x30d/0x3f0  ? __pfx_unregister_netdevice_queue+0x10/0x10  ? __pfx_down_write+0x10/0x10  unregister_netdev+0x1c/0x30  bnep_session+0x1fb3/0x2ab0  ? __pfx_bnep_session+0x10/0x10  ? __pfx_lock_release+0x10/0x10  ? __pfx_woken_wake_function+0x10/0x10  ? __kthread_parkme+0x132/0x200  ? __pfx_bnep_session+0x10/0x10  ? kthread+0x13a/0x370  ? __pfx_bnep_session+0x10/0x10  kthread+0x2b7/0x370  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x48/0x80  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK>  Allocated by task 4974:  kasan_save_stack+0x30/0x50  kasan_save_track+0x14/0x30  __kasan_kmalloc+0xaa/0xb0  __kmalloc_noprof+0x1d1/0x440  hci_alloc_dev_priv+0x1d/0x2820  __vhci_create_device+0xef/0x7d0  vhci_write+0x2c7/0x480  vfs_write+0x6a0/0xfc0  ksys_write+0x12f/0x260  do_syscall_64+0xc7/0x250  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Freed by task 4979:  kasan_save_stack+0x30/0x50  kasan_save_track+0x14/0x30  kasan_save_free_info+0x3b/0x60  __kasan_slab_free+0x4f/0x70  kfree+0x141/0x490  hci_release_dev+0x4d9/0x600  bt_host_release+0x6a/0xb0  device_release+0xa4/0x240  kobject_put+0x1ec/0x5a0  put_device+0x1f/0x30  vhci_release+0x81/0xf0  __fput+0x3f6/0xb30  task_work_run+0x151/0x250  do_exit+0xa79/0x2c30  do_group_exit+0xd5/0x2a0  get_signal+0x1fcd/0x2210  arch_do_signal_or_restart+0x93/0x780  syscall_exit_to_user_mode+0x140/0x290  do_syscall_64+0xd4/0x250  entry_SYSCALL_64_after_hwframe+0x77/0x7f  In 'hci_conn_del_sysfs()'\, 'device_unregister()' may be called when an underlying (kobject) reference counter is greater than 1. This means that reparenting (happened when the device is actually freed) is delayed and\, during that delay\, parent controller device (hciX) may be deleted. Since the latter may create a dangling pointer to freed parent\, avoid that scenario by reparenting to NULL explicitly.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53230,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  cpufreq: CPPC: Fix possible null-ptr-deref for cppc_get_cpu_cost()  cpufreq_cpu_get_raw() may return NULL if the cpu is not in policy->cpus cpu mask and it will cause null pointer dereference\, so check NULL for cppc_get_cpu_cost().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42319,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mailbox: mtk-cmdq: Move devm_mbox_controller_register() after devm_pm_runtime_enable()  When mtk-cmdq unbinds\, a WARN_ON message with condition pm_runtime_get_sync() < 0 occurs.  According to the call tracei below:   cmdq_mbox_shutdown   mbox_free_channel   mbox_controller_unregister   __devm_mbox_controller_unregister   ...  The root cause can be deduced to be calling pm_runtime_get_sync() after calling pm_runtime_disable() as observed below: 1. CMDQ driver uses devm_mbox_controller_register() in cmdq_probe()    to bind the cmdq device to the mbox_controller\, so    devm_mbox_controller_unregister() will automatically unregister    the device bound to the mailbox controller when the device-managed    resource is removed. That means devm_mbox_controller_unregister()    and cmdq_mbox_shoutdown() will be called after cmdq_remove(). 2. CMDQ driver also uses devm_pm_runtime_enable() in cmdq_probe() after    devm_mbox_controller_register()\, so that devm_pm_runtime_disable()    will be called after cmdq_remove()\, but before    devm_mbox_controller_unregister().  To fix this problem\, cmdq_probe() needs to move devm_mbox_controller_register() after devm_pm_runtime_enable() to make devm_pm_runtime_disable() be called after devm_mbox_controller_unregister().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21712,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  md/md-bitmap: Synchronize bitmap_get_stats() with bitmap lifetime  After commit ec6bb299c7c3 (""md/md-bitmap: add 'sync_size' into struct md_bitmap_stats"")\, following panic is reported:  Oops: general protection fault\, probably for non-canonical address RIP: 0010:bitmap_get_stats+0x2b/0xa0 Call Trace:  <TASK>  md_seq_show+0x2d2/0x5b0  seq_read_iter+0x2b9/0x470  seq_read+0x12f/0x180  proc_reg_read+0x57/0xb0  vfs_read+0xf6/0x380  ksys_read+0x6c/0xf0  do_syscall_64+0x82/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Root cause is that bitmap_get_stats() can be called at anytime if mddev is still there\, even if bitmap is destroyed\, or not fully initialized. Deferenceing bitmap in this case can crash the kernel. Meanwhile\, the above commit start to deferencing bitmap->storage\, make the problem easier to trigger.  Fix the problem by protecting bitmap_get_stats() with bitmap_info.mutex.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53231,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  cpufreq: CPPC: Fix possible null-ptr-deref for cpufreq_cpu_get_raw()  cpufreq_cpu_get_raw() may return NULL if the cpu is not in policy->cpus cpu mask and it will cause null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43911,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: mac80211: fix NULL dereference at band check in starting tx ba session  In MLD connection\, link_data/link_conf are dynamically allocated. They don't point to vif->bss_conf. So\, there will be no chanreq assigned to vif->bss_conf and then the chan will be NULL. Tweak the code to check ht_supported/vht_supported/has_he/has_eht on sta deflink.  Crash log (with rtw89 version under MLO development): [ 9890.526087] BUG: kernel NULL pointer dereference\, address: 0000000000000000 [ 9890.526102] #PF: supervisor read access in kernel mode [ 9890.526105] #PF: error_code(0x0000) - not-present page [ 9890.526109] PGD 0 P4D 0 [ 9890.526114] Oops: 0000 [#1] PREEMPT SMP PTI [ 9890.526119] CPU: 2 PID: 6367 Comm: kworker/u16:2 Kdump: loaded Tainted: G           OE      6.9.0 #1 [ 9890.526123] Hardware name: LENOVO 2356AD1/2356AD1\, BIOS G7ETB3WW (2.73 ) 11/28/2018 [ 9890.526126] Workqueue: phy2 rtw89_core_ba_work [rtw89_core] [ 9890.526203] RIP: 0010:ieee80211_start_tx_ba_session (net/mac80211/agg-tx.c:618 (discriminator 1)) mac80211 [ 9890.526279] Code: f7 e8 d5 93 3e ea 48 83 c4 28 89 d8 5b 41 5c 41 5d 41 5e 41 5f 5d c3 cc cc cc cc 49 8b 84 24 e0 f1 ff ff 48 8b 80 90 1b 00 00 <83> 38 03 0f 84 37 fe ff ff bb ea ff ff ff eb cc 49 8b 84 24 10 f3 All code ========    0:\tf7 e8                \timul   %eax    2:\td5                   \t(bad)    3:\t93                   \txchg   %eax\,%ebx    4:\t3e ea                \tds (bad)    6:\t48 83 c4 28          \tadd    $0x28\,%rsp    a:\t89 d8                \tmov    %ebx\,%eax    c:\t5b                   \tpop    %rbx    d:\t41 5c                \tpop    %r12    f:\t41 5d                \tpop    %r13   11:\t41 5e                \tpop    %r14   13:\t41 5f                \tpop    %r15   15:\t5d                   \tpop    %rbp   16:\tc3                   \tretq   17:\tcc                   \tint3   18:\tcc                   \tint3   19:\tcc                   \tint3   1a:\tcc                   \tint3   1b:\t49 8b 84 24 e0 f1 ff \tmov    -0xe20(%r12)\,%rax   22:\tff   23:\t48 8b 80 90 1b 00 00 \tmov    0x1b90(%rax)\,%rax   2a:*\t83 38 03             \tcmpl   $0x3\,(%rax)\t\t<-- trapping instruction   2d:\t0f 84 37 fe ff ff    \tje     0xfffffffffffffe6a   33:\tbb ea ff ff ff       \tmov    $0xffffffea\,%ebx   38:\teb cc                \tjmp    0x6   3a:\t49                   \trex.WB   3b:\t8b                   \t.byte 0x8b   3c:\t84 24 10             \ttest   %ah\,(%rax\,%rdx\,1)   3f:\tf3                   \trepz  Code starting with the faulting instruction ===========================================    0:\t83 38 03             \tcmpl   $0x3\,(%rax)    3:\t0f 84 37 fe ff ff    \tje     0xfffffffffffffe40    9:\tbb ea ff ff ff       \tmov    $0xffffffea\,%ebx    e:\teb cc                \tjmp    0xffffffffffffffdc   10:\t49                   \trex.WB   11:\t8b                   \t.byte 0x8b   12:\t84 24 10             \ttest   %ah\,(%rax\,%rdx\,1)   15:\tf3                   \trepz [ 9890.526285] RSP: 0018:ffffb8db09013d68 EFLAGS: 00010246 [ 9890.526291] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff9308e0d656c8 [ 9890.526295] RDX: 0000000000000000 RSI: ffffffffab99460b RDI: ffffffffab9a7685 [ 9890.526300] RBP: ffffb8db09013db8 R08: 0000000000000000 R09: 0000000000000873 [ 9890.526304] R10: ffff9308e0d64800 R11: 0000000000000002 R12: ffff9308e5ff6e70 [ 9890.526308] R13: ffff930952500e20 R14: ffff9309192a8c00 R15: 0000000000000000 [ 9890.526313] FS:  0000000000000000(0000) GS:ffff930b4e700000(0000) knlGS:0000000000000000 [ 9890.526316] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 9890.526318] CR2: 0000000000000000 CR3: 0000000391c58005 CR4: 00000000001706f0 [ 9890.526321] Call Trace: [ 9890.526324]  <TASK> [ 9890.526327] ? show_regs (arch/x86/kernel/dumpstack.c:479) [ 9890.526335] ? __die (arch/x86/kernel/dumpstack.c:421 arch/x86/kernel/dumpstack.c:434) [ 9890.526340] ? page_fault_oops (arch/x86/mm/fault.c:713) [ 9890.526347] ? search_module_extables (kernel/module/main.c:3256 (discriminator ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22088,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/erdma: Prevent use-after-free in erdma_accept_newconn()  After the erdma_cep_put(new_cep) being called\, new_cep will be freed\, and the following dereference will cause a UAF problem. Fix this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21711,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/rose: prevent integer overflows in rose_setsockopt()  In case of possible unpredictably large arguments passed to rose_setsockopt() and multiplied by extra values on top of that\, integer overflows may occur.  Do the safest minimum and fix these issues by checking the contents of 'opt' and returning -EINVAL if they are too large. Also\, switch to unsigned int and remove useless check for negative 'opt' in ROSE_IDLE case.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42128,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  leds: an30259a: Use devm_mutex_init() for mutex initialization  In this driver LEDs are registered using devm_led_classdev_register() so they are automatically unregistered after module's remove() is done. led_classdev_unregister() calls module's led_set_brightness() to turn off the LEDs and that callback uses mutex which was destroyed already in module's remove() so use devm API instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-2961,linux-libc-dev,LOW,6.1.115-1,N/A,"A use-after-free flaw was found in the Linux kernel’s PLP Rose functionality in the way a user triggers a race condition by calling bind while simultaneously triggering the rose_bind() function. This flaw allows a local user to crash or potentially escalate their privileges on the system.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22089,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/core: Don't expose hw_counters outside of init net namespace  Commit 467f432a521a (""RDMA/core: Split port and device counter sysfs attributes"") accidentally almost exposed hw counters to non-init net namespaces. It didn't expose them fully\, as an attempt to read any of those counters leads to a crash like this one:  [42021.807566] BUG: kernel NULL pointer dereference\, address: 0000000000000028 [42021.814463] #PF: supervisor read access in kernel mode [42021.819549] #PF: error_code(0x0000) - not-present page [42021.824636] PGD 0 P4D 0 [42021.827145] Oops: 0000 [#1] SMP PTI [42021.830598] CPU: 82 PID: 2843922 Comm: switchto-defaul Kdump: loaded Tainted: G S      W I        XXX [42021.841697] Hardware name: XXX [42021.849619] RIP: 0010:hw_stat_device_show+0x1e/0x40 [ib_core] [42021.855362] Code: 90 90 90 90 90 90 90 90 90 90 90 90 f3 0f 1e fa 0f 1f 44 00 00 49 89 d0 4c 8b 5e 20 48 8b 8f b8 04 00 00 48 81 c7 f0 fa ff ff <48> 8b 41 28 48 29 ce 48 83 c6 d0 48 c1 ee 04 69 d6 ab aa aa aa 48 [42021.873931] RSP: 0018:ffff97fe90f03da0 EFLAGS: 00010287 [42021.879108] RAX: ffff9406988a8c60 RBX: ffff940e1072d438 RCX: 0000000000000000 [42021.886169] RDX: ffff94085f1aa000 RSI: ffff93c6cbbdbcb0 RDI: ffff940c7517aef0 [42021.893230] RBP: ffff97fe90f03e70 R08: ffff94085f1aa000 R09: 0000000000000000 [42021.900294] R10: ffff94085f1aa000 R11: ffffffffc0775680 R12: ffffffff87ca2530 [42021.907355] R13: ffff940651602840 R14: ffff93c6cbbdbcb0 R15: ffff94085f1aa000 [42021.914418] FS:  00007fda1a3b9700(0000) GS:ffff94453fb80000(0000) knlGS:0000000000000000 [42021.922423] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [42021.928130] CR2: 0000000000000028 CR3: 00000042dcfb8003 CR4: 00000000003726f0 [42021.935194] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [42021.942257] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 [42021.949324] Call Trace: [42021.951756]  <TASK> [42021.953842]  [<ffffffff86c58674>] ? show_regs+0x64/0x70 [42021.959030]  [<ffffffff86c58468>] ? __die+0x78/0xc0 [42021.963874]  [<ffffffff86c9ef75>] ? page_fault_oops+0x2b5/0x3b0 [42021.969749]  [<ffffffff87674b92>] ? exc_page_fault+0x1a2/0x3c0 [42021.975549]  [<ffffffff87801326>] ? asm_exc_page_fault+0x26/0x30 [42021.981517]  [<ffffffffc0775680>] ? __pfx_show_hw_stats+0x10/0x10 [ib_core] [42021.988482]  [<ffffffffc077564e>] ? hw_stat_device_show+0x1e/0x40 [ib_core] [42021.995438]  [<ffffffff86ac7f8e>] dev_attr_show+0x1e/0x50 [42022.000803]  [<ffffffff86a3eeb1>] sysfs_kf_seq_show+0x81/0xe0 [42022.006508]  [<ffffffff86a11134>] seq_read_iter+0xf4/0x410 [42022.011954]  [<ffffffff869f4b2e>] vfs_read+0x16e/0x2f0 [42022.017058]  [<ffffffff869f50ee>] ksys_read+0x6e/0xe0 [42022.022073]  [<ffffffff8766f1ca>] do_syscall_64+0x6a/0xa0 [42022.027441]  [<ffffffff8780013b>] entry_SYSCALL_64_after_hwframe+0x78/0xe2  The problem can be reproduced using the following steps:   ip netns add foo   ip netns exec foo bash   cat /sys/class/infiniband/mlx4_0/hw_counters/*  The panic occurs because of casting the device pointer into an ib_device pointer using container_of() in hw_stat_device_show() is wrong and leads to a memory corruption.  However the real problem is that hw counters should never been exposed outside of the non-init net namespace.  Fix this by saving the index of the corresponding attribute group (it might be 1 or 2 depending on the presence of driver-specific attributes) and zeroing the pointer to hw_counters group for compat devices during the initialization.  With this fix applied hw_counters are not available in a non-init net namespace:   find /sys/class/infiniband/mlx4_0/ -name hw_counters     /sys/class/infiniband/mlx4_0/ports/1/hw_counters     /sys/class/infiniband/mlx4_0/ports/2/hw_counters     /sys/class/infiniband/mlx4_0/hw_counters    ip netns add foo   ip netns exec foo bash   find /sys/class/infiniband/mlx4_0/ -name hw_counters",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53233,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  unicode: Fix utf8_load() error path  utf8_load() requests the symbol ""utf8_data_table"" and then checks if the requested UTF-8 version is supported. If it's unsupported\, it tries to put the data table using symbol_put(). If an unsupported version is requested\, symbol_put() fails like this:   kernel BUG at kernel/module/main.c:786!  RIP: 0010:__symbol_put+0x93/0xb0  Call Trace:   <TASK>   ? __die_body.cold+0x19/0x27   ? die+0x2e/0x50   ? do_trap+0xca/0x110   ? do_error_trap+0x65/0x80   ? __symbol_put+0x93/0xb0   ? exc_invalid_op+0x51/0x70   ? __symbol_put+0x93/0xb0   ? asm_exc_invalid_op+0x1a/0x20   ? __pfx_cmp_name+0x10/0x10   ? __symbol_put+0x93/0xb0   ? __symbol_put+0x62/0xb0   utf8_load+0xf8/0x150  That happens because symbol_put() expects the unique string that identify the symbol\, instead of a pointer to the loaded symbol. Fix that by using such string.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43913,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nvme: apple: fix device reference counting  Drivers must call nvme_uninit_ctrl after a successful nvme_init_ctrl. Split the allocation side out to make the error handling boundary easier to navigate. The apple driver had been doing this wrong\, leaking the controller device memory on a tagset failure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42129,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  leds: mlxreg: Use devm_mutex_init() for mutex initialization  In this driver LEDs are registered using devm_led_classdev_register() so they are automatically unregistered after module's remove() is done. led_classdev_unregister() calls module's led_set_brightness() to turn off the LEDs and that callback uses mutex which was destroyed already in module's remove() so use devm API instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2011-4917,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel through 3.1 there is an information disclosure issue via /proc/stat.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53164,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: sched: fix ordering of qlen adjustment  Changes to sch->q.qlen around qdisc_tree_reduce_backlog() need to happen _before_ a call to said function because otherwise it may fail to notify parent qdiscs when the child is about to become empty.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-11394,transformers,HIGH,4.46.2,4.48.0,"Hugging Face Transformers Trax Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of model files. The issue results from the lack of proper validation of user-supplied data\, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25012.",|tykio/smart-ner-redact|
CVE-2011-4916,linux-libc-dev,LOW,6.1.115-1,N/A,"Linux kernel through 3.1 allows local users to obtain sensitive keystroke information via access to /dev/pts/ and /dev/tty*.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21914,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  slimbus: messaging: Free transaction ID in delayed interrupt scenario  In case of interrupt delay for any reason\, slim_do_transfer() returns timeout error but the transaction ID (TID) is not freed. This results into invalid memory access inside qcom_slim_ngd_rx_msgq_cb() due to invalid TID.  Fix the issue by freeing the TID in slim_do_transfer() before returning timeout error to avoid invalid memory access.  Call trace: __memcpy_fromio+0x20/0x190 qcom_slim_ngd_rx_msgq_cb+0x130/0x290 [slim_qcom_ngd_ctrl] vchan_complete+0x2a0/0x4a0 tasklet_action_common+0x274/0x700 tasklet_action+0x28/0x3c _stext+0x188/0x620 run_ksoftirqd+0x34/0x74 smpboot_thread_fn+0x1d8/0x464 kthread+0x178/0x238 ret_from_fork+0x10/0x20 Code: aa0003e8 91000429 f100044a 3940002b (3800150b) ---[ end trace 0fe00bec2b975c99 ]--- Kernel panic - not syncing: Oops: Fatal exception in interrupt.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38625,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Check 'folio' pointer for NULL  It can be NULL if bmap is called.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53165,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  sh: intc: Fix use-after-free bug in register_intc_controller()  In the error handling for this function\, d is freed without ever removing it from intc_list which would lead to a use after free. To fix this\, let's only add it to the list after everything has succeeded.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2011-4915,linux-libc-dev,LOW,6.1.115-1,N/A,"fs/proc/base.c in the Linux kernel through 3.1 allows local users to obtain sensitive keystroke information via access to /proc/interrupts.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21917,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: renesas_usbhs: Flush the notify_hotplug_work  When performing continuous unbind/bind operations on the USB drivers available on the Renesas RZ/G2L SoC\, a kernel crash with the message ""Unable to handle kernel NULL pointer dereference at virtual address"" may occur. This issue points to the usbhsc_notify_hotplug() function.  Flush the delayed work to avoid its execution when driver resources are unavailable.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53166,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  block\, bfq: fix bfqq uaf in bfq_limit_depth()  Set new allocated bfqq to bic or remove freed bfqq from bic are both protected by bfqd->lock\, however bfq_limit_depth() is deferencing bfqq from bic without the lock\, this can lead to UAF if the io_context is shared by multiple tasks.  For example\, test bfq with io_uring can trigger following UAF in v6.6:  ================================================================== BUG: KASAN: slab-use-after-free in bfqq_group+0x15/0x50  Call Trace:  <TASK>  dump_stack_lvl+0x47/0x80  print_address_description.constprop.0+0x66/0x300  print_report+0x3e/0x70  kasan_report+0xb4/0xf0  bfqq_group+0x15/0x50  bfqq_request_over_limit+0x130/0x9a0  bfq_limit_depth+0x1b5/0x480  __blk_mq_alloc_requests+0x2b5/0xa00  blk_mq_get_new_requests+0x11d/0x1d0  blk_mq_submit_bio+0x286/0xb00  submit_bio_noacct_nocheck+0x331/0x400  __block_write_full_folio+0x3d0/0x640  writepage_cb+0x3b/0xc0  write_cache_pages+0x254/0x6c0  write_cache_pages+0x254/0x6c0  do_writepages+0x192/0x310  filemap_fdatawrite_wbc+0x95/0xc0  __filemap_fdatawrite_range+0x99/0xd0  filemap_write_and_wait_range.part.0+0x4d/0xa0  blkdev_read_iter+0xef/0x1e0  io_read+0x1b6/0x8a0  io_issue_sqe+0x87/0x300  io_wq_submit_work+0xeb/0x390  io_worker_handle_work+0x24d/0x550  io_wq_worker+0x27f/0x6c0  ret_from_fork_asm+0x1b/0x30  </TASK>  Allocated by task 808602:  kasan_save_stack+0x1e/0x40  kasan_set_track+0x21/0x30  __kasan_slab_alloc+0x83/0x90  kmem_cache_alloc_node+0x1b1/0x6d0  bfq_get_queue+0x138/0xfa0  bfq_get_bfqq_handle_split+0xe3/0x2c0  bfq_init_rq+0x196/0xbb0  bfq_insert_request.isra.0+0xb5/0x480  bfq_insert_requests+0x156/0x180  blk_mq_insert_request+0x15d/0x440  blk_mq_submit_bio+0x8a4/0xb00  submit_bio_noacct_nocheck+0x331/0x400  __blkdev_direct_IO_async+0x2dd/0x330  blkdev_write_iter+0x39a/0x450  io_write+0x22a/0x840  io_issue_sqe+0x87/0x300  io_wq_submit_work+0xeb/0x390  io_worker_handle_work+0x24d/0x550  io_wq_worker+0x27f/0x6c0  ret_from_fork+0x2d/0x50  ret_from_fork_asm+0x1b/0x30  Freed by task 808589:  kasan_save_stack+0x1e/0x40  kasan_set_track+0x21/0x30  kasan_save_free_info+0x27/0x40  __kasan_slab_free+0x126/0x1b0  kmem_cache_free+0x10c/0x750  bfq_put_queue+0x2dd/0x770  __bfq_insert_request.isra.0+0x155/0x7a0  bfq_insert_request.isra.0+0x122/0x480  bfq_insert_requests+0x156/0x180  blk_mq_dispatch_plug_list+0x528/0x7e0  blk_mq_flush_plug_list.part.0+0xe5/0x590  __blk_flush_plug+0x3b/0x90  blk_finish_plug+0x40/0x60  do_writepages+0x19d/0x310  filemap_fdatawrite_wbc+0x95/0xc0  __filemap_fdatawrite_range+0x99/0xd0  filemap_write_and_wait_range.part.0+0x4d/0xa0  blkdev_read_iter+0xef/0x1e0  io_read+0x1b6/0x8a0  io_issue_sqe+0x87/0x300  io_wq_submit_work+0xeb/0x390  io_worker_handle_work+0x24d/0x550  io_wq_worker+0x27f/0x6c0  ret_from_fork+0x2d/0x50  ret_from_fork_asm+0x1b/0x30  Fix the problem by protecting bic_to_bfqq() with bfqd->lock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21916,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: atm: cxacru: fix a flaw in existing endpoint checks  Syzbot once again identified a flaw in usb endpoint checking\, see [1]. This time the issue stems from a commit authored by me (2eabb655a968 (""usb: atm: cxacru: fix endpoint checking in cxacru_bind()"")).  While using usb_find_common_endpoints() may usually be enough to discard devices with wrong endpoints\, in this case one needs more than just finding and identifying the sufficient number of endpoints of correct types - one needs to check the endpoint's address as well.  Since cxacru_bind() fills URBs with CXACRU_EP_CMD address in mind\, switch the endpoint verification approach to usb_check_XXX_endpoints() instead to fix incomplete ep testing.  [1] Syzbot report: usb 5-1: BOGUS urb xfer\, pipe 3 != type 1 WARNING: CPU: 0 PID: 1378 at drivers/usb/core/urb.c:504 usb_submit_urb+0xc4e/0x18c0 drivers/usb/core/urb.c:503 ... RIP: 0010:usb_submit_urb+0xc4e/0x18c0 drivers/usb/core/urb.c:503 ... Call Trace:  <TASK>  cxacru_cm+0x3c8/0xe50 drivers/usb/atm/cxacru.c:649  cxacru_card_status drivers/usb/atm/cxacru.c:760 [inline]  cxacru_bind+0xcf9/0x1150 drivers/usb/atm/cxacru.c:1223  usbatm_usb_probe+0x314/0x1d30 drivers/usb/atm/usbatm.c:1058  cxacru_usb_probe+0x184/0x220 drivers/usb/atm/cxacru.c:1377  usb_probe_interface+0x641/0xbb0 drivers/usb/core/driver.c:396  really_probe+0x2b9/0xad0 drivers/base/dd.c:658  __driver_probe_device+0x1a2/0x390 drivers/base/dd.c:800  driver_probe_device+0x50/0x430 drivers/base/dd.c:830 ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38620,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: HCI: Remove HCI_AMP support  Since BT_HS has been remove HCI_AMP controllers no longer has any use so remove it along with the capability of creating AMP controllers.  Since we no longer need to differentiate between AMP and Primary controllers\, as only HCI_PRIMARY is left\, this also remove hdev->dev_type altogether.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21910,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: cfg80211: regulatory: improve invalid hints checking  Syzbot keeps reporting an issue [1] that occurs when erroneous symbols sent from userspace get through into user_alpha2[] via regulatory_hint_user() call. Such invalid regulatory hints should be rejected.  While a sanity check from commit 47caf685a685 (""cfg80211: regulatory: reject invalid hints"") looks to be enough to deter these very cases\, there is a way to get around it due to 2 reasons.  1) The way isalpha() works\, symbols other than latin lower and upper letters may be used to determine a country/domain. For instance\, greek letters will also be considered upper/lower letters and for such characters isalpha() will return true as well. However\, ISO-3166-1 alpha2 codes should only hold latin characters.  2) While processing a user regulatory request\, between reg_process_hint_user() and regulatory_hint_user() there happens to be a call to queue_regulatory_request() which modifies letters in request->alpha2[] with toupper(). This works fine for latin symbols\, less so for weird letter characters from the second part of _ctype[].  Syzbot triggers a warning in is_user_regdom_saved() by first sending over an unexpected non-latin letter that gets malformed by toupper() into a character that ends up failing isalpha() check.  Prevent this by enhancing is_an_alpha2() to ensure that incoming symbols are latin letters and nothing else.  [1] Syzbot report: ------------[ cut here ]------------ Unexpected user alpha2: A� WARNING: CPU: 1 PID: 964 at net/wireless/reg.c:442 is_user_regdom_saved net/wireless/reg.c:440 [inline] WARNING: CPU: 1 PID: 964 at net/wireless/reg.c:442 restore_alpha2 net/wireless/reg.c:3424 [inline] WARNING: CPU: 1 PID: 964 at net/wireless/reg.c:442 restore_regulatory_settings+0x3c0/0x1e50 net/wireless/reg.c:3516 Modules linked in: CPU: 1 UID: 0 PID: 964 Comm: kworker/1:2 Not tainted 6.12.0-rc5-syzkaller-00044-gc1e939a21eb1 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: events_power_efficient crda_timeout_work RIP: 0010:is_user_regdom_saved net/wireless/reg.c:440 [inline] RIP: 0010:restore_alpha2 net/wireless/reg.c:3424 [inline] RIP: 0010:restore_regulatory_settings+0x3c0/0x1e50 net/wireless/reg.c:3516 ... Call Trace:  <TASK>  crda_timeout_work+0x27/0x50 net/wireless/reg.c:542  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa65/0x1850 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f2/0x390 kernel/kthread.c:389  ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53161,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  EDAC/bluefield: Fix potential integer overflow  The 64-bit argument for the ""get DIMM info"" SMC call consists of mem_ctrl_idx left-shifted 16 bits and OR-ed with DIMM index.  With mem_ctrl_idx defined as 32-bits wide the left-shift operation truncates the upper 16 bits of information during the calculation of the SMC argument.  The mem_ctrl_idx stack variable must be defined as 64-bits wide to prevent any potential integer overflow\, i.e. loss of data from upper 16 bits.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43850,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  soc: qcom: icc-bwmon: Fix refcount imbalance seen during bwmon_remove  The following warning is seen during bwmon_remove due to refcount imbalance\, fix this by releasing the OPPs after use.  Logs: WARNING: at drivers/opp/core.c:1640 _opp_table_kref_release+0x150/0x158 Hardware name: Qualcomm Technologies\, Inc. X1E80100 CRD (DT) ... Call trace: _opp_table_kref_release+0x150/0x158 dev_pm_opp_remove_table+0x100/0x1b4 devm_pm_opp_of_table_release+0x10/0x1c devm_action_release+0x14/0x20 devres_release_all+0xa4/0x104 device_unbind_cleanup+0x18/0x60 device_release_driver_internal+0x1ec/0x228 driver_detach+0x50/0x98 bus_remove_driver+0x6c/0xbc driver_unregister+0x30/0x60 platform_driver_unregister+0x14/0x20 bwmon_driver_exit+0x18/0x524 [icc_bwmon] __arm64_sys_delete_module+0x184/0x264 invoke_syscall+0x48/0x118 el0_svc_common.constprop.0+0xc8/0xe8 do_el0_svc+0x20/0x2c el0_svc+0x34/0xdc el0t_64_sync_handler+0x13c/0x158 el0t_64_sync+0x190/0x194 --[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-11393,transformers,HIGH,4.46.2,4.48.0,"Hugging Face Transformers MaskFormer Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the parsing of model files. The issue results from the lack of proper validation of user-supplied data\, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25191.",|tykio/smart-ner-redact|
CVE-2025-21913,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  x86/amd_nb: Use rdmsr_safe() in amd_get_mmconfig_range()  Xen doesn't offer MSR_FAM10H_MMIO_CONF_BASE to all guests.  This results in the following warning:    unchecked MSR access error: RDMSR from 0xc0010058 at rIP: 0xffffffff8101d19f (xen_do_read_msr+0x7f/0xa0)   Call Trace:    xen_read_msr+0x1e/0x30    amd_get_mmconfig_range+0x2b/0x80    quirk_amd_mmconfig_area+0x28/0x100    pnp_fixup_device+0x39/0x50    __pnp_add_device+0xf/0x150    pnp_add_device+0x3d/0x100    pnpacpi_add_device_handler+0x1f9/0x280    acpi_ns_get_device_callback+0x104/0x1c0    acpi_ns_walk_namespace+0x1d0/0x260    acpi_get_devices+0x8a/0xb0    pnpacpi_init+0x50/0x80    do_one_initcall+0x46/0x2e0    kernel_init_freeable+0x1da/0x2f0    kernel_init+0x16/0x1b0    ret_from_fork+0x30/0x50    ret_from_fork_asm+0x1b/0x30  based on quirks for a ""PNP0c01"" device.  Treating MMCFG as disabled is the right course of action\, so no change is needed there.  This was most likely exposed by fixing the Xen MSR accessors to not be silently-safe.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38622,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/msm/dpu: Add callback function pointer check before its call  In dpu_core_irq_callback_handler() callback function pointer is compared to NULL\, but then callback function is unconditionally called by this pointer. Fix this bug by adding conditional return.  Found by Linux Verification Center (linuxtesting.org) with SVACE.  Patchwork: https://patchwork.freedesktop.org/patch/588237/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-11392,transformers,HIGH,4.46.2,4.48.0,"Hugging Face Transformers MobileViTV2 Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of configuration files. The issue results from the lack of proper validation of user-supplied data\, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-24322.",|tykio/smart-ner-redact|
CVE-2025-21912,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  gpio: rcar: Use raw_spinlock to protect register access  Use raw_spinlock in order to fix spurious messages about invalid context when spinlock debugging is enabled. The lock is only used to serialize register access.      [    4.239592] =============================     [    4.239595] [ BUG: Invalid wait context ]     [    4.239599] 6.13.0-rc7-arm64-renesas-05496-gd088502a519f #35 Not tainted     [    4.239603] -----------------------------     [    4.239606] kworker/u8:5/76 is trying to lock:     [    4.239609] ffff0000091898a0 (&p->lock){....}-{3:3}\, at: gpio_rcar_config_interrupt_input_mode+0x34/0x164     [    4.239641] other info that might help us debug this:     [    4.239643] context-{5:5}     [    4.239646] 5 locks held by kworker/u8:5/76:     [    4.239651]  #0: ffff0000080fb148 ((wq_completion)async){+.+.}-{0:0}\, at: process_one_work+0x190/0x62c     [    4.250180] OF: /soc/sound@ec500000/ports/port@0/endpoint: Read of boolean property 'frame-master' with a value.     [    4.254094]  #1: ffff80008299bd80 ((work_completion)(&entry->work)){+.+.}-{0:0}\, at: process_one_work+0x1b8/0x62c     [    4.254109]  #2: ffff00000920c8f8     [    4.258345] OF: /soc/sound@ec500000/ports/port@1/endpoint: Read of boolean property 'bitclock-master' with a value.     [    4.264803]  (&dev->mutex){....}-{4:4}\, at: __device_attach_async_helper+0x3c/0xdc     [    4.264820]  #3: ffff00000a50ca40 (request_class#2){+.+.}-{4:4}\, at: __setup_irq+0xa0/0x690     [    4.264840]  #4:     [    4.268872] OF: /soc/sound@ec500000/ports/port@1/endpoint: Read of boolean property 'frame-master' with a value.     [    4.273275] ffff00000a50c8c8 (lock_class){....}-{2:2}\, at: __setup_irq+0xc4/0x690     [    4.296130] renesas_sdhi_internal_dmac ee100000.mmc: mmc1 base at 0x00000000ee100000\, max clock rate 200 MHz     [    4.304082] stack backtrace:     [    4.304086] CPU: 1 UID: 0 PID: 76 Comm: kworker/u8:5 Not tainted 6.13.0-rc7-arm64-renesas-05496-gd088502a519f #35     [    4.304092] Hardware name: Renesas Salvator-X 2nd version board based on r8a77965 (DT)     [    4.304097] Workqueue: async async_run_entry_fn     [    4.304106] Call trace:     [    4.304110]  show_stack+0x14/0x20 (C)     [    4.304122]  dump_stack_lvl+0x6c/0x90     [    4.304131]  dump_stack+0x14/0x1c     [    4.304138]  __lock_acquire+0xdfc/0x1584     [    4.426274]  lock_acquire+0x1c4/0x33c     [    4.429942]  _raw_spin_lock_irqsave+0x5c/0x80     [    4.434307]  gpio_rcar_config_interrupt_input_mode+0x34/0x164     [    4.440061]  gpio_rcar_irq_set_type+0xd4/0xd8     [    4.444422]  __irq_set_trigger+0x5c/0x178     [    4.448435]  __setup_irq+0x2e4/0x690     [    4.452012]  request_threaded_irq+0xc4/0x190     [    4.456285]  devm_request_threaded_irq+0x7c/0xf4     [    4.459398] ata1: link resume succeeded after 1 retries     [    4.460902]  mmc_gpiod_request_cd_irq+0x68/0xe0     [    4.470660]  mmc_start_host+0x50/0xac     [    4.474327]  mmc_add_host+0x80/0xe4     [    4.477817]  tmio_mmc_host_probe+0x2b0/0x440     [    4.482094]  renesas_sdhi_probe+0x488/0x6f4     [    4.486281]  renesas_sdhi_internal_dmac_probe+0x60/0x78     [    4.491509]  platform_probe+0x64/0xd8     [    4.495178]  really_probe+0xb8/0x2a8     [    4.498756]  __driver_probe_device+0x74/0x118     [    4.503116]  driver_probe_device+0x3c/0x154     [    4.507303]  __device_attach_driver+0xd4/0x160     [    4.511750]  bus_for_each_drv+0x84/0xe0     [    4.515588]  __device_attach_async_helper+0xb0/0xdc     [    4.520470]  async_run_entry_fn+0x30/0xd8     [    4.524481]  process_one_work+0x210/0x62c     [    4.528494]  worker_thread+0x1ac/0x340     [    4.532245]  kthread+0x10c/0x110     [    4.535476]  ret_from_fork+0x10/0x20",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-54683,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: IDLETIMER: Fix for possible ABBA deadlock  Deletion of the last rule referencing a given idletimer may happen at the same time as a read of its file in sysfs:  | ====================================================== | WARNING: possible circular locking dependency detected | 6.12.0-rc7-01692-g5e9a28f41134-dirty #594 Not tainted | ------------------------------------------------------ | iptables/3303 is trying to acquire lock: | ffff8881057e04b8 (kn->active#48){++++}-{0:0}\, at: __kernfs_remove+0x20 | | but task is already holding lock: | ffffffffa0249068 (list_mutex){+.+.}-{3:3}\, at: idletimer_tg_destroy_v] | | which lock already depends on the new lock.  A simple reproducer is:  | #!/bin/bash | | while true; do |         iptables -A INPUT -i foo -j IDLETIMER --timeout 10 --label ""testme"" |         iptables -D INPUT -i foo -j IDLETIMER --timeout 10 --label ""testme"" | done & | while true; do |         cat /sys/class/xt_idletimer/timers/testme >/dev/null | done  Avoid this by freeing list_mutex right after deleting the element from the list\, then continuing with the teardown.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21919,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  sched/fair: Fix potential memory corruption in child_cfs_rq_on_list  child_cfs_rq_on_list attempts to convert a 'prev' pointer to a cfs_rq. This 'prev' pointer can originate from struct rq's leaf_cfs_rq_list\, making the conversion invalid and potentially leading to memory corruption. Depending on the relative positions of leaf_cfs_rq_list and the task group (tg) pointer within the struct\, this can cause a memory fault or access garbage data.  The issue arises in list_add_leaf_cfs_rq\, where both cfs_rq->leaf_cfs_rq_list and rq->leaf_cfs_rq_list are added to the same leaf list. Also\, rq->tmp_alone_branch can be set to rq->leaf_cfs_rq_list.  This adds a check `if (prev == &rq->leaf_cfs_rq_list)` after the main conditional in child_cfs_rq_on_list. This ensures that the container_of operation will convert a correct cfs_rq struct.  This check is sufficient because only cfs_rqs on the same CPU are added to the list\, so verifying the 'prev' pointer against the current rq's list head is enough.  Fixes a potential memory corruption issue that due to current struct layout might not be manifesting as a crash but could lead to unpredictable behavior when the layout changes.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53168,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  sunrpc: fix one UAF issue caused by sunrpc kernel tcp socket  BUG: KASAN: slab-use-after-free in tcp_write_timer_handler+0x156/0x3e0 Read of size 1 at addr ffff888111f322cd by task swapper/0/0  CPU: 0 UID: 0 PID: 0 Comm: swapper/0 Not tainted 6.12.0-rc4-dirty #7 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 Call Trace:  <IRQ>  dump_stack_lvl+0x68/0xa0  print_address_description.constprop.0+0x2c/0x3d0  print_report+0xb4/0x270  kasan_report+0xbd/0xf0  tcp_write_timer_handler+0x156/0x3e0  tcp_write_timer+0x66/0x170  call_timer_fn+0xfb/0x1d0  __run_timers+0x3f8/0x480  run_timer_softirq+0x9b/0x100  handle_softirqs+0x153/0x390  __irq_exit_rcu+0x103/0x120  irq_exit_rcu+0xe/0x20  sysvec_apic_timer_interrupt+0x76/0x90  </IRQ>  <TASK>  asm_sysvec_apic_timer_interrupt+0x1a/0x20 RIP: 0010:default_idle+0xf/0x20 Code: 4c 01 c7 4c 29 c2 e9 72 ff ff ff 90 90 90 90 90 90 90 90 90 90 90 90  90 90 90 90 f3 0f 1e fa 66 90 0f 00 2d 33 f8 25 00 fb f4 <fa> c3 cc cc cc  cc 66 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90 RSP: 0018:ffffffffa2007e28 EFLAGS: 00000242 RAX: 00000000000f3b31 RBX: 1ffffffff4400fc7 RCX: ffffffffa09c3196 RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff9f00590f RBP: 0000000000000000 R08: 0000000000000001 R09: ffffed102360835d R10: ffff88811b041aeb R11: 0000000000000001 R12: 0000000000000000 R13: ffffffffa202d7c0 R14: 0000000000000000 R15: 00000000000147d0  default_idle_call+0x6b/0xa0  cpuidle_idle_call+0x1af/0x1f0  do_idle+0xbc/0x130  cpu_startup_entry+0x33/0x40  rest_init+0x11f/0x210  start_kernel+0x39a/0x420  x86_64_start_reservations+0x18/0x30  x86_64_start_kernel+0x97/0xa0  common_startup_64+0x13e/0x141  </TASK>  Allocated by task 595:  kasan_save_stack+0x24/0x50  kasan_save_track+0x14/0x30  __kasan_slab_alloc+0x87/0x90  kmem_cache_alloc_noprof+0x12b/0x3f0  copy_net_ns+0x94/0x380  create_new_namespaces+0x24c/0x500  unshare_nsproxy_namespaces+0x75/0xf0  ksys_unshare+0x24e/0x4f0  __x64_sys_unshare+0x1f/0x30  do_syscall_64+0x70/0x180  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 100:  kasan_save_stack+0x24/0x50  kasan_save_track+0x14/0x30  kasan_save_free_info+0x3b/0x60  __kasan_slab_free+0x54/0x70  kmem_cache_free+0x156/0x5d0  cleanup_net+0x5d3/0x670  process_one_work+0x776/0xa90  worker_thread+0x2e2/0x560  kthread+0x1a8/0x1f0  ret_from_fork+0x34/0x60  ret_from_fork_asm+0x1a/0x30  Reproduction script:  mkdir -p /mnt/nfsshare mkdir -p /mnt/nfs/netns_1 mkfs.ext4 /dev/sdb mount /dev/sdb /mnt/nfsshare systemctl restart nfs-server chmod 777 /mnt/nfsshare exportfs -i -o rw\,no_root_squash *:/mnt/nfsshare  ip netns add netns_1 ip link add name veth_1_peer type veth peer veth_1 ifconfig veth_1_peer 11.11.0.254 up ip link set veth_1 netns netns_1 ip netns exec netns_1 ifconfig veth_1 11.11.0.1  ip netns exec netns_1 /root/iptables -A OUTPUT -d 11.11.0.254 -p tcp \\ \t--tcp-flags FIN FIN  -j DROP  (note: In my environment\, a DESTROY_CLIENTID operation is always sent  immediately\, breaking the nfs tcp connection.) ip netns exec netns_1 timeout -s 9 300 mount -t nfs -o proto=tcp\,vers=4.1 \\ \t11.11.0.254:/mnt/nfsshare /mnt/nfs/netns_1  ip netns del netns_1  The reason here is that the tcp socket in netns_1 (nfs side) has been shutdown and closed (done in xs_destroy)\, but the FIN message (with ack) is discarded\, and the nfsd side keeps sending retransmission messages. As a result\, when the tcp sock in netns_1 processes the received message\, it sends the message (FIN message) in the sending queue\, and the tcp timer is re-established. When the network namespace is deleted\, the net structure accessed by tcp's timer handler function causes problems.  To fix this problem\, let's hold netns refcnt for the tcp kernel socket as done in other modules. This is an ugly hack which can easily be backported to earlier kernels. A proper fix which cleans up the interfaces will follow\, but may not be so easy to backport.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47745,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: call the security_mmap_file() LSM hook in remap_file_pages()  The remap_file_pages syscall handler calls do_mmap() directly\, which doesn't contain the LSM security check. And if the process has called personality(READ_IMPLIES_EXEC) before and remap_file_pages() is called for RW pages\, this will actually result in remapping the pages to RWX\, bypassing a W^X policy enforced by SELinux.  So we should check prot by security_mmap_file LSM hook in the remap_file_pages syscall handler before do_mmap() is called. Otherwise\, it potentially permits an attacker to bypass a W^X policy enforced by SELinux.  The bypass is similar to CVE-2016-10044\, which bypass the same thing via AIO and can be found in [1].  The PoC:  $ cat > test.c  int main(void) { \tsize_t pagesz = sysconf(_SC_PAGE_SIZE); \tint mfd = syscall(SYS_memfd_create\, ""test""\, 0); \tconst char *buf = mmap(NULL\, 4 * pagesz\, PROT_READ | PROT_WRITE\, \t\tMAP_SHARED\, mfd\, 0); \tunsigned int old = syscall(SYS_personality\, 0xffffffff); \tsyscall(SYS_personality\, READ_IMPLIES_EXEC | old); \tsyscall(SYS_remap_file_pages\, buf\, pagesz\, 0\, 2\, 0); \tsyscall(SYS_personality\, old); \t// show the RWX page exists even if W^X policy is enforced \tint fd = open(""/proc/self/maps""\, O_RDONLY); \tunsigned char buf2[1024]; \twhile (1) { \t\tint ret = read(fd\, buf2\, 1024); \t\tif (ret <= 0) break; \t\twrite(1\, buf2\, ret); \t} \tclose(fd); }  $ gcc test.c -o test $ ./test | grep rwx 7f1836c34000-7f1836c35000 rwxs 00002000 00:01 2050 /memfd:test (deleted)  [PM: subject line tweaks]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21918,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: ucsi: Fix NULL pointer access  Resources should be released only after all threads that utilize them have been destroyed. This commit ensures that resources are not released prematurely by waiting for the associated workqueue to complete before deallocating them.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56578,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: imx-jpeg: Set video drvdata before register video device  The video drvdata should be set before the video device is registered\, otherwise video_drvdata() may return NULL in the open() file ops\, and led to oops.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40973,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: mtk-vcodec: potential null pointer deference in SCP  The return value of devm_kzalloc() needs to be checked to avoid NULL pointer deference. This is similar to CVE-2022-3113.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-27943,gcc-12-base,LOW,12.2.0-14,N/A,"libiberty/rust-demangle.c in GNU GCC 11.2 allows stack consumption in demangle_const\, as demonstrated by nm-new.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56579,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: amphion: Set video drvdata before register video device  The video drvdata should be set before the video device is registered\, otherwise video_drvdata() may return NULL in the open() file ops\, and led to oops.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50072,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  x86/bugs: Use code segment selector for VERW operand  Robert Gill reported below #GP in 32-bit mode when dosemu software was executing vm86() system call:    general protection fault: 0000 [#1] PREEMPT SMP   CPU: 4 PID: 4610 Comm: dosemu.bin Not tainted 6.6.21-gentoo-x86 #1   Hardware name: Dell Inc. PowerEdge 1950/0H723K\, BIOS 2.7.0 10/30/2010   EIP: restore_all_switch_stack+0xbe/0xcf   EAX: 00000000 EBX: 00000000 ECX: 00000000 EDX: 00000000   ESI: 00000000 EDI: 00000000 EBP: 00000000 ESP: ff8affdc   DS: 0000 ES: 0000 FS: 0000 GS: 0033 SS: 0068 EFLAGS: 00010046   CR0: 80050033 CR2: 00c2101c CR3: 04b6d000 CR4: 000406d0   Call Trace:    show_regs+0x70/0x78    die_addr+0x29/0x70    exc_general_protection+0x13c/0x348    exc_bounds+0x98/0x98    handle_exception+0x14d/0x14d    exc_bounds+0x98/0x98    restore_all_switch_stack+0xbe/0xcf    exc_bounds+0x98/0x98    restore_all_switch_stack+0xbe/0xcf  This only happens in 32-bit mode when VERW based mitigations like MDS/RFDS are enabled. This is because segment registers with an arbitrary user value can result in #GP when executing VERW. Intel SDM vol. 2C documents the following behavior for VERW instruction:    #GP(0) - If a memory operand effective address is outside the CS\, DS\, ES\, \t   FS\, or GS segment limit.  CLEAR_CPU_BUFFERS macro executes VERW instruction before returning to user space. Use %cs selector to reference VERW operand. This ensures VERW will not #GP for an arbitrary user %ds.  [ mingo: Fixed the SOB chain. ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-6135,libnss3,MEDIUM,2:3.87.1-1+deb12u1,N/A,"Multiple NSS NIST curves were susceptible to a side-channel attack known as ""Minerva"". This attack could potentially allow an attacker to recover the private key. This vulnerability affects Firefox < 121.",|tykio/midsommar|
CVE-2024-35843,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  iommu/vt-d: Use device rbtree in iopf reporting path  The existing I/O page fault handler currently locates the PCI device by calling pci_get_domain_bus_and_slot(). This function searches the list of all PCI devices until the desired device is found. To improve lookup efficiency\, replace it with device_rbtree_find() to search the device within the probed device rbtree.  The I/O page fault is initiated by the device\, which does not have any synchronization mechanism with the software to ensure that the device stays in the probed device tree. Theoretically\, a device could be released by the IOMMU subsystem after device_rbtree_find() and before iopf_get_dev_fault_param()\, which would cause a use-after-free problem.  Add a mutex to synchronize the I/O page fault reporting path and the IOMMU release device path. This lock doesn't introduce any performance overhead\, as the conflict between I/O page fault reporting and device releasing is very rare.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44961,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Forward soft recovery errors to userspace  As we discussed before[1]\, soft recovery should be forwarded to userspace\, or we can get into a really bad state where apps will keep submitting hanging command buffers cascading us to a hard reset.  1: https://lore.kernel.org/all/bf23d5ed-9a6b-43e7-84ee-8cbfd0d60f18@froggi.es/ (cherry picked from commit 434967aadbbbe3ad9103cc29e9a327de20fdba01)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-40975,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  platform/x86: x86-android-tablets: Unregister devices in reverse order  Not all subsystems support a device getting removed while there are still consumers of the device with a reference to the device.  One example of this is the regulator subsystem. If a regulator gets unregistered while there are still drivers holding a reference a WARN() at drivers/regulator/core.c:5829 triggers\, e.g.:   WARNING: CPU: 1 PID: 1587 at drivers/regulator/core.c:5829 regulator_unregister  Hardware name: Intel Corp. VALLEYVIEW C0 PLATFORM/BYT-T FFD8\, BIOS BLADE_21.X64.0005.R00.1504101516 FFD8_X64_R_2015_04_10_1516 04/10/2015  RIP: 0010:regulator_unregister  Call Trace:   <TASK>   regulator_unregister   devres_release_group   i2c_device_remove   device_release_driver_internal   bus_remove_device   device_del   device_unregister   x86_android_tablet_remove  On the Lenovo Yoga Tablet 2 series the bq24190 charger chip also provides a 5V boost converter output for powering USB devices connected to the micro USB port\, the bq24190-charger driver exports this as a Vbus regulator.  On the 830 (8"") and 1050 (""10"") models this regulator is controlled by a platform_device and x86_android_tablet_remove() removes platform_device-s before i2c_clients so the consumer gets removed first.  But on the 1380 (13"") model there is a lc824206xa micro-USB switch connected over I2C and the extcon driver for that controls the regulator. The bq24190 i2c-client *must* be registered first\, because that creates the regulator with the lc824206xa listed as its consumer. If the regulator has not been registered yet the lc824206xa driver will end up getting a dummy regulator.  Since in this case both the regulator provider and consumer are I2C devices\, the only way to ensure that the consumer is unregistered first is to unregister the I2C devices in reverse order of in which they were created.  For consistency and to avoid similar problems in the future change x86_android_tablet_remove() to unregister all device types in reverse order.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44963,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: do not BUG_ON() when freeing tree block after error  When freeing a tree block\, at btrfs_free_tree_block()\, if we fail to create a delayed reference we don't deal with the error and just do a BUG_ON(). The error most likely to happen is -ENOMEM\, and we have a comment mentioning that only -ENOMEM can happen\, but that is not true\, because in case qgroups are enabled any error returned from btrfs_qgroup_trace_extent_post() (can be -EUCLEAN or anything returned from btrfs_search_slot() for example) can be propagated back to btrfs_free_tree_block().  So stop doing a BUG_ON() and return the error to the callers and make them abort the transaction to prevent leaking space. Syzbot was triggering this\, likely due to memory allocation failure injection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56570,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ovl: Filter invalid inodes with missing lookup function  Add a check to the ovl_dentry_weird() function to prevent the processing of directory inodes that lack the lookup function. This is important because such inodes can cause errors in overlayfs when passed to the lowerstack.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-14304,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A memory disclosure flaw was found in the Linux kernel's ethernet drivers\, in the way it read data from the EEPROM of the device. This flaw allows a local user to read uninitialized values from the kernel memory. The highest threat from this vulnerability is to confidentiality.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56572,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: platform: allegro-dvt: Fix possible memory leak in allocate_buffers_internal()  The buffer in the loop should be released under the exception path\, otherwise there may be a memory leak here.  To mitigate this\, free the buffer when allegro_alloc_buffer fails.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56574,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: ts2020: fix null-ptr-deref in ts2020_probe()  KASAN reported a null-ptr-deref issue when executing the following command:    # echo ts2020 0x20 > /sys/bus/i2c/devices/i2c-0/new_device     KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]     CPU: 53 UID: 0 PID: 970 Comm: systemd-udevd Not tainted 6.12.0-rc2+ #24     Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)     RIP: 0010:ts2020_probe+0xad/0xe10 [ts2020]     RSP: 0018:ffffc9000abbf598 EFLAGS: 00010202     RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffffc0714809     RDX: 0000000000000002 RSI: ffff88811550be00 RDI: 0000000000000010     RBP: ffff888109868800 R08: 0000000000000001 R09: fffff52001577eb6     R10: 0000000000000000 R11: ffffc9000abbff50 R12: ffffffffc0714790     R13: 1ffff92001577eb8 R14: ffffffffc07190d0 R15: 0000000000000001     FS:  00007f95f13b98c0(0000) GS:ffff888149280000(0000) knlGS:0000000000000000     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033     CR2: 0000555d2634b000 CR3: 0000000152236000 CR4: 00000000000006f0     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400     Call Trace:      <TASK>      ts2020_probe+0xad/0xe10 [ts2020]      i2c_device_probe+0x421/0xb40      really_probe+0x266/0x850     ...  The cause of the problem is that when using sysfs to dynamically register an i2c device\, there is no platform data\, but the probe process of ts2020 needs to use platform data\, resulting in a null pointer being accessed.  Solve this problem by adding checks to platform data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26807,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Both cadence-quadspi ->runtime_suspend() and ->runtime_resume() implementations start with:  \tstruct cqspi_st *cqspi = dev_get_drvdata(dev); \tstruct spi_controller *host = dev_get_drvdata(dev);  This obviously cannot be correct\, unless ""struct cqspi_st"" is the first member of "" struct spi_controller""\, or the other way around\, but it is not the case. ""struct spi_controller"" is allocated by devm_spi_alloc_host()\, which allocates an extra amount of memory for private data\, used to store ""struct cqspi_st"".  The ->probe() function of the cadence-quadspi driver then sets the device drvdata to store the address of the ""struct cqspi_st"" structure. Therefore:  \tstruct cqspi_st *cqspi = dev_get_drvdata(dev);  is correct\, but:  \tstruct spi_controller *host = dev_get_drvdata(dev);  is not\, as it makes ""host"" point not to a ""struct spi_controller"" but to the same ""struct cqspi_st"" structure as above.  This obviously leads to bad things (memory corruption\, kernel crashes) directly during ->probe()\, as ->probe() enables the device using PM runtime\, leading the ->runtime_resume() hook being called\, which in turns calls spi_controller_resume() with the wrong pointer.  This has at least been reported [0] to cause a kernel crash\, but the exact behavior will depend on the memory contents.  [0] https://lore.kernel.org/all/20240226121803.5a7r5wkpbbowcxgx@dhruva/  This issue potentially affects all platforms that are currently using the cadence-quadspi driver.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56575,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: imx-jpeg: Ensure power suppliers be suspended before detach them  The power suppliers are always requested to suspend asynchronously\, dev_pm_domain_detach() requires the caller to ensure proper synchronization of this function with power management callbacks. otherwise the detach may led to kernel panic\, like below:  [ 1457.107934] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000040 [ 1457.116777] Mem abort info: [ 1457.119589]   ESR = 0x0000000096000004 [ 1457.123358]   EC = 0x25: DABT (current EL)\, IL = 32 bits [ 1457.128692]   SET = 0\, FnV = 0 [ 1457.131764]   EA = 0\, S1PTW = 0 [ 1457.134920]   FSC = 0x04: level 0 translation fault [ 1457.139812] Data abort info: [ 1457.142707]   ISV = 0\, ISS = 0x00000004\, ISS2 = 0x00000000 [ 1457.148196]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [ 1457.153256]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [ 1457.158563] user pgtable: 4k pages\, 48-bit VAs\, pgdp=00000001138b6000 [ 1457.165000] [0000000000000040] pgd=0000000000000000\, p4d=0000000000000000 [ 1457.171792] Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP [ 1457.178045] Modules linked in: v4l2_jpeg wave6_vpu_ctrl(-) [last unloaded: mxc_jpeg_encdec] [ 1457.186383] CPU: 0 PID: 51938 Comm: kworker/0:3 Not tainted 6.6.36-gd23d64eea511 #66 [ 1457.194112] Hardware name: NXP i.MX95 19X19 board (DT) [ 1457.199236] Workqueue: pm pm_runtime_work [ 1457.203247] pstate: 60400009 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--) [ 1457.210188] pc : genpd_runtime_suspend+0x20/0x290 [ 1457.214886] lr : __rpm_callback+0x48/0x1d8 [ 1457.218968] sp : ffff80008250bc50 [ 1457.222270] x29: ffff80008250bc50 x28: 0000000000000000 x27: 0000000000000000 [ 1457.229394] x26: 0000000000000000 x25: 0000000000000008 x24: 00000000000f4240 [ 1457.236518] x23: 0000000000000000 x22: ffff00008590f0e4 x21: 0000000000000008 [ 1457.243642] x20: ffff80008099c434 x19: ffff00008590f000 x18: ffffffffffffffff [ 1457.250766] x17: 5300326563697665 x16: 645f676e696c6f6f x15: 63343a6d726f6674 [ 1457.257890] x14: 0000000000000004 x13: 00000000000003a4 x12: 0000000000000002 [ 1457.265014] x11: 0000000000000000 x10: 0000000000000a60 x9 : ffff80008250bbb0 [ 1457.272138] x8 : ffff000092937200 x7 : ffff0003fdf6af80 x6 : 0000000000000000 [ 1457.279262] x5 : 00000000410fd050 x4 : 0000000000200000 x3 : 0000000000000000 [ 1457.286386] x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff00008590f000 [ 1457.293510] Call trace: [ 1457.295946]  genpd_runtime_suspend+0x20/0x290 [ 1457.300296]  __rpm_callback+0x48/0x1d8 [ 1457.304038]  rpm_callback+0x6c/0x78 [ 1457.307515]  rpm_suspend+0x10c/0x570 [ 1457.311077]  pm_runtime_work+0xc4/0xc8 [ 1457.314813]  process_one_work+0x138/0x248 [ 1457.318816]  worker_thread+0x320/0x438 [ 1457.322552]  kthread+0x110/0x114 [ 1457.325767]  ret_from_fork+0x10/0x20",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22872,golang.org/x/net,MEDIUM,v0.30.0,0.38.0,"The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer\, this can result in such tags incorrectly being marked as self-closing\, and when using the Parse functions\, this can result in content following such tags as being placed in the wrong scope during DOM construction\, but only when tags are in foreign content (e.g. <math>\, <svg>\, etc contexts).",|tykio/midsommar|
CVE-2024-56576,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: i2c: tc358743: Fix crash in the probe error path when using polling  If an error occurs in the probe() function\, we should remove the polling timer that was alarmed earlier\, otherwise the timer is called with arguments that are already freed\, which results in a crash.  ------------[ cut here ]------------ WARNING: CPU: 3 PID: 0 at kernel/time/timer.c:1830 __run_timers+0x244/0x268 Modules linked in: CPU: 3 UID: 0 PID: 0 Comm: swapper/3 Not tainted 6.11.0 #226 Hardware name: Diasom DS-RK3568-SOM-EVB (DT) pstate: 804000c9 (Nzcv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--) pc : __run_timers+0x244/0x268 lr : __run_timers+0x1d4/0x268 sp : ffffff80eff2baf0 x29: ffffff80eff2bb50 x28: 7fffffffffffffff x27: ffffff80eff2bb00 x26: ffffffc080f669c0 x25: ffffff80efef6bf0 x24: ffffff80eff2bb00 x23: 0000000000000000 x22: dead000000000122 x21: 0000000000000000 x20: ffffff80efef6b80 x19: ffffff80041c8bf8 x18: ffffffffffffffff x17: ffffffc06f146000 x16: ffffff80eff27dc0 x15: 000000000000003e x14: 0000000000000000 x13: 00000000000054da x12: 0000000000000000 x11: 00000000000639c0 x10: 000000000000000c x9 : 0000000000000009 x8 : ffffff80eff2cb40 x7 : ffffff80eff2cb40 x6 : ffffff8002bee480 x5 : ffffffc080cb2220 x4 : ffffffc080cb2150 x3 : 00000000000f4240 x2 : 0000000000000102 x1 : ffffff80eff2bb00 x0 : ffffff80041c8bf0 Call trace:  __run_timers+0x244/0x268  timer_expire_remote+0x50/0x68  tmigr_handle_remote+0x388/0x39c  run_timer_softirq+0x38/0x44  handle_softirqs+0x138/0x298  __do_softirq+0x14/0x20  ____do_softirq+0x10/0x1c  call_on_irq_stack+0x24/0x4c  do_softirq_own_stack+0x1c/0x2c  irq_exit_rcu+0x9c/0xcc  el1_interrupt+0x48/0xc0  el1h_64_irq_handler+0x18/0x24  el1h_64_irq+0x7c/0x80  default_idle_call+0x34/0x68  do_idle+0x23c/0x294  cpu_startup_entry+0x38/0x3c  secondary_start_kernel+0x128/0x160  __secondary_switched+0xb8/0xbc ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22871,stdlib,MEDIUM,v1.23.2,1.23.8	 1.24.2,"The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",|tykio/midsommar|
CVE-2025-22870,golang.org/x/net,MEDIUM,v0.30.0,0.36.0,"Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example\, when the NO_PROXY environment variable is set to ""*.example.com""\, a request to ""[::1%25.example.com]:80` will incorrectly match and not be proxied.",|tykio/midsommar|
CVE-2024-56742,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  vfio/mlx5: Fix an unwind issue in mlx5vf_add_migration_pages()  Fix an unwind issue in mlx5vf_add_migration_pages().  If a set of pages is allocated but fails to be added to the SG table\, they need to be freed to prevent a memory leak.  Any pages successfully added to the SG table will be freed as part of mlx5vf_free_data_buffer().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49929,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: avoid NULL pointer dereference  iwl_mvm_tx_skb_sta() and iwl_mvm_tx_mpdu() verify that the mvmvsta pointer is not NULL. It retrieves this pointer using iwl_mvm_sta_from_mac80211\, which is dereferencing the ieee80211_sta pointer. If sta is NULL\, iwl_mvm_sta_from_mac80211 will dereference a NULL pointer. Fix this by checking the sta pointer before retrieving the mvmsta from it. If sta is not NULL\, then mvmsta isn't either.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35794,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dm-raid: really frozen sync_thread during suspend  1) commit f52f5c71f3d4 (""md: fix stopping sync thread"") remove    MD_RECOVERY_FROZEN from __md_stop_writes() and doesn't realize that    dm-raid relies on __md_stop_writes() to frozen sync_thread    indirectly. Fix this problem by adding MD_RECOVERY_FROZEN in    md_stop_writes()\, and since stop_sync_thread() is only used for    dm-raid in this case\, also move stop_sync_thread() to    md_stop_writes(). 2) The flag MD_RECOVERY_FROZEN doesn't mean that sync thread is frozen\,    it only prevent new sync_thread to start\, and it can't stop the    running sync thread; In order to frozen sync_thread\, after seting the    flag\, stop_sync_thread() should be used. 3) The flag MD_RECOVERY_FROZEN doesn't mean that writes are stopped\, use    it as condition for md_stop_writes() in raid_postsuspend() doesn't    look correct. Consider that reentrant stop_sync_thread() do nothing\,    always call md_stop_writes() in raid_postsuspend(). 4) raid_message can set/clear the flag MD_RECOVERY_FROZEN at anytime\,    and if MD_RECOVERY_FROZEN is cleared while the array is suspended\,    new sync_thread can start unexpected. Fix this by disallow    raid_message() to change sync_thread status during suspend.  Note that after commit f52f5c71f3d4 (""md: fix stopping sync thread"")\, the test shell/lvconvert-raid-reshape.sh start to hang in stop_sync_thread()\, and with previous fixes\, the test won't hang there anymore\, however\, the test will still fail and complain that ext4 is corrupted. And with this patch\, the test won't hang due to stop_sync_thread() or fail due to ext4 is corrupted anymore. However\, there is still a deadlock related to dm-raid456 that will be fixed in following patches.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49928,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw89: avoid reading out of bounds when loading TX power FW elements  Because the loop-expression will do one more time before getting false from cond-expression\, the original code copied one more entry size beyond valid region.  Fix it by moving the entry copy to loop-body.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56747,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: qedi: Fix a possible memory leak in qedi_alloc_and_init_sb()  Hook ""qedi_ops->common->sb_init = qed_sb_init"" does not release the DMA memory sb_virt when it fails. Add dma_free_coherent() to free it. This is the same way as qedr_alloc_mem_sb() and qede_alloc_mem_sb().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56746,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fbdev: sh7760fb: Fix a possible memory leak in sh7760fb_alloc_mem()  When information such as info->screen_base is not ready\, calling sh7760fb_free_mem() does not release memory correctly. Call dma_free_coherent() instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56745,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: Fix reset_method_store() memory leak  In reset_method_store()\, a string is allocated via kstrndup() and assigned to the local ""options"". options is then used in with strsep() to find spaces:    while ((name = strsep(&options\, "" "")) != NULL) {  If there are no remaining spaces\, then options is set to NULL by strsep()\, so the subsequent kfree(options) doesn't free the memory allocated via kstrndup().  Fix by using a separate tmp_options to iterate with strsep() so options is preserved.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50602,libexpat1,MEDIUM,2.5.0-1+deb12u1,N/A,"An issue was discovered in libexpat before 2.6.4. There is a crash within the XML_ResumeParser function because XML_StopParser can stop/suspend an unstarted parser.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35790,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: altmodes/displayport: create sysfs nodes as driver's default device attribute group  The DisplayPort driver's sysfs nodes may be present to the userspace before typec_altmode_set_drvdata() completes in dp_altmode_probe. This means that a sysfs read can trigger a NULL pointer error by deferencing dp->hpd in hpd_show or dp->lock in pin_assignment_show\, as dev_get_drvdata() returns NULL in those cases.  Remove manual sysfs node creation in favor of adding attribute group as default for devices bound to the driver. The ATTRIBUTE_GROUPS() macro is not used here otherwise the path to the sysfs nodes is no longer compliant with the ABI.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49923,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Pass non-null to dcn20_validate_apply_pipe_split_flags  [WHAT & HOW] ""dcn20_validate_apply_pipe_split_flags"" dereferences merge\, and thus it cannot be a null pointer. Let's pass a valid pointer to avoid null dereference.  This fixes 2 FORWARD_NULL issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49922,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check null pointers before using them  [WHAT & HOW] These pointers are null checked previously in the same function\, indicating they might be null as reported by Coverity. As a result\, they need to be checked when used again.  This fixes 3 FORWARD_NULL issue reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49921,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check null pointers before used  [WHAT & HOW] Poniters\, such as dc->clk_mgr\, are null checked previously in the same function\, so Coverity warns ""implies that ""dc->clk_mgr"" might be null"". As a result\, these pointers need to be checked when used again.  This fixes 10 FORWARD_NULL issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-1010023,libc-bin,LOW,2.36-9+deb12u10,N/A,"GNU Libc current is affected by: Re-mapping current loaded library with malicious ELF file. The impact is: In worst case attacker may evaluate privileges. The component is: libld. The attack vector is: Attacker sends 2 ELF files to victim and asks to run ldd on it. ldd execute code. NOTE: Upstream comments indicate ""this is being treated as a non-security bug and no real threat.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56748,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: qedf: Fix a possible memory leak in qedf_alloc_and_init_sb()  Hook ""qed_ops->common->sb_init = qed_sb_init"" does not release the DMA memory sb_virt when it fails. Add dma_free_coherent() to free it. This is the same way as qedr_alloc_mem_sb() and qede_alloc_mem_sb().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49920,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check null pointers before multiple uses  [WHAT & HOW] Poniters\, such as stream_enc and dc->bw_vbios\, are null checked previously in the same function\, so Coverity warns ""implies that stream_enc and dc->bw_vbios might be null"". They are used multiple times in the subsequent code and need to be checked.  This fixes 10 FORWARD_NULL issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-1010022,libc-bin,LOW,2.36-9+deb12u10,N/A,"GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass stack guard protection. The component is: nptl. The attack vector is: Exploit stack buffer overflow vulnerability and use this bypass vulnerability to bypass stack guard. NOTE: Upstream comments indicate ""this is being treated as a non-security bug and no real threat.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-1010025,libc-bin,LOW,2.36-9+deb12u10,N/A,"GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may guess the heap addresses of pthread_created thread. The component is: glibc. NOTE: the vendor's position is ""ASLR bypass itself is not a vulnerability.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49926,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  rcu-tasks: Fix access non-existent percpu rtpcp variable in rcu_tasks_need_gpcb()  For kernels built with CONFIG_FORCE_NR_CPUS=y\, the nr_cpu_ids is defined as NR_CPUS instead of the number of possible cpus\, this will cause the following system panic:  smpboot: Allowing 4 CPUs\, 0 hotplug CPUs ... setup_percpu: NR_CPUS:512 nr_cpumask_bits:512 nr_cpu_ids:512 nr_node_ids:1 ... BUG: unable to handle page fault for address: ffffffff9911c8c8 Oops: 0000 [#1] PREEMPT SMP PTI CPU: 0 PID: 15 Comm: rcu_tasks_trace Tainted: G W 6.6.21 #1 5dc7acf91a5e8e9ac9dcfc35bee0245691283ea6 RIP: 0010:rcu_tasks_need_gpcb+0x25d/0x2c0 RSP: 0018:ffffa371c00a3e60 EFLAGS: 00010082 CR2: ffffffff9911c8c8 CR3: 000000040fa20005 CR4: 00000000001706f0 Call Trace: <TASK> ? __die+0x23/0x80 ? page_fault_oops+0xa4/0x180 ? exc_page_fault+0x152/0x180 ? asm_exc_page_fault+0x26/0x40 ? rcu_tasks_need_gpcb+0x25d/0x2c0 ? __pfx_rcu_tasks_kthread+0x40/0x40 rcu_tasks_one_gp+0x69/0x180 rcu_tasks_kthread+0x94/0xc0 kthread+0xe8/0x140 ? __pfx_kthread+0x40/0x40 ret_from_fork+0x34/0x80 ? __pfx_kthread+0x40/0x40 ret_from_fork_asm+0x1b/0x80 </TASK>  Considering that there may be holes in the CPU numbers\, use the maximum possible cpu number\, instead of nr_cpu_ids\, for configuring enqueue and dequeue limits.  [ neeraj.upadhyay: Fix htmldocs build error reported by Stephen Rothwell ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-10505,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"NULL pointer dereference vulnerabilities in the imagetopnm function in convert.c\, sycc444_to_rgb function in color.c\, color_esycc_to_rgb function in color.c\, and sycc422_to_rgb function in color.c in OpenJPEG before 2.2.0 allow remote attackers to cause a denial of service (application crash) via crafted j2k files.",|tykio/midsommar|
CVE-2019-1010024,libc-bin,LOW,2.36-9+deb12u10,N/A,"GNU Libc current is affected by: Mitigation bypass. The impact is: Attacker may bypass ASLR using cache of thread stack and heap. The component is: glibc. NOTE: Upstream comments indicate ""this is being treated as a non-security bug and no real threat.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49925,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fbdev: efifb: Register sysfs groups through driver core  The driver core can register and cleanup sysfs groups already. Make use of that functionality to simplify the error handling and cleanup.  Also avoid a UAF race during unregistering where the sysctl attributes were usable after the info struct was freed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35799,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Prevent crash when disable stream  [Why] Disabling stream encoder invokes a function that no longer exists.  [How] Check if the function declaration is NULL in disable stream encoder.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-19814,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel 5.0.21\, mounting a crafted f2fs filesystem image can cause __remove_dirty_segment slab-out-of-bounds write access because an array is bounded by the number of dirty types (8) but the array index can exceed this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46698,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  video/aperture: optionally match the device in sysfb_disable()  In aperture_remove_conflicting_pci_devices()\, we currently only call sysfb_disable() on vga class devices.  This leads to the following problem when the pimary device is not VGA compatible:  1. A PCI device with a non-VGA class is the boot display 2. That device is probed first and it is not a VGA device so    sysfb_disable() is not called\, but the device resources    are freed by aperture_detach_platform_device() 3. Non-primary GPU has a VGA class and it ends up calling sysfb_disable() 4. NULL pointer dereference via sysfb_disable() since the resources    have already been freed by aperture_detach_platform_device() when    it was called by the other device.  Fix this by passing a device pointer to sysfb_disable() and checking the device to determine if we should execute it or not.  v2: Fix build when CONFIG_SCREEN_INFO is not set v3: Move device check into the mutex     Drop primary variable in aperture_remove_conflicting_pci_devices()     Drop __init on pci sysfb_pci_dev_is_enabled()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-21803,linux-libc-dev,HIGH,6.1.115-1,N/A,"Use After Free vulnerability in Linux Linux kernel kernel on Linux\, x86\, ARM (bluetooth modules) allows Local Execution of Code. This vulnerability is associated with program files https://gitee.Com/anolis/cloud-kernel/blob/devel-5.10/net/bluetooth/af_bluetooth.C.  This issue affects Linux kernel: from v2.6.12-rc2 before v6.8-rc1.  ",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50211,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  udf: refactor inode_bmap() to handle error  Refactor inode_bmap() to handle error since udf_next_aext() can return error now. On situations like ftruncate\, udf_extend_file() can now detect errors and bail out early without resorting to checking for particular offsets and assuming internal behavior of these functions.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57360,binutils,LOW,2.40-2,N/A,"https://www.gnu.org/software/binutils/ nm >=2.43 is affected by: Incorrect Access Control. The type of exploitation is: local. The component is: `nm --without-symbol-version` function.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50217,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: fix use-after-free of block device file in __btrfs_free_extra_devids()  Mounting btrfs from two images (which have the same one fsid and two different dev_uuids) in certain executing order may trigger an UAF for variable 'device->bdev_file' in __btrfs_free_extra_devids(). And following are the details:  1. Attach image_1 to loop0\, attach image_2 to loop1\, and scan btrfs    devices by ioctl(BTRFS_IOC_SCAN_DEV):               /  btrfs_device_1 → loop0    fs_device              \\  btrfs_device_2 → loop1 2. mount /dev/loop0 /mnt    btrfs_open_devices     btrfs_device_1->bdev_file = btrfs_get_bdev_and_sb(loop0)     btrfs_device_2->bdev_file = btrfs_get_bdev_and_sb(loop1)    btrfs_fill_super     open_ctree      fail: btrfs_close_devices // -ENOMEM \t    btrfs_close_bdev(btrfs_device_1)              fput(btrfs_device_1->bdev_file) \t      // btrfs_device_1->bdev_file is freed \t    btrfs_close_bdev(btrfs_device_2)              fput(btrfs_device_2->bdev_file)  3. mount /dev/loop1 /mnt    btrfs_open_devices     btrfs_get_bdev_and_sb(&bdev_file)      // EIO\, btrfs_device_1->bdev_file is not assigned\,      // which points to a freed memory area     btrfs_device_2->bdev_file = btrfs_get_bdev_and_sb(loop1)    btrfs_fill_super     open_ctree      btrfs_free_extra_devids       if (btrfs_device_1->bdev_file)        fput(btrfs_device_1->bdev_file) // UAF !  Fix it by setting 'device->bdev_file' as 'NULL' after closing the btrfs_device in btrfs_close_one_device().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50215,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nvmet-auth: assign dh_key to NULL after kfree_sensitive  ctrl->dh_key might be used across multiple calls to nvmet_setup_dhgroup() for the same controller. So it's better to nullify it after release on error path in order to avoid double free later in nvmet_destroy_auth().  Found by Linux Verification Center (linuxtesting.org) with Svace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-6829,libgcrypt20,LOW,1.10.1-3,N/A,"cipher/elgamal.c in Libgcrypt through 1.8.2\, when used to encrypt messages directly\, improperly encodes plaintexts\, which allows attackers to obtain sensitive information by reading ciphertext data (i.e.\, it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for Libgcrypt's ElGamal implementation.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-1210,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"A vulnerability classified as problematic was found in LibTIFF 4.3.0. Affected by this vulnerability is the TIFF File Handler of tiff2ps. Opening a malicious file leads to a denial of service. The attack can be launched remotely but requires user interaction. The exploit has been disclosed to the public and may be used.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-41848,linux-libc-dev,LOW,6.1.115-1,N/A,"drivers/char/pcmcia/synclink_cs.c in the Linux kernel through 5.19.12 has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling ioctl\, aka a race condition between mgslpc_ioctl and mgslpc_detach.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50218,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: pass u64 to ocfs2_truncate_inline maybe overflow  Syzbot reported a kernel BUG in ocfs2_truncate_inline.  There are two reasons for this: first\, the parameter value passed is greater than ocfs2_max_inline_data_with_xattr\, second\, the start and end parameters of ocfs2_truncate_inline are ""unsigned int"".  So\, we need to add a sanity check for byte_start and byte_len right before ocfs2_truncate_inline() in ocfs2_remove_inode_range()\, if they are greater than ocfs2_max_inline_data_with_xattr return -EINVAL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50009,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  cpufreq: amd-pstate: add check for cpufreq_cpu_get's return value  cpufreq_cpu_get may return NULL. To avoid NULL-dereference check it and return in case of error.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-38575,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: use aead_request_free to match aead_request_alloc  Use aead_request_free() instead of kfree() to properly free memory allocated by aead_request_alloc(). This ensures sensitive crypto data is zeroed before being freed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26876,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/bridge: adv7511: fix crash on irq during probe  Moved IRQ registration down to end of adv7511_probe().  If an IRQ already is pending during adv7511_probe (before adv7511_cec_init) then cec_received_msg_ts could crash using uninitialized data:      Unable to handle kernel read from unreadable memory at virtual address 00000000000003d5     Internal error: Oops: 96000004 [#1] PREEMPT_RT SMP     Call trace:      cec_received_msg_ts+0x48/0x990 [cec]      adv7511_cec_irq_process+0x1cc/0x308 [adv7511]      adv7511_irq_process+0xd8/0x120 [adv7511]      adv7511_irq_handler+0x1c/0x30 [adv7511]      irq_thread_fn+0x30/0xa0      irq_thread+0x14c/0x238      kthread+0x190/0x1a8",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-54458,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: bsg: Set bsg_queue to NULL after removal  Currently\, this does not cause any issues\, but I believe it is necessary to set bsg_queue to NULL after removing it to prevent potential use-after-free (UAF) access.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53187,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring: check for overflows in io_pin_pages  WARNING: CPU: 0 PID: 5834 at io_uring/memmap.c:144 io_pin_pages+0x149/0x180 io_uring/memmap.c:144 CPU: 0 UID: 0 PID: 5834 Comm: syz-executor825 Not tainted 6.12.0-next-20241118-syzkaller #0 Call Trace:  <TASK>  __io_uaddr_map+0xfb/0x2d0 io_uring/memmap.c:183  io_rings_map io_uring/io_uring.c:2611 [inline]  io_allocate_scq_urings+0x1c0/0x650 io_uring/io_uring.c:3470  io_uring_create+0x5b5/0xc00 io_uring/io_uring.c:3692  io_uring_setup io_uring/io_uring.c:3781 [inline]  ...  </TASK>  io_pin_pages()'s uaddr parameter came directly from the user and can be garbage. Don't just add size to it as it can overflow.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53184,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  um: ubd: Do not use drvdata in release  The drvdata is not available in release. Let's just use container_of() to get the ubd instance. Otherwise\, removing a ubd device will result in a crash:  RIP: 0033:blk_mq_free_tag_set+0x1f/0xba RSP: 00000000e2083bf0  EFLAGS: 00010246 RAX: 000000006021463a RBX: 0000000000000348 RCX: 0000000062604d00 RDX: 0000000004208060 RSI: 00000000605241a0 RDI: 0000000000000348 RBP: 00000000e2083c10 R08: 0000000062414010 R09: 00000000601603f7 R10: 000000000000133a R11: 000000006038c4bd R12: 0000000000000000 R13: 0000000060213a5c R14: 0000000062405d20 R15: 00000000604f7aa0 Kernel panic - not syncing: Segfault with no mm CPU: 0 PID: 17 Comm: kworker/0:1 Not tainted 6.8.0-rc3-00107-gba3f67c11638 #1 Workqueue: events mc_work_proc Stack:  00000000 604f7ef0 62c5d000 62405d20  e2083c30 6002c776 6002c755 600e47ff  e2083c60 6025ffe3 04208060 603d36e0 Call Trace:  [<6002c776>] ubd_device_release+0x21/0x55  [<6002c755>] ? ubd_device_release+0x0/0x55  [<600e47ff>] ? kfree+0x0/0x100  [<6025ffe3>] device_release+0x70/0xba  [<60381d6a>] kobject_put+0xb5/0xe2  [<6026027b>] put_device+0x19/0x1c  [<6026a036>] platform_device_put+0x26/0x29  [<6026ac5a>] platform_device_unregister+0x2c/0x2e  [<6002c52e>] ubd_remove+0xb8/0xd6  [<6002bb74>] ? mconsole_reply+0x0/0x50  [<6002b926>] mconsole_remove+0x160/0x1cc  [<6002bbbc>] ? mconsole_reply+0x48/0x50  [<6003379c>] ? um_set_signals+0x3b/0x43  [<60061c55>] ? update_min_vruntime+0x14/0x70  [<6006251f>] ? dequeue_task_fair+0x164/0x235  [<600620aa>] ? update_cfs_group+0x0/0x40  [<603a0e77>] ? __schedule+0x0/0x3ed  [<60033761>] ? um_set_signals+0x0/0x43  [<6002af6a>] mc_work_proc+0x77/0x91  [<600520b4>] process_scheduled_works+0x1af/0x2c3  [<6004ede3>] ? assign_work+0x0/0x58  [<600527a1>] worker_thread+0x2f7/0x37a  [<6004ee3b>] ? set_pf_worker+0x0/0x64  [<6005765d>] ? arch_local_irq_save+0x0/0x2d  [<60058e07>] ? kthread_exit+0x0/0x3a  [<600524aa>] ? worker_thread+0x0/0x37a  [<60058f9f>] kthread+0x130/0x135  [<6002068e>] new_thread_handler+0x85/0xb6",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21744,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: brcmfmac: fix NULL pointer dereference in brcmf_txfinalize()  On removal of the device or unloading of the kernel module a potential NULL pointer dereference occurs.  The following sequence deletes the interface:    brcmf_detach()     brcmf_remove_interface()       brcmf_del_if()  Inside the brcmf_del_if() function the drvr->if2bss[ifidx] is updated to BRCMF_BSSIDX_INVALID (-1) if the bsscfgidx matches.  After brcmf_remove_interface() call the brcmf_proto_detach() function is called providing the following sequence:    brcmf_detach()     brcmf_proto_detach()       brcmf_proto_msgbuf_detach()         brcmf_flowring_detach()           brcmf_msgbuf_delete_flowring()             brcmf_msgbuf_remove_flowring()               brcmf_flowring_delete()                 brcmf_get_ifp()                 brcmf_txfinalize()  Since brcmf_get_ip() can and actually will return NULL in this case the call to brcmf_txfinalize() will result in a NULL pointer dereference inside brcmf_txfinalize() when trying to update ifp->ndev->stats.tx_errors.  This will only happen if a flowring still has an skb.  Although the NULL pointer dereference has only been seen when trying to update the tx statistic\, all other uses of the ifp pointer have been guarded as well with an early return if ifp is NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21745,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  blk-cgroup: Fix class @block_class's subsystem refcount leakage  blkcg_fill_root_iostats() iterates over @block_class's devices by class_dev_iter_(init|next)()\, but does not end iterating with class_dev_iter_exit()\, so causes the class's subsystem refcount leakage.  Fix by ending the iterating with class_dev_iter_exit().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53183,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  um: net: Do not use drvdata in release  The drvdata is not available in release. Let's just use container_of() to get the uml_net instance. Otherwise\, removing a network device will result in a crash:  RIP: 0033:net_device_release+0x10/0x6f RSP: 00000000e20c7c40  EFLAGS: 00010206 RAX: 000000006002e4e7 RBX: 00000000600f1baf RCX: 00000000624074e0 RDX: 0000000062778000 RSI: 0000000060551c80 RDI: 00000000627af028 RBP: 00000000e20c7c50 R08: 00000000603ad594 R09: 00000000e20c7b70 R10: 000000000000135a R11: 00000000603ad422 R12: 0000000000000000 R13: 0000000062c7af00 R14: 0000000062406d60 R15: 00000000627700b6 Kernel panic - not syncing: Segfault with no mm CPU: 0 UID: 0 PID: 29 Comm: kworker/0:2 Not tainted 6.12.0-rc6-g59b723cd2adb #1 Workqueue: events mc_work_proc Stack:  627af028 62c7af00 e20c7c80 60276fcd  62778000 603f5820 627af028 00000000  e20c7cb0 603a2bcd 627af000 62770010 Call Trace:  [<60276fcd>] device_release+0x70/0xba  [<603a2bcd>] kobject_put+0xba/0xe7  [<60277265>] put_device+0x19/0x1c  [<60281266>] platform_device_put+0x26/0x29  [<60281e5f>] platform_device_unregister+0x2c/0x2e  [<6002ec9c>] net_remove+0x63/0x69  [<60031316>] ? mconsole_reply+0x0/0x50  [<600310c8>] mconsole_remove+0x160/0x1cc  [<60087d40>] ? __remove_hrtimer+0x38/0x74  [<60087ff8>] ? hrtimer_try_to_cancel+0x8c/0x98  [<6006b3cf>] ? dl_server_stop+0x3f/0x48  [<6006b390>] ? dl_server_stop+0x0/0x48  [<600672e8>] ? dequeue_entities+0x327/0x390  [<60038fa6>] ? um_set_signals+0x0/0x43  [<6003070c>] mc_work_proc+0x77/0x91  [<60057664>] process_scheduled_works+0x1b3/0x2dd  [<60055f32>] ? assign_work+0x0/0x58  [<60057f0a>] worker_thread+0x1e9/0x293  [<6005406f>] ? set_pf_worker+0x0/0x64  [<6005d65d>] ? arch_local_irq_save+0x0/0x2d  [<6005d748>] ? kthread_exit+0x0/0x3a  [<60057d21>] ? worker_thread+0x0/0x293  [<6005dbf1>] kthread+0x126/0x12b  [<600219c5>] new_thread_handler+0x85/0xb6",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53180,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: pcm: Add sanity NULL check for the default mmap fault handler  A driver might allow the mmap access before initializing its runtime->dma_area properly.  Add a proper NULL check before passing to virt_to_page() for avoiding a panic.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53089,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  LoongArch: KVM: Mark hrtimer to expire in hard interrupt context  Like commit 2c0d278f3293f (""KVM: LAPIC: Mark hrtimer to expire in hard interrupt context"") and commit 9090825fa9974 (""KVM: arm/arm64: Let the timer expire in hardirq context on RT"")\, On PREEMPT_RT enabled kernels unmarked hrtimers are moved into soft interrupt expiry mode by default. Then the timers are canceled from an preempt-notifier which is invoked with disabled preemption which is not allowed on PREEMPT_RT.  The timer callback is short so in could be invoked in hard-IRQ context. So let the timer expire on hard-IRQ context even on -RT.  This fix a ""scheduling while atomic"" bug for PREEMPT_RT enabled kernels:   BUG: scheduling while atomic: qemu-system-loo/1011/0x00000002  Modules linked in: amdgpu rfkill nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat ns  CPU: 1 UID: 0 PID: 1011 Comm: qemu-system-loo Tainted: G        W          6.12.0-rc2+ #1774  Tainted: [W]=WARN  Hardware name: Loongson Loongson-3A5000-7A1000-1w-CRB/Loongson-LS3A5000-7A1000-1w-CRB\, BIOS vUDK2018-LoongArch-V2.0.0-prebeta9 10/21/2022  Stack : ffffffffffffffff 0000000000000000 9000000004e3ea38 9000000116744000          90000001167475a0 0000000000000000 90000001167475a8 9000000005644830          90000000058dc000 90000000058dbff8 9000000116747420 0000000000000001          0000000000000001 6a613fc938313980 000000000790c000 90000001001c1140          00000000000003fe 0000000000000001 000000000000000d 0000000000000003          0000000000000030 00000000000003f3 000000000790c000 9000000116747830          90000000057ef000 0000000000000000 9000000005644830 0000000000000004          0000000000000000 90000000057f4b58 0000000000000001 9000000116747868          900000000451b600 9000000005644830 9000000003a13998 0000000010000020          00000000000000b0 0000000000000004 0000000000000000 0000000000071c1d          ...  Call Trace:  [<9000000003a13998>] show_stack+0x38/0x180  [<9000000004e3ea34>] dump_stack_lvl+0x84/0xc0  [<9000000003a71708>] __schedule_bug+0x48/0x60  [<9000000004e45734>] __schedule+0x1114/0x1660  [<9000000004e46040>] schedule_rtlock+0x20/0x60  [<9000000004e4e330>] rtlock_slowlock_locked+0x3f0/0x10a0  [<9000000004e4f038>] rt_spin_lock+0x58/0x80  [<9000000003b02d68>] hrtimer_cancel_wait_running+0x68/0xc0  [<9000000003b02e30>] hrtimer_cancel+0x70/0x80  [<ffff80000235eb70>] kvm_restore_timer+0x50/0x1a0 [kvm]  [<ffff8000023616c8>] kvm_arch_vcpu_load+0x68/0x2a0 [kvm]  [<ffff80000234c2d4>] kvm_sched_in+0x34/0x60 [kvm]  [<9000000003a749a0>] finish_task_switch.isra.0+0x140/0x2e0  [<9000000004e44a70>] __schedule+0x450/0x1660  [<9000000004e45cb0>] schedule+0x30/0x180  [<ffff800002354c70>] kvm_vcpu_block+0x70/0x120 [kvm]  [<ffff800002354d80>] kvm_vcpu_halt+0x60/0x3e0 [kvm]  [<ffff80000235b194>] kvm_handle_gspr+0x3f4/0x4e0 [kvm]  [<ffff80000235f548>] kvm_handle_exit+0x1c8/0x260 [kvm]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53181,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  um: vector: Do not use drvdata in release  The drvdata is not available in release. Let's just use container_of() to get the vector_device instance. Otherwise\, removing a vector device will result in a crash:  RIP: 0033:vector_device_release+0xf/0x50 RSP: 00000000e187bc40  EFLAGS: 00010202 RAX: 0000000060028f61 RBX: 00000000600f1baf RCX: 00000000620074e0 RDX: 000000006220b9c0 RSI: 0000000060551c80 RDI: 0000000000000000 RBP: 00000000e187bc50 R08: 00000000603ad594 R09: 00000000e187bb70 R10: 000000000000135a R11: 00000000603ad422 R12: 00000000623ae028 R13: 000000006287a200 R14: 0000000062006d30 R15: 00000000623700b6 Kernel panic - not syncing: Segfault with no mm CPU: 0 UID: 0 PID: 16 Comm: kworker/0:1 Not tainted 6.12.0-rc6-g59b723cd2adb #1 Workqueue: events mc_work_proc Stack:  60028f61 623ae028 e187bc80 60276fcd  6220b9c0 603f5820 623ae028 00000000  e187bcb0 603a2bcd 623ae000 62370010 Call Trace:  [<60028f61>] ? vector_device_release+0x0/0x50  [<60276fcd>] device_release+0x70/0xba  [<603a2bcd>] kobject_put+0xba/0xe7  [<60277265>] put_device+0x19/0x1c  [<60281266>] platform_device_put+0x26/0x29  [<60281e5f>] platform_device_unregister+0x2c/0x2e  [<60029422>] vector_remove+0x52/0x58  [<60031316>] ? mconsole_reply+0x0/0x50  [<600310c8>] mconsole_remove+0x160/0x1cc  [<603b19f4>] ? strlen+0x0/0x15  [<60066611>] ? __dequeue_entity+0x1a9/0x206  [<600666a7>] ? set_next_entity+0x39/0x63  [<6006666e>] ? set_next_entity+0x0/0x63  [<60038fa6>] ? um_set_signals+0x0/0x43  [<6003070c>] mc_work_proc+0x77/0x91  [<60057664>] process_scheduled_works+0x1b3/0x2dd  [<60055f32>] ? assign_work+0x0/0x58  [<60057f0a>] worker_thread+0x1e9/0x293  [<6005406f>] ? set_pf_worker+0x0/0x64  [<6005d65d>] ? arch_local_irq_save+0x0/0x2d  [<6005d748>] ? kthread_exit+0x0/0x3a  [<60057d21>] ? worker_thread+0x0/0x293  [<6005dbf1>] kthread+0x126/0x12b  [<600219c5>] new_thread_handler+0x85/0xb6",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53088,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  i40e: fix race condition by adding filter's intermediate sync state  Fix a race condition in the i40e driver that leads to MAC/VLAN filters becoming corrupted and leaking. Address the issue that occurs under heavy load when multiple threads are concurrently modifying MAC/VLAN filters by setting mac and port VLAN.  1. Thread T0 allocates a filter in i40e_add_filter() within         i40e_ndo_set_vf_port_vlan(). 2. Thread T1 concurrently frees the filter in __i40e_del_filter() within         i40e_ndo_set_vf_mac(). 3. Subsequently\, i40e_service_task() calls i40e_sync_vsi_filters()\, which         refers to the already freed filter memory\, causing corruption.  Reproduction steps: 1. Spawn multiple VFs. 2. Apply a concurrent heavy load by running parallel operations to change         MAC addresses on the VFs and change port VLANs on the host. 3. Observe errors in dmesg: ""Error I40E_AQ_RC_ENOSPC adding RX filters on VF XX\, \tplease set promiscuous on manually for VF XX"".  Exact code for stable reproduction Intel can't open-source now.  The fix involves implementing a new intermediate filter state\, I40E_FILTER_NEW_SYNC\, for the time when a filter is on a tmp_add_list. These filters cannot be deleted from the hash list directly but must be removed using the full process.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21748,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix integer overflows on 32 bit systems  On 32bit systems the addition operations in ipc_msg_alloc() can potentially overflow leading to memory corruption. Add bounds checking using KSMBD_IPC_MAX_PAYLOAD to avoid overflow.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56664,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\, sockmap: Fix race between element replace and close()  Element replace (with a socket different from the one stored) may race with socket's close() link popping & unlinking. __sock_map_delete() unconditionally unrefs the (wrong) element:  // set map[0] = s0 map_update_elem(map\, 0\, s0)  // drop fd of s0 close(s0)   sock_map_close()     lock_sock(sk)               (s0!)     sock_map_remove_links(sk)       link = sk_psock_link_pop()       sock_map_unlink(sk\, link)         sock_map_delete_from_link                                         // replace map[0] with s1                                         map_update_elem(map\, 0\, s1)                                           sock_map_update_elem                                 (s1!)       lock_sock(sk)                                             sock_map_update_common                                               psock = sk_psock(sk)                                               spin_lock(&stab->lock)                                               osk = stab->sks[idx]                                               sock_map_add_link(...\, &stab->sks[idx])                                               sock_map_unref(osk\, &stab->sks[idx])                                                 psock = sk_psock(osk)                                                 sk_psock_put(sk\, psock)                                                   if (refcount_dec_and_test(&psock))                                                     sk_psock_drop(sk\, psock)                                               spin_unlock(&stab->lock)                                             unlock_sock(sk)           __sock_map_delete             spin_lock(&stab->lock)             sk = *psk                        // s1 replaced s0; sk == s1             if (!sk_test || sk_test == sk)   // sk_test (s0) != sk (s1); no branch               sk = xchg(psk\, NULL)             if (sk)               sock_map_unref(sk\, psk)        // unref s1; sks[idx] will dangle                 psock = sk_psock(sk)                 sk_psock_put(sk\, psock)                   if (refcount_dec_and_test())                     sk_psock_drop(sk\, psock)             spin_unlock(&stab->lock)     release_sock(sk)  Then close(map) enqueues bpf_map_free_deferred\, which finally calls sock_map_free(). This results in some refcount_t warnings along with a KASAN splat [1].  Fix __sock_map_delete()\, do not allow sock_map_unref() on elements that may have been replaced.  [1]: BUG: KASAN: slab-use-after-free in sock_map_free+0x10e/0x330 Write of size 4 at addr ffff88811f5b9100 by task kworker/u64:12/1063  CPU: 14 UID: 0 PID: 1063 Comm: kworker/u64:12 Not tainted 6.12.0+ #125 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS Arch Linux 1.16.3-1-1 04/01/2014 Workqueue: events_unbound bpf_map_free_deferred Call Trace:  <TASK>  dump_stack_lvl+0x68/0x90  print_report+0x174/0x4f6  kasan_report+0xb9/0x190  kasan_check_range+0x10f/0x1e0  sock_map_free+0x10e/0x330  bpf_map_free_deferred+0x173/0x320  process_one_work+0x846/0x1420  worker_thread+0x5b3/0xf80  kthread+0x29e/0x360  ret_from_fork+0x2d/0x70  ret_from_fork_asm+0x1a/0x30  </TASK>  Allocated by task 1202:  kasan_save_stack+0x1e/0x40  kasan_save_track+0x10/0x30  __kasan_slab_alloc+0x85/0x90  kmem_cache_alloc_noprof+0x131/0x450  sk_prot_alloc+0x5b/0x220  sk_alloc+0x2c/0x870  unix_create1+0x88/0x8a0  unix_create+0xc5/0x180  __sock_create+0x241/0x650  __sys_socketpair+0x1ce/0x420  __x64_sys_socketpair+0x92/0x100  do_syscall_64+0x93/0x180  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 46:  kasan_save_stack+0x1e/0x40  kasan_save_track+0x10/0x30  kasan_save_free_info+0x37/0x60  __kasan_slab_free+0x4b/0x70  kmem_cache_free+0x1a1/0x590  __sk_destruct+0x388/0x5a0  sk_psock_destroy+0x73e/0xa50  process_one_work+0x846/0x1420  worker_thread+0x5b3/0xf80  kthread+0x29e/0x360  ret_from_fork+0x2d/0x70  ret_from_fork_asm+0x1a/0x30  The bu ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50301,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  security/keys: fix slab-out-of-bounds in key_task_permission  KASAN reports an out of bounds read: BUG: KASAN: slab-out-of-bounds in __kuid_val include/linux/uidgid.h:36 BUG: KASAN: slab-out-of-bounds in uid_eq include/linux/uidgid.h:63 [inline] BUG: KASAN: slab-out-of-bounds in key_task_permission+0x394/0x410 security/keys/permission.c:54 Read of size 4 at addr ffff88813c3ab618 by task stress-ng/4362  CPU: 2 PID: 4362 Comm: stress-ng Not tainted 5.10.0-14930-gafbffd6c3ede #15 Call Trace:  __dump_stack lib/dump_stack.c:82 [inline]  dump_stack+0x107/0x167 lib/dump_stack.c:123  print_address_description.constprop.0+0x19/0x170 mm/kasan/report.c:400  __kasan_report.cold+0x6c/0x84 mm/kasan/report.c:560  kasan_report+0x3a/0x50 mm/kasan/report.c:585  __kuid_val include/linux/uidgid.h:36 [inline]  uid_eq include/linux/uidgid.h:63 [inline]  key_task_permission+0x394/0x410 security/keys/permission.c:54  search_nested_keyrings+0x90e/0xe90 security/keys/keyring.c:793  This issue was also reported by syzbot.  It can be reproduced by following these steps(more details [1]): 1. Obtain more than 32 inputs that have similar hashes\, which ends with the    pattern '0xxxxxxxe6'. 2. Reboot and add the keys obtained in step 1.  The reproducer demonstrates how this issue happened: 1. In the search_nested_keyrings function\, when it iterates through the    slots in a node(below tag ascend_to_node)\, if the slot pointer is meta    and node->back_pointer != NULL(it means a root)\, it will proceed to    descend_to_node. However\, there is an exception. If node is the root\,    and one of the slots points to a shortcut\, it will be treated as a    keyring. 2. Whether the ptr is keyring decided by keyring_ptr_is_keyring function.    However\, KEYRING_PTR_SUBTYPE is 0x2UL\, the same as    ASSOC_ARRAY_PTR_SUBTYPE_MASK. 3. When 32 keys with the similar hashes are added to the tree\, the ROOT    has keys with hashes that are not similar (e.g. slot 0) and it splits    NODE A without using a shortcut. When NODE A is filled with keys that    all hashes are xxe6\, the keys are similar\, NODE A will split with a    shortcut. Finally\, it forms the tree as shown below\, where slot 6 points    to a shortcut.                        NODE A               +------>+---+       ROOT    |       | 0 | xxe6       +---+   |       +---+  xxxx | 0 | shortcut  :   : xxe6       +---+   |       +---+  xxe6 :   :   |       |   | xxe6       +---+   |       +---+       | 6 |---+       :   : xxe6       +---+           +---+  xxe6 :   :           | f | xxe6       +---+           +---+  xxe6 | f |       +---+  4. As mentioned above\, If a slot(slot 6) of the root points to a shortcut\,    it may be mistakenly transferred to a key*\, leading to a read    out-of-bounds read.  To fix this issue\, one should jump to descend_to_node if the ptr is a shortcut\, regardless of whether the node is root or not.  [1] https://lore.kernel.org/linux-kernel/1cfa878e-8c7b-4570-8606-21daf5e13ce7@huaweicloud.com/  [jarkko: tweaked the commit message a bit to have an appropriate closes  tag.]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21749,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: rose: lock the socket in rose_bind()  syzbot reported a soft lockup in rose_loopback_timer()\, with a repro calling bind() from multiple threads.  rose_bind() must lock the socket to avoid this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56665,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf\,perf: Fix invalid prog_array access in perf_event_detach_bpf_prog  Syzbot reported [1] crash that happens for following tracing scenario:    - create tracepoint perf event with attr.inherit=1\, attach it to the     process and set bpf program to it   - attached process forks -> chid creates inherited event      the new child event shares the parent's bpf program and tp_event     (hence prog_array) which is global for tracepoint    - exit both process and its child -> release both events   - first perf_event_detach_bpf_prog call will release tp_event->prog_array     and second perf_event_detach_bpf_prog will crash\, because     tp_event->prog_array is NULL  The fix makes sure the perf_event_detach_bpf_prog checks prog_array is valid before it tries to remove the bpf program from it.  [1] https://lore.kernel.org/bpf/Z1MR6dCIKajNS6nU@krava/T/#m91dbf0688221ec7a7fc95e896a7ef9ff93b0b8ad",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27012,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nf_tables: restore set elements when delete set fails  From abort path\, nft_mapelem_activate() needs to restore refcounters to the original state. Currently\, it uses the set->ops->walk() to iterate over these set elements. The existing set iterator skips inactive elements in the next generation\, this does not work from the abort path to restore the original state since it has to skip active elements instead (not inactive ones).  This patch moves the check for inactive elements to the set iterator callback\, then it reverses the logic for the .activate case which needs to skip active elements.  Toggle next generation bit for elements when delete set command is invoked and call nft_clear() from .activate (abort) path to restore the next generation bit.  The splat below shows an object in mappings memleak:  [43929.457523] ------------[ cut here ]------------ [43929.457532] WARNING: CPU: 0 PID: 1139 at include/net/netfilter/nf_tables.h:1237 nft_setelem_data_deactivate+0xe4/0xf0 [nf_tables] [...] [43929.458014] RIP: 0010:nft_setelem_data_deactivate+0xe4/0xf0 [nf_tables] [43929.458076] Code: 83 f8 01 77 ab 49 8d 7c 24 08 e8 37 5e d0 de 49 8b 6c 24 08 48 8d 7d 50 e8 e9 5c d0 de 8b 45 50 8d 50 ff 89 55 50 85 c0 75 86 <0f> 0b eb 82 0f 0b eb b3 0f 1f 40 00 90 90 90 90 90 90 90 90 90 90 [43929.458081] RSP: 0018:ffff888140f9f4b0 EFLAGS: 00010246 [43929.458086] RAX: 0000000000000000 RBX: ffff8881434f5288 RCX: dffffc0000000000 [43929.458090] RDX: 00000000ffffffff RSI: ffffffffa26d28a7 RDI: ffff88810ecc9550 [43929.458093] RBP: ffff88810ecc9500 R08: 0000000000000001 R09: ffffed10281f3e8f [43929.458096] R10: 0000000000000003 R11: ffff0000ffff0000 R12: ffff8881434f52a0 [43929.458100] R13: ffff888140f9f5f4 R14: ffff888151c7a800 R15: 0000000000000002 [43929.458103] FS:  00007f0c687c4740(0000) GS:ffff888390800000(0000) knlGS:0000000000000000 [43929.458107] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [43929.458111] CR2: 00007f58dbe5b008 CR3: 0000000123602005 CR4: 00000000001706f0 [43929.458114] Call Trace: [43929.458118]  <TASK> [43929.458121]  ? __warn+0x9f/0x1a0 [43929.458127]  ? nft_setelem_data_deactivate+0xe4/0xf0 [nf_tables] [43929.458188]  ? report_bug+0x1b1/0x1e0 [43929.458196]  ? handle_bug+0x3c/0x70 [43929.458200]  ? exc_invalid_op+0x17/0x40 [43929.458211]  ? nft_setelem_data_deactivate+0xd7/0xf0 [nf_tables] [43929.458271]  ? nft_setelem_data_deactivate+0xe4/0xf0 [nf_tables] [43929.458332]  nft_mapelem_deactivate+0x24/0x30 [nf_tables] [43929.458392]  nft_rhash_walk+0xdd/0x180 [nf_tables] [43929.458453]  ? __pfx_nft_rhash_walk+0x10/0x10 [nf_tables] [43929.458512]  ? rb_insert_color+0x2e/0x280 [43929.458520]  nft_map_deactivate+0xdc/0x1e0 [nf_tables] [43929.458582]  ? __pfx_nft_map_deactivate+0x10/0x10 [nf_tables] [43929.458642]  ? __pfx_nft_mapelem_deactivate+0x10/0x10 [nf_tables] [43929.458701]  ? __rcu_read_unlock+0x46/0x70 [43929.458709]  nft_delset+0xff/0x110 [nf_tables] [43929.458769]  nft_flush_table+0x16f/0x460 [nf_tables] [43929.458830]  nf_tables_deltable+0x501/0x580 [nf_tables]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53085,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  tpm: Lock TPM chip in tpm_pm_suspend() first  Setting TPM_CHIP_FLAG_SUSPENDED in the end of tpm_pm_suspend() can be racy according\, as this leaves window for tpm_hwrng_read() to be called while the operation is in progress. The recent bug report gives also evidence of this behaviour.  Aadress this by locking the TPM chip before checking any chip->flags both in tpm_pm_suspend() and tpm_hwrng_read(). Move TPM_CHIP_FLAG_SUSPENDED check inside tpm_get_random() so that it will be always checked only when the lock is reserved.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27011,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nf_tables: fix memleak in map from abort path  The delete set command does not rely on the transaction object for element removal\, therefore\, a combination of delete element + delete set from the abort path could result in restoring twice the refcount of the mapping.  Check for inactive element in the next generation for the delete element command in the abort path\, skip restoring state if next generation bit has been already cleared. This is similar to the activate logic using the set walk iterator.  [ 6170.286929] ------------[ cut here ]------------ [ 6170.286939] WARNING: CPU: 6 PID: 790302 at net/netfilter/nf_tables_api.c:2086 nf_tables_chain_destroy+0x1f7/0x220 [nf_tables] [ 6170.287071] Modules linked in: [...] [ 6170.287633] CPU: 6 PID: 790302 Comm: kworker/6:2 Not tainted 6.9.0-rc3+ #365 [ 6170.287768] RIP: 0010:nf_tables_chain_destroy+0x1f7/0x220 [nf_tables] [ 6170.287886] Code: df 48 8d 7d 58 e8 69 2e 3b df 48 8b 7d 58 e8 80 1b 37 df 48 8d 7d 68 e8 57 2e 3b df 48 8b 7d 68 e8 6e 1b 37 df 48 89 ef eb c4 <0f> 0b 48 83 c4 08 5b 5d 41 5c 41 5d 41 5e 41 5f c3 cc cc cc cc 0f [ 6170.287895] RSP: 0018:ffff888134b8fd08 EFLAGS: 00010202 [ 6170.287904] RAX: 0000000000000001 RBX: ffff888125bffb28 RCX: dffffc0000000000 [ 6170.287912] RDX: 0000000000000003 RSI: ffffffffa20298ab RDI: ffff88811ebe4750 [ 6170.287919] RBP: ffff88811ebe4700 R08: ffff88838e812650 R09: fffffbfff0623a55 [ 6170.287926] R10: ffffffff8311d2af R11: 0000000000000001 R12: ffff888125bffb10 [ 6170.287933] R13: ffff888125bffb10 R14: dead000000000122 R15: dead000000000100 [ 6170.287940] FS:  0000000000000000(0000) GS:ffff888390b00000(0000) knlGS:0000000000000000 [ 6170.287948] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 6170.287955] CR2: 00007fd31fc00710 CR3: 0000000133f60004 CR4: 00000000001706f0 [ 6170.287962] Call Trace: [ 6170.287967]  <TASK> [ 6170.287973]  ? __warn+0x9f/0x1a0 [ 6170.287986]  ? nf_tables_chain_destroy+0x1f7/0x220 [nf_tables] [ 6170.288092]  ? report_bug+0x1b1/0x1e0 [ 6170.287986]  ? nf_tables_chain_destroy+0x1f7/0x220 [nf_tables] [ 6170.288092]  ? report_bug+0x1b1/0x1e0 [ 6170.288104]  ? handle_bug+0x3c/0x70 [ 6170.288112]  ? exc_invalid_op+0x17/0x40 [ 6170.288120]  ? asm_exc_invalid_op+0x1a/0x20 [ 6170.288132]  ? nf_tables_chain_destroy+0x2b/0x220 [nf_tables] [ 6170.288243]  ? nf_tables_chain_destroy+0x1f7/0x220 [nf_tables] [ 6170.288366]  ? nf_tables_chain_destroy+0x2b/0x220 [nf_tables] [ 6170.288483]  nf_tables_trans_destroy_work+0x588/0x590 [nf_tables]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49950,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: Fix uaf in l2cap_connect  [Syzbot reported] BUG: KASAN: slab-use-after-free in l2cap_connect.constprop.0+0x10d8/0x1270 net/bluetooth/l2cap_core.c:3949 Read of size 8 at addr ffff8880241e9800 by task kworker/u9:0/54  CPU: 0 UID: 0 PID: 54 Comm: kworker/u9:0 Not tainted 6.11.0-rc6-syzkaller-00268-g788220eee30d #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 08/06/2024 Workqueue: hci2 hci_rx_work Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:93 [inline]  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:119  print_address_description mm/kasan/report.c:377 [inline]  print_report+0xc3/0x620 mm/kasan/report.c:488  kasan_report+0xd9/0x110 mm/kasan/report.c:601  l2cap_connect.constprop.0+0x10d8/0x1270 net/bluetooth/l2cap_core.c:3949  l2cap_connect_req net/bluetooth/l2cap_core.c:4080 [inline]  l2cap_bredr_sig_cmd net/bluetooth/l2cap_core.c:4772 [inline]  l2cap_sig_channel net/bluetooth/l2cap_core.c:5543 [inline]  l2cap_recv_frame+0xf0b/0x8eb0 net/bluetooth/l2cap_core.c:6825  l2cap_recv_acldata+0x9b4/0xb70 net/bluetooth/l2cap_core.c:7514  hci_acldata_packet net/bluetooth/hci_core.c:3791 [inline]  hci_rx_work+0xaab/0x1610 net/bluetooth/hci_core.c:4028  process_one_work+0x9c5/0x1b40 kernel/workqueue.c:3231  process_scheduled_works kernel/workqueue.c:3312 [inline]  worker_thread+0x6c8/0xed0 kernel/workqueue.c:3389  kthread+0x2c1/0x3a0 kernel/kthread.c:389  ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244 ...  Freed by task 5245:  kasan_save_stack+0x33/0x60 mm/kasan/common.c:47  kasan_save_track+0x14/0x30 mm/kasan/common.c:68  kasan_save_free_info+0x3b/0x60 mm/kasan/generic.c:579  poison_slab_object+0xf7/0x160 mm/kasan/common.c:240  __kasan_slab_free+0x32/0x50 mm/kasan/common.c:256  kasan_slab_free include/linux/kasan.h:184 [inline]  slab_free_hook mm/slub.c:2256 [inline]  slab_free mm/slub.c:4477 [inline]  kfree+0x12a/0x3b0 mm/slub.c:4598  l2cap_conn_free net/bluetooth/l2cap_core.c:1810 [inline]  kref_put include/linux/kref.h:65 [inline]  l2cap_conn_put net/bluetooth/l2cap_core.c:1822 [inline]  l2cap_conn_del+0x59d/0x730 net/bluetooth/l2cap_core.c:1802  l2cap_connect_cfm+0x9e6/0xf80 net/bluetooth/l2cap_core.c:7241  hci_connect_cfm include/net/bluetooth/hci_core.h:1960 [inline]  hci_conn_failed+0x1c3/0x370 net/bluetooth/hci_conn.c:1265  hci_abort_conn_sync+0x75a/0xb50 net/bluetooth/hci_sync.c:5583  abort_conn_sync+0x197/0x360 net/bluetooth/hci_conn.c:2917  hci_cmd_sync_work+0x1a4/0x410 net/bluetooth/hci_sync.c:328  process_one_work+0x9c5/0x1b40 kernel/workqueue.c:3231  process_scheduled_works kernel/workqueue.c:3312 [inline]  worker_thread+0x6c8/0xed0 kernel/workqueue.c:3389  kthread+0x2c1/0x3a0 kernel/kthread.c:389  ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-20712,binutils,LOW,2.40-2,N/A,"A heap-based buffer over-read exists in the function d_expression_1 in cp-demangle.c in GNU libiberty\, as distributed in GNU Binutils 2.31.1. A crafted input can cause segmentation faults\, leading to denial-of-service\, as demonstrated by c++filt.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56739,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  rtc: check if __rtc_read_time was successful in rtc_timer_do_work()  If the __rtc_read_time call fails\,\, the struct rtc_time tm; may contain uninitialized data\, or an illegal date/time read from the RTC hardware.  When calling rtc_tm_to_ktime later\, the result may be a very large value (possibly KTIME_MAX). If there are periodic timers in rtc->timerqueue\, they will continually expire\, may causing kernel softlockup.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50302,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: core: zero-initialize the report buffer  Since the report buffer is used by all kinds of drivers in various ways\, let's zero-initialize it during allocation to make sure that it can't be ever used to leak kernel memory via specially-crafted report.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49951,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: MGMT: Fix possible crash on mgmt_index_removed  If mgmt_index_removed is called while there are commands queued on cmd_sync it could lead to crashes like the bellow trace:  0x0000053D: __list_del_entry_valid_or_report+0x98/0xdc 0x0000053D: mgmt_pending_remove+0x18/0x58 [bluetooth] 0x0000053E: mgmt_remove_adv_monitor_complete+0x80/0x108 [bluetooth] 0x0000053E: hci_cmd_sync_work+0xbc/0x164 [bluetooth]  So while handling mgmt_index_removed this attempts to dequeue commands passed as user_data to cmd_sync.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27010,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: Fix mirred deadlock on device recursion  When the mirred action is used on a classful egress qdisc and a packet is mirrored or redirected to self we hit a qdisc lock deadlock. See trace below.  [..... other info removed for brevity....] [   82.890906] [   82.890906] ============================================ [   82.890906] WARNING: possible recursive locking detected [   82.890906] 6.8.0-05205-g77fadd89fe2d-dirty #213 Tainted: G        W [   82.890906] -------------------------------------------- [   82.890906] ping/418 is trying to acquire lock: [   82.890906] ffff888006994110 (&sch->q.lock){+.-.}-{3:3}\, at: __dev_queue_xmit+0x1778/0x3550 [   82.890906] [   82.890906] but task is already holding lock: [   82.890906] ffff888006994110 (&sch->q.lock){+.-.}-{3:3}\, at: __dev_queue_xmit+0x1778/0x3550 [   82.890906] [   82.890906] other info that might help us debug this: [   82.890906]  Possible unsafe locking scenario: [   82.890906] [   82.890906]        CPU0 [   82.890906]        ---- [   82.890906]   lock(&sch->q.lock); [   82.890906]   lock(&sch->q.lock); [   82.890906] [   82.890906]  *** DEADLOCK *** [   82.890906] [..... other info removed for brevity....]  Example setup (eth0->eth0) to recreate tc qdisc add dev eth0 root handle 1: htb default 30 tc filter add dev eth0 handle 1: protocol ip prio 2 matchall \\      action mirred egress redirect dev eth0  Another example(eth0->eth1->eth0) to recreate tc qdisc add dev eth0 root handle 1: htb default 30 tc filter add dev eth0 handle 1: protocol ip prio 2 matchall \\      action mirred egress redirect dev eth1  tc qdisc add dev eth1 root handle 1: htb default 30 tc filter add dev eth1 handle 1: protocol ip prio 2 matchall \\      action mirred egress redirect dev eth0  We fix this by adding an owner field (CPU id) to struct Qdisc set after root qdisc is entered. When the softirq enters it a second time\, if the qdisc owner is the same CPU\, the packet is dropped to break the loop.",|tykio/ner-redact||tykio/smart-ner-redact|
TEMP-0841856-B18BAF,bash,LOW,5.2.15-2+b7,N/A,"No description",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56660,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: DR\, prevent potential error pointer dereference  The dr_domain_add_vport_cap() function generally returns NULL on error but sometimes we want it to return ERR_PTR(-EBUSY) so the caller can retry.  The problem here is that ""ret"" can be either -EBUSY or -ENOMEM and if it's and -ENOMEM then the error pointer is propogated back and eventually dereferenced in dr_ste_v0_build_src_gvmi_qpn_tag().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56661,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  tipc: fix NULL deref in cleanup_bearer()  syzbot found [1] that after blamed commit\, ub->ubsock->sk was NULL when attempting the atomic_dec() :  atomic_dec(&tipc_net(sock_net(ub->ubsock->sk))->wq_count);  Fix this by caching the tipc_net pointer.  [1]  Oops: general protection fault\, probably for non-canonical address 0xdffffc0000000006: 0000 [#1] PREEMPT SMP KASAN PTI KASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037] CPU: 0 UID: 0 PID: 5896 Comm: kworker/0:3 Not tainted 6.13.0-rc1-next-20241203-syzkaller #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: events cleanup_bearer  RIP: 0010:read_pnet include/net/net_namespace.h:387 [inline]  RIP: 0010:sock_net include/net/sock.h:655 [inline]  RIP: 0010:cleanup_bearer+0x1f7/0x280 net/tipc/udp_media.c:820 Code: 18 48 89 d8 48 c1 e8 03 42 80 3c 28 00 74 08 48 89 df e8 3c f7 99 f6 48 8b 1b 48 83 c3 30 e8 f0 e4 60 00 48 89 d8 48 c1 e8 03 <42> 80 3c 28 00 74 08 48 89 df e8 1a f7 99 f6 49 83 c7 e8 48 8b 1b RSP: 0018:ffffc9000410fb70 EFLAGS: 00010206 RAX: 0000000000000006 RBX: 0000000000000030 RCX: ffff88802fe45a00 RDX: 0000000000000001 RSI: 0000000000000008 RDI: ffffc9000410f900 RBP: ffff88807e1f0908 R08: ffffc9000410f907 R09: 1ffff92000821f20 R10: dffffc0000000000 R11: fffff52000821f21 R12: ffff888031d19980 R13: dffffc0000000000 R14: dffffc0000000000 R15: ffff88807e1f0918 FS:  0000000000000000(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000556ca050b000 CR3: 0000000031c0c000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50304,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv4: ip_tunnel: Fix suspicious RCU usage warning in ip_tunnel_find()  The per-netns IP tunnel hash table is protected by the RTNL mutex and ip_tunnel_find() is only called from the control path where the mutex is taken.  Add a lockdep expression to hlist_for_each_entry_rcu() in ip_tunnel_find() in order to validate that the mutex is held and to silence the suspicious RCU usage warning [1].  [1] WARNING: suspicious RCU usage 6.12.0-rc3-custom-gd95d9a31aceb #139 Not tainted ----------------------------- net/ipv4/ip_tunnel.c:221 RCU-list traversed in non-reader section!!  other info that might help us debug this:  rcu_scheduler_active = 2\, debug_locks = 1 1 lock held by ip/362:  #0: ffffffff86fc7cb0 (rtnl_mutex){+.+.}-{3:3}\, at: rtnetlink_rcv_msg+0x377/0xf60  stack backtrace: CPU: 12 UID: 0 PID: 362 Comm: ip Not tainted 6.12.0-rc3-custom-gd95d9a31aceb #139 Hardware name: Bochs Bochs\, BIOS Bochs 01/01/2011 Call Trace:  <TASK>  dump_stack_lvl+0xba/0x110  lockdep_rcu_suspicious.cold+0x4f/0xd6  ip_tunnel_find+0x435/0x4d0  ip_tunnel_newlink+0x517/0x7a0  ipgre_newlink+0x14c/0x170  __rtnl_newlink+0x1173/0x19c0  rtnl_newlink+0x6c/0xa0  rtnetlink_rcv_msg+0x3cc/0xf60  netlink_rcv_skb+0x171/0x450  netlink_unicast+0x539/0x7f0  netlink_sendmsg+0x8c1/0xd80  ____sys_sendmsg+0x8f9/0xc20  ___sys_sendmsg+0x197/0x1e0  __sys_sendmsg+0x122/0x1f0  do_syscall_64+0xbb/0x1d0  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53082,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  virtio_net: Add hash_key_length check  Add hash_key_length check in virtnet_probe() to avoid possible out of bound errors when setting/reading the hash key.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-18064,libcairo2,LOW,1.16.0-7,N/A,"cairo through 1.15.14 has an out-of-bounds stack-memory write during processing of a crafted document by WebKitGTK+ because of the interaction between cairo-rectangular-scan-converter.c (the generate and render_rows functions) and cairo-image-compositor.c (the _cairo_image_spans_and_zero function).",|tykio/midsommar|
CVE-2024-53081,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: ar0521: don't overflow when checking PLL values  The PLL checks are comparing 64 bit integers with 32 bit ones\, as reported by Coverity. Depending on the values of the variables\, this may underflow.  Fix it ensuring that both sides of the expression are u64.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56662,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  acpi: nfit: vmalloc-out-of-bounds Read in acpi_nfit_ctl  Fix an issue detected by syzbot with KASAN:  BUG: KASAN: vmalloc-out-of-bounds in cmd_to_func drivers/acpi/nfit/ core.c:416 [inline] BUG: KASAN: vmalloc-out-of-bounds in acpi_nfit_ctl+0x20e8/0x24a0 drivers/acpi/nfit/core.c:459  The issue occurs in cmd_to_func when the call_pkg->nd_reserved2 array is accessed without verifying that call_pkg points to a buffer that is appropriately sized as a struct nd_cmd_pkg. This can lead to out-of-bounds access and undefined behavior if the buffer does not have sufficient space.  To address this\, a check was added in acpi_nfit_ctl() to ensure that buf is not NULL and that buf_len is less than sizeof(*call_pkg) before accessing it. This ensures safe access to the members of call_pkg\, including the nd_reserved2 array.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-54456,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  NFS: Fix potential buffer overflowin nfs_sysfs_link_rpc_client()  name is char[64] where the size of clnt->cl_program->name remains unknown. Invoking strcat() directly will also lead to potential buffer overflow. Change them to strscpy() and strncat() to fix potential issues.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56663,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: nl80211: fix NL80211_ATTR_MLO_LINK_ID off-by-one  Since the netlink attribute range validation provides inclusive checking\, the *max* of attribute NL80211_ATTR_MLO_LINK_ID should be IEEE80211_MLD_MAX_NUM_LINKS - 1 otherwise causing an off-by-one.  One crash stack for demonstration: ================================================================== BUG: KASAN: wild-memory-access in ieee80211_tx_control_port+0x3b6/0xca0 net/mac80211/tx.c:5939 Read of size 6 at addr 001102080000000c by task fuzzer.386/9508  CPU: 1 PID: 9508 Comm: syz.1.386 Not tainted 6.1.70 #2 Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:88 [inline]  dump_stack_lvl+0x177/0x231 lib/dump_stack.c:106  print_report+0xe0/0x750 mm/kasan/report.c:398  kasan_report+0x139/0x170 mm/kasan/report.c:495  kasan_check_range+0x287/0x290 mm/kasan/generic.c:189  memcpy+0x25/0x60 mm/kasan/shadow.c:65  ieee80211_tx_control_port+0x3b6/0xca0 net/mac80211/tx.c:5939  rdev_tx_control_port net/wireless/rdev-ops.h:761 [inline]  nl80211_tx_control_port+0x7b3/0xc40 net/wireless/nl80211.c:15453  genl_family_rcv_msg_doit+0x22e/0x320 net/netlink/genetlink.c:756  genl_family_rcv_msg net/netlink/genetlink.c:833 [inline]  genl_rcv_msg+0x539/0x740 net/netlink/genetlink.c:850  netlink_rcv_skb+0x1de/0x420 net/netlink/af_netlink.c:2508  genl_rcv+0x24/0x40 net/netlink/genetlink.c:861  netlink_unicast_kernel net/netlink/af_netlink.c:1326 [inline]  netlink_unicast+0x74b/0x8c0 net/netlink/af_netlink.c:1352  netlink_sendmsg+0x882/0xb90 net/netlink/af_netlink.c:1874  sock_sendmsg_nosec net/socket.c:716 [inline]  __sock_sendmsg net/socket.c:728 [inline]  ____sys_sendmsg+0x5cc/0x8f0 net/socket.c:2499  ___sys_sendmsg+0x21c/0x290 net/socket.c:2553  __sys_sendmsg net/socket.c:2582 [inline]  __do_sys_sendmsg net/socket.c:2591 [inline]  __se_sys_sendmsg+0x19e/0x270 net/socket.c:2589  do_syscall_x64 arch/x86/entry/common.c:51 [inline]  do_syscall_64+0x45/0x90 arch/x86/entry/common.c:81  entry_SYSCALL_64_after_hwframe+0x63/0xcd  Update the policy to ensure correct validation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-0395,libc-bin,MEDIUM,2.36-9+deb12u9,2.36-9+deb12u10,"When the assert() function in the GNU C Library versions 2.13 to 2.40 fails\, it does not allocate enough space for the assertion failure message string and size information\, which may lead to a buffer overflow if the message string size aligns to page size.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22107,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: dsa: sja1105: fix kasan out-of-bounds warning in sja1105_table_delete_entry()  There are actually 2 problems: - deleting the last element doesn't require the memmove of elements   [i + 1\, end) over it. Actually\, element i+1 is out of bounds. - The memmove itself should move size - i - 1 elements\, because the last   element is out of bounds.  The out-of-bounds element still remains out of bounds after being accessed\, so the problem is only that we touch it\, not that it becomes in active use. But I suppose it can lead to issues if the out-of-bounds element is part of an unmapped page.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26656,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: fix use-after-free bug  The bug can be triggered by sending a single amdgpu_gem_userptr_ioctl to the AMDGPU DRM driver on any ASICs with an invalid address and size. The bug was reported by Joonkyo Jung <joonkyoj@yonsei.ac.kr>. For example the following code:  static void Syzkaller1(int fd) { \tstruct drm_amdgpu_gem_userptr arg; \tint ret;  \targ.addr = 0xffffffffffff0000; \targ.size = 0x80000000; /*2 Gb*/ \targ.flags = 0x7; \tret = drmIoctl(fd\, 0xc1186451/*amdgpu_gem_userptr_ioctl*/\, &arg); }  Due to the address and size are not valid there is a failure in amdgpu_hmm_register->mmu_interval_notifier_insert->__mmu_interval_notifier_insert-> check_shl_overflow\, but we even the amdgpu_hmm_register failure we still call amdgpu_hmm_unregister into  amdgpu_gem_object_free which causes access to a bad address. The following stack is below when the issue is reproduced when Kazan is enabled:  [  +0.000014] Hardware name: ASUS System Product Name/ROG STRIX B550-F GAMING (WI-FI)\, BIOS 1401 12/03/2020 [  +0.000009] RIP: 0010:mmu_interval_notifier_remove+0x327/0x340 [  +0.000017] Code: ff ff 49 89 44 24 08 48 b8 00 01 00 00 00 00 ad de 4c 89 f7 49 89 47 40 48 83 c0 22 49 89 47 48 e8 ce d1 2d 01 e9 32 ff ff ff <0f> 0b e9 16 ff ff ff 4c 89 ef e8 fa 14 b3 ff e9 36 ff ff ff e8 80 [  +0.000014] RSP: 0018:ffffc90002657988 EFLAGS: 00010246 [  +0.000013] RAX: 0000000000000000 RBX: 1ffff920004caf35 RCX: ffffffff8160565b [  +0.000011] RDX: dffffc0000000000 RSI: 0000000000000004 RDI: ffff8881a9f78260 [  +0.000010] RBP: ffffc90002657a70 R08: 0000000000000001 R09: fffff520004caf25 [  +0.000010] R10: 0000000000000003 R11: ffffffff8161d1d6 R12: ffff88810e988c00 [  +0.000010] R13: ffff888126fb5a00 R14: ffff88810e988c0c R15: ffff8881a9f78260 [  +0.000011] FS:  00007ff9ec848540(0000) GS:ffff8883cc880000(0000) knlGS:0000000000000000 [  +0.000012] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [  +0.000010] CR2: 000055b3f7e14328 CR3: 00000001b5770000 CR4: 0000000000350ef0 [  +0.000010] Call Trace: [  +0.000006]  <TASK> [  +0.000007]  ? show_regs+0x6a/0x80 [  +0.000018]  ? __warn+0xa5/0x1b0 [  +0.000019]  ? mmu_interval_notifier_remove+0x327/0x340 [  +0.000018]  ? report_bug+0x24a/0x290 [  +0.000022]  ? handle_bug+0x46/0x90 [  +0.000015]  ? exc_invalid_op+0x19/0x50 [  +0.000016]  ? asm_exc_invalid_op+0x1b/0x20 [  +0.000017]  ? kasan_save_stack+0x26/0x50 [  +0.000017]  ? mmu_interval_notifier_remove+0x23b/0x340 [  +0.000019]  ? mmu_interval_notifier_remove+0x327/0x340 [  +0.000019]  ? mmu_interval_notifier_remove+0x23b/0x340 [  +0.000020]  ? __pfx_mmu_interval_notifier_remove+0x10/0x10 [  +0.000017]  ? kasan_save_alloc_info+0x1e/0x30 [  +0.000018]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? __kasan_kmalloc+0xb1/0xc0 [  +0.000018]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? __kasan_check_read+0x11/0x20 [  +0.000020]  amdgpu_hmm_unregister+0x34/0x50 [amdgpu] [  +0.004695]  amdgpu_gem_object_free+0x66/0xa0 [amdgpu] [  +0.004534]  ? __pfx_amdgpu_gem_object_free+0x10/0x10 [amdgpu] [  +0.004291]  ? do_syscall_64+0x5f/0xe0 [  +0.000023]  ? srso_return_thunk+0x5/0x5f [  +0.000017]  drm_gem_object_free+0x3b/0x50 [drm] [  +0.000489]  amdgpu_gem_userptr_ioctl+0x306/0x500 [amdgpu] [  +0.004295]  ? __pfx_amdgpu_gem_userptr_ioctl+0x10/0x10 [amdgpu] [  +0.004270]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? __this_cpu_preempt_check+0x13/0x20 [  +0.000015]  ? srso_return_thunk+0x5/0x5f [  +0.000013]  ? sysvec_apic_timer_interrupt+0x57/0xc0 [  +0.000020]  ? srso_return_thunk+0x5/0x5f [  +0.000014]  ? asm_sysvec_apic_timer_interrupt+0x1b/0x20 [  +0.000022]  ? drm_ioctl_kernel+0x17b/0x1f0 [drm] [  +0.000496]  ? __pfx_amdgpu_gem_userptr_ioctl+0x10/0x10 [amdgpu] [  +0.004272]  ? drm_ioctl_kernel+0x190/0x1f0 [drm] [  +0.000492]  drm_ioctl_kernel+0x140/0x1f0 [drm] [  +0.000497]  ? __pfx_amdgpu_gem_userptr_ioctl+0x10/0x10 [amdgpu] [  +0.004297]  ? __pfx_drm_ioctl_kernel+0x10/0x10 [d ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21796,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  nfsd: clear acl_access/acl_default after releasing them  If getting acl_default fails\, acl_access and acl_default will be released simultaneously. However\, acl_access will still retain a pointer pointing to the released posix_acl\, which will trigger a WARNING in nfs3svc_release_getacl like this:  ------------[ cut here ]------------ refcount_t: underflow; use-after-free. WARNING: CPU: 26 PID: 3199 at lib/refcount.c:28 refcount_warn_saturate+0xb5/0x170 Modules linked in: CPU: 26 UID: 0 PID: 3199 Comm: nfsd Not tainted 6.12.0-rc6-00079-g04ae226af01f-dirty #8 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.1-2.fc37 04/01/2014 RIP: 0010:refcount_warn_saturate+0xb5/0x170 Code: cc cc 0f b6 1d b3 20 a5 03 80 fb 01 0f 87 65 48 d8 00 83 e3 01 75 e4 48 c7 c7 c0 3b 9b 85 c6 05 97 20 a5 03 01 e8 fb 3e 30 ff <0f> 0b eb cd 0f b6 1d 8a3 RSP: 0018:ffffc90008637cd8 EFLAGS: 00010282 RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffffff83904fde RDX: dffffc0000000000 RSI: 0000000000000008 RDI: ffff88871ed36380 RBP: ffff888158beeb40 R08: 0000000000000001 R09: fffff520010c6f56 R10: ffffc90008637ab7 R11: 0000000000000001 R12: 0000000000000001 R13: ffff888140e77400 R14: ffff888140e77408 R15: ffffffff858b42c0 FS:  0000000000000000(0000) GS:ffff88871ed00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000562384d32158 CR3: 000000055cc6a000 CR4: 00000000000006f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  ? refcount_warn_saturate+0xb5/0x170  ? __warn+0xa5/0x140  ? refcount_warn_saturate+0xb5/0x170  ? report_bug+0x1b1/0x1e0  ? handle_bug+0x53/0xa0  ? exc_invalid_op+0x17/0x40  ? asm_exc_invalid_op+0x1a/0x20  ? tick_nohz_tick_stopped+0x1e/0x40  ? refcount_warn_saturate+0xb5/0x170  ? refcount_warn_saturate+0xb5/0x170  nfs3svc_release_getacl+0xc9/0xe0  svc_process_common+0x5db/0xb60  ? __pfx_svc_process_common+0x10/0x10  ? __rcu_read_unlock+0x69/0xa0  ? __pfx_nfsd_dispatch+0x10/0x10  ? svc_xprt_received+0xa1/0x120  ? xdr_init_decode+0x11d/0x190  svc_process+0x2a7/0x330  svc_handle_xprt+0x69d/0x940  svc_recv+0x180/0x2d0  nfsd+0x168/0x200  ? __pfx_nfsd+0x10/0x10  kthread+0x1a2/0x1e0  ? kthread+0xf4/0x1e0  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x34/0x60  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK> Kernel panic - not syncing: kernel: panic_on_warn set ...  Clear acl_access/acl_default after posix_acl_release is called to prevent UAF from being triggered.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35961,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: Register devlink first under devlink lock  In case device is having a non fatal FW error during probe\, the driver will report the error to user via devlink. This will trigger a WARN_ON\, since mlx5 is calling devlink_register() last. In order to avoid the WARN_ON[1]\, change mlx5 to invoke devl_register() first under devlink lock.  [1] WARNING: CPU: 5 PID: 227 at net/devlink/health.c:483 devlink_recover_notify.constprop.0+0xb8/0xc0 CPU: 5 PID: 227 Comm: kworker/u16:3 Not tainted 6.4.0-rc5_for_upstream_min_debug_2023_06_12_12_38 #1 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014 Workqueue: mlx5_health0000:08:00.0 mlx5_fw_reporter_err_work [mlx5_core] RIP: 0010:devlink_recover_notify.constprop.0+0xb8/0xc0 Call Trace:  <TASK>  ? __warn+0x79/0x120  ? devlink_recover_notify.constprop.0+0xb8/0xc0  ? report_bug+0x17c/0x190  ? handle_bug+0x3c/0x60  ? exc_invalid_op+0x14/0x70  ? asm_exc_invalid_op+0x16/0x20  ? devlink_recover_notify.constprop.0+0xb8/0xc0  devlink_health_report+0x4a/0x1c0  mlx5_fw_reporter_err_work+0xa4/0xd0 [mlx5_core]  process_one_work+0x1bb/0x3c0  ? process_one_work+0x3c0/0x3c0  worker_thread+0x4d/0x3c0  ? process_one_work+0x3c0/0x3c0  kthread+0xc6/0xf0  ? kthread_complete_and_exit+0x20/0x20  ret_from_fork+0x1f/0x30  </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21855,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ibmvnic: Don't reference skb after sending to VIOS  Previously\, after successfully flushing the xmit buffer to VIOS\, the tx_bytes stat was incremented by the length of the skb.  It is invalid to access the skb memory after sending the buffer to the VIOS because\, at any point after sending\, the VIOS can trigger an interrupt to free this memory. A race between reading skb->len and freeing the skb is possible (especially during LPM) and will result in use-after-free:  ==================================================================  BUG: KASAN: slab-use-after-free in ibmvnic_xmit+0x75c/0x1808 [ibmvnic]  Read of size 4 at addr c00000024eb48a70 by task hxecom/14495  <...>  Call Trace:  [c000000118f66cf0] [c0000000018cba6c] dump_stack_lvl+0x84/0xe8 (unreliable)  [c000000118f66d20] [c0000000006f0080] print_report+0x1a8/0x7f0  [c000000118f66df0] [c0000000006f08f0] kasan_report+0x128/0x1f8  [c000000118f66f00] [c0000000006f2868] __asan_load4+0xac/0xe0  [c000000118f66f20] [c0080000046eac84] ibmvnic_xmit+0x75c/0x1808 [ibmvnic]  [c000000118f67340] [c0000000014be168] dev_hard_start_xmit+0x150/0x358  <...>  Freed by task 0:  kasan_save_stack+0x34/0x68  kasan_save_track+0x2c/0x50  kasan_save_free_info+0x64/0x108  __kasan_mempool_poison_object+0x148/0x2d4  napi_skb_cache_put+0x5c/0x194  net_tx_action+0x154/0x5b8  handle_softirqs+0x20c/0x60c  do_softirq_own_stack+0x6c/0x88  <...>  The buggy address belongs to the object at c00000024eb48a00 which   belongs to the cache skbuff_head_cache of size 224 ==================================================================",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22105,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bonding: check xdp prog when set bond mode  Following operations can trigger a warning[1]:      ip netns add ns1     ip netns exec ns1 ip link add bond0 type bond mode balance-rr     ip netns exec ns1 ip link set dev bond0 xdp obj af_xdp_kern.o sec xdp     ip netns exec ns1 ip link set bond0 type bond mode broadcast     ip netns del ns1  When delete the namespace\, dev_xdp_uninstall() is called to remove xdp program on bond dev\, and bond_xdp_set() will check the bond mode. If bond mode is changed after attaching xdp program\, the warning may occur.  Some bond modes (broadcast\, etc.) do not support native xdp. Set bond mode with xdp program attached is not good. Add check for xdp program when set bond mode.      [1]     ------------[ cut here ]------------     WARNING: CPU: 0 PID: 11 at net/core/dev.c:9912 unregister_netdevice_many_notify+0x8d9/0x930     Modules linked in:     CPU: 0 UID: 0 PID: 11 Comm: kworker/u4:0 Not tainted 6.14.0-rc4 #107     Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.15.0-0-g2dd4b9b3f840-prebuilt.qemu.org 04/01/2014     Workqueue: netns cleanup_net     RIP: 0010:unregister_netdevice_many_notify+0x8d9/0x930     Code: 00 00 48 c7 c6 6f e3 a2 82 48 c7 c7 d0 b3 96 82 e8 9c 10 3e ...     RSP: 0018:ffffc90000063d80 EFLAGS: 00000282     RAX: 00000000ffffffa1 RBX: ffff888004959000 RCX: 00000000ffffdfff     RDX: 0000000000000000 RSI: 00000000ffffffea RDI: ffffc90000063b48     RBP: ffffc90000063e28 R08: ffffffff82d39b28 R09: 0000000000009ffb     R10: 0000000000000175 R11: ffffffff82d09b40 R12: ffff8880049598e8     R13: 0000000000000001 R14: dead000000000100 R15: ffffc90000045000     FS:  0000000000000000(0000) GS:ffff888007a00000(0000) knlGS:0000000000000000     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033     CR2: 000000000d406b60 CR3: 000000000483e000 CR4: 00000000000006f0     Call Trace:      <TASK>      ? __warn+0x83/0x130      ? unregister_netdevice_many_notify+0x8d9/0x930      ? report_bug+0x18e/0x1a0      ? handle_bug+0x54/0x90      ? exc_invalid_op+0x18/0x70      ? asm_exc_invalid_op+0x1a/0x20      ? unregister_netdevice_many_notify+0x8d9/0x930      ? bond_net_exit_batch_rtnl+0x5c/0x90      cleanup_net+0x237/0x3d0      process_one_work+0x163/0x390      worker_thread+0x293/0x3b0      ? __pfx_worker_thread+0x10/0x10      kthread+0xec/0x1e0      ? __pfx_kthread+0x10/0x10      ? __pfx_kthread+0x10/0x10      ret_from_fork+0x2f/0x50      ? __pfx_kthread+0x10/0x10      ret_from_fork_asm+0x1a/0x30      </TASK>     ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21795,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFSD: fix hang in nfsd4_shutdown_callback  If nfs4_client is in courtesy state then there is no point to send the callback. This causes nfsd4_shutdown_callback to hang since cl_cb_inflight is not 0. This hang lasts about 15 minutes until TCP notifies NFSD that the connection was dropped.  This patch modifies nfsd4_run_cb_work to skip the RPC call if nfs4_client is in courtesy state.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-45015,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/msm/dpu: move dpu_encoder's connector assignment to atomic_enable()  For cases where the crtc's connectors_changed was set without enable/active getting toggled \, there is an atomic_enable() call followed by an atomic_disable() but without an atomic_mode_set().  This results in a NULL ptr access for the dpu_encoder_get_drm_fmt() call in the atomic_enable() as the dpu_encoder's connector was cleared in the atomic_disable() but not re-assigned as there was no atomic_mode_set() call.  Fix the NULL ptr access by moving the assignment for atomic_enable() and also use drm_atomic_get_new_connector_for_encoder() to get the connector from the atomic_state.  Patchwork: https://patchwork.freedesktop.org/patch/606729/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-11698,libnss3,LOW,2:3.87.1-1+deb12u1,N/A,"Heap-based buffer overflow in the __get_page function in lib/dbm/src/h_page.c in Mozilla Network Security Services (NSS) allows context-dependent attackers to have unspecified impact using a crafted cert8.db file.",|tykio/midsommar|
CVE-2025-22104,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ibmvnic: Use kernel helpers for hex dumps  Previously\, when the driver was printing hex dumps\, the buffer was cast to an 8 byte long and printed using string formatters. If the buffer size was not a multiple of 8 then a read buffer overflow was possible.  Therefore\, create a new ibmvnic function that loops over a buffer and calls hex_dump_to_buffer instead.  This patch address KASAN reports like the one below:   ibmvnic 30000003 env3: Login Buffer:   ibmvnic 30000003 env3: 01000000af000000   <...>   ibmvnic 30000003 env3: 2e6d62692e736261   ibmvnic 30000003 env3: 65050003006d6f63   ==================================================================   BUG: KASAN: slab-out-of-bounds in ibmvnic_login+0xacc/0xffc [ibmvnic]   Read of size 8 at addr c0000001331a9aa8 by task ip/17681   <...>   Allocated by task 17681:   <...>   ibmvnic_login+0x2f0/0xffc [ibmvnic]   ibmvnic_open+0x148/0x308 [ibmvnic]   __dev_open+0x1ac/0x304   <...>   The buggy address is located 168 bytes inside of                 allocated 175-byte region [c0000001331a9a00\, c0000001331a9aaf)   <...>   =================================================================   ibmvnic 30000003 env3: 000000000033766e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21794,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: hid-thrustmaster: fix stack-out-of-bounds read in usb_check_int_endpoints()  Syzbot[1] has detected a stack-out-of-bounds read of the ep_addr array from hid-thrustmaster driver. This array is passed to usb_check_int_endpoints function from usb.c core driver\, which executes a for loop that iterates over the elements of the passed array. Not finding a null element at the end of the array\, it tries to read the next\, non-existent element\, crashing the kernel.  To fix this\, a 0 element was added at the end of the array to break the for loop.  [1] https://syzkaller.appspot.com/bug?extid=9c9179ac46169c56c1ad",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-45261,patch,LOW,2.7.6-7,N/A,"An Invalid Pointer vulnerability exists in GNU patch 2.7 via the another_hunk function\, which causes a Denial of Service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22103,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: fix NULL pointer dereference in l3mdev_l3_rcv  When delete l3s ipvlan:      ip link del link eth0 ipvlan1 type ipvlan mode l3s  This may cause a null pointer dereference:      Call trace:      ip_rcv_finish+0x48/0xd0      ip_rcv+0x5c/0x100      __netif_receive_skb_one_core+0x64/0xb0      __netif_receive_skb+0x20/0x80      process_backlog+0xb4/0x204      napi_poll+0xe8/0x294      net_rx_action+0xd8/0x22c      __do_softirq+0x12c/0x354  This is because l3mdev_l3_rcv() visit dev->l3mdev_ops after ipvlan_l3s_unregister() assign the dev->l3mdev_ops to NULL. The process like this:      (CPU1)                     | (CPU2)     l3mdev_l3_rcv()            |       check dev->priv_flags:   |         master = skb->dev;     |                                |                                | ipvlan_l3s_unregister()                                |   set dev->priv_flags                                |   dev->l3mdev_ops = NULL;                                |       visit master->l3mdev_ops |  To avoid this by do not set dev->l3mdev_ops when unregister l3s ipvlan.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46896,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: don't access invalid sched  Since 2320c9e6a768 (""drm/sched: memset() 'job' in drm_sched_job_init()"") accessing job->base.sched can produce unexpected results as the initialisation of (*job)->base.sched done in amdgpu_job_alloc is overwritten by the memset.  This commit fixes an issue when a CS would fail validation and would be rejected after job->num_ibs is incremented. In this case\, amdgpu_ib_free(ring->adev\, ...) will be called\, which would crash the machine because the ring value is bogus.  To fix this\, pass a NULL pointer to amdgpu_ib_free(): we can do this because the device is actually not used in this function.  The next commit will remove the ring argument completely.  (cherry picked from commit 2ae520cb12831d264ceb97c61f72c59d33c0dbd7)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35964,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: ISO: Fix not validating setsockopt user input  Check user input length before copying data.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38570,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  gfs2: Fix potential glock use-after-free on unmount  When a DLM lockspace is released and there ares still locks in that lockspace\, DLM will unlock those locks automatically.  Commit fb6791d100d1b started exploiting this behavior to speed up filesystem unmount: gfs2 would simply free glocks it didn't want to unlock and then release the lockspace.  This didn't take the bast callbacks for asynchronous lock contention notifications into account\, which remain active until until a lock is unlocked or its lockspace is released.  To prevent those callbacks from accessing deallocated objects\, put the glocks that should not be unlocked on the sd_dead_glocks list\, release the lockspace\, and only then free those glocks.  As an additional measure\, ignore unexpected ast and bast callbacks if the receiving glock is dead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21792,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ax25: Fix refcount leak caused by setting SO_BINDTODEVICE sockopt  If an AX25 device is bound to a socket by setting the SO_BINDTODEVICE socket option\, a refcount leak will occur in ax25_release().  Commit 9fd75b66b8f6 (""ax25: Fix refcount leaks caused by ax25_cb_del()"") added decrement of device refcounts in ax25_release(). In order for that to work correctly the refcounts must already be incremented when the device is bound to the socket. An AX25 device can be bound to a socket by either calling ax25_bind() or setting SO_BINDTODEVICE socket option. In both cases the refcounts should be incremented\, but in fact it is done only in ax25_bind().  This bug leads to the following issue reported by Syzkaller:  ================================================================ refcount_t: decrement hit 0; leaking memory. WARNING: CPU: 1 PID: 5932 at lib/refcount.c:31 refcount_warn_saturate+0x1ed/0x210 lib/refcount.c:31 Modules linked in: CPU: 1 UID: 0 PID: 5932 Comm: syz-executor424 Not tainted 6.13.0-rc4-syzkaller-00110-g4099a71718b0 #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 RIP: 0010:refcount_warn_saturate+0x1ed/0x210 lib/refcount.c:31 Call Trace:  <TASK>  __refcount_dec include/linux/refcount.h:336 [inline]  refcount_dec include/linux/refcount.h:351 [inline]  ref_tracker_free+0x710/0x820 lib/ref_tracker.c:236  netdev_tracker_free include/linux/netdevice.h:4156 [inline]  netdev_put include/linux/netdevice.h:4173 [inline]  netdev_put include/linux/netdevice.h:4169 [inline]  ax25_release+0x33f/0xa10 net/ax25/af_ax25.c:1069  __sock_release+0xb0/0x270 net/socket.c:640  sock_close+0x1c/0x30 net/socket.c:1408  ...  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xcd/0x250 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  ...  </TASK> ================================================================  Fix the implementation of ax25_setsockopt() by adding increment of refcounts for the new device bound\, and decrement of refcounts for the old unbound device.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53158,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  soc: qcom: geni-se: fix array underflow in geni_se_clk_tbl_get()  This loop is supposed to break if the frequency returned from clk_round_rate() is the same as on the previous iteration.  However\, that check doesn't make sense on the first iteration through the loop. It leads to reading before the start of these->clk_perf_tbl[] array.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21791,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  vrf: use RCU protection in l3mdev_l3_out()  l3mdev_l3_out() can be called without RCU being held:  raw_sendmsg()  ip_push_pending_frames()   ip_send_skb()    ip_local_out()     __ip_local_out()      l3mdev_ip_out()  Add rcu_read_lock() / rcu_read_unlock() pair to avoid a potential UAF.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-39191,linux-libc-dev,LOW,6.1.115-1,N/A,"An improper input validation flaw was found in the eBPF subsystem in the Linux kernel. The issue occurs due to a lack of proper validation of dynamic pointers within user-supplied eBPF programs prior to executing them. This may allow an attacker with CAP_BPF privileges to escalate privileges and execute arbitrary code in the context of the kernel.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21853,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: avoid holding freeze_mutex during mmap operation  We use map->freeze_mutex to prevent races between map_freeze() and memory mapping BPF map contents with writable permissions. The way we naively do this means we'll hold freeze_mutex for entire duration of all the mm and VMA manipulations\, which is completely unnecessary. This can potentially also lead to deadlocks\, as reported by syzbot in [0].  So\, instead\, hold freeze_mutex only during writeability checks\, bump (proactively) ""write active"" count for the map\, unlock the mutex and proceed with mmap logic. And only if something went wrong during mmap logic\, then undo that ""write active"" counter increment.    [0] https://lore.kernel.org/bpf/678dcbc9.050a0220.303755.0066.GAE@google.com/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21790,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  vxlan: check vxlan_vnigroup_init() return value  vxlan_init() must check vxlan_vnigroup_init() success otherwise a crash happens later\, spotted by syzbot.  Oops: general protection fault\, probably for non-canonical address 0xdffffc000000002c: 0000 [#1] PREEMPT SMP KASAN NOPTI KASAN: null-ptr-deref in range [0x0000000000000160-0x0000000000000167] CPU: 0 UID: 0 PID: 7313 Comm: syz-executor147 Not tainted 6.14.0-rc1-syzkaller-00276-g69b54314c975 #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014  RIP: 0010:vxlan_vnigroup_uninit+0x89/0x500 drivers/net/vxlan/vxlan_vnifilter.c:912 Code: 00 48 8b 44 24 08 4c 8b b0 98 41 00 00 49 8d 86 60 01 00 00 48 89 c2 48 89 44 24 10 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 4d 04 00 00 49 8b 86 60 01 00 00 48 ba 00 00 00 RSP: 0018:ffffc9000cc1eea8 EFLAGS: 00010202 RAX: dffffc0000000000 RBX: 0000000000000001 RCX: ffffffff8672effb RDX: 000000000000002c RSI: ffffffff8672ecb9 RDI: ffff8880461b4f18 RBP: ffff8880461b4ef4 R08: 0000000000000001 R09: 0000000000000000 R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000020000 R13: ffff8880461b0d80 R14: 0000000000000000 R15: dffffc0000000000 FS:  00007fecfa95d6c0(0000) GS:ffff88806a600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fecfa95cfb8 CR3: 000000004472c000 CR4: 0000000000352ef0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   vxlan_uninit+0x1ab/0x200 drivers/net/vxlan/vxlan_core.c:2942   unregister_netdevice_many_notify+0x12d6/0x1f30 net/core/dev.c:11824   unregister_netdevice_many net/core/dev.c:11866 [inline]   unregister_netdevice_queue+0x307/0x3f0 net/core/dev.c:11736   register_netdevice+0x1829/0x1eb0 net/core/dev.c:10901   __vxlan_dev_create+0x7c6/0xa30 drivers/net/vxlan/vxlan_core.c:3981   vxlan_newlink+0xd1/0x130 drivers/net/vxlan/vxlan_core.c:4407   rtnl_newlink_create net/core/rtnetlink.c:3795 [inline]   __rtnl_newlink net/core/rtnetlink.c:3906 [inline]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43886,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add null check in resource_log_pipe_topology_update  [WHY] When switching from ""Extend"" to ""Second Display Only"" we sometimes call resource_get_otg_master_for_stream on a stream for the eDP\, which is disconnected. This leads to a null pointer dereference.  [HOW] Added a null check in dc_resource.c/resource_log_pipe_topology_update.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53155,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: fix uninitialized value in ocfs2_file_read_iter()  Syzbot has reported the following KMSAN splat:  BUG: KMSAN: uninit-value in ocfs2_file_read_iter+0x9a4/0xf80  ocfs2_file_read_iter+0x9a4/0xf80  __io_read+0x8d4/0x20f0  io_read+0x3e/0xf0  io_issue_sqe+0x42b/0x22c0  io_wq_submit_work+0xaf9/0xdc0  io_worker_handle_work+0xd13/0x2110  io_wq_worker+0x447/0x1410  ret_from_fork+0x6f/0x90  ret_from_fork_asm+0x1a/0x30  Uninit was created at:  __alloc_pages_noprof+0x9a7/0xe00  alloc_pages_mpol_noprof+0x299/0x990  alloc_pages_noprof+0x1bf/0x1e0  allocate_slab+0x33a/0x1250  ___slab_alloc+0x12ef/0x35e0  kmem_cache_alloc_bulk_noprof+0x486/0x1330  __io_alloc_req_refill+0x84/0x560  io_submit_sqes+0x172f/0x2f30  __se_sys_io_uring_enter+0x406/0x41c0  __x64_sys_io_uring_enter+0x11f/0x1a0  x64_sys_call+0x2b54/0x3ba0  do_syscall_64+0xcd/0x1e0  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Since an instance of 'struct kiocb' may be passed from the block layer with 'private' field uninitialized\, introduce 'ocfs2_iocb_init_rw_locked()' and use it from where 'ocfs2_dio_end_io()' might take care\, i.e. in 'ocfs2_file_read_iter()' and 'ocfs2_file_write_iter()'.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53154,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  clk: clk-apple-nco: Add NULL check in applnco_probe  Add NULL check in applnco_probe\, to handle kernel NULL pointer dereference error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53157,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  firmware: arm_scpi: Check the DVFS OPP count returned by the firmware  Fix a kernel crash with the below call trace when the SCPI firmware returns OPP count of zero.  dvfs_info.opp_count may be zero on some platforms during the reboot test\, and the kernel will crash after dereferencing the pointer to kcalloc(info->count\, sizeof(*opp)\, GFP_KERNEL).    |  Unable to handle kernel NULL pointer dereference at virtual address 0000000000000028   |  Mem abort info:   |    ESR = 0x96000004   |    Exception class = DABT (current EL)\, IL = 32 bits   |    SET = 0\, FnV = 0   |    EA = 0\, S1PTW = 0   |  Data abort info:   |    ISV = 0\, ISS = 0x00000004   |    CM = 0\, WnR = 0   |  user pgtable: 4k pages\, 48-bit VAs\, pgdp = 00000000faefa08c   |  [0000000000000028] pgd=0000000000000000   |  Internal error: Oops: 96000004 [#1] SMP   |  scpi-hwmon: probe of PHYT000D:00 failed with error -110   |  Process systemd-udevd (pid: 1701\, stack limit = 0x00000000aaede86c)   |  CPU: 2 PID: 1701 Comm: systemd-udevd Not tainted 4.19.90+ #1   |  Hardware name: PHYTIUM LTD Phytium FT2000/4/Phytium FT2000/4\, BIOS   |  pstate: 60000005 (nZCv daif -PAN -UAO)   |  pc : scpi_dvfs_recalc_rate+0x40/0x58 [clk_scpi]   |  lr : clk_register+0x438/0x720   |  Call trace:   |   scpi_dvfs_recalc_rate+0x40/0x58 [clk_scpi]   |   devm_clk_hw_register+0x50/0xa0   |   scpi_clk_ops_init.isra.2+0xa0/0x138 [clk_scpi]   |   scpi_clocks_probe+0x528/0x70c [clk_scpi]   |   platform_drv_probe+0x58/0xa8   |   really_probe+0x260/0x3d0   |   driver_probe_device+0x12c/0x148   |   device_driver_attach+0x74/0x98   |   __driver_attach+0xb4/0xe8   |   bus_for_each_dev+0x88/0xe0   |   driver_attach+0x30/0x40   |   bus_add_driver+0x178/0x2b0   |   driver_register+0x64/0x118   |   __platform_driver_register+0x54/0x60   |   scpi_clocks_driver_init+0x24/0x1000 [clk_scpi]   |   do_one_initcall+0x54/0x220   |   do_init_module+0x54/0x1c8   |   load_module+0x14a4/0x1668   |   __se_sys_finit_module+0xf8/0x110   |   __arm64_sys_finit_module+0x24/0x30   |   el0_svc_common+0x78/0x170   |   el0_svc_handler+0x38/0x78   |   el0_svc+0x8/0x340   |  Code: 937d7c00 a94153f3 a8c27bfd f9400421 (b8606820)   |  ---[ end trace 06feb22469d89fa8 ]---   |  Kernel panic - not syncing: Fatal exception   |  SMP: stopping secondary CPUs   |  Kernel Offset: disabled   |  CPU features: 0x10\,a0002008   |  Memory Limit: none",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-47809,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dlm: fix possible lkb_resource null dereference  This patch fixes a possible null pointer dereference when this function is called from request_lock() as lkb->lkb_resource is not assigned yet\, only after validate_lock_args() by calling attach_lkb(). Another issue is that a resource name could be a non printable bytearray and we cannot assume to be ASCII coded.  The log functionality is probably never being hit when DLM is used in normal way and no debug logging is enabled. The null pointer dereference can only occur on a new created lkb that does not have the resource assigned yet\, it probably never hits the null pointer dereference but we should be sure that other changes might not change this behaviour and we actually can hit the mentioned null pointer dereference.  In this patch we just drop the printout of the resource name\, the lkb id is enough to make a possible connection to a resource name if this exists.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53156,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath9k: add range check for conn_rsp_epid in htc_connect_service()  I found the following bug in my fuzzer:    UBSAN: array-index-out-of-bounds in drivers/net/wireless/ath/ath9k/htc_hst.c:26:51   index 255 is out of range for type 'htc_endpoint [22]'   CPU: 0 UID: 0 PID: 8 Comm: kworker/0:0 Not tainted 6.11.0-rc6-dirty #14   Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014   Workqueue: events request_firmware_work_func   Call Trace:    <TASK>    dump_stack_lvl+0x180/0x1b0    __ubsan_handle_out_of_bounds+0xd4/0x130    htc_issue_send.constprop.0+0x20c/0x230    ? _raw_spin_unlock_irqrestore+0x3c/0x70    ath9k_wmi_cmd+0x41d/0x610    ? mark_held_locks+0x9f/0xe0    ...  Since this bug has been confirmed to be caused by insufficient verification of conn_rsp_epid\, I think it would be appropriate to add a range check for conn_rsp_epid to htc_connect_service() to prevent the bug from occurring.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53151,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  svcrdma: Address an integer overflow  Dan Carpenter reports: > Commit 78147ca8b4a9 (""svcrdma: Add a ""parsed chunk list"" data > structure"") from Jun 22\, 2020 (linux-next)\, leads to the following > Smatch static checker warning: > >\tnet/sunrpc/xprtrdma/svc_rdma_recvfrom.c:498 xdr_check_write_chunk() >\twarn: potential user controlled sizeof overflow 'segcount * 4 * 4' > > net/sunrpc/xprtrdma/svc_rdma_recvfrom.c >     488 static bool xdr_check_write_chunk(struct svc_rdma_recv_ctxt *rctxt) >     489 { >     490         u32 segcount; >     491         __be32 *p; >     492 >     493         if (xdr_stream_decode_u32(&rctxt->rc_stream\, &segcount)) >                                                               ^^^^^^^^ > >     494                 return false; >     495 >     496         /* A bogus segcount causes this buffer overflow check to fail. */ >     497         p = xdr_inline_decode(&rctxt->rc_stream\, > --> 498                               segcount * rpcrdma_segment_maxsz * sizeof(*p)); > > > segcount is an untrusted u32.  On 32bit systems anything >= SIZE_MAX / 16 will > have an integer overflow and some those values will be accepted by > xdr_inline_decode().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38611,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: i2c: et8ek8: Don't strip remove function when driver is builtin  Using __exit for the remove function results in the remove callback being discarded with CONFIG_VIDEO_ET8EK8=y. When such a device gets unbound (e.g. using sysfs or hotplug)\, the driver is just removed without the cleanup being performed. This results in resource leaks. Fix it by compiling in the remove callback unconditionally.  This also fixes a W=1 modpost warning:  \tWARNING: modpost: drivers/media/i2c/et8ek8/et8ek8: section mismatch in reference: et8ek8_i2c_driver+0x10 (section: .data) -> et8ek8_remove (section: .exit.text)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21858,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  geneve: Fix use-after-free in geneve_find_dev().  syzkaller reported a use-after-free in geneve_find_dev() [0] without repro.  geneve_configure() links struct geneve_dev.next to net_generic(net\, geneve_net_id)->geneve_list.  The net here could differ from dev_net(dev) if IFLA_NET_NS_PID\, IFLA_NET_NS_FD\, or IFLA_TARGET_NETNSID is set.  When dev_net(dev) is dismantled\, geneve_exit_batch_rtnl() finally calls unregister_netdevice_queue() for each dev in the netns\, and later the dev is freed.  However\, its geneve_dev.next is still linked to the backend UDP socket netns.  Then\, use-after-free will occur when another geneve dev is created in the netns.  Let's call geneve_dellink() instead in geneve_destroy_tunnels().  [0]: BUG: KASAN: slab-use-after-free in geneve_find_dev drivers/net/geneve.c:1295 [inline] BUG: KASAN: slab-use-after-free in geneve_configure+0x234/0x858 drivers/net/geneve.c:1343 Read of size 2 at addr ffff000054d6ee24 by task syz.1.4029/13441  CPU: 1 UID: 0 PID: 13441 Comm: syz.1.4029 Not tainted 6.13.0-g0ad9617c78ac #24 dc35ca22c79fb82e8e7bc5c9c9adafea898b1e3d Hardware name: linux\,dummy-virt (DT) Call trace:  show_stack+0x38/0x50 arch/arm64/kernel/stacktrace.c:466 (C)  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0xbc/0x108 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:378 [inline]  print_report+0x16c/0x6f0 mm/kasan/report.c:489  kasan_report+0xc0/0x120 mm/kasan/report.c:602  __asan_report_load2_noabort+0x20/0x30 mm/kasan/report_generic.c:379  geneve_find_dev drivers/net/geneve.c:1295 [inline]  geneve_configure+0x234/0x858 drivers/net/geneve.c:1343  geneve_newlink+0xb8/0x128 drivers/net/geneve.c:1634  rtnl_newlink_create+0x23c/0x868 net/core/rtnetlink.c:3795  __rtnl_newlink net/core/rtnetlink.c:3906 [inline]  rtnl_newlink+0x1054/0x1630 net/core/rtnetlink.c:4021  rtnetlink_rcv_msg+0x61c/0x918 net/core/rtnetlink.c:6911  netlink_rcv_skb+0x1dc/0x398 net/netlink/af_netlink.c:2543  rtnetlink_rcv+0x34/0x50 net/core/rtnetlink.c:6938  netlink_unicast_kernel net/netlink/af_netlink.c:1322 [inline]  netlink_unicast+0x618/0x838 net/netlink/af_netlink.c:1348  netlink_sendmsg+0x5fc/0x8b0 net/netlink/af_netlink.c:1892  sock_sendmsg_nosec net/socket.c:713 [inline]  __sock_sendmsg net/socket.c:728 [inline]  ____sys_sendmsg+0x410/0x6f8 net/socket.c:2568  ___sys_sendmsg+0x178/0x1d8 net/socket.c:2622  __sys_sendmsg net/socket.c:2654 [inline]  __do_sys_sendmsg net/socket.c:2659 [inline]  __se_sys_sendmsg net/socket.c:2657 [inline]  __arm64_sys_sendmsg+0x12c/0x1c8 net/socket.c:2657  __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]  invoke_syscall+0x90/0x278 arch/arm64/kernel/syscall.c:49  el0_svc_common+0x13c/0x250 arch/arm64/kernel/syscall.c:132  do_el0_svc+0x54/0x70 arch/arm64/kernel/syscall.c:151  el0_svc+0x4c/0xa8 arch/arm64/kernel/entry-common.c:744  el0t_64_sync_handler+0x78/0x108 arch/arm64/kernel/entry-common.c:762  el0t_64_sync+0x198/0x1a0 arch/arm64/kernel/entry.S:600  Allocated by task 13247:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x30/0x68 mm/kasan/common.c:68  kasan_save_alloc_info+0x44/0x58 mm/kasan/generic.c:568  poison_kmalloc_redzone mm/kasan/common.c:377 [inline]  __kasan_kmalloc+0x84/0xa0 mm/kasan/common.c:394  kasan_kmalloc include/linux/kasan.h:260 [inline]  __do_kmalloc_node mm/slub.c:4298 [inline]  __kmalloc_node_noprof+0x2a0/0x560 mm/slub.c:4304  __kvmalloc_node_noprof+0x9c/0x230 mm/util.c:645  alloc_netdev_mqs+0xb8/0x11a0 net/core/dev.c:11470  rtnl_create_link+0x2b8/0xb50 net/core/rtnetlink.c:3604  rtnl_newlink_create+0x19c/0x868 net/core/rtnetlink.c:3780  __rtnl_newlink net/core/rtnetlink.c:3906 [inline]  rtnl_newlink+0x1054/0x1630 net/core/rtnetlink.c:4021  rtnetlink_rcv_msg+0x61c/0x918 net/core/rtnetlink.c:6911  netlink_rcv_skb+0x1dc/0x398 net/netlink/af_netlink.c:2543  rtnetlink_rcv+0x34/0x50 net/core/rtnetlink.c:6938  netlink_unicast_kernel net/netlink/af_n ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-11696,libnss3,LOW,2:3.87.1-1+deb12u1,N/A,"Heap-based buffer overflow in the __hash_open function in lib/dbm/src/hash.c in Mozilla Network Security Services (NSS) allows context-dependent attackers to have unspecified impact using a crafted cert8.db file.",|tykio/midsommar|
CVE-2025-21859,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  USB: gadget: f_midi: f_midi_complete to call queue_work  When using USB MIDI\, a lock is attempted to be acquired twice through a re-entrant call to f_midi_transmit\, causing a deadlock.  Fix it by using queue_work() to schedule the inner f_midi_transmit() via a high priority work queue from the completion handler.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53150,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: usb-audio: Fix out of bounds reads when finding clock sources  The current USB-audio driver code doesn't check bLength of each descriptor at traversing for clock descriptors.  That is\, when a device provides a bogus descriptor with a shorter bLength\, the driver might hit out-of-bounds reads.  For addressing it\, this patch adds sanity checks to the validator functions for the clock descriptor traversal.  When the descriptor length is shorter than expected\, it's skipped in the loop.  For the clock source and clock multiplier descriptors\, we can just check bLength against the sizeof() of each descriptor type. OTOH\, the clock selector descriptor of UAC2 and UAC3 has an array of bNrInPins elements and two more fields at its tail\, hence those have to be checked in addition to the sizeof() check.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-11697,libnss3,LOW,2:3.87.1-1+deb12u1,N/A,"The __hash_open function in hash.c:229 in Mozilla Network Security Services (NSS) allows context-dependent attackers to cause a denial of service (floating point exception and crash) via a crafted cert8.db file.",|tykio/midsommar|
CVE-2025-22109,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ax25: Remove broken autobind  Binding AX25 socket by using the autobind feature leads to memory leaks in ax25_connect() and also refcount leaks in ax25_release(). Memory leak was detected with kmemleak:  ================================================================ unreferenced object 0xffff8880253cd680 (size 96): backtrace: __kmalloc_node_track_caller_noprof (./include/linux/kmemleak.h:43) kmemdup_noprof (mm/util.c:136) ax25_rt_autobind (net/ax25/ax25_route.c:428) ax25_connect (net/ax25/af_ax25.c:1282) __sys_connect_file (net/socket.c:2045) __sys_connect (net/socket.c:2064) __x64_sys_connect (net/socket.c:2067) do_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83) entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:130) ================================================================  When socket is bound\, refcounts must be incremented the way it is done in ax25_bind() and ax25_setsockopt() (SO_BINDTODEVICE). In case of autobind\, the refcounts are not incremented.  This bug leads to the following issue reported by Syzkaller:  ================================================================ ax25_connect(): syz-executor318 uses autobind\, please contact jreuter@yaina.de ------------[ cut here ]------------ refcount_t: decrement hit 0; leaking memory. WARNING: CPU: 0 PID: 5317 at lib/refcount.c:31 refcount_warn_saturate+0xfa/0x1d0 lib/refcount.c:31 Modules linked in: CPU: 0 UID: 0 PID: 5317 Comm: syz-executor318 Not tainted 6.14.0-rc4-syzkaller-00278-gece144f151ac #0 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014 RIP: 0010:refcount_warn_saturate+0xfa/0x1d0 lib/refcount.c:31 ... Call Trace:  <TASK>  __refcount_dec include/linux/refcount.h:336 [inline]  refcount_dec include/linux/refcount.h:351 [inline]  ref_tracker_free+0x6af/0x7e0 lib/ref_tracker.c:236  netdev_tracker_free include/linux/netdevice.h:4302 [inline]  netdev_put include/linux/netdevice.h:4319 [inline]  ax25_release+0x368/0x960 net/ax25/af_ax25.c:1080  __sock_release net/socket.c:647 [inline]  sock_close+0xbc/0x240 net/socket.c:1398  __fput+0x3e9/0x9f0 fs/file_table.c:464  __do_sys_close fs/open.c:1580 [inline]  __se_sys_close fs/open.c:1565 [inline]  __x64_sys_close+0x7f/0x110 fs/open.c:1565  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  ...  </TASK> ================================================================  Considering the issues above and the comments left in the code that say: ""check if we can remove this feature. It is broken.""; ""autobinding in this may or may not work""; - it is better to completely remove this feature than to fix it because it is broken and leads to various kinds of memory bugs.  Now calling connect() without first binding socket will result in an error (-EINVAL). Userspace software that relies on the autobind feature might get broken. However\, this feature does not seem widely used with this specific driver as it was not reliable at any point of time\, and it is already broken anyway. E.g. ax25-tools and ax25-apps packages for popular distributions do not use the autobind feature for AF_AX25.  Found by Linux Verification Center (linuxtesting.org) with Syzkaller.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21799,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: ethernet: ti: am65-cpsw: fix freeing IRQ in am65_cpsw_nuss_remove_tx_chns()  When getting the IRQ we use k3_udma_glue_tx_get_irq() which returns negative error value on error. So not NULL check is not sufficient to deteremine if IRQ is valid. Check that IRQ is greater then zero to ensure it is valid.  There is no issue at probe time but at runtime user can invoke .set_channels which results in the following call chain. am65_cpsw_set_channels()  am65_cpsw_nuss_update_tx_rx_chns()   am65_cpsw_nuss_remove_tx_chns()   am65_cpsw_nuss_init_tx_chns()  At this point if am65_cpsw_nuss_init_tx_chns() fails due to k3_udma_glue_tx_get_irq() then tx_chn->irq will be set to a negative value.  Then\, at subsequent .set_channels with higher channel count we will attempt to free an invalid IRQ in am65_cpsw_nuss_remove_tx_chns() leading to a kernel warning.  The issue is present in the original commit that introduced this driver\, although there\, am65_cpsw_nuss_update_tx_rx_chns() existed as am65_cpsw_nuss_update_tx_chns().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-11695,libnss3,LOW,2:3.87.1-1+deb12u1,N/A,"Heap-based buffer overflow in the alloc_segs function in lib/dbm/src/hash.c in Mozilla Network Security Services (NSS) allows context-dependent attackers to have unspecified impact using a crafted cert8.db file.",|tykio/midsommar|
CVE-2017-9937,libjbig0,LOW,2.1-6.1,N/A,"In LibTIFF 4.0.8\, there is a memory malloc failure in tif_jbig.c. A crafted TIFF document can lead to an abort resulting in a remote denial of service attack.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57951,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  hrtimers: Handle CPU state correctly on hotplug  Consider a scenario where a CPU transitions from CPUHP_ONLINE to halfway through a CPU hotunplug down to CPUHP_HRTIMERS_PREPARE\, and then back to CPUHP_ONLINE:  Since hrtimers_prepare_cpu() does not run\, cpu_base.hres_active remains set to 1 throughout. However\, during a CPU unplug operation\, the tick and the clockevents are shut down at CPUHP_AP_TICK_DYING. On return to the online state\, for instance CFS incorrectly assumes that the hrtick is already active\, and the chance of the clockevent device to transition to oneshot mode is also lost forever for the CPU\, unless it goes back to a lower state than CPUHP_HRTIMERS_PREPARE once.  This round-trip reveals another issue; cpu_base.online is not set to 1 after the transition\, which appears as a WARN_ON_ONCE in enqueue_hrtimer().  Aside of that\, the bulk of the per CPU state is not reset either\, which means there are dangling pointers in the worst case.  Address this by adding a corresponding startup() callback\, which resets the stale per CPU state and sets the online flag.  [ tglx: Make the new callback unconditionally available\, remove the online   \tmodification in the prepare() callback and clear the remaining   \tstate in the starting callback instead of the prepare callback ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57950,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Initialize denominator defaults to 1  [WHAT & HOW] Variables\, used as denominators and maybe not assigned to other values\, should be initialized to non-zero to avoid DIVIDE_BY_ZERO\, as reported by Coverity.  (cherry picked from commit e2c4c6c10542ccfe4a0830bb6c9fd5b177b7bbb7)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26947,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ARM: 9359/1: flush: check if the folio is reserved for no-mapping addresses  Since commit a4d5613c4dc6 (""arm: extend pfn_valid to take into account freed memory map alignment"") changes the semantics of pfn_valid() to check presence of the memory map for a PFN. A valid page for an address which is reserved but not mapped by the kernel[1]\, the system crashed during some uio test with the following memory layout:   node   0: [mem 0x00000000c0a00000-0x00000000cc8fffff]  node   0: [mem 0x00000000d0000000-0x00000000da1fffff]  the uio layout is：0xc0900000\, 0x100000  the crash backtrace like:    Unable to handle kernel paging request at virtual address bff00000   [...]   CPU: 1 PID: 465 Comm: startapp.bin Tainted: G           O      5.10.0 #1   Hardware name: Generic DT based system   PC is at b15_flush_kern_dcache_area+0x24/0x3c   LR is at __sync_icache_dcache+0x6c/0x98   [...]    (b15_flush_kern_dcache_area) from (__sync_icache_dcache+0x6c/0x98)    (__sync_icache_dcache) from (set_pte_at+0x28/0x54)    (set_pte_at) from (remap_pfn_range+0x1a0/0x274)    (remap_pfn_range) from (uio_mmap+0x184/0x1b8 [uio])    (uio_mmap [uio]) from (__mmap_region+0x264/0x5f4)    (__mmap_region) from (__do_mmap_mm+0x3ec/0x440)    (__do_mmap_mm) from (do_mmap+0x50/0x58)    (do_mmap) from (vm_mmap_pgoff+0xfc/0x188)    (vm_mmap_pgoff) from (ksys_mmap_pgoff+0xac/0xc4)    (ksys_mmap_pgoff) from (ret_fast_syscall+0x0/0x5c)   Code: e0801001 e2423001 e1c00003 f57ff04f (ee070f3e)   ---[ end trace 09cf0734c3805d52 ]---   Kernel panic - not syncing: Fatal exception  So check if PG_reserved was set to solve this issue.  [1]: https://lore.kernel.org/lkml/Zbtdue57RO0QScJM@linux.ibm.com/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26944,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: zoned: fix use-after-free in do_zone_finish()  Shinichiro reported the following use-after-free triggered by the device replace operation in fstests btrfs/070.   BTRFS info (device nullb1): scrub: finished on devid 1 with status: 0  ==================================================================  BUG: KASAN: slab-use-after-free in do_zone_finish+0x91a/0xb90 [btrfs]  Read of size 8 at addr ffff8881543c8060 by task btrfs-cleaner/3494007   CPU: 0 PID: 3494007 Comm: btrfs-cleaner Tainted: G        W          6.8.0-rc5-kts #1  Hardware name: Supermicro Super Server/X11SPi-TF\, BIOS 3.3 02/21/2020  Call Trace:   <TASK>   dump_stack_lvl+0x5b/0x90   print_report+0xcf/0x670   ? __virt_addr_valid+0x200/0x3e0   kasan_report+0xd8/0x110   ? do_zone_finish+0x91a/0xb90 [btrfs]   ? do_zone_finish+0x91a/0xb90 [btrfs]   do_zone_finish+0x91a/0xb90 [btrfs]   btrfs_delete_unused_bgs+0x5e1/0x1750 [btrfs]   ? __pfx_btrfs_delete_unused_bgs+0x10/0x10 [btrfs]   ? btrfs_put_root+0x2d/0x220 [btrfs]   ? btrfs_clean_one_deleted_snapshot+0x299/0x430 [btrfs]   cleaner_kthread+0x21e/0x380 [btrfs]   ? __pfx_cleaner_kthread+0x10/0x10 [btrfs]   kthread+0x2e3/0x3c0   ? __pfx_kthread+0x10/0x10   ret_from_fork+0x31/0x70   ? __pfx_kthread+0x10/0x10   ret_from_fork_asm+0x1b/0x30   </TASK>   Allocated by task 3493983:   kasan_save_stack+0x33/0x60   kasan_save_track+0x14/0x30   __kasan_kmalloc+0xaa/0xb0   btrfs_alloc_device+0xb3/0x4e0 [btrfs]   device_list_add.constprop.0+0x993/0x1630 [btrfs]   btrfs_scan_one_device+0x219/0x3d0 [btrfs]   btrfs_control_ioctl+0x26e/0x310 [btrfs]   __x64_sys_ioctl+0x134/0x1b0   do_syscall_64+0x99/0x190   entry_SYSCALL_64_after_hwframe+0x6e/0x76   Freed by task 3494056:   kasan_save_stack+0x33/0x60   kasan_save_track+0x14/0x30   kasan_save_free_info+0x3f/0x60   poison_slab_object+0x102/0x170   __kasan_slab_free+0x32/0x70   kfree+0x11b/0x320   btrfs_rm_dev_replace_free_srcdev+0xca/0x280 [btrfs]   btrfs_dev_replace_finishing+0xd7e/0x14f0 [btrfs]   btrfs_dev_replace_by_ioctl+0x1286/0x25a0 [btrfs]   btrfs_ioctl+0xb27/0x57d0 [btrfs]   __x64_sys_ioctl+0x134/0x1b0   do_syscall_64+0x99/0x190   entry_SYSCALL_64_after_hwframe+0x6e/0x76   The buggy address belongs to the object at ffff8881543c8000   which belongs to the cache kmalloc-1k of size 1024  The buggy address is located 96 bytes inside of   freed 1024-byte region [ffff8881543c8000\, ffff8881543c8400)   The buggy address belongs to the physical page:  page:00000000fe2c1285 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1543c8  head:00000000fe2c1285 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0  flags: 0x17ffffc0000840(slab|head|node=0|zone=2|lastcpupid=0x1fffff)  page_type: 0xffffffff()  raw: 0017ffffc0000840 ffff888100042dc0 ffffea0019e8f200 dead000000000002  raw: 0000000000000000 0000000000100010 00000001ffffffff 0000000000000000  page dumped because: kasan: bad access detected   Memory state around the buggy address:   ffff8881543c7f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ffff8881543c7f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >ffff8881543c8000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb                                                         ^   ffff8881543c8080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb   ffff8881543c8100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb  This UAF happens because we're accessing stale zone information of a already removed btrfs_device in do_zone_finish().  The sequence of events is as follows:  btrfs_dev_replace_start   btrfs_scrub_dev    btrfs_dev_replace_finishing     btrfs_dev_replace_update_device_in_mapping_tree <-- devices replaced     btrfs_rm_dev_replace_free_srcdev      btrfs_free_device                              <-- device freed  cleaner_kthread  btrfs_delete_unused_bgs   btrfs_zone_finish    do_zone_finish              <-- refers the freed device  The reason for this is that we're using a ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57952,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Revert ""libfs: fix infinite directory reads for offset dir""  The current directory offset allocator (based on mtree_alloc_cyclic) stores the next offset value to return in octx->next_offset. This mechanism typically returns values that increase monotonically over time. Eventually\, though\, the newly allocated offset value wraps back to a low number (say\, 2) which is smaller than other already- allocated offset values.  Yu Kuai <yukuai3@huawei.com> reports that\, after commit 64a7ce76fb90 (""libfs: fix infinite directory reads for offset dir"")\, if a directory's offset allocator wraps\, existing entries are no longer visible via readdir/getdents because offset_readdir() stops listing entries once an entry's offset is larger than octx->next_offset. These entries vanish persistently -- they can be looked up\, but will never again appear in readdir(3) output.  The reason for this is that the commit treats directory offsets as monotonically increasing integer values rather than opaque cookies\, and introduces this comparison:  \tif (dentry2offset(dentry) >= last_index) {  On 64-bit platforms\, the directory offset value upper bound is 2^63 - 1. Directory offsets will monotonically increase for millions of years without wrapping.  On 32-bit platforms\, however\, LONG_MAX is 2^31 - 1. The allocator can wrap after only a few weeks (at worst).  Revert commit 64a7ce76fb90 (""libfs: fix infinite directory reads for offset dir"") to prepare for a fix that can work properly on 32-bit systems and might apply to recent LTS kernels where shmem employs the simple_offset mechanism.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-24864,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A race condition was found in the Linux kernel's media/dvb-core in dvbdmx_write() function. This can result in a null pointer dereference issue\, possibly leading to a kernel panic or denial of service issue.     ",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2013-7445,linux-libc-dev,HIGH,6.1.115-1,N/A,"The Direct Rendering Manager (DRM) subsystem in the Linux kernel through 4.x mishandles requests for Graphics Execution Manager (GEM) objects\, which allows context-dependent attackers to cause a denial of service (memory consumption) via an application that processes graphics data\, as demonstrated by JavaScript code that creates many CANVAS elements for rendering by Chrome or Firefox.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21689,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  USB: serial: quatech2: fix null-ptr-deref in qt2_process_read_urb()  This patch addresses a null-ptr-deref in qt2_process_read_urb() due to an incorrect bounds check in the following:         if (newport > serial->num_ports) {                dev_err(&port->dev\,                        ""%s - port change to invalid port: %i\\n""\,                        __func__\, newport);                break;        }  The condition doesn't account for the valid range of the serial->port buffer\, which is from 0 to serial->num_ports - 1. When newport is equal to serial->num_ports\, the assignment of ""port"" in the following code is out-of-bounds and NULL:         serial_priv->current_port = newport;        port = serial->port[serial_priv->current_port];  The fix checks if newport is greater than or equal to serial->num_ports indicating it is out-of-bounds.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21688,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/v3d: Assign job pointer to NULL before signaling the fence  In commit e4b5ccd392b9 (""drm/v3d: Ensure job pointer is set to NULL after job completion"")\, we introduced a change to assign the job pointer to NULL after completing a job\, indicating job completion.  However\, this approach created a race condition between the DRM scheduler workqueue and the IRQ execution thread. As soon as the fence is signaled in the IRQ execution thread\, a new job starts to be executed. This results in a race condition where the IRQ execution thread sets the job pointer to NULL simultaneously as the `run_job()` function assigns a new job to the pointer.  This race condition can lead to a NULL pointer dereference if the IRQ execution thread sets the job pointer to NULL after `run_job()` assigns it to the new job. When the new job completes and the GPU emits an interrupt\, `v3d_irq()` is triggered\, potentially causing a crash.  [  466.310099] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000c0 [  466.318928] Mem abort info: [  466.321723]   ESR = 0x0000000096000005 [  466.325479]   EC = 0x25: DABT (current EL)\, IL = 32 bits [  466.330807]   SET = 0\, FnV = 0 [  466.333864]   EA = 0\, S1PTW = 0 [  466.337010]   FSC = 0x05: level 1 translation fault [  466.341900] Data abort info: [  466.344783]   ISV = 0\, ISS = 0x00000005\, ISS2 = 0x00000000 [  466.350285]   CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0 [  466.355350]   GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0 [  466.360677] user pgtable: 4k pages\, 39-bit VAs\, pgdp=0000000089772000 [  466.367140] [00000000000000c0] pgd=0000000000000000\, p4d=0000000000000000\, pud=0000000000000000 [  466.375875] Internal error: Oops: 0000000096000005 [#1] PREEMPT SMP [  466.382163] Modules linked in: rfcomm snd_seq_dummy snd_hrtimer snd_seq snd_seq_device algif_hash algif_skcipher af_alg bnep binfmt_misc vc4 snd_soc_hdmi_codec drm_display_helper cec brcmfmac_wcc spidev rpivid_hevc(C) drm_client_lib brcmfmac hci_uart drm_dma_helper pisp_be btbcm brcmutil snd_soc_core aes_ce_blk v4l2_mem2mem bluetooth aes_ce_cipher snd_compress videobuf2_dma_contig ghash_ce cfg80211 gf128mul snd_pcm_dmaengine videobuf2_memops ecdh_generic sha2_ce ecc videobuf2_v4l2 snd_pcm v3d sha256_arm64 rfkill videodev snd_timer sha1_ce libaes gpu_sched snd videobuf2_common sha1_generic drm_shmem_helper mc rp1_pio drm_kms_helper raspberrypi_hwmon spi_bcm2835 gpio_keys i2c_brcmstb rp1 raspberrypi_gpiomem rp1_mailbox rp1_adc nvmem_rmem uio_pdrv_genirq uio i2c_dev drm ledtrig_pattern drm_panel_orientation_quirks backlight fuse dm_mod ip_tables x_tables ipv6 [  466.458429] CPU: 0 UID: 1000 PID: 2008 Comm: chromium Tainted: G         C         6.13.0-v8+ #18 [  466.467336] Tainted: [C]=CRAP [  466.470306] Hardware name: Raspberry Pi 5 Model B Rev 1.0 (DT) [  466.476157] pstate: 404000c9 (nZcv daIF +PAN -UAO -TCO -DIT -SSBS BTYPE=--) [  466.483143] pc : v3d_irq+0x118/0x2e0 [v3d] [  466.487258] lr : __handle_irq_event_percpu+0x60/0x228 [  466.492327] sp : ffffffc080003ea0 [  466.495646] x29: ffffffc080003ea0 x28: ffffff80c0c94200 x27: 0000000000000000 [  466.502807] x26: ffffffd08dd81d7b x25: ffffff80c0c94200 x24: ffffff8003bdc200 [  466.509969] x23: 0000000000000001 x22: 00000000000000a7 x21: 0000000000000000 [  466.517130] x20: ffffff8041bb0000 x19: 0000000000000001 x18: 0000000000000000 [  466.524291] x17: ffffffafadfb0000 x16: ffffffc080000000 x15: 0000000000000000 [  466.531452] x14: 0000000000000000 x13: 0000000000000000 x12: 0000000000000000 [  466.538613] x11: 0000000000000000 x10: 0000000000000000 x9 : ffffffd08c527eb0 [  466.545777] x8 : 0000000000000000 x7 : 0000000000000000 x6 : 0000000000000000 [  466.552941] x5 : ffffffd08c4100d0 x4 : ffffffafadfb0000 x3 : ffffffc080003f70 [  466.560102] x2 : ffffffc0829e8058 x1 : 0000000000000001 x0 : 0000000000000000 [  466.567263] Call trace: [  466.569711]  v3d_irq+0x118/0x2e0 [v3d] (P) [  466. ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-12243,libgnutls30,MEDIUM,3.7.9-2+deb12u3,3.7.9-2+deb12u4,"A flaw was found in GnuTLS\, which relies on libtasn1 for ASN.1 data processing. Due to an inefficient algorithm in libtasn1\, decoding certain DER-encoded certificate data can take excessive time\, leading to increased resource consumption. This flaw allows a remote attacker to send a specially crafted certificate\, causing GnuTLS to become unresponsive or slow\, resulting in a denial-of-service condition.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22008,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  regulator: check that dummy regulator has been probed before using it  Due to asynchronous driver probing there is a chance that the dummy regulator hasn't already been probed when first accessing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41013,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  xfs: don't walk off the end of a directory data block  This adds sanity checks for xfs_dir2_data_unused and xfs_dir2_data_entry to make sure don't stray beyond valid memory region. Before patching\, the loop simply checks that the start offset of the dup and dep is within the range. So in a crafted image\, if last entry is xfs_dir2_data_unused\, we can change dup->length to dup->length-1 and leave 1 byte of space. In the next traversal\, this space will be considered as dup or dep. We may encounter an out of bound read when accessing the fixed members.  In the patch\, we make sure that the remaining bytes large enough to hold an unused entry before accessing xfs_dir2_data_unused and xfs_dir2_data_unused is XFS_DIR2_DATA_ALIGN byte aligned. We also make sure that the remaining bytes large enough to hold a dirent with a single-byte name before accessing xfs_dir2_data_entry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22007,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: Fix error code in chan_alloc_skb_cb()  The chan_alloc_skb_cb() function is supposed to return error pointers on error.  Returning NULL will lead to a NULL dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21684,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  gpio: xilinx: Convert gpio_lock to raw spinlock  irq_chip functions may be called in raw spinlock context. Therefore\, we must also use a raw spinlock for our own internal locking.  This fixes the following lockdep splat:  [    5.349336] ============================= [    5.353349] [ BUG: Invalid wait context ] [    5.357361] 6.13.0-rc5+ #69 Tainted: G        W [    5.363031] ----------------------------- [    5.367045] kworker/u17:1/44 is trying to lock: [    5.371587] ffffff88018b02c0 (&chip->gpio_lock){....}-{3:3}\, at: xgpio_irq_unmask (drivers/gpio/gpio-xilinx.c:433 (discriminator 8)) [    5.380079] other info that might help us debug this: [    5.385138] context-{5:5} [    5.387762] 5 locks held by kworker/u17:1/44: [    5.392123] #0: ffffff8800014958 ((wq_completion)events_unbound){+.+.}-{0:0}\, at: process_one_work (kernel/workqueue.c:3204) [    5.402260] #1: ffffffc082fcbdd8 (deferred_probe_work){+.+.}-{0:0}\, at: process_one_work (kernel/workqueue.c:3205) [    5.411528] #2: ffffff880172c900 (&dev->mutex){....}-{4:4}\, at: __device_attach (drivers/base/dd.c:1006) [    5.419929] #3: ffffff88039c8268 (request_class#2){+.+.}-{4:4}\, at: __setup_irq (kernel/irq/internals.h:156 kernel/irq/manage.c:1596) [    5.428331] #4: ffffff88039c80c8 (lock_class#2){....}-{2:2}\, at: __setup_irq (kernel/irq/manage.c:1614) [    5.436472] stack backtrace: [    5.439359] CPU: 2 UID: 0 PID: 44 Comm: kworker/u17:1 Tainted: G        W          6.13.0-rc5+ #69 [    5.448690] Tainted: [W]=WARN [    5.451656] Hardware name: xlnx\,zynqmp (DT) [    5.455845] Workqueue: events_unbound deferred_probe_work_func [    5.461699] Call trace: [    5.464147] show_stack+0x18/0x24 C [    5.467821] dump_stack_lvl (lib/dump_stack.c:123) [    5.471501] dump_stack (lib/dump_stack.c:130) [    5.474824] __lock_acquire (kernel/locking/lockdep.c:4828 kernel/locking/lockdep.c:4898 kernel/locking/lockdep.c:5176) [    5.478758] lock_acquire (arch/arm64/include/asm/percpu.h:40 kernel/locking/lockdep.c:467 kernel/locking/lockdep.c:5851 kernel/locking/lockdep.c:5814) [    5.482429] _raw_spin_lock_irqsave (include/linux/spinlock_api_smp.h:111 kernel/locking/spinlock.c:162) [    5.486797] xgpio_irq_unmask (drivers/gpio/gpio-xilinx.c:433 (discriminator 8)) [    5.490737] irq_enable (kernel/irq/internals.h:236 kernel/irq/chip.c:170 kernel/irq/chip.c:439 kernel/irq/chip.c:432 kernel/irq/chip.c:345) [    5.494060] __irq_startup (kernel/irq/internals.h:241 kernel/irq/chip.c:180 kernel/irq/chip.c:250) [    5.497645] irq_startup (kernel/irq/chip.c:270) [    5.501143] __setup_irq (kernel/irq/manage.c:1807) [    5.504728] request_threaded_irq (kernel/irq/manage.c:2208)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22004,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: atm: fix use after free in lec_send()  The ->send() operation frees skb so save the length before calling ->send() to avoid a use after free.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21687,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  vfio/platform: check the bounds of read/write syscalls  count and offset are passed from user space and not checked\, only offset is capped to 40 bits\, which can be used to read/write out of bounds of the device.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22005,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ipv6: Fix memleak of nhc_pcpu_rth_output in fib_check_nh_v6_gw().  fib_check_nh_v6_gw() expects that fib6_nh_init() cleans up everything when it fails.  Commit 7dd73168e273 (""ipv6: Always allocate pcpu memory in a fib6_nh"") moved fib_nh_common_init() before alloc_percpu_gfp() within fib6_nh_init() but forgot to add cleanup for fib6_nh->nh_common.nhc_pcpu_rth_output in case it fails to allocate fib6_nh->rt6i_pcpu\, resulting in memleak.  Let's call fib_nh_common_release() and clear nhc_pcpu_rth_output in the error path.  Note that we can remove the fib6_nh_release() call in nh_create_ipv6() later in net-next.git.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-22365,libpam-modules,MEDIUM,1.5.2-6+deb12u1,N/A,"linux-pam (aka Linux PAM) before 1.6.0 allows attackers to cause a denial of service (blocked login process) via mkfifo because the openat call (for protect_dir) lacks O_DIRECTORY.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21681,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  openvswitch: fix lockup on tx to unregistering netdev with carrier  Commit in a fixes tag attempted to fix the issue in the following sequence of calls:      do_output     -> ovs_vport_send        -> dev_queue_xmit           -> __dev_queue_xmit              -> netdev_core_pick_tx                 -> skb_tx_hash  When device is unregistering\, the 'dev->real_num_tx_queues' goes to zero and the 'while (unlikely(hash >= qcount))' loop inside the 'skb_tx_hash' becomes infinite\, locking up the core forever.  But unfortunately\, checking just the carrier status is not enough to fix the issue\, because some devices may still be in unregistering state while reporting carrier status OK.  One example of such device is a net/dummy.  It sets carrier ON on start\, but it doesn't implement .ndo_stop to set the carrier off. And it makes sense\, because dummy doesn't really have a carrier. Therefore\, while this device is unregistering\, it's still easy to hit the infinite loop in the skb_tx_hash() from the OVS datapath.  There might be other drivers that do the same\, but dummy by itself is important for the OVS ecosystem\, because it is frequently used as a packet sink for tcpdump while debugging OVS deployments.  And when the issue is hit\, the only way to recover is to reboot.  Fix that by also checking if the device is running.  The running state is handled by the net core during unregistering\, so it covers unregistering case better\, and we don't really need to send packets to devices that are not running anyway.  While only checking the running state might be enough\, the carrier check is preserved.  The running and the carrier states seem disjoined throughout the code and different drivers.  And other core functions like __dev_direct_xmit() check both before attempting to transmit a packet.  So\, it seems safer to check both flags in OVS as well.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21680,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  pktgen: Avoid out-of-bounds access in get_imix_entries  Passing a sufficient amount of imix entries leads to invalid access to the pkt_dev->imix_entries array because of the incorrect boundary check.  UBSAN: array-index-out-of-bounds in net/core/pktgen.c:874:24 index 20 is out of range for type 'imix_pkt [20]' CPU: 2 PID: 1210 Comm: bash Not tainted 6.10.0-rc1 #121 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996) Call Trace: <TASK> dump_stack_lvl lib/dump_stack.c:117 __ubsan_handle_out_of_bounds lib/ubsan.c:429 get_imix_entries net/core/pktgen.c:874 pktgen_if_write net/core/pktgen.c:1063 pde_write fs/proc/inode.c:334 proc_reg_write fs/proc/inode.c:346 vfs_write fs/read_write.c:593 ksys_write fs/read_write.c:644 do_syscall_64 arch/x86/entry/common.c:83 entry_SYSCALL_64_after_hwframe arch/x86/entry/entry_64.S:130  Found by Linux Verification Center (linuxtesting.org) with SVACE.  [ fp: allow to fill the array completely; minor changelog cleanup ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21683,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix bpf_sk_select_reuseport() memory leak  As pointed out in the original comment\, lookup in sockmap can return a TCP ESTABLISHED socket. Such TCP socket may have had SO_ATTACH_REUSEPORT_EBPF set before it was ESTABLISHED. In other words\, a non-NULL sk_reuseport_cb does not imply a non-refcounted socket.  Drop sk's reference in both error paths.  unreferenced object 0xffff888101911800 (size 2048):   comm ""test_progs""\, pid 44109\, jiffies 4297131437   hex dump (first 32 bytes):     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................     80 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................   backtrace (crc 9336483b):     __kmalloc_noprof+0x3bf/0x560     __reuseport_alloc+0x1d/0x40     reuseport_alloc+0xca/0x150     reuseport_attach_prog+0x87/0x140     sk_reuseport_attach_bpf+0xc8/0x100     sk_setsockopt+0x1181/0x1990     do_sock_setsockopt+0x12b/0x160     __sys_setsockopt+0x7b/0xc0     __x64_sys_setsockopt+0x1b/0x30     do_syscall_64+0x93/0x180     entry_SYSCALL_64_after_hwframe+0x76/0x7e",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26948,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add a dc_state NULL check in dc_state_release  [How] Check wheather state is NULL before releasing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21682,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  eth: bnxt: always recalculate features after XDP clearing\, fix null-deref  Recalculate features when XDP is detached.  Before:   # ip li set dev eth0 xdp obj xdp_dummy.bpf.o sec xdp   # ip li set dev eth0 xdp off   # ethtool -k eth0 | grep gro   rx-gro-hw: off [requested on]  After:   # ip li set dev eth0 xdp obj xdp_dummy.bpf.o sec xdp   # ip li set dev eth0 xdp off   # ethtool -k eth0 | grep gro   rx-gro-hw: on  The fact that HW-GRO doesn't get re-enabled automatically is just a minor annoyance. The real issue is that the features will randomly come back during another reconfiguration which just happens to invoke netdev_update_features(). The driver doesn't handle reconfiguring two things at a time very robustly.  Starting with commit 98ba1d931f61 (""bnxt_en: Fix RSS logic in __bnxt_reserve_rings()"") we only reconfigure the RSS hash table if the ""effective"" number of Rx rings has changed. If HW-GRO is enabled ""effective"" number of rings is 2x what user sees. So if we are in the bad state\, with HW-GRO re-enablement ""pending"" after XDP off\, and we lower the rings by / 2 - the HW-GRO rings doing 2x and the ethtool -L doing / 2 may cancel each other out\, and the:    if (old_rx_rings != bp->hw_resc.resv_rx_rings &&  condition in __bnxt_reserve_rings() will be false. The RSS map won't get updated\, and we'll crash with:    BUG: kernel NULL pointer dereference\, address: 0000000000000168   RIP: 0010:__bnxt_hwrm_vnic_set_rss+0x13a/0x1a0     bnxt_hwrm_vnic_rss_cfg_p5+0x47/0x180     __bnxt_setup_vnic_p5+0x58/0x110     bnxt_init_nic+0xb72/0xf50     __bnxt_open_nic+0x40d/0xab0     bnxt_open_nic+0x2b/0x60     ethtool_set_channels+0x18c/0x1d0  As we try to access a freed ring.  The issue is present since XDP support was added\, really\, but prior to commit 98ba1d931f61 (""bnxt_en: Fix RSS logic in __bnxt_reserve_rings()"") it wasn't causing major issues.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41014,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  xfs: add bounds checking to xlog_recover_process_data  There is a lack of verification of the space occupied by fixed members of xlog_op_header in the xlog_recover_process_data.  We can create a crafted image to trigger an out of bounds read by following these steps:     1) Mount an image of xfs\, and do some file operations to leave records     2) Before umounting\, copy the image for subsequent steps to simulate        abnormal exit. Because umount will ensure that tail_blk and        head_blk are the same\, which will result in the inability to enter        xlog_recover_process_data     3) Write a tool to parse and modify the copied image in step 2     4) Make the end of the xlog_op_header entries only 1 byte away from        xlog_rec_header->h_size     5) xlog_rec_header->h_num_logops++     6) Modify xlog_rec_header->h_crc  Fix: Add a check to make sure there is sufficient space to access fixed members of xlog_op_header.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46841,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: don't BUG_ON on ENOMEM from btrfs_lookup_extent_info() in walk_down_proc()  We handle errors here properly\, ENOMEM isn't fatal\, return the error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57834,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: vidtv: Fix a null-ptr-deref in vidtv_mux_stop_thread  syzbot report a null-ptr-deref in vidtv_mux_stop_thread. [1]  If dvb->mux is not initialized successfully by vidtv_mux_init() in the vidtv_start_streaming()\, it will trigger null pointer dereference about mux in vidtv_mux_stop_thread().  Adjust the timing of streaming initialization and check it before stopping it.  [1] KASAN: null-ptr-deref in range [0x0000000000000128-0x000000000000012f] CPU: 0 UID: 0 PID: 5842 Comm: syz-executor248 Not tainted 6.13.0-rc4-syzkaller-00012-g9b2ffa6148b1 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 RIP: 0010:vidtv_mux_stop_thread+0x26/0x80 drivers/media/test-drivers/vidtv/vidtv_mux.c:471 Code: 90 90 90 90 66 0f 1f 00 55 53 48 89 fb e8 82 2e c8 f9 48 8d bb 28 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 84 c0 74 02 7e 3b 0f b6 ab 28 01 00 00 31 ff 89 ee e8 RSP: 0018:ffffc90003f2faa8 EFLAGS: 00010202 RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff87cfb125 RDX: 0000000000000025 RSI: ffffffff87d120ce RDI: 0000000000000128 RBP: ffff888029b8d220 R08: 0000000000000005 R09: 0000000000000000 R10: 0000000000000000 R11: 0000000000000003 R12: ffff888029b8d188 R13: ffffffff8f590aa0 R14: ffffc9000581c5c8 R15: ffff888029a17710 FS:  00007f7eef5156c0(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f7eef5e635c CR3: 0000000076ca6000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  vidtv_stop_streaming drivers/media/test-drivers/vidtv/vidtv_bridge.c:209 [inline]  vidtv_stop_feed+0x151/0x250 drivers/media/test-drivers/vidtv/vidtv_bridge.c:252  dmx_section_feed_stop_filtering+0x90/0x160 drivers/media/dvb-core/dvb_demux.c:1000  dvb_dmxdev_feed_stop.isra.0+0x1ee/0x270 drivers/media/dvb-core/dmxdev.c:486  dvb_dmxdev_filter_stop+0x22a/0x3a0 drivers/media/dvb-core/dmxdev.c:559  dvb_dmxdev_filter_free drivers/media/dvb-core/dmxdev.c:840 [inline]  dvb_demux_release+0x92/0x550 drivers/media/dvb-core/dmxdev.c:1246  __fput+0x3f8/0xb60 fs/file_table.c:450  task_work_run+0x14e/0x250 kernel/task_work.c:239  get_signal+0x1d3/0x2610 kernel/signal.c:2790  arch_do_signal_or_restart+0x90/0x7e0 arch/x86/kernel/signal.c:337  exit_to_user_mode_loop kernel/entry/common.c:111 [inline]  exit_to_user_mode_prepare include/linux/entry-common.h:329 [inline]  __syscall_exit_to_user_mode_work kernel/entry/common.c:207 [inline]  syscall_exit_to_user_mode+0x150/0x2a0 kernel/entry/common.c:218  do_syscall_64+0xda/0x250 arch/x86/entry/common.c:89  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46843,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: ufs: core: Remove SCSI host only if added  If host tries to remove ufshcd driver from a UFS device it would cause a kernel panic if ufshcd_async_scan fails during ufshcd_probe_hba before adding a SCSI host with scsi_add_host and MCQ is enabled since SCSI host has been defered after MCQ configuration introduced by commit 0cab4023ec7b (""scsi: ufs: core: Defer adding host to SCSI if MCQ is supported"").  To guarantee that SCSI host is removed only if it has been added\, set the scsi_host_added flag to true after adding a SCSI host and check whether it is set or not before removing it.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46842,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: lpfc: Handle mailbox timeouts in lpfc_get_sfp_info  The MBX_TIMEOUT return code is not handled in lpfc_get_sfp_info and the routine unconditionally frees submitted mailbox commands regardless of return status.  The issue is that for MBX_TIMEOUT cases\, when firmware returns SFP information at a later time\, that same mailbox memory region references previously freed memory in its cmpl routine.  Fix by adding checks for the MBX_TIMEOUT return code.  During mailbox resource cleanup\, check the mbox flag to make sure that the wait did not timeout.  If the MBOX_WAKE flag is not set\, then do not free the resources because it will be freed when firmware completes the mailbox at a later time in its cmpl routine.  Also\, increase the timeout from 30 to 60 seconds to accommodate boot scripts requiring longer timeouts.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21999,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  proc: fix UAF in proc_get_inode()  Fix race between rmmod and /proc/XXX's inode instantiation.  The bug is that pde->proc_ops don't belong to /proc\, it belongs to a module\, therefore dereferencing it after /proc entry has been registered is a bug unless use_pde/unuse_pde() pair has been used.  use_pde/unuse_pde can be avoided (2 atomic ops!) because pde->proc_ops never changes so information necessary for inode instantiation can be saved _before_ proc_register() in PDE itself and used later\, avoiding pde->proc_ops->...  dereference.        rmmod                         lookup sys_delete_module                          proc_lookup_de \t\t\t   pde_get(de); \t\t\t   proc_get_inode(dir->i_sb\, de);   mod->exit()     proc_remove       remove_proc_subtree        proc_entry_rundown(de);   free_module(mod);                                 if (S_ISREG(inode->i_mode)) \t                         if (de->proc_ops->proc_read_iter)                            --> As module is already freed\, will trigger UAF  BUG: unable to handle page fault for address: fffffbfff80a702b PGD 817fc4067 P4D 817fc4067 PUD 817fc0067 PMD 102ef4067 PTE 0 Oops: Oops: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 26 UID: 0 PID: 2667 Comm: ls Tainted: G Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996) RIP: 0010:proc_get_inode+0x302/0x6e0 RSP: 0018:ffff88811c837998 EFLAGS: 00010a06 RAX: dffffc0000000000 RBX: ffffffffc0538140 RCX: 0000000000000007 RDX: 1ffffffff80a702b RSI: 0000000000000001 RDI: ffffffffc0538158 RBP: ffff8881299a6000 R08: 0000000067bbe1e5 R09: 1ffff11023906f20 R10: ffffffffb560ca07 R11: ffffffffb2b43a58 R12: ffff888105bb78f0 R13: ffff888100518048 R14: ffff8881299a6004 R15: 0000000000000001 FS:  00007f95b9686840(0000) GS:ffff8883af100000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: fffffbfff80a702b CR3: 0000000117dd2000 CR4: 00000000000006f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  proc_lookup_de+0x11f/0x2e0  __lookup_slow+0x188/0x350  walk_component+0x2ab/0x4f0  path_lookupat+0x120/0x660  filename_lookup+0x1ce/0x560  vfs_statx+0xac/0x150  __do_sys_newstat+0x96/0x110  do_syscall_64+0x5f/0x170  entry_SYSCALL_64_after_hwframe+0x76/0x7e  [adobriyan@gmail.com: don't do 2 atomic ops on the common path]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26719,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  nouveau: offload fence uevents work to workqueue  This should break the deadlock between the fctx lock and the irq lock.  This offloads the processing off the work from the irq into a workqueue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21994,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix incorrect validation for num_aces field of smb_acl  parse_dcal() validate num_aces to allocate posix_ace_state_array.  if (num_aces > ULONG_MAX / sizeof(struct smb_ace *))  It is an incorrect validation that we can create an array of size ULONG_MAX. smb_acl has ->size field to calculate actual number of aces in request buffer size. Use this to check invalid num_aces.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21997,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  xsk: fix an integer overflow in xp_create_and_assign_umem()  Since the i and pool->chunk_size variables are of type 'u32'\, their product can wrap around and then be cast to 'u64'. This can lead to two different XDP buffers pointing to the same memory area.  Found by InfoTeCS on behalf of Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-39728,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  clk: samsung: Fix UBSAN panic in samsung_clk_init()  With UBSAN_ARRAY_BOUNDS=y\, I'm hitting the below panic due to dereferencing `ctx->clk_data.hws` before setting `ctx->clk_data.num = nr_clks`. Move that up to fix the crash.    UBSAN: array index out of bounds: 00000000f2005512 [#1] PREEMPT SMP   <snip>   Call trace:    samsung_clk_init+0x110/0x124 (P)    samsung_clk_init+0x48/0x124 (L)    samsung_cmu_register_one+0x3c/0xa0    exynos_arm64_register_cmu+0x54/0x64    __gs101_cmu_top_of_clk_init_declare+0x28/0x60    ...",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21996,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/radeon: fix uninitialized size issue in radeon_vce_cs_parse()  On the off chance that command stream passed from userspace via ioctl() call to radeon_vce_cs_parse() is weirdly crafted and first command to execute is to encode (case 0x03000001)\, the function in question will attempt to call radeon_vce_cs_reloc() with size argument that has not been properly initialized. Specifically\, 'size' will point to 'tmp' variable before the latter had a chance to be assigned any value.  Play it safe and init 'tmp' with 0\, thus ensuring that radeon_vce_cs_reloc() will catch an early error in cases like these.  Found by Linux Verification Center (linuxtesting.org) with static analysis tool SVACE.  (cherry picked from commit 2d52de55f9ee7aaee0e09ac443f77855989c6b68)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-2820,libpoppler126,LOW,22.12.0-2+b1,N/A,"An exploitable integer overflow vulnerability exists in the JPEG 2000 image parsing functionality of freedesktop.org Poppler 0.53.0. A specially crafted PDF file can lead to an integer overflow causing out of bounds memory overwrite on the heap resulting in potential arbitrary code execution. To trigger this vulnerability\, a victim must open the malicious PDF in an application using this library.",|tykio/midsommar|
CVE-2025-21991,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  x86/microcode/AMD: Fix out-of-bounds on systems with CPU-less NUMA nodes  Currently\, load_microcode_amd() iterates over all NUMA nodes\, retrieves their CPU masks and unconditionally accesses per-CPU data for the first CPU of each mask.  According to Documentation/admin-guide/mm/numaperf.rst:    ""Some memory may share the same node as a CPU\, and others are provided as   memory only nodes.""  Therefore\, some node CPU masks may be empty and wouldn't have a ""first CPU"".  On a machine with far memory (and therefore CPU-less NUMA nodes): - cpumask_of_node(nid) is 0 - cpumask_first(0) is CONFIG_NR_CPUS - cpu_data(CONFIG_NR_CPUS) accesses the cpu_info per-CPU array at an   index that is 1 out of bounds  This does not have any security implications since flashing microcode is a privileged operation but I believe this has reliability implications by potentially corrupting memory while flashing a microcode update.  When booting with CONFIG_UBSAN_BOUNDS=y on an AMD machine that flashes a microcode update. I get the following splat:    UBSAN: array-index-out-of-bounds in arch/x86/kernel/cpu/microcode/amd.c:X:Y   index 512 is out of range for type 'unsigned long[512]'   [...]   Call Trace:    dump_stack    __ubsan_handle_out_of_bounds    load_microcode_amd    request_microcode_amd    reload_store    kernfs_fop_write_iter    vfs_write    ksys_write    do_syscall_64    entry_SYSCALL_64_after_hwframe  Change the loop to go over only NUMA nodes which have CPUs before determining whether the first CPU on the respective node needs microcode update.    [ bp: Massage commit message\, fix typo. ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52425,libexpat1,HIGH,2.5.0-1+deb12u1,N/A,"libexpat through 2.5.0 allows a denial of service (resource consumption) because many full reparsings are required in the case of a large token for which multiple buffer fills are needed.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57838,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  s390/entry: Mark IRQ entries to fix stack depot warnings  The stack depot filters out everything outside of the top interrupt context as an uninteresting or irrelevant part of the stack traces. This helps with stack trace de-duplication\, avoiding an explosion of saved stack traces that share the same IRQ context code path but originate from different randomly interrupted points\, eventually exhausting the stack depot.  Filtering uses in_irqentry_text() to identify functions within the .irqentry.text and .softirqentry.text sections\, which then become the last stack trace entries being saved.  While __do_softirq() is placed into the .softirqentry.text section by common code\, populating .irqentry.text is architecture-specific.  Currently\, the .irqentry.text section on s390 is empty\, which prevents stack depot filtering and de-duplication and could result in warnings like:  Stack depot reached limit capacity WARNING: CPU: 0 PID: 286113 at lib/stackdepot.c:252 depot_alloc_stack+0x39a/0x3c8  with PREEMPT and KASAN enabled.  Fix this by moving the IO/EXT interrupt handlers from .kprobes.text into the .irqentry.text section and updating the kprobes blacklist to include the .irqentry.text section.  This is done only for asynchronous interrupts and explicitly not for program checks\, which are synchronous and where the context beyond the program check is important to preserve. Despite machine checks being somewhat in between\, they are extremely rare\, and preserving context when possible is also of value.  SVCs and Restart Interrupts are not relevant\, one being always at the boundary to user space and the other being a one-time thing.  IRQ entries filtering is also optionally used in ftrace function graph\, where the same logic applies.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21993,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  iscsi_ibft: Fix UBSAN shift-out-of-bounds warning in ibft_attr_show_nic()  When performing an iSCSI boot using IPv6\, iscsistart still reads the /sys/firmware/ibft/ethernetX/subnet-mask entry. Since the IPv6 prefix length is 64\, this causes the shift exponent to become negative\, triggering a UBSAN warning. As the concept of a subnet mask does not apply to IPv6\, the value is set to ~0 to suppress the warning message.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52812,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd: check num of link levels when update pcie param  In SR-IOV environment\, the value of pcie_table->num_of_link_levels will be 0\, and num_of_levels - 1 will cause array index out of bounds",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-28757,libexpat1,LOW,2.5.0-1+deb12u1,N/A,"libexpat through 2.6.1 allows an XML Entity Expansion attack when there is isolated use of external parsers (created via XML_ExternalEntityParserCreate).",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21992,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: ignore non-functional sensor in HP 5MP Camera  The HP 5MP Camera (USB ID 0408:5473) reports a HID sensor interface that is not actually implemented. Attempting to access this non-functional sensor via iio_info causes system hangs as runtime PM tries to wake up an unresponsive sensor.    [453] hid-sensor-hub 0003:0408:5473.0003: Report latency attributes: ffffffff:ffffffff   [453] hid-sensor-hub 0003:0408:5473.0003: common attributes: 5:1\, 2:1\, 3:1 ffffffff:ffffffff  Add this device to the HID ignore list since the sensor interface is non-functional by design and should not be exposed to userspace.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2017-13716,binutils,LOW,2.40-2,N/A,"The C++ symbol demangler routine in cplus-dem.c in libiberty\, as distributed in GNU Binutils 2.29\, allows remote attackers to cause a denial of service (excessive memory allocation and application crash) via a crafted file\, as demonstrated by a call from the Binary File Descriptor (BFD) library (aka libbfd).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52426,libexpat1,LOW,2.5.0-1+deb12u1,N/A,"libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49893,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check stream_status before it is used  [WHAT & HOW] dc_state_get_stream_status can return null\, and therefore null must be checked before stream_status is used.  This fixes 1 NULL_RETURNS issue reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26914,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: fix incorrect mpc_combine array size  [why] MAX_SURFACES is per stream\, while MAX_PLANES is per asic. The mpc_combine is an array that records all the planes per asic. Therefore MAX_PLANES should be used as the array size. Using MAX_SURFACES causes array overflow when there are more than 3 planes.  [how] Use the MAX_PLANES for the mpc_combine array size.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49891,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  scsi: lpfc: Validate hdwq pointers before dereferencing in reset/errata paths  When the HBA is undergoing a reset or is handling an errata event\, NULL ptr dereference crashes may occur in routines such as lpfc_sli_flush_io_rings()\, lpfc_dev_loss_tmo_callbk()\, or lpfc_abort_handler().  Add NULL ptr checks before dereferencing hdwq pointers that may have been freed due to operations colliding with a reset or errata event handler.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46727,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Add otg_master NULL check within resource_log_pipe_topology_update  [Why] Coverity reports NULL_RETURN warning.  [How] Add otg_master NULL check.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49897,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check phantom_stream before it is used  dcn32_enable_phantom_stream can return null\, so returned value must be checked before used.  This fixes 1 NULL_RETURNS issue reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22058,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  udp: Fix memory accounting leak.  Matt Dowling reported a weird UDP memory usage issue.  Under normal operation\, the UDP memory usage reported in /proc/net/sockstat remains close to zero.  However\, it occasionally spiked to 524\,288 pages and never dropped.  Moreover\, the value doubled when the application was terminated.  Finally\, it caused intermittent packet drops.  We can reproduce the issue with the script below [0]:    1. /proc/net/sockstat reports 0 pages      # cat /proc/net/sockstat | grep UDP:     UDP: inuse 1 mem 0    2. Run the script till the report reaches 524\,288      # python3 test.py & sleep 5     # cat /proc/net/sockstat | grep UDP:     UDP: inuse 3 mem 524288  <-- (INT_MAX + 1) >> PAGE_SHIFT    3. Kill the socket and confirm the number never drops      # pkill python3 && sleep 5     # cat /proc/net/sockstat | grep UDP:     UDP: inuse 1 mem 524288    4. (necessary since v6.0) Trigger proto_memory_pcpu_drain()      # python3 test.py & sleep 1 && pkill python3    5. The number doubles      # cat /proc/net/sockstat | grep UDP:     UDP: inuse 1 mem 1048577  The application set INT_MAX to SO_RCVBUF\, which triggered an integer overflow in udp_rmem_release().  When a socket is close()d\, udp_destruct_common() purges its receive queue and sums up skb->truesize in the queue.  This total is calculated and stored in a local unsigned integer variable.  The total size is then passed to udp_rmem_release() to adjust memory accounting.  However\, because the function takes a signed integer argument\, the total size can wrap around\, causing an overflow.  Then\, the released amount is calculated as follows:    1) Add size to sk->sk_forward_alloc.   2) Round down sk->sk_forward_alloc to the nearest lower multiple of       PAGE_SIZE and assign it to amount.   3) Subtract amount from sk->sk_forward_alloc.   4) Pass amount >> PAGE_SHIFT to __sk_mem_reduce_allocated().  When the issue occurred\, the total in udp_destruct_common() was 2147484480 (INT_MAX + 833)\, which was cast to -2147482816 in udp_rmem_release().  At 1) sk->sk_forward_alloc is changed from 3264 to -2147479552\, and 2) sets -2147479552 to amount.  3) reverts the wraparound\, so we don't see a warning in inet_sock_destruct().  However\, udp_memory_allocated ends up doubling at 4).  Since commit 3cd3399dd7a8 (""net: implement per-cpu reserves for memory_allocated"")\, memory usage no longer doubles immediately after a socket is close()d because __sk_mem_reduce_allocated() caches the amount in udp_memory_per_cpu_fw_alloc.  However\, the next time a UDP socket receives a packet\, the subtraction takes effect\, causing UDP memory usage to double.  This issue makes further memory allocation fail once the socket's sk->sk_rmem_alloc exceeds net.ipv4.udp_rmem_min\, resulting in packet drops.  To prevent this issue\, let's use unsigned int for the calculation and call sk_forward_alloc_add() only once for the small delta.  Note that first_packet_length() also potentially has the same problem.  [0]: from socket import *  SO_RCVBUFFORCE = 33 INT_MAX = (2 ** 31) - 1  s = socket(AF_INET\, SOCK_DGRAM) s.bind((''\, 0)) s.setsockopt(SOL_SOCKET\, SO_RCVBUFFORCE\, INT_MAX)  c = socket(AF_INET\, SOCK_DGRAM) c.connect(s.getsockname())  data = b'a' * 100  while True:     c.send(data)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52648,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/vmwgfx: Unmap the surface before resetting it on a plane state  Switch to a new plane state requires unreferencing of all held surfaces. In the work required for mob cursors the mapped surfaces started being cached but the variable indicating whether the surface is currently mapped was not being reset. This leads to crashes as the duplicated state\, incorrectly\, indicates the that surface is mapped even when no surface is present. That's because after unreferencing the surface it's perfectly possible for the plane to be backed by a bo instead of a surface.  Reset the surface mapped flag when unreferencing the plane state surface to fix null derefs in cleanup. Fixes crashes in KDE KWin 6.0 on Wayland:  Oops: 0000 [#1] PREEMPT SMP PTI CPU: 4 PID: 2533 Comm: kwin_wayland Not tainted 6.7.0-rc3-vmwgfx #2 Hardware name: VMware\, Inc. VMware Virtual Platform/440BX Desktop Reference Platform\, BIOS 6.00 11/12/2020 RIP: 0010:vmw_du_cursor_plane_cleanup_fb+0x124/0x140 [vmwgfx] Code: 00 00 00 75 3a 48 83 c4 10 5b 5d c3 cc cc cc cc 48 8b b3 a8 00 00 00 48 c7 c7 99 90 43 c0 e8 93 c5 db ca 48 8b 83 a8 00 00 00 <48> 8b 78 28 e8 e3 f> RSP: 0018:ffffb6b98216fa80 EFLAGS: 00010246 RAX: 0000000000000000 RBX: ffff969d84cdcb00 RCX: 0000000000000027 RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff969e75f21600 RBP: ffff969d4143dc50 R08: 0000000000000000 R09: ffffb6b98216f920 R10: 0000000000000003 R11: ffff969e7feb3b10 R12: 0000000000000000 R13: 0000000000000000 R14: 000000000000027b R15: ffff969d49c9fc00 FS:  00007f1e8f1b4180(0000) GS:ffff969e75f00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000000000000028 CR3: 0000000104006004 CR4: 00000000003706f0 Call Trace:  <TASK>  ? __die+0x23/0x70  ? page_fault_oops+0x171/0x4e0  ? exc_page_fault+0x7f/0x180  ? asm_exc_page_fault+0x26/0x30  ? vmw_du_cursor_plane_cleanup_fb+0x124/0x140 [vmwgfx]  drm_atomic_helper_cleanup_planes+0x9b/0xc0  commit_tail+0xd1/0x130  drm_atomic_helper_commit+0x11a/0x140  drm_atomic_commit+0x97/0xd0  ? __pfx___drm_printfn_info+0x10/0x10  drm_atomic_helper_update_plane+0xf5/0x160  drm_mode_cursor_universal+0x10e/0x270  drm_mode_cursor_common+0x102/0x230  ? __pfx_drm_mode_cursor2_ioctl+0x10/0x10  drm_ioctl_kernel+0xb2/0x110  drm_ioctl+0x26d/0x4b0  ? __pfx_drm_mode_cursor2_ioctl+0x10/0x10  ? __pfx_drm_ioctl+0x10/0x10  vmw_generic_ioctl+0xa4/0x110 [vmwgfx]  __x64_sys_ioctl+0x94/0xd0  do_syscall_64+0x61/0xe0  ? __x64_sys_ioctl+0xaf/0xd0  ? syscall_exit_to_user_mode+0x2b/0x40  ? do_syscall_64+0x70/0xe0  ? __x64_sys_ioctl+0xaf/0xd0  ? syscall_exit_to_user_mode+0x2b/0x40  ? do_syscall_64+0x70/0xe0  ? exc_page_fault+0x7f/0x180  entry_SYSCALL_64_after_hwframe+0x6e/0x76 RIP: 0033:0x7f1e93f279ed Code: 04 25 28 00 00 00 48 89 45 c8 31 c0 48 8d 45 10 c7 45 b0 10 00 00 00 48 89 45 b8 48 8d 45 d0 48 89 45 c0 b8 10 00 00 00 0f 05 <89> c2 3d 00 f0 ff f> RSP: 002b:00007ffca0faf600 EFLAGS: 00000246 ORIG_RAX: 0000000000000010 RAX: ffffffffffffffda RBX: 000055db876ed2c0 RCX: 00007f1e93f279ed RDX: 00007ffca0faf6c0 RSI: 00000000c02464bb RDI: 0000000000000015 RBP: 00007ffca0faf650 R08: 000055db87184010 R09: 0000000000000007 R10: 000055db886471a0 R11: 0000000000000246 R12: 00007ffca0faf6c0 R13: 00000000c02464bb R14: 0000000000000015 R15: 00007ffca0faf790  </TASK> Modules linked in: snd_seq_dummy snd_hrtimer nf_conntrack_netbios_ns nf_conntrack_broadcast nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_ine> CR2: 0000000000000028 ---[ end trace 0000000000000000 ]--- RIP: 0010:vmw_du_cursor_plane_cleanup_fb+0x124/0x140 [vmwgfx] Code: 00 00 00 75 3a 48 83 c4 10 5b 5d c3 cc cc cc cc 48 8b b3 a8 00 00 00 48 c7 c7 99 90 43 c0 e8 93 c5 db ca 48 8b 83 a8 00 00 00 <48> 8b 78 28 e8 e3 f> RSP: 0018:ffffb6b98216fa80 EFLAGS: 00010246 RAX: 0000000000000000 RBX: ffff969d84cdcb00 RCX: 0000000000000027 RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff969e75f21600 RBP: ffff969d4143 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26913,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix dcn35 8k30 Underflow/Corruption Issue  [why] odm calculation is missing for pipe split policy determination and cause Underflow/Corruption issue.  [how] Add the odm calculation.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-3164,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"A heap-buffer-overflow vulnerability was found in LibTIFF\, in extractImageSection() at tools/tiffcrop.c:7916 and tools/tiffcrop.c:7801. This flaw allows attackers to cause a denial of service via a crafted tiff file.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22055,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: fix geneve_opt length integer overflow  struct geneve_opt uses 5 bit length for each single option\, which means every vary size option should be smaller than 128 bytes.  However\, all current related Netlink policies cannot promise this length condition and the attacker can exploit a exact 128-byte size option to *fake* a zero length option and confuse the parsing logic\, further achieve heap out-of-bounds read.  One example crash log is like below:  [    3.905425] ================================================================== [    3.905925] BUG: KASAN: slab-out-of-bounds in nla_put+0xa9/0xe0 [    3.906255] Read of size 124 at addr ffff888005f291cc by task poc/177 [    3.906646] [    3.906775] CPU: 0 PID: 177 Comm: poc-oob-read Not tainted 6.1.132 #1 [    3.907131] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014 [    3.907784] Call Trace: [    3.907925]  <TASK> [    3.908048]  dump_stack_lvl+0x44/0x5c [    3.908258]  print_report+0x184/0x4be [    3.909151]  kasan_report+0xc5/0x100 [    3.909539]  kasan_check_range+0xf3/0x1a0 [    3.909794]  memcpy+0x1f/0x60 [    3.909968]  nla_put+0xa9/0xe0 [    3.910147]  tunnel_key_dump+0x945/0xba0 [    3.911536]  tcf_action_dump_1+0x1c1/0x340 [    3.912436]  tcf_action_dump+0x101/0x180 [    3.912689]  tcf_exts_dump+0x164/0x1e0 [    3.912905]  fw_dump+0x18b/0x2d0 [    3.913483]  tcf_fill_node+0x2ee/0x460 [    3.914778]  tfilter_notify+0xf4/0x180 [    3.915208]  tc_new_tfilter+0xd51/0x10d0 [    3.918615]  rtnetlink_rcv_msg+0x4a2/0x560 [    3.919118]  netlink_rcv_skb+0xcd/0x200 [    3.919787]  netlink_unicast+0x395/0x530 [    3.921032]  netlink_sendmsg+0x3d0/0x6d0 [    3.921987]  __sock_sendmsg+0x99/0xa0 [    3.922220]  __sys_sendto+0x1b7/0x240 [    3.922682]  __x64_sys_sendto+0x72/0x90 [    3.922906]  do_syscall_64+0x5e/0x90 [    3.923814]  entry_SYSCALL_64_after_hwframe+0x6e/0xd8 [    3.924122] RIP: 0033:0x7e83eab84407 [    3.924331] Code: 48 89 fa 4c 89 df e8 38 aa 00 00 8b 93 08 03 00 00 59 5e 48 83 f8 fc 74 1a 5b c3 0f 1f 84 00 00 00 00 00 48 8b 44 24 10 0f 05 <5b> c3 0f 1f 80 00 00 00 00 83 e2 39 83 faf [    3.925330] RSP: 002b:00007ffff505e370 EFLAGS: 00000202 ORIG_RAX: 000000000000002c [    3.925752] RAX: ffffffffffffffda RBX: 00007e83eaafa740 RCX: 00007e83eab84407 [    3.926173] RDX: 00000000000001a8 RSI: 00007ffff505e3c0 RDI: 0000000000000003 [    3.926587] RBP: 00007ffff505f460 R08: 00007e83eace1000 R09: 000000000000000c [    3.926977] R10: 0000000000000000 R11: 0000000000000202 R12: 00007ffff505f3c0 [    3.927367] R13: 00007ffff505f5c8 R14: 00007e83ead1b000 R15: 00005d4fbbe6dcb8  Fix these issues by enforing correct length condition in related policies.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22054,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  arcnet: Add NULL check in com20020pci_probe()  devm_kasprintf() returns NULL when memory allocation fails. Currently\, com20020pci_probe() does not check for this case\, which results in a NULL pointer dereference.  Add NULL check after devm_kasprintf() to prevent this issue and ensure no resources are left allocated.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22057,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: decrease cached dst counters in dst_release  Upstream fix ac888d58869b (""net: do not delay dst_entries_add() in dst_release()"") moved decrementing the dst count from dst_destroy to dst_release to avoid accessing already freed data in case of netns dismantle. However in case CONFIG_DST_CACHE is enabled and OvS+tunnels are used\, this fix is incomplete as the same issue will be seen for cached dsts:    Unable to handle kernel paging request at virtual address ffff5aabf6b5c000   Call trace:    percpu_counter_add_batch+0x3c/0x160 (P)    dst_release+0xec/0x108    dst_cache_destroy+0x68/0xd8    dst_destroy+0x13c/0x168    dst_destroy_rcu+0x1c/0xb0    rcu_do_batch+0x18c/0x7d0    rcu_core+0x174/0x378    rcu_core_si+0x18/0x30  Fix this by invalidating the cache\, and thus decrementing cached dst counters\, in dst_release too.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49899,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Initialize denominators' default to 1  [WHAT & HOW] Variables used as denominators and maybe not assigned to other values\, should not be 0. Change their default to 1 so they are never 0.  This fixes 10 DIVIDE_BY_ZERO issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22056,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: nft_tunnel: fix geneve_opt type confusion addition  When handling multiple NFTA_TUNNEL_KEY_OPTS_GENEVE attributes\, the parsing logic should place every geneve_opt structure one by one compactly. Hence\, when deciding the next geneve_opt position\, the pointer addition should be in units of char *.  However\, the current implementation erroneously does type conversion before the addition\, which will lead to heap out-of-bounds write.  [    6.989857] ================================================================== [    6.990293] BUG: KASAN: slab-out-of-bounds in nft_tunnel_obj_init+0x977/0xa70 [    6.990725] Write of size 124 at addr ffff888005f18974 by task poc/178 [    6.991162] [    6.991259] CPU: 0 PID: 178 Comm: poc-oob-write Not tainted 6.1.132 #1 [    6.991655] Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014 [    6.992281] Call Trace: [    6.992423]  <TASK> [    6.992586]  dump_stack_lvl+0x44/0x5c [    6.992801]  print_report+0x184/0x4be [    6.993790]  kasan_report+0xc5/0x100 [    6.994252]  kasan_check_range+0xf3/0x1a0 [    6.994486]  memcpy+0x38/0x60 [    6.994692]  nft_tunnel_obj_init+0x977/0xa70 [    6.995677]  nft_obj_init+0x10c/0x1b0 [    6.995891]  nf_tables_newobj+0x585/0x950 [    6.996922]  nfnetlink_rcv_batch+0xdf9/0x1020 [    6.998997]  nfnetlink_rcv+0x1df/0x220 [    6.999537]  netlink_unicast+0x395/0x530 [    7.000771]  netlink_sendmsg+0x3d0/0x6d0 [    7.001462]  __sock_sendmsg+0x99/0xa0 [    7.001707]  ____sys_sendmsg+0x409/0x450 [    7.002391]  ___sys_sendmsg+0xfd/0x170 [    7.003145]  __sys_sendmsg+0xea/0x170 [    7.004359]  do_syscall_64+0x5e/0x90 [    7.005817]  entry_SYSCALL_64_after_hwframe+0x6e/0xd8 [    7.006127] RIP: 0033:0x7ec756d4e407 [    7.006339] Code: 48 89 fa 4c 89 df e8 38 aa 00 00 8b 93 08 03 00 00 59 5e 48 83 f8 fc 74 1a 5b c3 0f 1f 84 00 00 00 00 00 48 8b 44 24 10 0f 05 <5b> c3 0f 1f 80 00 00 00 00 83 e2 39 83 faf [    7.007364] RSP: 002b:00007ffed5d46760 EFLAGS: 00000202 ORIG_RAX: 000000000000002e [    7.007827] RAX: ffffffffffffffda RBX: 00007ec756cc4740 RCX: 00007ec756d4e407 [    7.008223] RDX: 0000000000000000 RSI: 00007ffed5d467f0 RDI: 0000000000000003 [    7.008620] RBP: 00007ffed5d468a0 R08: 0000000000000000 R09: 0000000000000000 [    7.009039] R10: 0000000000000000 R11: 0000000000000202 R12: 0000000000000000 [    7.009429] R13: 00007ffed5d478b0 R14: 00007ec756ee5000 R15: 00005cbd4e655cb8  Fix this bug with correct pointer addition and conversion in parse and dump code.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49898,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check null-initialized variables  [WHAT & HOW] drr_timing and subvp_pipe are initialized to null and they are not always assigned new values. It is necessary to check for null before dereferencing.  This fixes 2 FORWARD_NULL issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46728,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Check index for aux_rd_interval before using  aux_rd_interval has size of 7 and should be checked.  This fixes 3 OVERRUN and 1 INTEGER_OVERFLOW issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22050,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usbnet:fix NPE during rx_complete  Missing usbnet_going_away Check in Critical Path. The usb_submit_urb function lacks a usbnet_going_away validation\, whereas __usbnet_queue_skb includes this check.  This inconsistency creates a race condition where: A URB request may succeed\, but the corresponding SKB data fails to be queued.  Subsequent processes: (e.g.\, rx_complete → defer_bh → __skb_unlink(skb\, list)) attempt to access skb->next\, triggering a NULL pointer dereference (Kernel Panic).",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46729,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix incorrect size calculation for loop  [WHY] fe_clk_en has size of 5 but sizeof(fe_clk_en) has byte size 20 which is lager than the array size.  [HOW] Divide byte size 20 by its element size.  This fixes 2 OVERRUN issues reported by Coverity.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-41067,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  btrfs: scrub: handle RST lookup error correctly  [BUG] When running btrfs/060 with forced RST feature\, it would crash the following ASSERT() inside scrub_read_endio():  \tASSERT(sector_nr < stripe->nr_sectors);  Before that\, we would have tree dump from btrfs_get_raid_extent_offset()\, as we failed to find the RST entry for the range.  [CAUSE] Inside scrub_submit_extent_sector_read() every time we allocated a new bbio we immediately called btrfs_map_block() to make sure there was some RST range covering the scrub target.  But if btrfs_map_block() fails\, we immediately call endio for the bbio\, while the bbio is newly allocated\, it's completely empty.  Then inside scrub_read_endio()\, we go through the bvecs to find the sector number (as bi_sector is no longer reliable if the bio is submitted to lower layers).  And since the bio is empty\, such bvecs iteration would not find any sector matching the sector\, and return sector_nr == stripe->nr_sectors\, triggering the ASSERT().  [FIX] Instead of calling btrfs_map_block() after allocating a new bbio\, call btrfs_map_block() first.  Since our only objective of calling btrfs_map_block() is only to update stripe_len\, there is really no need to do that after btrfs_alloc_bio().  This new timing would avoid the problem of handling empty bbio completely\, and in fact fixes a possible race window for the old code\, where if the submission thread is the only owner of the pending_io\, the scrub would never finish (since we didn't decrease the pending_io counter).  Although the root cause of RST lookup failure still needs to be addressed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-22053,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: ibmveth: make veth_pool_store stop hanging  v2: - Created a single error handling unlock and exit in veth_pool_store - Greatly expanded commit message with previous explanatory-only text  Summary: Use rtnl_mutex to synchronize veth_pool_store with itself\, ibmveth_close and ibmveth_open\, preventing multiple calls in a row to napi_disable.  Background: Two (or more) threads could call veth_pool_store through writing to /sys/devices/vio/30000002/pool*/*. You can do this easily with a little shell script. This causes a hang.  I configured LOCKDEP\, compiled ibmveth.c with DEBUG\, and built a new kernel. I ran this test again and saw:      Setting pool0/active to 0     Setting pool1/active to 1     [   73.911067][ T4365] ibmveth 30000002 eth0: close starting     Setting pool1/active to 1     Setting pool1/active to 0     [   73.911367][ T4366] ibmveth 30000002 eth0: close starting     [   73.916056][ T4365] ibmveth 30000002 eth0: close complete     [   73.916064][ T4365] ibmveth 30000002 eth0: open starting     [  110.808564][  T712] systemd-journald[712]: Sent WATCHDOG=1 notification.     [  230.808495][  T712] systemd-journald[712]: Sent WATCHDOG=1 notification.     [  243.683786][  T123] INFO: task stress.sh:4365 blocked for more than 122 seconds.     [  243.683827][  T123]       Not tainted 6.14.0-01103-g2df0c02dab82-dirty #8     [  243.683833][  T123] ""echo 0 > /proc/sys/kernel/hung_task_timeout_secs"" disables this message.     [  243.683838][  T123] task:stress.sh       state:D stack:28096 pid:4365  tgid:4365  ppid:4364   task_flags:0x400040 flags:0x00042000     [  243.683852][  T123] Call Trace:     [  243.683857][  T123] [c00000000c38f690] [0000000000000001] 0x1 (unreliable)     [  243.683868][  T123] [c00000000c38f840] [c00000000001f908] __switch_to+0x318/0x4e0     [  243.683878][  T123] [c00000000c38f8a0] [c000000001549a70] __schedule+0x500/0x12a0     [  243.683888][  T123] [c00000000c38f9a0] [c00000000154a878] schedule+0x68/0x210     [  243.683896][  T123] [c00000000c38f9d0] [c00000000154ac80] schedule_preempt_disabled+0x30/0x50     [  243.683904][  T123] [c00000000c38fa00] [c00000000154dbb0] __mutex_lock+0x730/0x10f0     [  243.683913][  T123] [c00000000c38fb10] [c000000001154d40] napi_enable+0x30/0x60     [  243.683921][  T123] [c00000000c38fb40] [c000000000f4ae94] ibmveth_open+0x68/0x5dc     [  243.683928][  T123] [c00000000c38fbe0] [c000000000f4aa20] veth_pool_store+0x220/0x270     [  243.683936][  T123] [c00000000c38fc70] [c000000000826278] sysfs_kf_write+0x68/0xb0     [  243.683944][  T123] [c00000000c38fcb0] [c0000000008240b8] kernfs_fop_write_iter+0x198/0x2d0     [  243.683951][  T123] [c00000000c38fd00] [c00000000071b9ac] vfs_write+0x34c/0x650     [  243.683958][  T123] [c00000000c38fdc0] [c00000000071bea8] ksys_write+0x88/0x150     [  243.683966][  T123] [c00000000c38fe10] [c0000000000317f4] system_call_exception+0x124/0x340     [  243.683973][  T123] [c00000000c38fe50] [c00000000000d05c] system_call_vectored_common+0x15c/0x2ec     ...     [  243.684087][  T123] Showing all locks held in the system:     [  243.684095][  T123] 1 lock held by khungtaskd/123:     [  243.684099][  T123]  #0: c00000000278e370 (rcu_read_lock){....}-{1:2}\, at: debug_show_all_locks+0x50/0x248     [  243.684114][  T123] 4 locks held by stress.sh/4365:     [  243.684119][  T123]  #0: c00000003a4cd3f8 (sb_writers#3){.+.+}-{0:0}\, at: ksys_write+0x88/0x150     [  243.684132][  T123]  #1: c000000041aea888 (&of->mutex#2){+.+.}-{3:3}\, at: kernfs_fop_write_iter+0x154/0x2d0     [  243.684143][  T123]  #2: c0000000366fb9a8 (kn->active#64){.+.+}-{0:0}\, at: kernfs_fop_write_iter+0x160/0x2d0     [  243.684155][  T123]  #3: c000000035ff4cb8 (&dev->lock){+.+.}-{3:3}\, at: napi_enable+0x30/0x60     [  243.684166][  T123] 5 locks held by stress.sh/4366:     [  243.684170][  T123]  #0: c00000003a4cd3f8 (sb_writers#3){.+.+}-{0:0}\, at: ksys_write+0x88/0x150     [  243. ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-35931,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Skip do PCI error slot reset during RAS recovery  Why:     The PCI error slot reset maybe triggered after inject ue to UMC multi times\, this     caused system hang.     [  557.371857] amdgpu 0000:af:00.0: amdgpu: GPU reset succeeded\, trying to resume     [  557.373718] [drm] PCIE GART of 512M enabled.     [  557.373722] [drm] PTB located at 0x0000031FED700000     [  557.373788] [drm] VRAM is lost due to GPU reset!     [  557.373789] [drm] PSP is resuming...     [  557.547012] mlx5_core 0000:55:00.0: mlx5_pci_err_detected Device state = 1 pci_status: 0. Exit\, result = 3\, need reset     [  557.547067] [drm] PCI error: detected callback\, state(1)!!     [  557.547069] [drm] No support for XGMI hive yet...     [  557.548125] mlx5_core 0000:55:00.0: mlx5_pci_slot_reset Device state = 1 pci_status: 0. Enter     [  557.607763] mlx5_core 0000:55:00.0: wait vital counter value 0x16b5b after 1 iterations     [  557.607777] mlx5_core 0000:55:00.0: mlx5_pci_slot_reset Device state = 1 pci_status: 1. Exit\, err = 0\, result = 5\, recovered     [  557.610492] [drm] PCI error: slot reset callback!!     ...     [  560.689382] amdgpu 0000:3f:00.0: amdgpu: GPU reset(2) succeeded!     [  560.689546] amdgpu 0000:5a:00.0: amdgpu: GPU reset(2) succeeded!     [  560.689562] general protection fault\, probably for non-canonical address 0x5f080b54534f611f: 0000 [#1] SMP NOPTI     [  560.701008] CPU: 16 PID: 2361 Comm: kworker/u448:9 Tainted: G           OE     5.15.0-91-generic #101-Ubuntu     [  560.712057] Hardware name: Microsoft C278A/C278A\, BIOS C2789.5.BS.1C11.AG.1 11/08/2023     [  560.720959] Workqueue: amdgpu-reset-hive amdgpu_ras_do_recovery [amdgpu]     [  560.728887] RIP: 0010:amdgpu_device_gpu_recover.cold+0xbf1/0xcf5 [amdgpu]     [  560.736891] Code: ff 41 89 c6 e9 1b ff ff ff 44 0f b6 45 b0 e9 4f ff ff ff be 01 00 00 00 4c 89 e7 e8 76 c9 8b ff 44 0f b6 45 b0 e9 3c fd ff ff <48> 83 ba 18 02 00 00 00 0f 84 6a f8 ff ff 48 8d 7a 78 be 01 00 00     [  560.757967] RSP: 0018:ffa0000032e53d80 EFLAGS: 00010202     [  560.763848] RAX: ffa00000001dfd10 RBX: ffa0000000197090 RCX: ffa0000032e53db0     [  560.771856] RDX: 5f080b54534f5f07 RSI: 0000000000000000 RDI: ff11000128100010     [  560.779867] RBP: ffa0000032e53df0 R08: 0000000000000000 R09: ffffffffffe77f08     [  560.787879] R10: 0000000000ffff0a R11: 0000000000000001 R12: 0000000000000000     [  560.795889] R13: ffa0000032e53e00 R14: 0000000000000000 R15: 0000000000000000     [  560.803889] FS:  0000000000000000(0000) GS:ff11007e7e800000(0000) knlGS:0000000000000000     [  560.812973] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033     [  560.819422] CR2: 000055a04c118e68 CR3: 0000000007410005 CR4: 0000000000771ee0     [  560.827433] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000     [  560.835433] DR3: 0000000000000000 DR6: 00000000fffe07f0 DR7: 0000000000000400     [  560.843444] PKRU: 55555554     [  560.846480] Call Trace:     [  560.849225]  <TASK>     [  560.851580]  ? show_trace_log_lvl+0x1d6/0x2ea     [  560.856488]  ? show_trace_log_lvl+0x1d6/0x2ea     [  560.861379]  ? amdgpu_ras_do_recovery+0x1b2/0x210 [amdgpu]     [  560.867778]  ? show_regs.part.0+0x23/0x29     [  560.872293]  ? __die_body.cold+0x8/0xd     [  560.876502]  ? die_addr+0x3e/0x60     [  560.880238]  ? exc_general_protection+0x1c5/0x410     [  560.885532]  ? asm_exc_general_protection+0x27/0x30     [  560.891025]  ? amdgpu_device_gpu_recover.cold+0xbf1/0xcf5 [amdgpu]     [  560.898323]  amdgpu_ras_do_recovery+0x1b2/0x210 [amdgpu]     [  560.904520]  process_one_work+0x228/0x3d0 How:     In RAS recovery\, mode-1 reset is issued from RAS fatal error handling and expected     all the nodes in a hive to be reset. no need to issue another mode-1 during this procedure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36881,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/userfaultfd: reset ptes when close() for wr-protected ones  Userfaultfd unregister includes a step to remove wr-protect bits from all the relevant pgtable entries\, but that only covered an explicit UFFDIO_UNREGISTER ioctl\, not a close() on the userfaultfd itself.  Cover that too.  This fixes a WARN trace.  The only user visible side effect is the user can observe leftover wr-protect bits even if the user close()ed on an userfaultfd when releasing the last reference of it.  However hopefully that should be harmless\, and nothing bad should happen even if so.  This change is now more important after the recent page-table-check patch we merged in mm-unstable (446dd9ad37d0 (""mm/page_table_check: support userfault wr-protect entries""))\, as we'll do sanity check on uffd-wp bits without vma context.  So it's better if we can 100% guarantee no uffd-wp bit leftovers\, to make sure each report will be valid.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21779,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  KVM: x86: Reject Hyper-V's SEND_IPI hypercalls if local APIC isn't in-kernel  Advertise support for Hyper-V's SEND_IPI and SEND_IPI_EX hypercalls if and only if the local API is emulated/virtualized by KVM\, and explicitly reject said hypercalls if the local APIC is emulated in userspace\, i.e. don't rely on userspace to opt-in to KVM_CAP_HYPERV_ENFORCE_CPUID.  Rejecting SEND_IPI and SEND_IPI_EX fixes a NULL-pointer dereference if Hyper-V enlightenments are exposed to the guest without an in-kernel local APIC:    dump_stack+0xbe/0xfd   __kasan_report.cold+0x34/0x84   kasan_report+0x3a/0x50   __apic_accept_irq+0x3a/0x5c0   kvm_hv_send_ipi.isra.0+0x34e/0x820   kvm_hv_hypercall+0x8d9/0x9d0   kvm_emulate_hypercall+0x506/0x7e0   __vmx_handle_exit+0x283/0xb60   vmx_handle_exit+0x1d/0xd0   vcpu_enter_guest+0x16b0/0x24c0   vcpu_run+0xc0/0x550   kvm_arch_vcpu_ioctl_run+0x170/0x6d0   kvm_vcpu_ioctl+0x413/0xb20   __se_sys_ioctl+0x111/0x160   do_syscal1_64+0x30/0x40   entry_SYSCALL_64_after_hwframe+0x67/0xd1  Note\, checking the sending vCPU is sufficient\, as the per-VM irqchip_mode can't be modified after vCPUs are created\, i.e. if one vCPU has an in-kernel local APIC\, then all vCPUs have an in-kernel local APIC.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-51792,libde265-0,MEDIUM,1.0.11-1+deb12u2,N/A,"Buffer Overflow vulnerability in libde265 v1.0.12 allows a local attacker to cause a denial of service via the allocation size exceeding the maximum supported size of 0x10000000000.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-31115,liblzma5,HIGH,5.4.1-0.2,5.4.1-1,"XZ Utils provide a general-purpose data-compression library plus command-line tools. In XZ Utils 5.3.3alpha to 5.8.0\, the multithreaded .xz decoder in liblzma has a bug where invalid input can at least result in a crash. The effects include heap use after free and writing to an address based on the null pointer plus an offset. Applications and libraries that use the lzma_stream_decoder_mt function are affected. The bug has been fixed in XZ Utils 5.8.1\, and the fix has been committed to the v5.4\, v5.6\, v5.8\, and master branches in the xz Git repository. No new release packages will be made from the old stable branches\, but a standalone patch is available that applies to all affected releases.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-38594,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: stmmac: move the EST lock to struct stmmac_priv  Reinitialize the whole EST structure would also reset the mutex lock which is embedded in the EST structure\, and then trigger the following warning. To address this\, move the lock to struct stmmac_priv. We also need to reacquire the mutex lock when doing this initialization.  DEBUG_LOCKS_WARN_ON(lock->magic != lock) WARNING: CPU: 3 PID: 505 at kernel/locking/mutex.c:587 __mutex_lock+0xd84/0x1068  Modules linked in:  CPU: 3 PID: 505 Comm: tc Not tainted 6.9.0-rc6-00053-g0106679839f7-dirty #29  Hardware name: NXP i.MX8MPlus EVK board (DT)  pstate: 60000005 (nZCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)  pc : __mutex_lock+0xd84/0x1068  lr : __mutex_lock+0xd84/0x1068  sp : ffffffc0864e3570  x29: ffffffc0864e3570 x28: ffffffc0817bdc78 x27: 0000000000000003  x26: ffffff80c54f1808 x25: ffffff80c9164080 x24: ffffffc080d723ac  x23: 0000000000000000 x22: 0000000000000002 x21: 0000000000000000  x20: 0000000000000000 x19: ffffffc083bc3000 x18: ffffffffffffffff  x17: ffffffc08117b080 x16: 0000000000000002 x15: ffffff80d2d40000  x14: 00000000000002da x13: ffffff80d2d404b8 x12: ffffffc082b5a5c8  x11: ffffffc082bca680 x10: ffffffc082bb2640 x9 : ffffffc082bb2698  x8 : 0000000000017fe8 x7 : c0000000ffffefff x6 : 0000000000000001  x5 : ffffff8178fe0d48 x4 : 0000000000000000 x3 : 0000000000000027  x2 : ffffff8178fe0d50 x1 : 0000000000000000 x0 : 0000000000000000  Call trace:   __mutex_lock+0xd84/0x1068   mutex_lock_nested+0x28/0x34   tc_setup_taprio+0x118/0x68c   stmmac_setup_tc+0x50/0xf0   taprio_change+0x868/0xc9c",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42107,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ice: Don't process extts if PTP is disabled  The ice_ptp_extts_event() function can race with ice_ptp_release() and result in a NULL pointer dereference which leads to a kernel panic.  Panic occurs because the ice_ptp_extts_event() function calls ptp_clock_event() with a NULL pointer. The ice driver has already released the PTP clock by the time the interrupt for the next external timestamp event occurs.  To fix this\, modify the ice_ptp_extts_event() function to check the PTP state and bail early if PTP is not ready.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21772,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  partitions: mac: fix handling of bogus partition table  Fix several issues in partition probing:   - The bailout for a bad partoffset must use put_dev_sector()\, since the    preceding read_part_sector() succeeded.  - If the partition table claims a silly sector size like 0xfff bytes    (which results in partition table entries straddling sector boundaries)\,    bail out instead of accessing out-of-bounds memory.  - We must not assume that the partition table contains proper NUL    termination - use strnlen() and strncmp() instead of strlen() and    strcmp().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49861,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  bpf: Fix helper writes to read-only maps  Lonial found an issue that despite user- and BPF-side frozen BPF map (like in case of .rodata)\, it was still possible to write into it from a BPF program side through specific helpers having ARG_PTR_TO_{LONG\,INT} as arguments.  In check_func_arg() when the argument is as mentioned\, the meta->raw_mode is never set. Later\, check_helper_mem_access()\, under the case of PTR_TO_MAP_VALUE as register base type\, it assumes BPF_READ for the subsequent call to check_map_access_type() and given the BPF map is read-only it succeeds.  The helpers really need to be annotated as ARG_PTR_TO_{LONG\,INT} | MEM_UNINIT when results are written into them as opposed to read out of them. The latter indicates that it's okay to pass a pointer to uninitialized memory as the memory is written to anyway.  However\, ARG_PTR_TO_{LONG\,INT} is a special case of ARG_PTR_TO_FIXED_SIZE_MEM just with additional alignment requirement. So it is better to just get rid of the ARG_PTR_TO_{LONG\,INT} special cases altogether and reuse the fixed size memory types. For this\, add MEM_ALIGNED to additionally ensure alignment given these helpers write directly into the args via *<ptr> = val. The .arg*_size has been initialized reflecting the actual sizeof(*<ptr>).  MEM_ALIGNED can only be used in combination with MEM_FIXED_SIZE annotated argument types\, since in !MEM_FIXED_SIZE cases the verifier does not know the buffer size a priori and therefore cannot blindly write *<ptr> = val.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21775,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  can: ctucanfd: handle skb allocation failure  If skb allocation fails\, the pointer to struct can_frame is NULL. This is actually handled everywhere inside ctucan_err_interrupt() except for the only place.  Add the missed NULL check.  Found by Linux Verification Center (linuxtesting.org) with SVACE static analysis tool.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21776,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  USB: hub: Ignore non-compliant devices with too many configs or interfaces  Robert Morris created a test program which can cause usb_hub_to_struct_hub() to dereference a NULL or inappropriate pointer:  Oops: general protection fault\, probably for non-canonical address 0xcccccccccccccccc: 0000 [#1] SMP DEBUG_PAGEALLOC PTI CPU: 7 UID: 0 PID: 117 Comm: kworker/7:1 Not tainted 6.13.0-rc3-00017-gf44d154d6e3d #14 Hardware name: FreeBSD BHYVE/BHYVE\, BIOS 14.0 10/17/2021 Workqueue: usb_hub_wq hub_event RIP: 0010:usb_hub_adjust_deviceremovable+0x78/0x110 ... Call Trace:  <TASK>  ? die_addr+0x31/0x80  ? exc_general_protection+0x1b4/0x3c0  ? asm_exc_general_protection+0x26/0x30  ? usb_hub_adjust_deviceremovable+0x78/0x110  hub_probe+0x7c7/0xab0  usb_probe_interface+0x14b/0x350  really_probe+0xd0/0x2d0  ? __pfx___device_attach_driver+0x10/0x10  __driver_probe_device+0x6e/0x110  driver_probe_device+0x1a/0x90  __device_attach_driver+0x7e/0xc0  bus_for_each_drv+0x7f/0xd0  __device_attach+0xaa/0x1a0  bus_probe_device+0x8b/0xa0  device_add+0x62e/0x810  usb_set_configuration+0x65d/0x990  usb_generic_driver_probe+0x4b/0x70  usb_probe_device+0x36/0xd0  The cause of this error is that the device has two interfaces\, and the hub driver binds to interface 1 instead of interface 0\, which is where usb_hub_to_struct_hub() looks.  We can prevent the problem from occurring by refusing to accept hub devices that violate the USB spec by having more than one configuration or interface.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58079,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: uvcvideo: Fix crash during unbind if gpio unit is in use  We used the wrong device for the device managed functions. We used the usb device\, when we should be using the interface device.  If we unbind the driver from the usb interface\, the cleanup functions are never called. In our case\, the IRQ is never disabled.  If an IRQ is triggered\, it will try to access memory sections that are already free\, causing an OOPS.  We cannot use the function devm_request_threaded_irq here. The devm_* clean functions may be called after the main structure is released by uvc_delete.  Luckily this bug has small impact\, as it is only affected by devices with gpio units and the user has to unbind the device\, a disconnect will not trigger this error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50299,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  sctp: properly validate chunk size in sctp_sf_ootb()  A size validation fix similar to that in Commit 50619dbf8db7 (""sctp: add size validation when walking chunks"") is also required in sctp_sf_ootb() to address a crash reported by syzbot:    BUG: KMSAN: uninit-value in sctp_sf_ootb+0x7f5/0xce0 net/sctp/sm_statefuns.c:3712   sctp_sf_ootb+0x7f5/0xce0 net/sctp/sm_statefuns.c:3712   sctp_do_sm+0x181/0x93d0 net/sctp/sm_sideeffect.c:1166   sctp_endpoint_bh_rcv+0xc38/0xf90 net/sctp/endpointola.c:407   sctp_inq_push+0x2ef/0x380 net/sctp/inqueue.c:88   sctp_rcv+0x3831/0x3b20 net/sctp/input.c:243   sctp4_rcv+0x42/0x50 net/sctp/protocol.c:1159   ip_protocol_deliver_rcu+0xb51/0x13d0 net/ipv4/ip_input.c:205   ip_local_deliver_finish+0x336/0x500 net/ipv4/ip_input.c:233",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50298,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: enetc: allocate vf_state during PF probes  In the previous implementation\, vf_state is allocated memory only when VF is enabled. However\, net_device_ops::ndo_set_vf_mac() may be called before VF is enabled to configure the MAC address of VF. If this is the case\, enetc_pf_set_vf_mac() will access vf_state\, resulting in access to a null pointer. The simplified error log is as follows.  root@ls1028ardb:~# ip link set eno0 vf 1 mac 00:0c:e7:66:77:89 [  173.543315] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000004 [  173.637254] pc : enetc_pf_set_vf_mac+0x3c/0x80 Message from sy [  173.641973] lr : do_setlink+0x4a8/0xec8 [  173.732292] Call trace: [  173.734740]  enetc_pf_set_vf_mac+0x3c/0x80 [  173.738847]  __rtnl_newlink+0x530/0x89c [  173.742692]  rtnl_newlink+0x50/0x7c [  173.746189]  rtnetlink_rcv_msg+0x128/0x390 [  173.750298]  netlink_rcv_skb+0x60/0x130 [  173.754145]  rtnetlink_rcv+0x18/0x24 [  173.757731]  netlink_unicast+0x318/0x380 [  173.761665]  netlink_sendmsg+0x17c/0x3c8",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21629,linux-libc-dev,MEDIUM,6.1.115-1,6.1.124-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: reenable NETIF_F_IPV6_CSUM offload for BIG TCP packets  The blamed commit disabled hardware offoad of IPv6 packets with extension headers on devices that advertise NETIF_F_IPV6_CSUM\, based on the definition of that feature in skbuff.h:   *   * - %NETIF_F_IPV6_CSUM  *     - Driver (device) is only able to checksum plain  *       TCP or UDP packets over IPv6. These are specifically  *       unencapsulated packets of the form IPv6|TCP or  *       IPv6|UDP where the Next Header field in the IPv6  *       header is either TCP or UDP. IPv6 extension headers  *       are not supported with this feature. This feature  *       cannot be set in features for a device with  *       NETIF_F_HW_CSUM also set. This feature is being  *       DEPRECATED (see below).  The change causes skb_warn_bad_offload to fire for BIG TCP packets.  [  496.310233] WARNING: CPU: 13 PID: 23472 at net/core/dev.c:3129 skb_warn_bad_offload+0xc4/0xe0  [  496.310297]  ? skb_warn_bad_offload+0xc4/0xe0 [  496.310300]  skb_checksum_help+0x129/0x1f0 [  496.310303]  skb_csum_hwoffload_help+0x150/0x1b0 [  496.310306]  validate_xmit_skb+0x159/0x270 [  496.310309]  validate_xmit_skb_list+0x41/0x70 [  496.310312]  sch_direct_xmit+0x5c/0x250 [  496.310317]  __qdisc_run+0x388/0x620  BIG TCP introduced an IPV6_TLV_JUMBO IPv6 extension header to communicate packet length\, as this is an IPv6 jumbogram. But\, the feature is only enabled on devices that support BIG TCP TSO. The header is only present for PF_PACKET taps like tcpdump\, and not transmitted by physical devices.  For this specific case of extension headers that are not transmitted\, return to the situation before the blamed commit and support hardware offload.  ipv6_has_hopopt_jumbo() tests not only whether this header is present\, but also that it is the only extension header before a terminal (L4) header.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-36325,libjansson4,LOW,2.14-2,N/A,"An issue was discovered in Jansson through 2.13.1. Due to a parsing error in json_loads\, there's an out-of-bounds read-access bug. NOTE: the vendor reports that this only occurs when a programmer fails to follow the API specification",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-49034,linux-libc-dev,LOW,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  sh: cpuinfo: Fix a warning for CONFIG_CPUMASK_OFFSTACK  When CONFIG_CPUMASK_OFFSTACK and CONFIG_DEBUG_PER_CPU_MAPS are selected\, cpu_max_bits_warn() generates a runtime warning similar as below when showing /proc/cpuinfo. Fix this by using nr_cpu_ids (the runtime limit) instead of NR_CPUS to iterate CPUs.  [    3.052463] ------------[ cut here ]------------ [    3.059679] WARNING: CPU: 3 PID: 1 at include/linux/cpumask.h:108 show_cpuinfo+0x5e8/0x5f0 [    3.070072] Modules linked in: efivarfs autofs4 [    3.076257] CPU: 0 PID: 1 Comm: systemd Not tainted 5.19-rc5+ #1052 [    3.099465] Stack : 9000000100157b08 9000000000f18530 9000000000cf846c 9000000100154000 [    3.109127]         9000000100157a50 0000000000000000 9000000100157a58 9000000000ef7430 [    3.118774]         90000001001578e8 0000000000000040 0000000000000020 ffffffffffffffff [    3.128412]         0000000000aaaaaa 1ab25f00eec96a37 900000010021de80 900000000101c890 [    3.138056]         0000000000000000 0000000000000000 0000000000000000 0000000000aaaaaa [    3.147711]         ffff8000339dc220 0000000000000001 0000000006ab4000 0000000000000000 [    3.157364]         900000000101c998 0000000000000004 9000000000ef7430 0000000000000000 [    3.167012]         0000000000000009 000000000000006c 0000000000000000 0000000000000000 [    3.176641]         9000000000d3de08 9000000001639390 90000000002086d8 00007ffff0080286 [    3.186260]         00000000000000b0 0000000000000004 0000000000000000 0000000000071c1c [    3.195868]         ... [    3.199917] Call Trace: [    3.203941] [<90000000002086d8>] show_stack+0x38/0x14c [    3.210666] [<9000000000cf846c>] dump_stack_lvl+0x60/0x88 [    3.217625] [<900000000023d268>] __warn+0xd0/0x100 [    3.223958] [<9000000000cf3c90>] warn_slowpath_fmt+0x7c/0xcc [    3.231150] [<9000000000210220>] show_cpuinfo+0x5e8/0x5f0 [    3.238080] [<90000000004f578c>] seq_read_iter+0x354/0x4b4 [    3.245098] [<90000000004c2e90>] new_sync_read+0x17c/0x1c4 [    3.252114] [<90000000004c5174>] vfs_read+0x138/0x1d0 [    3.258694] [<90000000004c55f8>] ksys_read+0x70/0x100 [    3.265265] [<9000000000cfde9c>] do_syscall+0x7c/0x94 [    3.271820] [<9000000000202fe4>] handle_syscall+0xc4/0x160 [    3.281824] ---[ end trace 8b484262b4b8c24c ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58072,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtlwifi: remove unused check_buddy_priv  Commit 2461c7d60f9f (""rtlwifi: Update header file"") introduced a global list of private data structures.  Later on\, commit 26634c4b1868 (""rtlwifi Modify existing bits to match vendor version 2013.02.07"") started adding the private data to that list at probe time and added a hook\, check_buddy_priv to find the private data from a similar device.  However\, that function was never used.  Besides\, though there is a lock for that list\, it is never used. And when the probe fails\, the private data is never removed from the list. This would cause a second probe to access freed memory.  Remove the unused hook\, structures and members\, which will prevent the potential race condition on the list and its corruption during a second probe when probe fails.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50292,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: stm32: spdifrx: fix dma channel release in stm32_spdifrx_remove  In case of error when requesting ctrl_chan DMA channel\, ctrl_chan is not null. So the release of the dma channel leads to the following issue: [    4.879000] st\,stm32-spdifrx 500d0000.audio-controller: dma_request_slave_channel error -19 [    4.888975] Unable to handle kernel NULL pointer dereference at virtual address 000000000000003d [...] [    5.096577] Call trace: [    5.099099]  dma_release_channel+0x24/0x100 [    5.103235]  stm32_spdifrx_remove+0x24/0x60 [snd_soc_stm32_spdifrx] [    5.109494]  stm32_spdifrx_probe+0x320/0x4c4 [snd_soc_stm32_spdifrx]  To avoid this issue\, release channel only if the pointer is valid.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58071,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  team: prevent adding a device which is already a team device lower  Prevent adding a device which is already a team device lower\, e.g. adding veth0 if vlan1 was already added and veth0 is a lower of vlan1.  This is not useful in practice and can lead to recursive locking:  $ ip link add veth0 type veth peer name veth1 $ ip link set veth0 up $ ip link set veth1 up $ ip link add link veth0 name veth0.1 type vlan protocol 802.1Q id 1 $ ip link add team0 type team $ ip link set veth0.1 down $ ip link set veth0.1 master team0 team0: Port device veth0.1 added $ ip link set veth0 down $ ip link set veth0 master team0  ============================================ WARNING: possible recursive locking detected 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Not tainted -------------------------------------------- ip/7684 is trying to acquire lock: ffff888016848e00 (team->team_lock_key){+.+.}-{4:4}\, at: team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973)  but task is already holding lock: ffff888016848e00 (team->team_lock_key){+.+.}-{4:4}\, at: team_add_slave (drivers/net/team/team_core.c:1147 drivers/net/team/team_core.c:1977)  other info that might help us debug this: Possible unsafe locking scenario:  CPU0 ---- lock(team->team_lock_key); lock(team->team_lock_key);  *** DEADLOCK ***  May be due to missing lock nesting notation  2 locks held by ip/7684:  stack backtrace: CPU: 3 UID: 0 PID: 7684 Comm: ip Not tainted 6.13.0-rc2-virtme-00441-ga14a429069bb #46 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-debian-1.16.3-2 04/01/2014 Call Trace: <TASK> dump_stack_lvl (lib/dump_stack.c:122) print_deadlock_bug.cold (kernel/locking/lockdep.c:3040) __lock_acquire (kernel/locking/lockdep.c:3893 kernel/locking/lockdep.c:5226) ? netlink_broadcast_filtered (net/netlink/af_netlink.c:1548) lock_acquire.part.0 (kernel/locking/lockdep.c:467 kernel/locking/lockdep.c:5851) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) ? trace_lock_acquire (./include/trace/events/lock.h:24 (discriminator 2)) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) ? lock_acquire (kernel/locking/lockdep.c:5822) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) __mutex_lock (kernel/locking/mutex.c:587 kernel/locking/mutex.c:735) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) ? fib_sync_up (net/ipv4/fib_semantics.c:2167) ? team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) team_device_event (drivers/net/team/team_core.c:2928 drivers/net/team/team_core.c:2951 drivers/net/team/team_core.c:2973) notifier_call_chain (kernel/notifier.c:85) call_netdevice_notifiers_info (net/core/dev.c:1996) __dev_notify_flags (net/core/dev.c:8993) ? __dev_change_flags (net/core/dev.c:8975) dev_change_flags (net/core/dev.c:9027) vlan_device_event (net/8021q/vlan.c:85 net/8021q/vlan.c:470) ? br_device_event (net/bridge/br.c:143) notifier_call_chain (kernel/notifier.c:85) call_netdevice_notifiers_info (net/core/dev.c:1996) dev_open (net/core/dev.c:1519 net/core/dev.c:1505) team_add_slave (drivers/net/team/team_core.c:1219 drivers/net/team/team_core.c:1977) ? __pfx_team_add_slave (drivers/net/team/team_core.c:1972) do_set_master (net/core/rtnetlink.c:2917) do_setlink.isra.0 (net/core/rtnetlink.c:3117)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-2236,libgcrypt20,MEDIUM,1.10.1-3,N/A,"A timing-based side-channel flaw was found in libgcrypt's RSA implementation. This issue may allow a remote attacker to initiate a Bleichenbacher-style attack\, which can lead to the decryption of RSA ciphertexts.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50290,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: cx24116: prevent overflows on SNR calculus  as reported by Coverity\, if reading SNR registers fail\, a negative number will be returned\, causing an underflow when reading SNR registers.  Prevent that.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58077,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: soc-pcm: don't use soc_pcm_ret() on .prepare callback  commit 1f5664351410 (""ASoC: lower ""no backend DAIs enabled for ... Port"" log severity"") ignores -EINVAL error message on common soc_pcm_ret(). It is used from many functions\, ignoring -EINVAL is over-kill.  The reason why -EINVAL was ignored was it really should only be used upon invalid parameters coming from userspace and in that case we don't want to log an error since we do not want to give userspace a way to do a denial-of-service attack on the syslog / diskspace.  So don't use soc_pcm_ret() on .prepare callback is better idea.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58076,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  clk: qcom: gcc-sm6350: Add missing parent_map for two clocks  If a clk_rcg2 has a parent\, it should also have parent_map defined\, otherwise we'll get a NULL pointer dereference when calling clk_set_rate like the following:    [    3.388105] Call trace:   [    3.390664]  qcom_find_src_index+0x3c/0x70 (P)   [    3.395301]  qcom_find_src_index+0x1c/0x70 (L)   [    3.399934]  _freq_tbl_determine_rate+0x48/0x100   [    3.404753]  clk_rcg2_determine_rate+0x1c/0x28   [    3.409387]  clk_core_determine_round_nolock+0x58/0xe4   [    3.421414]  clk_core_round_rate_nolock+0x48/0xfc   [    3.432974]  clk_core_round_rate_nolock+0xd0/0xfc   [    3.444483]  clk_core_set_rate_nolock+0x8c/0x300   [    3.455886]  clk_set_rate+0x38/0x14c  Add the parent_map property for two clocks where it's missing and also un-inline the parent_data as well to keep the matching parent_map and parent_data together.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50296,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: hns3: fix kernel crash when uninstalling driver  When the driver is uninstalled and the VF is disabled concurrently\, a kernel crash occurs. The reason is that the two actions call function pci_disable_sriov(). The num_VFs is checked to determine whether to release the corresponding resources. During the second calling\, num_VFs is not 0 and the resource release function is called. However\, the corresponding resource has been released during the first invoking. Therefore\, the problem occurs:  [15277.839633][T50670] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000020 ... [15278.131557][T50670] Call trace: [15278.134686][T50670]  klist_put+0x28/0x12c [15278.138682][T50670]  klist_del+0x14/0x20 [15278.142592][T50670]  device_del+0xbc/0x3c0 [15278.146676][T50670]  pci_remove_bus_device+0x84/0x120 [15278.151714][T50670]  pci_stop_and_remove_bus_device+0x6c/0x80 [15278.157447][T50670]  pci_iov_remove_virtfn+0xb4/0x12c [15278.162485][T50670]  sriov_disable+0x50/0x11c [15278.166829][T50670]  pci_disable_sriov+0x24/0x30 [15278.171433][T50670]  hnae3_unregister_ae_algo_prepare+0x60/0x90 [hnae3] [15278.178039][T50670]  hclge_exit+0x28/0xd0 [hclge] [15278.182730][T50670]  __se_sys_delete_module.isra.0+0x164/0x230 [15278.188550][T50670]  __arm64_sys_delete_module+0x1c/0x30 [15278.193848][T50670]  invoke_syscall+0x50/0x11c [15278.198278][T50670]  el0_svc_common.constprop.0+0x158/0x164 [15278.203837][T50670]  do_el0_svc+0x34/0xcc [15278.207834][T50670]  el0_svc+0x20/0x30  For details\, see the following figure.       rmmod hclge              disable VFs ---------------------------------------------------- hclge_exit()            sriov_numvfs_store()   ...                     device_lock()   pci_disable_sriov()     hns3_pci_sriov_configure()                             pci_disable_sriov()                               sriov_disable()     sriov_disable()             if !num_VFs :       if !num_VFs :               return;         return;                 sriov_del_vfs()       sriov_del_vfs()             ...         ...                       klist_put()         klist_put()               ...         ...                     num_VFs = 0;       num_VFs = 0;        device_unlock();  In this patch\, when driver is removing\, we get the device_lock() to protect num_VFs\, just like sriov_numvfs_store().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1390,libcap2,MEDIUM,1:2.66-4,N/A,"The PAM module pam_cap.so of libcap configuration supports group names starting with “@”\, during actual parsing\, configurations not starting with “@” are incorrectly recognized as group names. This may result in nonintended users being granted an inherited capability set\, potentially leading to security risks. Attackers can exploit this vulnerability to achieve local privilege escalation on systems where /etc/security/capability.conf is used to configure user inherited privileges by constructing specific usernames.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50295,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: arc: fix the device for dma_map_single/dma_unmap_single  The ndev->dev and pdev->dev aren't the same device\, use ndev->dev.parent which has dma_mask\, ndev->dev.parent is just pdev->dev. Or it would cause the following issue:  [   39.933526] ------------[ cut here ]------------ [   39.938414] WARNING: CPU: 1 PID: 501 at kernel/dma/mapping.c:149 dma_map_page_attrs+0x90/0x1f8",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36968,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: Fix div-by-zero in l2cap_le_flowctl_init()  l2cap_le_flowctl_init() can cause both div-by-zero and an integer overflow since hdev->le_mtu may not fall in the valid range.  Move MTU from hci_dev to hci_conn to validate MTU and stop the connection process earlier if MTU is invalid. Also\, add a missing validation in read_buffer_size() and make it return an error value if the validation fails. Now hci_conn_add() returns ERR_PTR() as it can fail due to the both a kzalloc failure and invalid MTU value.  divide error: 0000 [#1] PREEMPT SMP KASAN NOPTI CPU: 0 PID: 67 Comm: kworker/u5:0 Tainted: G        W          6.9.0-rc5+ #20 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.15.0-1 04/01/2014 Workqueue: hci0 hci_rx_work RIP: 0010:l2cap_le_flowctl_init+0x19e/0x3f0 net/bluetooth/l2cap_core.c:547 Code: e8 17 17 0c 00 66 41 89 9f 84 00 00 00 bf 01 00 00 00 41 b8 02 00 00 00 4c 89 fe 4c 89 e2 89 d9 e8 27 17 0c 00 44 89 f0 31 d2 <66> f7 f3 89 c3 ff c3 4d 8d b7 88 00 00 00 4c 89 f0 48 c1 e8 03 42 RSP: 0018:ffff88810bc0f858 EFLAGS: 00010246 RAX: 00000000000002a0 RBX: 0000000000000000 RCX: dffffc0000000000 RDX: 0000000000000000 RSI: ffff88810bc0f7c0 RDI: ffffc90002dcb66f RBP: ffff88810bc0f880 R08: aa69db2dda70ff01 R09: 0000ffaaaaaaaaaa R10: 0084000000ffaaaa R11: 0000000000000000 R12: ffff88810d65a084 R13: dffffc0000000000 R14: 00000000000002a0 R15: ffff88810d65a000 FS:  0000000000000000(0000) GS:ffff88811ac00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 0000000020000100 CR3: 0000000103268003 CR4: 0000000000770ef0 PKRU: 55555554 Call Trace:  <TASK>  l2cap_le_connect_req net/bluetooth/l2cap_core.c:4902 [inline]  l2cap_le_sig_cmd net/bluetooth/l2cap_core.c:5420 [inline]  l2cap_le_sig_channel net/bluetooth/l2cap_core.c:5486 [inline]  l2cap_recv_frame+0xe59d/0x11710 net/bluetooth/l2cap_core.c:6809  l2cap_recv_acldata+0x544/0x10a0 net/bluetooth/l2cap_core.c:7506  hci_acldata_packet net/bluetooth/hci_core.c:3939 [inline]  hci_rx_work+0x5e5/0xb20 net/bluetooth/hci_core.c:4176  process_one_work kernel/workqueue.c:3254 [inline]  process_scheduled_works+0x90f/0x1530 kernel/workqueue.c:3335  worker_thread+0x926/0xe70 kernel/workqueue.c:3416  kthread+0x2e3/0x380 kernel/kthread.c:388  ret_from_fork+0x5c/0x90 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK> Modules linked in: ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2019-16089,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in the Linux kernel through 5.2.13. nbd_genl_status in drivers/block/nbd.c does not check the nla_nest_start_noflag return value.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53207,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: MGMT: Fix possible deadlocks  This fixes possible deadlocks like the following caused by hci_cmd_sync_dequeue causing the destroy function to run:   INFO: task kworker/u19:0:143 blocked for more than 120 seconds.        Tainted: G        W  O        6.8.0-2024-03-19-intel-next-iLS-24ww14 #1  ""echo 0 > /proc/sys/kernel/hung_task_timeout_secs"" disables this message.  task:kworker/u19:0   state:D stack:0     pid:143   tgid:143   ppid:2      flags:0x00004000  Workqueue: hci0 hci_cmd_sync_work [bluetooth]  Call Trace:   <TASK>   __schedule+0x374/0xaf0   schedule+0x3c/0xf0   schedule_preempt_disabled+0x1c/0x30   __mutex_lock.constprop.0+0x3ef/0x7a0   __mutex_lock_slowpath+0x13/0x20   mutex_lock+0x3c/0x50   mgmt_set_connectable_complete+0xa4/0x150 [bluetooth]   ? kfree+0x211/0x2a0   hci_cmd_sync_dequeue+0xae/0x130 [bluetooth]   ? __pfx_cmd_complete_rsp+0x10/0x10 [bluetooth]   cmd_complete_rsp+0x26/0x80 [bluetooth]   mgmt_pending_foreach+0x4d/0x70 [bluetooth]   __mgmt_power_off+0x8d/0x180 [bluetooth]   ? _raw_spin_unlock_irq+0x23/0x40   hci_dev_close_sync+0x445/0x5b0 [bluetooth]   hci_set_powered_sync+0x149/0x250 [bluetooth]   set_powered_sync+0x24/0x60 [bluetooth]   hci_cmd_sync_work+0x90/0x150 [bluetooth]   process_one_work+0x13e/0x300   worker_thread+0x2f7/0x420   ? __pfx_worker_thread+0x10/0x10   kthread+0x107/0x140   ? __pfx_kthread+0x10/0x10   ret_from_fork+0x3d/0x60   ? __pfx_kthread+0x10/0x10   ret_from_fork_asm+0x1b/0x30   </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53206,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  tcp: Fix use-after-free of nreq in reqsk_timer_handler().  The cited commit replaced inet_csk_reqsk_queue_drop_and_put() with __inet_csk_reqsk_queue_drop() and reqsk_put() in reqsk_timer_handler().  Then\, oreq should be passed to reqsk_put() instead of req; otherwise use-after-free of nreq could happen when reqsk is migrated but the retry attempt failed (e.g. due to timeout).  Let's pass oreq to reqsk_put().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42243,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/filemap: make MAX_PAGECACHE_ORDER acceptable to xarray  Patch series ""mm/filemap: Limit page cache size to that supported by xarray""\, v2.  Currently\, xarray can't support arbitrary page cache size.  More details can be found from the WARN_ON() statement in xas_split_alloc().  In our test whose code is attached below\, we hit the WARN_ON() on ARM64 system where the base page size is 64KB and huge page size is 512MB.  The issue was reported long time ago and some discussions on it can be found here [1].  [1] https://www.spinics.net/lists/linux-xfs/msg75404.html  In order to fix the issue\, we need to adjust MAX_PAGECACHE_ORDER to one supported by xarray and avoid PMD-sized page cache if needed.  The code changes are suggested by David Hildenbrand.  PATCH[1] adjusts MAX_PAGECACHE_ORDER to that supported by xarray PATCH[2-3] avoids PMD-sized page cache in the synchronous readahead path PATCH[4] avoids PMD-sized page cache for shmem files if needed  Test program ============ # cat test.c #define _GNU_SOURCE #include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <fcntl.h> #include <errno.h> #include <sys/syscall.h> #include <sys/mman.h>  #define TEST_XFS_FILENAME\t""/tmp/data"" #define TEST_SHMEM_FILENAME\t""/dev/shm/data"" #define TEST_MEM_SIZE\t\t0x20000000  int main(int argc\, char **argv) { \tconst char *filename; \tint fd = 0; \tvoid *buf = (void *)-1\, *p; \tint pgsize = getpagesize(); \tint ret;  \tif (pgsize != 0x10000) { \t\tfprintf(stderr\, ""64KB base page size is required\\n""); \t\treturn -EPERM; \t}  \tsystem(""echo force > /sys/kernel/mm/transparent_hugepage/shmem_enabled""); \tsystem(""rm -fr /tmp/data""); \tsystem(""rm -fr /dev/shm/data""); \tsystem(""echo 1 > /proc/sys/vm/drop_caches"");  \t/* Open xfs or shmem file */ \tfilename = TEST_XFS_FILENAME; \tif (argc > 1 && !strcmp(argv[1]\, ""shmem"")) \t\tfilename = TEST_SHMEM_FILENAME;  \tfd = open(filename\, O_CREAT | O_RDWR | O_TRUNC); \tif (fd < 0) { \t\tfprintf(stderr\, ""Unable to open <%s>\\n""\, filename); \t\treturn -EIO; \t}  \t/* Extend file size */ \tret = ftruncate(fd\, TEST_MEM_SIZE); \tif (ret) { \t\tfprintf(stderr\, ""Error %d to ftruncate()\\n""\, ret); \t\tgoto cleanup; \t}  \t/* Create VMA */ \tbuf = mmap(NULL\, TEST_MEM_SIZE\, \t\t   PROT_READ | PROT_WRITE\, MAP_SHARED\, fd\, 0); \tif (buf == (void *)-1) { \t\tfprintf(stderr\, ""Unable to mmap <%s>\\n""\, filename); \t\tgoto cleanup; \t}  \tfprintf(stdout\, ""mapped buffer at 0x%p\\n""\, buf); \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_HUGEPAGE);         if (ret) { \t\tfprintf(stderr\, ""Unable to madvise(MADV_HUGEPAGE)\\n""); \t\tgoto cleanup; \t}  \t/* Populate VMA */ \tret = madvise(buf\, TEST_MEM_SIZE\, MADV_POPULATE_WRITE); \tif (ret) { \t\tfprintf(stderr\, ""Error %d to madvise(MADV_POPULATE_WRITE)\\n""\, ret); \t\tgoto cleanup; \t}  \t/* Punch the file to enforce xarray split */ \tret = fallocate(fd\, FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE\,         \t\tTEST_MEM_SIZE - pgsize\, pgsize); \tif (ret) \t\tfprintf(stderr\, ""Error %d to fallocate()\\n""\, ret);  cleanup: \tif (buf != (void *)-1) \t\tmunmap(buf\, TEST_MEM_SIZE); \tif (fd > 0) \t\tclose(fd);  \treturn 0; }  # gcc test.c -o test # cat /proc/1/smaps | grep KernelPageSize | head -n 1 KernelPageSize:       64 kB # ./test shmem    : ------------[ cut here ]------------ WARNING: CPU: 17 PID: 5253 at lib/xarray.c:1025 xas_split_alloc+0xf8/0x128 Modules linked in: nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib  \\ nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct    \\ nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4    \\ ip_set nf_tables rfkill nfnetlink vfat fat virtio_balloon          \\ drm fuse xfs libcrc32c crct10dif_ce ghash_ce sha2_ce sha256_arm64  \\ virtio_net sha1_ce net_failover failover virtio_console virtio_blk \\ dimlib virtio_mmio CPU: 17 PID: 5253 Comm: test Kdump: loaded Tainted: G W 6.10.0-rc5-gavin+ #12 Hardware name: QEMU KVM Virtual Machine\, BIOS edk2-20240524-1.el9 05/24/2024 pstate: 83400005 (Nzcv daif +PAN -UAO +TC ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-39989,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  x86/mce: use is_copy_from_user() to determine copy-from-user context  Patch series ""mm/hwpoison: Fix regressions in memory failure handling""\, v4.  ## 1. What am I trying to do:  This patchset resolves two critical regressions related to memory failure handling that have appeared in the upstream kernel since version 5.17\, as compared to 5.10 LTS.      - copyin case: poison found in user page while kernel copying from user space     - instr case: poison found while instruction fetching in user space  ## 2. What is the expected outcome and why  - For copyin case:  Kernel can recover from poison found where kernel is doing get_user() or copy_from_user() if those places get an error return and the kernel return -EFAULT to the process instead of crashing.  More specifily\, MCE handler checks the fixup handler type to decide whether an in kernel #MC can be recovered.  When EX_TYPE_UACCESS is found\, the PC jumps to recovery code specified in _ASM_EXTABLE_FAULT() and return a -EFAULT to user space.  - For instr case:  If a poison found while instruction fetching in user space\, full recovery is possible.  User process takes #PF\, Linux allocates a new page and fills by reading from storage.   ## 3. What actually happens and why  - For copyin case: kernel panic since v5.17  Commit 4c132d1d844a (""x86/futex: Remove .fixup usage"") introduced a new extable fixup type\, EX_TYPE_EFAULT_REG\, and later patches updated the extable fixup type for copy-from-user operations\, changing it from EX_TYPE_UACCESS to EX_TYPE_EFAULT_REG.  It breaks previous EX_TYPE_UACCESS handling when posion found in get_user() or copy_from_user().  - For instr case: user process is killed by a SIGBUS signal due to #CMCI   and #MCE race  When an uncorrected memory error is consumed there is a race between the CMCI from the memory controller reporting an uncorrected error with a UCNA signature\, and the core reporting and SRAR signature machine check when the data is about to be consumed.  ### Background: why *UN*corrected errors tied to *C*MCI in Intel platform [1]  Prior to Icelake memory controllers reported patrol scrub events that detected a previously unseen uncorrected error in memory by signaling a broadcast machine check with an SRAO (Software Recoverable Action Optional) signature in the machine check bank.  This was overkill because it's not an urgent problem that no core is on the verge of consuming that bad data.  It's also found that multi SRAO UCE may cause nested MCE interrupts and finally become an IERR.  Hence\, Intel downgrades the machine check bank signature of patrol scrub from SRAO to UCNA (Uncorrected\, No Action required)\, and signal changed to #CMCI.  Just to add to the confusion\, Linux does take an action (in uc_decode_notifier()) to try to offline the page despite the UC*NA* signature name.  ### Background: why #CMCI and #MCE race when poison is consuming in     Intel platform [1]  Having decided that CMCI/UCNA is the best action for patrol scrub errors\, the memory controller uses it for reads too.  But the memory controller is executing asynchronously from the core\, and can't tell the difference between a ""real"" read and a speculative read.  So it will do CMCI/UCNA if an error is found in any read.  Thus:  1) Core is clever and thinks address A is needed soon\, issues a    speculative read.  2) Core finds it is going to use address A soon after sending the read    request  3) The CMCI from the memory controller is in a race with MCE from the    core that will soon try to retire the load from address A.  Quite often (because speculation has got better) the CMCI from the memory controller is delivered before the core is committed to the instruction reading address A\, so the interrupt is taken\, and Linux offlines the page (marking it as poison).   ## Why user process is killed for instr case  Commit 046545a661af (""mm/hwpoison: fix error page recovered but reported ""not ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42241,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  mm/shmem: disable PMD-sized page cache if needed  For shmem files\, it's possible that PMD-sized page cache can't be supported by xarray.  For example\, 512MB page cache on ARM64 when the base page size is 64KB can't be supported by xarray.  It leads to errors as the following messages indicate when this sort of xarray entry is split.  WARNING: CPU: 34 PID: 7578 at lib/xarray.c:1025 xas_split_alloc+0xf8/0x128 Modules linked in: binfmt_misc nft_fib_inet nft_fib_ipv4 nft_fib_ipv6   \\ nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject        \\ nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4  \\ ip_set rfkill nf_tables nfnetlink vfat fat virtio_balloon drm fuse xfs  \\ libcrc32c crct10dif_ce ghash_ce sha2_ce sha256_arm64 sha1_ce virtio_net \\ net_failover virtio_console virtio_blk failover dimlib virtio_mmio CPU: 34 PID: 7578 Comm: test Kdump: loaded Tainted: G W 6.10.0-rc5-gavin+ #9 Hardware name: QEMU KVM Virtual Machine\, BIOS edk2-20240524-1.el9 05/24/2024 pstate: 83400005 (Nzcv daif +PAN -UAO +TCO +DIT -SSBS BTYPE=--) pc : xas_split_alloc+0xf8/0x128 lr : split_huge_page_to_list_to_order+0x1c4/0x720 sp : ffff8000882af5f0 x29: ffff8000882af5f0 x28: ffff8000882af650 x27: ffff8000882af768 x26: 0000000000000cc0 x25: 000000000000000d x24: ffff00010625b858 x23: ffff8000882af650 x22: ffffffdfc0900000 x21: 0000000000000000 x20: 0000000000000000 x19: ffffffdfc0900000 x18: 0000000000000000 x17: 0000000000000000 x16: 0000018000000000 x15: 52f8004000000000 x14: 0000e00000000000 x13: 0000000000002000 x12: 0000000000000020 x11: 52f8000000000000 x10: 52f8e1c0ffff6000 x9 : ffffbeb9619a681c x8 : 0000000000000003 x7 : 0000000000000000 x6 : ffff00010b02ddb0 x5 : ffffbeb96395e378 x4 : 0000000000000000 x3 : 0000000000000cc0 x2 : 000000000000000d x1 : 000000000000000c x0 : 0000000000000000 Call trace:  xas_split_alloc+0xf8/0x128  split_huge_page_to_list_to_order+0x1c4/0x720  truncate_inode_partial_folio+0xdc/0x160  shmem_undo_range+0x2bc/0x6a8  shmem_fallocate+0x134/0x430  vfs_fallocate+0x124/0x2e8  ksys_fallocate+0x4c/0xa0  __arm64_sys_fallocate+0x24/0x38  invoke_syscall.constprop.0+0x7c/0xd8  do_el0_svc+0xb4/0xd0  el0_svc+0x44/0x1d8  el0t_64_sync_handler+0x134/0x150  el0t_64_sync+0x17c/0x180  Fix it by disabling PMD-sized page cache when HPAGE_PMD_ORDER is larger than MAX_PAGECACHE_ORDER.  As Matthew Wilcox pointed\, the page cache in a shmem file isn't represented by a multi-index entry and doesn't have this limitation when the xarry entry is split until commit 6b24ca4a1a8d (""mm: Use multi-index entries in the page cache"").",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53203,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  usb: typec: fix potential array underflow in ucsi_ccg_sync_control()  The ""command"" variable can be controlled by the user via debugfs.  The worry is that if con_index is zero then ""&uc->ucsi->connector[con_index - 1]"" would be an array underflow.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53108,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Adjust VSDB parser for replay feature  At some point\, the IEEE ID identification for the replay check in the AMD EDID was added. However\, this check causes the following out-of-bounds issues when using KASAN:  [   27.804016] BUG: KASAN: slab-out-of-bounds in amdgpu_dm_update_freesync_caps+0xefa/0x17a0 [amdgpu] [   27.804788] Read of size 1 at addr ffff8881647fdb00 by task systemd-udevd/383  ...  [   27.821207] Memory state around the buggy address: [   27.821215]  ffff8881647fda00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [   27.821224]  ffff8881647fda80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [   27.821234] >ffff8881647fdb00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   27.821243]                    ^ [   27.821250]  ffff8881647fdb80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc [   27.821259]  ffff8881647fdc00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 [   27.821268] ==================================================================  This is caused because the ID extraction happens outside of the range of the edid lenght. This commit addresses this issue by considering the amd_vsdb_block size.  (cherry picked from commit b7e381b1ccd5e778e3d9c44c669ad38439a861d8)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21938,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  mptcp: fix 'scheduling while atomic' in mptcp_pm_nl_append_new_local_addr  If multiple connection requests attempt to create an implicit mptcp endpoint in parallel\, more than one caller may end up in mptcp_pm_nl_append_new_local_addr because none found the address in local_addr_list during their call to mptcp_pm_nl_get_local_id.  In this case\, the concurrent new_local_addr calls may delete the address entry created by the previous caller.  These deletes use synchronize_rcu\, but this is not permitted in some of the contexts where this function may be called.  During packet recv\, the caller may be in a rcu read critical section and have preemption disabled.  An example stack:     BUG: scheduling while atomic: swapper/2/0/0x00000302     Call Trace:    <IRQ>    dump_stack_lvl (lib/dump_stack.c:117 (discriminator 1))    dump_stack (lib/dump_stack.c:124)    __schedule_bug (kernel/sched/core.c:5943)    schedule_debug.constprop.0 (arch/x86/include/asm/preempt.h:33 kernel/sched/core.c:5970)    __schedule (arch/x86/include/asm/jump_label.h:27 include/linux/jump_label.h:207 kernel/sched/features.h:29 kernel/sched/core.c:6621)    schedule (arch/x86/include/asm/preempt.h:84 kernel/sched/core.c:6804 kernel/sched/core.c:6818)    schedule_timeout (kernel/time/timer.c:2160)    wait_for_completion (kernel/sched/completion.c:96 kernel/sched/completion.c:116 kernel/sched/completion.c:127 kernel/sched/completion.c:148)    __wait_rcu_gp (include/linux/rcupdate.h:311 kernel/rcu/update.c:444)    synchronize_rcu (kernel/rcu/tree.c:3609)    mptcp_pm_nl_append_new_local_addr (net/mptcp/pm_netlink.c:966 net/mptcp/pm_netlink.c:1061)    mptcp_pm_nl_get_local_id (net/mptcp/pm_netlink.c:1164)    mptcp_pm_get_local_id (net/mptcp/pm.c:420)    subflow_check_req (net/mptcp/subflow.c:98 net/mptcp/subflow.c:213)    subflow_v4_route_req (net/mptcp/subflow.c:305)    tcp_conn_request (net/ipv4/tcp_input.c:7216)    subflow_v4_conn_request (net/mptcp/subflow.c:651)    tcp_rcv_state_process (net/ipv4/tcp_input.c:6709)    tcp_v4_do_rcv (net/ipv4/tcp_ipv4.c:1934)    tcp_v4_rcv (net/ipv4/tcp_ipv4.c:2334)    ip_protocol_deliver_rcu (net/ipv4/ip_input.c:205 (discriminator 1))    ip_local_deliver_finish (include/linux/rcupdate.h:813 net/ipv4/ip_input.c:234)    ip_local_deliver (include/linux/netfilter.h:314 include/linux/netfilter.h:308 net/ipv4/ip_input.c:254)    ip_sublist_rcv_finish (include/net/dst.h:461 net/ipv4/ip_input.c:580)    ip_sublist_rcv (net/ipv4/ip_input.c:640)    ip_list_rcv (net/ipv4/ip_input.c:675)    __netif_receive_skb_list_core (net/core/dev.c:5583 net/core/dev.c:5631)    netif_receive_skb_list_internal (net/core/dev.c:5685 net/core/dev.c:5774)    napi_complete_done (include/linux/list.h:37 include/net/gro.h:449 include/net/gro.h:444 net/core/dev.c:6114)    igb_poll (drivers/net/ethernet/intel/igb/igb_main.c:8244) igb    __napi_poll (net/core/dev.c:6582)    net_rx_action (net/core/dev.c:6653 net/core/dev.c:6787)    handle_softirqs (kernel/softirq.c:553)    __irq_exit_rcu (kernel/softirq.c:588 kernel/softirq.c:427 kernel/softirq.c:636)    irq_exit_rcu (kernel/softirq.c:651)    common_interrupt (arch/x86/kernel/irq.c:247 (discriminator 14))    </IRQ>  This problem seems particularly prevalent if the user advertises an endpoint that has a different external vs internal address.  In the case where the external address is advertised and multiple connections already exist\, multiple subflow SYNs arrive in parallel which tends to trigger the race during creation of the first local_addr_list entries which have the internal address instead.  Fix by skipping the replacement of an existing implicit local address if called via mptcp_pm_nl_get_local_id.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21937,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: Add check for mgmt_alloc_skb() in mgmt_remote_name()  Add check for the return value of mgmt_alloc_skb() in mgmt_remote_name() to prevent null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53106,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ima: fix buffer overrun in ima_eventdigest_init_common  Function ima_eventdigest_init() calls ima_eventdigest_init_common() with HASH_ALGO__LAST which is then used to access the array hash_digest_size[] leading to buffer overrun. Have a conditional statement to handle this.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21936,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: Add check for mgmt_alloc_skb() in mgmt_device_connected()  Add check for the return value of mgmt_alloc_skb() in mgmt_device_connected() to prevent null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2007-3719,linux-libc-dev,LOW,6.1.115-1,N/A,"The process scheduler in the Linux kernel 2.6.16 gives preference to ""interactive"" processes that perform voluntary sleeps\, which allows local users to cause a denial of service (CPU consumption)\, as described in ""Secretly Monopolizing the CPU Without Superuser Privileges.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21935,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  rapidio: add check for rio_add_net() in rio_scan_alloc_net()  The return value of rio_add_net() should be checked.  If it fails\, put_device() should be called to free the memory and give up the reference initialized in rio_add_net().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53104,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: uvcvideo: Skip parsing frames of type UVC_VS_UNDEFINED in uvc_parse_format  This can lead to out of bounds writes since frames of this type were not taken into account when calculating the size of the frames buffer in uvc_parse_streaming.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53105,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  mm: page_alloc: move mlocked flag clearance into free_pages_prepare()  Syzbot reported a bad page state problem caused by a page being freed using free_page() still having a mlocked flag at free_pages_prepare() stage:    BUG: Bad page state in process syz.5.504  pfn:61f45   page: refcount:0 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x61f45   flags: 0xfff00000080204(referenced|workingset|mlocked|node=0|zone=1|lastcpupid=0x7ff)   raw: 00fff00000080204 0000000000000000 dead000000000122 0000000000000000   raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000   page dumped because: PAGE_FLAGS_CHECK_AT_FREE flag(s) set   page_owner tracks the page as allocated   page last allocated via order 0\, migratetype Unmovable\, gfp_mask 0x400dc0(GFP_KERNEL_ACCOUNT|__GFP_ZERO)\, pid 8443\, tgid 8442 (syz.5.504)\, ts 201884660643\, free_ts 201499827394    set_page_owner include/linux/page_owner.h:32 [inline]    post_alloc_hook+0x1f3/0x230 mm/page_alloc.c:1537    prep_new_page mm/page_alloc.c:1545 [inline]    get_page_from_freelist+0x303f/0x3190 mm/page_alloc.c:3457    __alloc_pages_noprof+0x292/0x710 mm/page_alloc.c:4733    alloc_pages_mpol_noprof+0x3e8/0x680 mm/mempolicy.c:2265    kvm_coalesced_mmio_init+0x1f/0xf0 virt/kvm/coalesced_mmio.c:99    kvm_create_vm virt/kvm/kvm_main.c:1235 [inline]    kvm_dev_ioctl_create_vm virt/kvm/kvm_main.c:5488 [inline]    kvm_dev_ioctl+0x12dc/0x2240 virt/kvm/kvm_main.c:5530    __do_compat_sys_ioctl fs/ioctl.c:1007 [inline]    __se_compat_sys_ioctl+0x510/0xc90 fs/ioctl.c:950    do_syscall_32_irqs_on arch/x86/entry/common.c:165 [inline]    __do_fast_syscall_32+0xb4/0x110 arch/x86/entry/common.c:386    do_fast_syscall_32+0x34/0x80 arch/x86/entry/common.c:411    entry_SYSENTER_compat_after_hwframe+0x84/0x8e   page last free pid 8399 tgid 8399 stack trace:    reset_page_owner include/linux/page_owner.h:25 [inline]    free_pages_prepare mm/page_alloc.c:1108 [inline]    free_unref_folios+0xf12/0x18d0 mm/page_alloc.c:2686    folios_put_refs+0x76c/0x860 mm/swap.c:1007    free_pages_and_swap_cache+0x5c8/0x690 mm/swap_state.c:335    __tlb_batch_free_encoded_pages mm/mmu_gather.c:136 [inline]    tlb_batch_pages_flush mm/mmu_gather.c:149 [inline]    tlb_flush_mmu_free mm/mmu_gather.c:366 [inline]    tlb_flush_mmu+0x3a3/0x680 mm/mmu_gather.c:373    tlb_finish_mmu+0xd4/0x200 mm/mmu_gather.c:465    exit_mmap+0x496/0xc40 mm/mmap.c:1926    __mmput+0x115/0x390 kernel/fork.c:1348    exit_mm+0x220/0x310 kernel/exit.c:571    do_exit+0x9b2/0x28e0 kernel/exit.c:926    do_group_exit+0x207/0x2c0 kernel/exit.c:1088    __do_sys_exit_group kernel/exit.c:1099 [inline]    __se_sys_exit_group kernel/exit.c:1097 [inline]    __x64_sys_exit_group+0x3f/0x40 kernel/exit.c:1097    x64_sys_call+0x2634/0x2640 arch/x86/include/generated/asm/syscalls_64.h:232    do_syscall_x64 arch/x86/entry/common.c:52 [inline]    do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83    entry_SYSCALL_64_after_hwframe+0x77/0x7f   Modules linked in:   CPU: 0 UID: 0 PID: 8442 Comm: syz.5.504 Not tainted 6.12.0-rc6-syzkaller #0   Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024   Call Trace:    <TASK>    __dump_stack lib/dump_stack.c:94 [inline]    dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120    bad_page+0x176/0x1d0 mm/page_alloc.c:501    free_page_is_bad mm/page_alloc.c:918 [inline]    free_pages_prepare mm/page_alloc.c:1100 [inline]    free_unref_page+0xed0/0xf20 mm/page_alloc.c:2638    kvm_destroy_vm virt/kvm/kvm_main.c:1327 [inline]    kvm_put_kvm+0xc75/0x1350 virt/kvm/kvm_main.c:1386    kvm_vcpu_release+0x54/0x60 virt/kvm/kvm_main.c:4143    __fput+0x23f/0x880 fs/file_table.c:431    task_work_run+0x24f/0x310 kernel/task_work.c:239    exit_task_work include/linux/task_work.h:43 [inline]    do_exit+0xa2f/0x28e0 kernel/exit.c:939    do_group_exit+0x207/0x2c0 kernel/exit.c:1088    __do_sys_exit_group kernel/exit.c:1099 [in ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21934,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  rapidio: fix an API misues when rio_add_net() fails  rio_add_net() calls device_register() and fails when device_register() fails.  Thus\, put_device() should be used rather than kfree().  Add ""mport->net = NULL;"" to avoid a use after free issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2004-0230,linux-libc-dev,LOW,6.1.115-1,N/A,"TCP\, when using a large Window Size\, makes it easier for remote attackers to guess sequence numbers and cause a denial of service (connection loss) to persistent TCP connections by repeatedly injecting a TCP RST packet\, especially in protocols that use long-lived connections\, such as BGP.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53209,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bnxt_en: Fix receive ring space parameters when XDP is active  The MTU setting at the time an XDP multi-buffer is attached determines whether the aggregation ring will be used and the rx_skb_func handler.  This is done in bnxt_set_rx_skb_mode().  If the MTU is later changed\, the aggregation ring setting may need to be changed and it may become out-of-sync with the settings initially done in bnxt_set_rx_skb_mode().  This may result in random memory corruption and crashes as the HW may DMA data larger than the allocated buffer size\, such as:  BUG: kernel NULL pointer dereference\, address: 00000000000003c0 PGD 0 P4D 0 Oops: 0000 [#1] PREEMPT SMP NOPTI CPU: 17 PID: 0 Comm: swapper/17 Kdump: loaded Tainted: G S         OE      6.1.0-226bf9805506 #1 Hardware name: Wiwynn Delta Lake PVT BZA.02601.0150/Delta Lake-Class1\, BIOS F0E_3A12 08/26/2021 RIP: 0010:bnxt_rx_pkt+0xe97/0x1ae0 [bnxt_en] Code: 8b 95 70 ff ff ff 4c 8b 9d 48 ff ff ff 66 41 89 87 b4 00 00 00 e9 0b f7 ff ff 0f b7 43 0a 49 8b 95 a8 04 00 00 25 ff 0f 00 00 <0f> b7 14 42 48 c1 e2 06 49 03 95 a0 04 00 00 0f b6 42 33f RSP: 0018:ffffa19f40cc0d18 EFLAGS: 00010202 RAX: 00000000000001e0 RBX: ffff8e2c805c6100 RCX: 00000000000007ff RDX: 0000000000000000 RSI: ffff8e2c271ab990 RDI: ffff8e2c84f12380 RBP: ffffa19f40cc0e48 R08: 000000000001000d R09: 974ea2fcddfa4cbf R10: 0000000000000000 R11: ffffa19f40cc0ff8 R12: ffff8e2c94b58980 R13: ffff8e2c952d6600 R14: 0000000000000016 R15: ffff8e2c271ab990 FS:  0000000000000000(0000) GS:ffff8e3b3f840000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00000000000003c0 CR3: 0000000e8580a004 CR4: 00000000007706e0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 PKRU: 55555554 Call Trace:  <IRQ>  __bnxt_poll_work+0x1c2/0x3e0 [bnxt_en]  To address the issue\, we now call bnxt_set_rx_skb_mode() within bnxt_change_mtu() to properly set the AGG rings configuration and update rx_skb_func based on the new MTU value. Additionally\, BNXT_FLAG_NO_AGG_RINGS is cleared at the beginning of bnxt_set_rx_skb_mode() to make sure it gets set or cleared based on the current MTU.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43872,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  RDMA/hns: Fix soft lockup under heavy CEQE load  CEQEs are handled in interrupt handler currently. This may cause the CPU core staying in interrupt context too long and lead to soft lockup under heavy load.  Handle CEQEs in BH workqueue and set an upper limit for the number of CEQE handled by a single call of work handler.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53208,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: MGMT: Fix slab-use-after-free Read in set_powered_sync  This fixes the following crash:  ================================================================== BUG: KASAN: slab-use-after-free in set_powered_sync+0x3a/0xc0 net/bluetooth/mgmt.c:1353 Read of size 8 at addr ffff888029b4dd18 by task kworker/u9:0/54  CPU: 1 UID: 0 PID: 54 Comm: kworker/u9:0 Not tainted 6.11.0-rc6-syzkaller-01155-gf723224742fc #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 08/06/2024 Workqueue: hci0 hci_cmd_sync_work Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:93 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:119  print_address_description mm/kasan/report.c:377 [inline]  print_report+0x169/0x550 mm/kasan/report.c:488 q kasan_report+0x143/0x180 mm/kasan/report.c:601  set_powered_sync+0x3a/0xc0 net/bluetooth/mgmt.c:1353  hci_cmd_sync_work+0x22b/0x400 net/bluetooth/hci_sync.c:328  process_one_work kernel/workqueue.c:3231 [inline]  process_scheduled_works+0xa2c/0x1830 kernel/workqueue.c:3312  worker_thread+0x86d/0xd10 kernel/workqueue.c:3389  kthread+0x2f0/0x390 kernel/kthread.c:389  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>  Allocated by task 5247:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  poison_kmalloc_redzone mm/kasan/common.c:370 [inline]  __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:387  kasan_kmalloc include/linux/kasan.h:211 [inline]  __kmalloc_cache_noprof+0x19c/0x2c0 mm/slub.c:4193  kmalloc_noprof include/linux/slab.h:681 [inline]  kzalloc_noprof include/linux/slab.h:807 [inline]  mgmt_pending_new+0x65/0x250 net/bluetooth/mgmt_util.c:269  mgmt_pending_add+0x36/0x120 net/bluetooth/mgmt_util.c:296  set_powered+0x3cd/0x5e0 net/bluetooth/mgmt.c:1394  hci_mgmt_cmd+0xc47/0x11d0 net/bluetooth/hci_sock.c:1712  hci_sock_sendmsg+0x7b8/0x11c0 net/bluetooth/hci_sock.c:1832  sock_sendmsg_nosec net/socket.c:730 [inline]  __sock_sendmsg+0x221/0x270 net/socket.c:745  sock_write_iter+0x2dd/0x400 net/socket.c:1160  new_sync_write fs/read_write.c:497 [inline]  vfs_write+0xa72/0xc90 fs/read_write.c:590  ksys_write+0x1a0/0x2c0 fs/read_write.c:643  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Freed by task 5246:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  kasan_save_free_info+0x40/0x50 mm/kasan/generic.c:579  poison_slab_object+0xe0/0x150 mm/kasan/common.c:240  __kasan_slab_free+0x37/0x60 mm/kasan/common.c:256  kasan_slab_free include/linux/kasan.h:184 [inline]  slab_free_hook mm/slub.c:2256 [inline]  slab_free mm/slub.c:4477 [inline]  kfree+0x149/0x360 mm/slub.c:4598  settings_rsp+0x2bc/0x390 net/bluetooth/mgmt.c:1443  mgmt_pending_foreach+0xd1/0x130 net/bluetooth/mgmt_util.c:259  __mgmt_power_off+0x112/0x420 net/bluetooth/mgmt.c:9455  hci_dev_close_sync+0x665/0x11a0 net/bluetooth/hci_sync.c:5191  hci_dev_do_close net/bluetooth/hci_core.c:483 [inline]  hci_dev_close+0x112/0x210 net/bluetooth/hci_core.c:508  sock_do_ioctl+0x158/0x460 net/socket.c:1222  sock_ioctl+0x629/0x8e0 net/socket.c:1341  vfs_ioctl fs/ioctl.c:51 [inline]  __do_sys_ioctl fs/ioctl.c:907 [inline]  __se_sys_ioctl+0xfc/0x170 fs/ioctl.c:893  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83gv  entry_SYSCALL_64_after_hwframe+0x77/0x7f",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53103,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  hv_sock: Initializing vsk->trans to NULL to prevent a dangling pointer  When hvs is released\, there is a possibility that vsk->trans may not be initialized to NULL\, which could lead to a dangling pointer. This issue is resolved by initializing vsk->trans to NULL.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21931,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  hwpoison\, memory_hotplug: lock folio before unmap hwpoisoned folio  Commit b15c87263a69 (""hwpoison\, memory_hotplug: allow hwpoisoned pages to be offlined) add page poison checks in do_migrate_range in order to make offline hwpoisoned page possible by introducing isolate_lru_page and try_to_unmap for hwpoisoned page.  However folio lock must be held before calling try_to_unmap.  Add it to fix this problem.  Warning will be produced if folio is not locked during unmap:    ------------[ cut here ]------------   kernel BUG at ./include/linux/swapops.h:400!   Internal error: Oops - BUG: 00000000f2000800 [#1] PREEMPT SMP   Modules linked in:   CPU: 4 UID: 0 PID: 411 Comm: bash Tainted: G        W          6.13.0-rc1-00016-g3c434c7ee82a-dirty #41   Tainted: [W]=WARN   Hardware name: QEMU QEMU Virtual Machine\, BIOS 0.0.0 02/06/2015   pstate: 40400005 (nZcv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : try_to_unmap_one+0xb08/0xd3c   lr : try_to_unmap_one+0x3dc/0xd3c   Call trace:    try_to_unmap_one+0xb08/0xd3c (P)    try_to_unmap_one+0x3dc/0xd3c (L)    rmap_walk_anon+0xdc/0x1f8    rmap_walk+0x3c/0x58    try_to_unmap+0x88/0x90    unmap_poisoned_folio+0x30/0xa8    do_migrate_range+0x4a0/0x568    offline_pages+0x5a4/0x670    memory_block_action+0x17c/0x374    memory_subsys_offline+0x3c/0x78    device_offline+0xa4/0xd0    state_store+0x8c/0xf0    dev_attr_store+0x18/0x2c    sysfs_kf_write+0x44/0x54    kernfs_fop_write_iter+0x118/0x1a8    vfs_write+0x3a8/0x4bc    ksys_write+0x6c/0xf8    __arm64_sys_write+0x1c/0x28    invoke_syscall+0x44/0x100    el0_svc_common.constprop.0+0x40/0xe0    do_el0_svc+0x1c/0x28    el0_svc+0x30/0xd0    el0t_64_sync_handler+0xc8/0xcc    el0t_64_sync+0x198/0x19c   Code: f9407be0 b5fff320 d4210000 17ffff97 (d4210000)   ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53100,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  nvme: tcp: avoid race between queue_lock lock and destroy  Commit 76d54bf20cdc (""nvme-tcp: don't access released socket during error recovery"") added a mutex_lock() call for the queue->queue_lock in nvme_tcp_get_address(). However\, the mutex_lock() races with mutex_destroy() in nvme_tcp_free_queue()\, and causes the WARN below.  DEBUG_LOCKS_WARN_ON(lock->magic != lock) WARNING: CPU: 3 PID: 34077 at kernel/locking/mutex.c:587 __mutex_lock+0xcf0/0x1220 Modules linked in: nvmet_tcp nvmet nvme_tcp nvme_fabrics iw_cm ib_cm ib_core pktcdvd nft_fib_inet nft_fib_ipv4 nft_fib_ipv6 nft_fib nft_reject_inet nf_reject_ipv4 nf_reject_ipv6 nft_reject nft_ct nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 ip_set nf_tables qrtr sunrpc ppdev 9pnet_virtio 9pnet pcspkr netfs parport_pc parport e1000 i2c_piix4 i2c_smbus loop fuse nfnetlink zram bochs drm_vram_helper drm_ttm_helper ttm drm_kms_helper xfs drm sym53c8xx floppy nvme scsi_transport_spi nvme_core nvme_auth serio_raw ata_generic pata_acpi dm_multipath qemu_fw_cfg [last unloaded: ib_uverbs] CPU: 3 UID: 0 PID: 34077 Comm: udisksd Not tainted 6.11.0-rc7 #319 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS 1.16.3-2.fc40 04/01/2014 RIP: 0010:__mutex_lock+0xcf0/0x1220 Code: 08 84 d2 0f 85 c8 04 00 00 8b 15 ef b6 c8 01 85 d2 0f 85 78 f4 ff ff 48 c7 c6 20 93 ee af 48 c7 c7 60 91 ee af e8 f0 a7 6d fd <0f> 0b e9 5e f4 ff ff 48 b8 00 00 00 00 00 fc ff df 4c 89 f2 48 c1 RSP: 0018:ffff88811305f760 EFLAGS: 00010286 RAX: 0000000000000000 RBX: ffff88812c652058 RCX: 0000000000000000 RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000001 RBP: ffff88811305f8b0 R08: 0000000000000001 R09: ffffed1075c36341 R10: ffff8883ae1b1a0b R11: 0000000000010498 R12: 0000000000000000 R13: 0000000000000000 R14: dffffc0000000000 R15: ffff88812c652058 FS:  00007f9713ae4980(0000) GS:ffff8883ae180000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fcd78483c7c CR3: 0000000122c38000 CR4: 00000000000006f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>  ? __warn.cold+0x5b/0x1af  ? __mutex_lock+0xcf0/0x1220  ? report_bug+0x1ec/0x390  ? handle_bug+0x3c/0x80  ? exc_invalid_op+0x13/0x40  ? asm_exc_invalid_op+0x16/0x20  ? __mutex_lock+0xcf0/0x1220  ? nvme_tcp_get_address+0xc2/0x1e0 [nvme_tcp]  ? __pfx___mutex_lock+0x10/0x10  ? __lock_acquire+0xd6a/0x59e0  ? nvme_tcp_get_address+0xc2/0x1e0 [nvme_tcp]  nvme_tcp_get_address+0xc2/0x1e0 [nvme_tcp]  ? __pfx_nvme_tcp_get_address+0x10/0x10 [nvme_tcp]  nvme_sysfs_show_address+0x81/0xc0 [nvme_core]  dev_attr_show+0x42/0x80  ? __asan_memset+0x1f/0x40  sysfs_kf_seq_show+0x1f0/0x370  seq_read_iter+0x2cb/0x1130  ? rw_verify_area+0x3b1/0x590  ? __mutex_lock+0x433/0x1220  vfs_read+0x6a6/0xa20  ? lockdep_hardirqs_on+0x78/0x100  ? __pfx_vfs_read+0x10/0x10  ksys_read+0xf7/0x1d0  ? __pfx_ksys_read+0x10/0x10  ? __x64_sys_openat+0x105/0x1d0  do_syscall_64+0x93/0x180  ? lockdep_hardirqs_on_prepare+0x16d/0x400  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on+0x78/0x100  ? do_syscall_64+0x9f/0x180  ? __pfx_ksys_read+0x10/0x10  ? lockdep_hardirqs_on_prepare+0x16d/0x400  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on+0x78/0x100  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on_prepare+0x16d/0x400  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on+0x78/0x100  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on_prepare+0x16d/0x400  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on+0x78/0x100  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on_prepare+0x16d/0x400  ? do_syscall_64+0x9f/0x180  ? lockdep_hardirqs_on+0x78/0x100  ? do_syscall_64+0x9f/0x180  ? do_syscall_64+0x9f/0x180  entry_SYSCALL_64_after_hwframe+0x76/0x7e RIP: 0033:0x7f9713f55cfa Code: 55 48 89 e5 48 83 ec 20 48 89 55 e8 48 89 75 f0 89 7d f8 e8 e8 74 f8 ff 48 8b 55 e8 48 8b 75 f0 4 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53101,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs: Fix uninitialized value issue in from_kuid and from_kgid  ocfs2_setattr() uses attr->ia_mode\, attr->ia_uid and attr->ia_gid in a trace point even though ATTR_MODE\, ATTR_UID and ATTR_GID aren't set.  Initialize all fields of newattrs to avoid uninitialized variables\, by checking if ATTR_MODE\, ATTR_UID\, ATTR_GID are initialized\, otherwise 0.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26740,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: act_mirred: use the backlog for mirred ingress  The test Davide added in commit ca22da2fbd69 (""act_mirred: use the backlog for nested calls to mirred ingress"") hangs our testing VMs every 10 or so runs\, with the familiar tcp_v4_rcv -> tcp_v4_rcv deadlock reported by lockdep.  The problem as previously described by Davide (see Link) is that if we reverse flow of traffic with the redirect (egress -> ingress) we may reach the same socket which generated the packet. And we may still be holding its socket lock. The common solution to such deadlocks is to put the packet in the Rx backlog\, rather than run the Rx path inline. Do that for all egress -> ingress reversals\, not just once we started to nest mirred calls.  In the past there was a concern that the backlog indirection will lead to loss of error reporting / less accurate stats. But the current workaround does not seem to address the issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57982,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  xfrm: state: fix out-of-bounds read during lookup  lookup and resize can run in parallel.  The xfrm_state_hash_generation seqlock ensures a retry\, but the hash functions can observe a hmask value that is too large for the new hlist array.  rehash does:   rcu_assign_pointer(net->xfrm.state_bydst\, ndst) [..]   net->xfrm.state_hmask = nhashmask;  While state lookup does:   h = xfrm_dst_hash(net\, daddr\, saddr\, tmpl->reqid\, encap_family);   hlist_for_each_entry_rcu(x\, net->xfrm.state_bydst + h\, bydst) {  This is only safe in case the update to state_bydst is larger than net->xfrm.xfrm_state_hmask (or if the lookup function gets serialized via state spinlock again).  Fix this by prefetching state_hmask and the associated pointers. The xfrm_state_hash_generation seqlock retry will ensure that the pointer and the hmask will be consistent.  The existing helpers\, like xfrm_dst_hash()\, are now unsafe for RCU side\, add lockdep assertions to document that they are only safe for insert side.  xfrm_state_lookup_byaddr() uses the spinlock rather than RCU. AFAICS this is an oversight from back when state lookup was converted to RCU\, this lock should be replaced with RCU in a future patch.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26458,libgssapi-krb5-2,LOW,1.20.1-2+deb12u2,N/A,"Kerberos 5 (aka krb5) 1.21.2 contains a memory leak in /krb5/src/lib/rpc/pmap_rmt.c.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23138,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  watch_queue: fix pipe accounting mismatch  Currently\, watch_queue_set_size() modifies the pipe buffers charged to user->pipe_bufs without updating the pipe->nr_accounted on the pipe itself\, due to the if (!pipe_has_watch_queue()) test in pipe_resize_ring(). This means that when the pipe is ultimately freed\, we decrement user->pipe_bufs by something other than what than we had charged to it\, potentially leading to an underflow. This in turn can cause subsequent too_many_pipe_buffers_soft() tests to fail with -EPERM.  To remedy this\, explicitly account for the pipe usage in watch_queue_set_size() to match the number set via account_pipe_buffers()  (It's unclear why watch_queue_set_size() does not update nr_accounted; it may be due to intentional overprovisioning in watch_queue_set_size()?)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57980,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: uvcvideo: Fix double free in error path  If the uvc_status_init() function fails to allocate the int_urb\, it will free the dev->status pointer but doesn't reset the pointer to NULL. This results in the kfree() call in uvc_status_cleanup() trying to double-free the memory. Fix it by resetting the dev->status pointer to NULL after freeing it.  Reviewed by: Ricardo Ribalda <ribalda@chromium.org>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58009,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: handle NULL sock pointer in l2cap_sock_alloc  A NULL sock pointer is passed into l2cap_sock_alloc() when it is called from l2cap_sock_new_connection_cb() and the error handling paths should also be aware of it.  Seemingly a more elegant solution would be to swap bt_sock_alloc() and l2cap_chan_create() calls since they are not interdependent to that moment but then l2cap_chan_create() adds the soon to be deallocated and still dummy-initialized channel to the global list accessible by many L2CAP paths. The channel would be removed from the list in short period of time but be a bit more straight-forward here and just check for NULL instead of changing the order of function calls.  Found by Linux Verification Center (linuxtesting.org) with SVACE static analysis tool.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57981,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  usb: xhci: Fix NULL pointer dereference on certain command aborts  If a command is queued to the final usable TRB of a ring segment\, the enqueue pointer is advanced to the subsequent link TRB and no further. If the command is later aborted\, when the abort completion is handled the dequeue pointer is advanced to the first TRB of the next segment.  If no further commands are queued\, xhci_handle_stopped_cmd_ring() sees the ring pointers unequal and assumes that there is a pending command\, so it calls xhci_mod_cmd_timer() which crashes if cur_cmd was NULL.  Don't attempt timer setup if cur_cmd is NULL. The subsequent doorbell ring likely is unnecessary too\, but it's harmless. Leave it alone.  This is probably Bug 219532\, but no confirmation has been received.  The issue has been independently reproduced and confirmed fixed using a USB MCU programmed to NAK the Status stage of SET_ADDRESS forever. Everything continued working normally after several prevented crashes.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57986,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  HID: core: Fix assumption that Resolution Multipliers must be in Logical Collections  A report in 2019 by the syzbot fuzzer was found to be connected to two errors in the HID core associated with Resolution Multipliers.  One of the errors was fixed by commit ea427a222d8b (""HID: core: Fix deadloop in hid_apply_multiplier."")\, but the other has not been fixed.  This error arises because hid_apply_multipler() assumes that every Resolution Multiplier control is contained in a Logical Collection\, i.e.\, there's no way the routine can ever set multiplier_collection to NULL.  This is in spite of the fact that the function starts with a big comment saying:  \t * ""The Resolution Multiplier control must be contained in the same \t * Logical Collection as the control(s) to which it is to be applied. \t   ... \t *  If no Logical Collection is \t * defined\, the Resolution Multiplier is associated with all \t * controls in the report."" \t * HID Usage Table\, v1.12\, Section 4.3.1\, p30 \t * \t * Thus\, search from the current collection upwards until we find a \t * logical collection...  The comment and the code overlook the possibility that none of the collections found may be a Logical Collection.  The fix is to set the multiplier_collection pointer to NULL if the collection found isn't a Logical Collection.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52356,libtiff6,HIGH,4.5.0-6+deb12u1,4.5.0-6+deb12u2,"A segment fault (SEGV) flaw was found in libtiff that could be triggered by passing a crafted tiff file to the TIFFReadRGBATileExt() API. This flaw allows a remote attacker to cause a heap-buffer overflow\, leading to a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-57984,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  i3c: dw: Fix use-after-free in dw_i3c_master driver due to race condition  In dw_i3c_common_probe\, &master->hj_work is bound with dw_i3c_hj_work. And dw_i3c_master_irq_handler can call dw_i3c_master_irq_handle_ibis function to start the work.  If we remove the module which will call dw_i3c_common_remove to make cleanup\, it will free master->base through i3c_master_unregister while the work mentioned above will be used. The sequence of operations that may lead to a UAF bug is as follows:  CPU0                                      CPU1                                       | dw_i3c_hj_work dw_i3c_common_remove                 | i3c_master_unregister(&master->base) | device_unregister(&master->dev)      | device_release                       | //free master->base                  |                                      | i3c_master_do_daa(&master->base)                                      | //use master->base  Fix it by ensuring that the work is canceled before proceeding with the cleanup in dw_i3c_common_remove.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52355,libtiff6,HIGH,4.5.0-6+deb12u2,N/A,"An out-of-memory flaw was found in libtiff that could be triggered by passing a crafted tiff file to the TIFFRasterScanlineSize64() API. This flaw allows a remote attacker to cause a denial of service via a crafted input with a size smaller than 379 KB.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42158,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  s390/pkey: Use kfree_sensitive() to fix Coccinelle warnings  Replace memzero_explicit() and kfree() with kfree_sensitive() to fix warnings reported by Coccinelle:  WARNING opportunity for kfree_sensitive/kvfree_sensitive (line 1506) WARNING opportunity for kfree_sensitive/kvfree_sensitive (line 1643) WARNING opportunity for kfree_sensitive/kvfree_sensitive (line 1770)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2014-9900,linux-libc-dev,LOW,6.1.115-1,N/A,"The ethtool_get_wol function in net/core/ethtool.c in the Linux kernel through 4.7\, as used in Android before 2016-08-05 on Nexus 5 and 7 (2013) devices\, does not initialize a certain data structure\, which allows local users to obtain sensitive information via a crafted application\, aka Android internal bug 28803952 and Qualcomm internal bug CR570754.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23131,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  dlm: prevent NPD when writing a positive value to event_done  do_uevent returns the value written to event_done. In case it is a positive value\, new_lockspace would undo all the work\, and lockspace would not be set. __dlm_new_lockspace\, however\, would treat that positive value as a success due to commit 8511a2728ab8 (""dlm: fix use count with multiple joins"").  Down the line\, device_create_lockspace would pass that NULL lockspace to dlm_find_lockspace_local\, leading to a NULL pointer dereference.  Treating such positive values as successes prevents the problem. Given this has been broken for so long\, this is unlikely to break userspace expectations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58002,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  media: uvcvideo: Remove dangling pointers  When an async control is written\, we copy a pointer to the file handle that started the operation. That pointer will be used when the device is done. Which could be anytime in the future.  If the user closes that file descriptor\, its structure will be freed\, and there will be one dangling pointer per pending async control\, that the driver will try to use.  Clean all the dangling pointers during release().  To avoid adding a performance penalty in the most common case (no async operation)\, a counter has been introduced with some logic to make sure that it is properly handled.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23130,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: fix to avoid panic once fallocation fails for pinfile  syzbot reports a f2fs bug as below:  ------------[ cut here ]------------ kernel BUG at fs/f2fs/segment.c:2746! CPU: 0 UID: 0 PID: 5323 Comm: syz.0.0 Not tainted 6.13.0-rc2-syzkaller-00018-g7cb1b4663150 #0 RIP: 0010:get_new_segment fs/f2fs/segment.c:2746 [inline] RIP: 0010:new_curseg+0x1f52/0x1f70 fs/f2fs/segment.c:2876 Call Trace:  <TASK>  __allocate_new_segment+0x1ce/0x940 fs/f2fs/segment.c:3210  f2fs_allocate_new_section fs/f2fs/segment.c:3224 [inline]  f2fs_allocate_pinning_section+0xfa/0x4e0 fs/f2fs/segment.c:3238  f2fs_expand_inode_data+0x696/0xca0 fs/f2fs/file.c:1830  f2fs_fallocate+0x537/0xa10 fs/f2fs/file.c:1940  vfs_fallocate+0x569/0x6e0 fs/open.c:327  do_vfs_ioctl+0x258c/0x2e40 fs/ioctl.c:885  __do_sys_ioctl fs/ioctl.c:904 [inline]  __se_sys_ioctl+0x80/0x170 fs/ioctl.c:892  do_syscall_x64 arch/x86/entry/common.c:52 [inline]  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83  entry_SYSCALL_64_after_hwframe+0x77/0x7f  Concurrent pinfile allocation may run out of free section\, result in panic in get_new_segment()\, let's expand pin_sem lock coverage to include f2fs_gc()\, so that we can make sure to reclaim enough free space for following allocation.  In addition\, do below changes to enhance error path handling: - call f2fs_bug_on() only in non-pinfile allocation path in get_new_segment(). - call reset_curseg_fields() to reset all fields of curseg in new_curseg()",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42156,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  s390/pkey: Wipe copies of clear-key structures on failure  Wipe all sensitive data from stack for all IOCTLs\, which convert a clear-key into a protected- or secure-key.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-42155,linux-libc-dev,LOW,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  s390/pkey: Wipe copies of protected- and secure-keys  Although the clear-key of neither protected- nor secure-keys is accessible\, this key material should only be visible to the calling process. So wipe all copies of protected- or secure-keys from stack\, even in case of an error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23133,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: ath11k: update channel list in reg notifier instead reg worker  Currently when ath11k gets a new channel list\, it will be processed according to the following steps: 1. update new channel list to cfg80211 and queue reg_work. 2. cfg80211 handles new channel list during reg_work. 3. update cfg80211's handled channel list to firmware by ath11k_reg_update_chan_list().  But ath11k will immediately execute step 3 after reg_work is just queued. Since step 2 is asynchronous\, cfg80211 may not have completed handling the new channel list\, which may leading to an out-of-bounds write error: BUG: KASAN: slab-out-of-bounds in ath11k_reg_update_chan_list Call Trace:     ath11k_reg_update_chan_list+0xbfe/0xfe0 [ath11k]     kfree+0x109/0x3a0     ath11k_regd_update+0x1cf/0x350 [ath11k]     ath11k_regd_update_work+0x14/0x20 [ath11k]     process_one_work+0xe35/0x14c0  Should ensure step 2 is completely done before executing step 3. Thus Wen raised patch[1]. When flag NL80211_REGDOM_SET_BY_DRIVER is set\, cfg80211 will notify ath11k after step 2 is done.  So enable the flag NL80211_REGDOM_SET_BY_DRIVER then cfg80211 will notify ath11k after step 2 is done. At this time\, there will be no KASAN bug during the execution of the step 3.  [1] https://patchwork.kernel.org/project/linux-wireless/patch/20230201065313.27203-1-quic_wgong@quicinc.com/  Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03125-QCAHSPSWPL_V1_V2_SILICONZ_LITE-3",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23132,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: quota: fix to avoid warning in dquot_writeback_dquots()  F2FS-fs (dm-59): checkpoint=enable has some unwritten data.  ------------[ cut here ]------------ WARNING: CPU: 6 PID: 8013 at fs/quota/dquot.c:691 dquot_writeback_dquots+0x2fc/0x308 pc : dquot_writeback_dquots+0x2fc/0x308 lr : f2fs_quota_sync+0xcc/0x1c4 Call trace: dquot_writeback_dquots+0x2fc/0x308 f2fs_quota_sync+0xcc/0x1c4 f2fs_write_checkpoint+0x3d4/0x9b0 f2fs_issue_checkpoint+0x1bc/0x2c0 f2fs_sync_fs+0x54/0x150 f2fs_do_sync_file+0x2f8/0x814 __f2fs_ioctl+0x1960/0x3244 f2fs_ioctl+0x54/0xe0 __arm64_sys_ioctl+0xa8/0xe4 invoke_syscall+0x58/0x114  checkpoint and f2fs_remount may race as below\, resulting triggering warning in dquot_writeback_dquots().  atomic write                                    remount                                                 - do_remount                                                  - down_write(&sb->s_umount);                                                   - f2fs_remount - ioctl  - f2fs_do_sync_file   - f2fs_sync_fs    - f2fs_write_checkpoint     - block_operations      - locked = down_read_trylock(&sbi->sb->s_umount)        : fail to lock due to the write lock was held by remount                                                  - up_write(&sb->s_umount);      - f2fs_quota_sync       - dquot_writeback_dquots        - WARN_ON_ONCE(!rwsem_is_locked(&sb->s_umount))        : trigger warning because s_umount lock was unlocked by remount  If checkpoint comes from mount/umount/remount/freeze/quotactl\, caller of checkpoint has already held s_umount lock\, calling dquot_writeback_dquots() in the context should be safe.  So let's record task to sbi->umount_lock_holder\, so that checkpoint can know whether the lock has held in the context or not by checking current w/ it.  In addition\, in order to not misrepresent caller of checkpoint\, we should not allow to trigger async checkpoint for those callers: mount/umount/remount/ freeze/quotactl.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58001,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  ocfs2: handle a symlink read error correctly  Patch series ""Convert ocfs2 to use folios"".  Mark did a conversion of ocfs2 to use folios and sent it to me as a giant patch for review ;-)  So I've redone it as individual patches\, and credited Mark for the patches where his code is substantially the same.  It's not a bad way to do it; his patch had some bugs and my patches had some bugs.  Hopefully all our bugs were different from each other.  And hopefully Mark likes all the changes I made to his code!   This patch (of 23):  If we can't read the buffer\, be sure to unlock the page before returning.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58006,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: dwc: ep: Prevent changing BAR size/flags in pci_epc_set_bar()  In commit 4284c88fff0e (""PCI: designware-ep: Allow pci_epc_set_bar() update inbound map address"") set_bar() was modified to support dynamically changing the backing physical address of a BAR that was already configured.  This means that set_bar() can be called twice\, without ever calling clear_bar() (as calling clear_bar() would clear the BAR's PCI address assigned by the host).  This can only be done if the new BAR size/flags does not differ from the existing BAR configuration. Add these missing checks.  If we allow set_bar() to set e.g. a new BAR size that differs from the existing BAR size\, the new address translation range will be smaller than the BAR size already determined by the host\, which would mean that a read past the new BAR size would pass the iATU untranslated\, which could allow the host to read memory not belonging to the new struct pci_epf_bar.  While at it\, add comments which clarifies the support for dynamically changing the physical address of a BAR. (Which was also missing.)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58007,linux-libc-dev,HIGH,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  soc: qcom: socinfo: Avoid out of bounds read of serial number  On MSM8916 devices\, the serial number exposed in sysfs is constant and does not change across individual devices. It's always:    db410c:/sys/devices/soc0$ cat serial_number   2644893864  The firmware used on MSM8916 exposes SOCINFO_VERSION(0\, 8)\, which does not have support for the serial_num field in the socinfo struct. There is an existing check to avoid exposing the serial number in that case\, but it's not correct: When checking the item_size returned by SMEM\, we need to make sure the *end* of the serial_num is within bounds\, instead of comparing with the *start* offset. The serial_number currently exposed on MSM8916 devices is just an out of bounds read of whatever comes after the socinfo struct in SMEM.  Fix this by changing offsetof() to offsetofend()\, so that the size of the field is also taken into account.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-23136,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  thermal: int340x: Add NULL check for adev  Not all devices have an ACPI companion fwnode\, so adev might be NULL. This is similar to the commit cd2fd6eab480 (""platform/x86: int3472: Check for adev == NULL"").  Add a check for adev not being set and return -ENODEV in that case to avoid a possible NULL pointer deref in int3402_thermal_probe().  Note\, under the same directory\, int3400_thermal_probe() has such a check.  [ rjw: Subject edit\, added Fixes: ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-58005,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  tpm: Change to kvalloc() in eventlog/acpi.c  The following failure was reported on HPE ProLiant D320:  [   10.693310][    T1] tpm_tis STM0925:00: 2.0 TPM (device-id 0x3\, rev-id 0) [   10.848132][    T1] ------------[ cut here ]------------ [   10.853559][    T1] WARNING: CPU: 59 PID: 1 at mm/page_alloc.c:4727 __alloc_pages_noprof+0x2ca/0x330 [   10.862827][    T1] Modules linked in: [   10.866671][    T1] CPU: 59 UID: 0 PID: 1 Comm: swapper/0 Not tainted 6.12.0-lp155.2.g52785e2-default #1 openSUSE Tumbleweed (unreleased) 588cd98293a7c9eba9013378d807364c088c9375 [   10.882741][    T1] Hardware name: HPE ProLiant DL320 Gen12/ProLiant DL320 Gen12\, BIOS 1.20 10/28/2024 [   10.892170][    T1] RIP: 0010:__alloc_pages_noprof+0x2ca/0x330 [   10.898103][    T1] Code: 24 08 e9 4a fe ff ff e8 34 36 fa ff e9 88 fe ff ff 83 fe 0a 0f 86 b3 fd ff ff 80 3d 01 e7 ce 01 00 75 09 c6 05 f8 e6 ce 01 01 <0f> 0b 45 31 ff e9 e5 fe ff ff f7 c2 00 00 08 00 75 42 89 d9 80 e1 [   10.917750][    T1] RSP: 0000:ffffb7cf40077980 EFLAGS: 00010246 [   10.923777][    T1] RAX: 0000000000000000 RBX: 0000000000040cc0 RCX: 0000000000000000 [   10.931727][    T1] RDX: 0000000000000000 RSI: 000000000000000c RDI: 0000000000040cc0  The above transcript shows that ACPI pointed a 16 MiB buffer for the log events because RSI maps to the 'order' parameter of __alloc_pages_noprof(). Address the bug by moving from devm_kmalloc() to devm_add_action() and kvmalloc() and devm_add_action().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56544,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  udmabuf: change folios array from kmalloc to kvmalloc  When PAGE_SIZE 4096\, MAX_PAGE_ORDER 10\, 64bit machine\, page_alloc only support 4MB. If above this\, trigger this warn and return NULL.  udmabuf can change size limit\, if change it to 3072(3GB)\, and then alloc 3GB udmabuf\, will fail create.  [ 4080.876581] ------------[ cut here ]------------ [ 4080.876843] WARNING: CPU: 3 PID: 2015 at mm/page_alloc.c:4556 __alloc_pages+0x2c8/0x350 [ 4080.878839] RIP: 0010:__alloc_pages+0x2c8/0x350 [ 4080.879470] Call Trace: [ 4080.879473]  <TASK> [ 4080.879473]  ? __alloc_pages+0x2c8/0x350 [ 4080.879475]  ? __warn.cold+0x8e/0xe8 [ 4080.880647]  ? __alloc_pages+0x2c8/0x350 [ 4080.880909]  ? report_bug+0xff/0x140 [ 4080.881175]  ? handle_bug+0x3c/0x80 [ 4080.881556]  ? exc_invalid_op+0x17/0x70 [ 4080.881559]  ? asm_exc_invalid_op+0x1a/0x20 [ 4080.882077]  ? udmabuf_create+0x131/0x400  Because MAX_PAGE_ORDER\, kmalloc can max alloc 4096 * (1 << 10)\, 4MB memory\, each array entry is pointer(8byte)\, so can save 524288 pages(2GB).  Further more\, costly order(order 3) may not be guaranteed that it can be applied for\, due to fragmentation.  This patch change udmabuf array use kvmalloc_array\, this can fallback alloc into vmalloc\, which can guarantee allocation for any size and does not affect the performance of kmalloc allocations.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-26934,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue was discovered in the Linux kernel 4.18 through 5.10.16\, as used by Xen. The backend allocation (aka be-alloc) mode of the drm_xen_front drivers was not meant to be a supported configuration\, but this wasn't stated accordingly in its support status entry.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-43966,libheif1,UNKNOWN,1.15.1-1+deb12u1,N/A,"libheif before 1.19.6 has a NULL pointer dereference in ImageItem_iden in image-items/iden.cc.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56546,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  drivers: soc: xilinx: add the missing kfree in xlnx_add_cb_for_suspend()  If we fail to allocate memory for cb_data by kmalloc\, the memory allocation for eve_data is never freed\, add the missing kfree() in the error handling path.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-43967,libheif1,UNKNOWN,1.15.1-1+deb12u1,N/A,"libheif before 1.19.6 has a NULL pointer dereference in ImageItem_Grid::get_decoder in image-items/grid.cc because a grid image can reference a nonexistent image item.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-27363,libfreetype6,HIGH,2.12.1+dfsg-5+deb12u3,2.12.1+dfsg-5+deb12u4,"An out of bounds write exists in FreeType versions 2.13.0 and below (newer versions of FreeType are not vulnerable) when attempting to parse font subglyph structures related to TrueType GX and variable font files. The vulnerable code assigns a signed short value to an unsigned long and then adds a static value causing it to wrap around and allocate too small of a heap buffer. The code then writes up to 6 signed long integers out of bounds relative to this buffer. This may result in arbitrary code execution. This vulnerability may have been exploited in the wild.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56549,linux-libc-dev,MEDIUM,6.1.115-1,6.1.129-1,"In the Linux kernel\, the following vulnerability has been resolved:  cachefiles: Fix NULL pointer dereference in object->file  At present\, the object->file has the NULL pointer dereference problem in ondemand-mode. The root cause is that the allocated fd and object->file lifetime are inconsistent\, and the user-space invocation to anon_fd uses object->file. Following is the process that triggers the issue:  \t  [write fd]\t\t\t\t[umount] cachefiles_ondemand_fd_write_iter \t\t\t\t       fscache_cookie_state_machine \t\t\t\t\t cachefiles_withdraw_cookie   if (!file) return -ENOBUFS \t\t\t\t\t   cachefiles_clean_up_object \t\t\t\t\t     cachefiles_unmark_inode_in_use \t\t\t\t\t     fput(object->file) \t\t\t\t\t     object->file = NULL   // file NULL pointer dereference!   __cachefiles_write(...\, file\, ...)  Fix this issue by add an additional reference count to the object->file before write/llseek\, and decrement after it finished.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56548,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  hfsplus: don't query the device logical block size multiple times  Devices block sizes may change. One of these cases is a loop device by using ioctl LOOP_SET_BLOCK_SIZE.  While this may cause other issues like IO being rejected\, in the case of hfsplus\, it will allocate a block by using that size and potentially write out-of-bounds when hfsplus_read_wrapper calls hfsplus_submit_bio and the latter function reads a different io_size.  Using a new min_io_size initally set to sb_min_blocksize works for the purposes of the original fix\, since it will be set to the max between HFSPLUS_SECTOR_SIZE and the first seen logical block size. We still use the max between HFSPLUS_SECTOR_SIZE and min_io_size in case the latter is not initialized.  Tested by mounting an hfsplus filesystem with loop block sizes 512\, 1024 and 4096.  The produced KASAN report before the fix looks like this:  [  419.944641] ================================================================== [  419.945655] BUG: KASAN: slab-use-after-free in hfsplus_read_wrapper+0x659/0xa0a [  419.946703] Read of size 2 at addr ffff88800721fc00 by task repro/10678 [  419.947612] [  419.947846] CPU: 0 UID: 0 PID: 10678 Comm: repro Not tainted 6.12.0-rc5-00008-gdf56e0f2f3ca #84 [  419.949007] Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.15.0-1 04/01/2014 [  419.950035] Call Trace: [  419.950384]  <TASK> [  419.950676]  dump_stack_lvl+0x57/0x78 [  419.951212]  ? hfsplus_read_wrapper+0x659/0xa0a [  419.951830]  print_report+0x14c/0x49e [  419.952361]  ? __virt_addr_valid+0x267/0x278 [  419.952979]  ? kmem_cache_debug_flags+0xc/0x1d [  419.953561]  ? hfsplus_read_wrapper+0x659/0xa0a [  419.954231]  kasan_report+0x89/0xb0 [  419.954748]  ? hfsplus_read_wrapper+0x659/0xa0a [  419.955367]  hfsplus_read_wrapper+0x659/0xa0a [  419.955948]  ? __pfx_hfsplus_read_wrapper+0x10/0x10 [  419.956618]  ? do_raw_spin_unlock+0x59/0x1a9 [  419.957214]  ? _raw_spin_unlock+0x1a/0x2e [  419.957772]  hfsplus_fill_super+0x348/0x1590 [  419.958355]  ? hlock_class+0x4c/0x109 [  419.958867]  ? __pfx_hfsplus_fill_super+0x10/0x10 [  419.959499]  ? __pfx_string+0x10/0x10 [  419.960006]  ? lock_acquire+0x3e2/0x454 [  419.960532]  ? bdev_name.constprop.0+0xce/0x243 [  419.961129]  ? __pfx_bdev_name.constprop.0+0x10/0x10 [  419.961799]  ? pointer+0x3f0/0x62f [  419.962277]  ? __pfx_pointer+0x10/0x10 [  419.962761]  ? vsnprintf+0x6c4/0xfba [  419.963178]  ? __pfx_vsnprintf+0x10/0x10 [  419.963621]  ? setup_bdev_super+0x376/0x3b3 [  419.964029]  ? snprintf+0x9d/0xd2 [  419.964344]  ? __pfx_snprintf+0x10/0x10 [  419.964675]  ? lock_acquired+0x45c/0x5e9 [  419.965016]  ? set_blocksize+0x139/0x1c1 [  419.965381]  ? sb_set_blocksize+0x6d/0xae [  419.965742]  ? __pfx_hfsplus_fill_super+0x10/0x10 [  419.966179]  mount_bdev+0x12f/0x1bf [  419.966512]  ? __pfx_mount_bdev+0x10/0x10 [  419.966886]  ? vfs_parse_fs_string+0xce/0x111 [  419.967293]  ? __pfx_vfs_parse_fs_string+0x10/0x10 [  419.967702]  ? __pfx_hfsplus_mount+0x10/0x10 [  419.968073]  legacy_get_tree+0x104/0x178 [  419.968414]  vfs_get_tree+0x86/0x296 [  419.968751]  path_mount+0xba3/0xd0b [  419.969157]  ? __pfx_path_mount+0x10/0x10 [  419.969594]  ? kmem_cache_free+0x1e2/0x260 [  419.970311]  do_mount+0x99/0xe0 [  419.970630]  ? __pfx_do_mount+0x10/0x10 [  419.971008]  __do_sys_mount+0x199/0x1c9 [  419.971397]  do_syscall_64+0xd0/0x135 [  419.971761]  entry_SYSCALL_64_after_hwframe+0x76/0x7e [  419.972233] RIP: 0033:0x7c3cb812972e [  419.972564] Code: 48 8b 0d f5 46 0d 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d c2 46 0d 00 f7 d8 64 89 01 48 [  419.974371] RSP: 002b:00007ffe30632548 EFLAGS: 00000286 ORIG_RAX: 00000000000000a5 [  419.975048] RAX: ffffffffffffffda RBX: 00007ffe306328d8 RCX: 00007c3cb812972e [  419.975701] RDX: 0000000020000000 RSI: 0000000020000c80 RDI: ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-46678,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  bonding: change ipsec_lock from spin lock to mutex  In the cited commit\, bond->ipsec_lock is added to protect ipsec_list\, hence xdo_dev_state_add and xdo_dev_state_delete are called inside this lock. As ipsec_lock is a spin lock and such xfrmdev ops may sleep\, ""scheduling while atomic"" will be triggered when changing bond's active slave.  [  101.055189] BUG: scheduling while atomic: bash/902/0x00000200 [  101.055726] Modules linked in: [  101.058211] CPU: 3 PID: 902 Comm: bash Not tainted 6.9.0-rc4+ #1 [  101.058760] Hardware name: [  101.059434] Call Trace: [  101.059436]  <TASK> [  101.060873]  dump_stack_lvl+0x51/0x60 [  101.061275]  __schedule_bug+0x4e/0x60 [  101.061682]  __schedule+0x612/0x7c0 [  101.062078]  ? __mod_timer+0x25c/0x370 [  101.062486]  schedule+0x25/0xd0 [  101.062845]  schedule_timeout+0x77/0xf0 [  101.063265]  ? asm_common_interrupt+0x22/0x40 [  101.063724]  ? __bpf_trace_itimer_state+0x10/0x10 [  101.064215]  __wait_for_common+0x87/0x190 [  101.064648]  ? usleep_range_state+0x90/0x90 [  101.065091]  cmd_exec+0x437/0xb20 [mlx5_core] [  101.065569]  mlx5_cmd_do+0x1e/0x40 [mlx5_core] [  101.066051]  mlx5_cmd_exec+0x18/0x30 [mlx5_core] [  101.066552]  mlx5_crypto_create_dek_key+0xea/0x120 [mlx5_core] [  101.067163]  ? bonding_sysfs_store_option+0x4d/0x80 [bonding] [  101.067738]  ? kmalloc_trace+0x4d/0x350 [  101.068156]  mlx5_ipsec_create_sa_ctx+0x33/0x100 [mlx5_core] [  101.068747]  mlx5e_xfrm_add_state+0x47b/0xaa0 [mlx5_core] [  101.069312]  bond_change_active_slave+0x392/0x900 [bonding] [  101.069868]  bond_option_active_slave_set+0x1c2/0x240 [bonding] [  101.070454]  __bond_opt_set+0xa6/0x430 [bonding] [  101.070935]  __bond_opt_set_notify+0x2f/0x90 [bonding] [  101.071453]  bond_opt_tryset_rtnl+0x72/0xb0 [bonding] [  101.071965]  bonding_sysfs_store_option+0x4d/0x80 [bonding] [  101.072567]  kernfs_fop_write_iter+0x10c/0x1a0 [  101.073033]  vfs_write+0x2d8/0x400 [  101.073416]  ? alloc_fd+0x48/0x180 [  101.073798]  ksys_write+0x5f/0xe0 [  101.074175]  do_syscall_64+0x52/0x110 [  101.074576]  entry_SYSCALL_64_after_hwframe+0x4b/0x53  As bond_ipsec_add_sa_all and bond_ipsec_del_sa_all are only called from bond_change_active_slave\, which requires holding the RTNL lock. And bond_ipsec_add_sa and bond_ipsec_del_sa are xfrm state xdo_dev_state_add and xdo_dev_state_delete APIs\, which are in user context. So ipsec_lock doesn't have to be spin lock\, change it to mutex\, and thus the above issue can be resolved.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52771,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  cxl/port: Fix delete_endpoint() vs parent unregistration race  The CXL subsystem\, at cxl_mem ->probe() time\, establishes a lineage of ports (struct cxl_port objects) between an endpoint and the root of a CXL topology. Each port including the endpoint port is attached to the cxl_port driver.  Given that setup\, it follows that when either any port in that lineage goes through a cxl_port ->remove() event\, or the memdev goes through a cxl_mem ->remove() event. The hierarchy below the removed port\, or the entire hierarchy if the memdev is removed needs to come down.  The delete_endpoint() callback is careful to check whether it is being called to tear down the hierarchy\, or if it is only being called to teardown the memdev because an ancestor port is going through ->remove().  That care needs to take the device_lock() of the endpoint's parent. Which requires 2 bugs to be fixed:  1/ A reference on the parent is needed to prevent use-after-free    scenarios like this signature:      BUG: spinlock bad magic on CPU#0\, kworker/u56:0/11     Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS edk2-20230524-3.fc38 05/24/2023     Workqueue: cxl_port detach_memdev [cxl_core]     RIP: 0010:spin_bug+0x65/0xa0     Call Trace:       do_raw_spin_lock+0x69/0xa0      __mutex_lock+0x695/0xb80      delete_endpoint+0xad/0x150 [cxl_core]      devres_release_all+0xb8/0x110      device_unbind_cleanup+0xe/0x70      device_release_driver_internal+0x1d2/0x210      detach_memdev+0x15/0x20 [cxl_core]      process_one_work+0x1e3/0x4c0      worker_thread+0x1dd/0x3d0  2/ In the case of RCH topologies\, the parent device that needs to be    locked is not always @port->dev as returned by cxl_mem_find_port()\, use    endpoint->dev.parent instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-52770,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  f2fs: split initial and dynamic conditions for extent_cache  Let's allocate the extent_cache tree without dynamic conditions to avoid a missing condition causing a panic as below.   # create a file w/ a compressed flag  # disable the compression  # panic while updating extent_cache  F2FS-fs (dm-64): Swapfile: last extent is not aligned to section F2FS-fs (dm-64): Swapfile (3) is not align to section: 1) creat()\, 2) ioctl(F2FS_IOC_SET_PIN_FILE)\, 3) fallocate(2097152 * N) Adding 124996k swap on ./swap-file.  Priority:0 extents:2 across:17179494468k ================================================================== BUG: KASAN: null-ptr-deref in instrument_atomic_read_write out/common/include/linux/instrumented.h:101 [inline] BUG: KASAN: null-ptr-deref in atomic_try_cmpxchg_acquire out/common/include/asm-generic/atomic-instrumented.h:705 [inline] BUG: KASAN: null-ptr-deref in queued_write_lock out/common/include/asm-generic/qrwlock.h:92 [inline] BUG: KASAN: null-ptr-deref in __raw_write_lock out/common/include/linux/rwlock_api_smp.h:211 [inline] BUG: KASAN: null-ptr-deref in _raw_write_lock+0x5a/0x110 out/common/kernel/locking/spinlock.c:295 Write of size 4 at addr 0000000000000030 by task syz-executor154/3327  CPU: 0 PID: 3327 Comm: syz-executor154 Tainted: G           O      5.10.185 #1 Hardware name: emulation qemu-x86/qemu-x86\, BIOS 2023.01-21885-gb3cc1cd24d 01/01/2023 Call Trace:  __dump_stack out/common/lib/dump_stack.c:77 [inline]  dump_stack_lvl+0x17e/0x1c4 out/common/lib/dump_stack.c:118  __kasan_report+0x16c/0x260 out/common/mm/kasan/report.c:415  kasan_report+0x51/0x70 out/common/mm/kasan/report.c:428  kasan_check_range+0x2f3/0x340 out/common/mm/kasan/generic.c:186  __kasan_check_write+0x14/0x20 out/common/mm/kasan/shadow.c:37  instrument_atomic_read_write out/common/include/linux/instrumented.h:101 [inline]  atomic_try_cmpxchg_acquire out/common/include/asm-generic/atomic-instrumented.h:705 [inline]  queued_write_lock out/common/include/asm-generic/qrwlock.h:92 [inline]  __raw_write_lock out/common/include/linux/rwlock_api_smp.h:211 [inline]  _raw_write_lock+0x5a/0x110 out/common/kernel/locking/spinlock.c:295  __drop_extent_tree+0xdf/0x2f0 out/common/fs/f2fs/extent_cache.c:1155  f2fs_drop_extent_tree+0x17/0x30 out/common/fs/f2fs/extent_cache.c:1172  f2fs_insert_range out/common/fs/f2fs/file.c:1600 [inline]  f2fs_fallocate+0x19fd/0x1f40 out/common/fs/f2fs/file.c:1764  vfs_fallocate+0x514/0x9b0 out/common/fs/open.c:310  ksys_fallocate out/common/fs/open.c:333 [inline]  __do_sys_fallocate out/common/fs/open.c:341 [inline]  __se_sys_fallocate out/common/fs/open.c:339 [inline]  __x64_sys_fallocate+0xb8/0x100 out/common/fs/open.c:339  do_syscall_64+0x35/0x50 out/common/arch/x86/entry/common.c:46",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-26799,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ASoC: qcom: Fix uninitialized pointer dmactl  In the case where __lpass_get_dmactl_handle is called and the driver id dai_id is invalid the pointer dmactl is not being assigned a value\, and dmactl contains a garbage value since it has not been initialized and so the null check may not work. Fix this to initialize dmactl to NULL. One could argue that modern compilers will set this to zero\, but it is useful to keep this initialized as per the same way in functions __lpass_platform_codec_intf_init and lpass_cdc_dma_daiops_hw_params.  Cleans up clang scan build warning: sound/soc/qcom/lpass-cdc-dma.c:275:7: warning: Branch condition evaluates to a garbage value [core.uninitialized.Branch]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49974,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  NFSD: Limit the number of concurrent async COPY operations  Nothing appears to limit the number of concurrent async COPY operations that clients can start. In addition\, AFAICT each async COPY can copy an unlimited number of 4MB chunks\, so can run for a long time. Thus IMO async COPY can become a DoS vector.  Add a restriction mechanism that bounds the number of concurrent background COPY operations. Start simple and try to be fair -- this patch implements a per-namespace limit.  An async COPY request that occurs while this limit is exceeded gets NFS4ERR_DELAY. The requesting client can choose to send the request again after a delay or fall back to a traditional read/write style copy.  If there is need to make the mechanism more sophisticated\, we can visit that in future patches.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56606,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  af_packet: avoid erroring out after sock_init_data() in packet_create()  After sock_init_data() the allocated sk object is attached to the provided sock object. On error\, packet_create() frees the sk object leaving the dangling pointer in the sock object on return. Some other code may try to use this pointer and cause use-after-free.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-37021,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  fpga: manager: add owner module and take its refcount  The current implementation of the fpga manager assumes that the low-level module registers a driver for the parent device and uses its owner pointer to take the module's refcount. This approach is problematic since it can lead to a null pointer dereference while attempting to get the manager if the parent device does not have a driver.  To address this problem\, add a module owner pointer to the fpga_manager struct and use it to take the module's refcount. Modify the functions for registering the manager to take an additional owner module parameter and rename them to avoid conflicts. Use the old function names for helper macros that automatically set the module that registers the manager as the owner. This ensures compatibility with existing low-level control modules and reduces the chances of registering a manager without setting the owner.  Also\, update the documentation to keep it consistent with the new interface for registering an fpga manager.  Other changes: opportunistically move put_device() from __fpga_mgr_get() to fpga_mgr_get() and of_fpga_mgr_get() to improve code clarity since the manager device is taken in these functions.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56604,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: RFCOMM: avoid leaving dangling sk pointer in rfcomm_sock_alloc()  bt_sock_alloc() attaches allocated sk object to the provided sock object. If rfcomm_dlc_alloc() fails\, we release the sk object\, but leave the dangling pointer in the sock object\, which may cause use-after-free.  Fix this by swapping calls to bt_sock_alloc() and rfcomm_dlc_alloc().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56605,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: do not leave dangling sk pointer on error in l2cap_sock_create()  bt_sock_alloc() allocates the sk object and attaches it to the provided sock object. On error l2cap_sock_alloc() frees the sk object\, but the dangling pointer is still attached to the sock object\, which may create use-after-free in other code.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50028,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  thermal: core: Reference count the zone in thermal_zone_get_by_id()  There are places in the thermal netlink code where nothing prevents the thermal zone object from going away while being accessed after it has been returned by thermal_zone_get_by_id().  To address this\, make thermal_zone_get_by_id() get a reference on the thermal zone device object to be returned with the help of get_device()\, under thermal_list_lock\, and adjust all of its callers to this change with the help of the cleanup.h infrastructure.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49970,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Implement bounds check for stream encoder creation in DCN401  'stream_enc_regs' array is an array of dcn10_stream_enc_registers structures. The array is initialized with four elements\, corresponding to the four calls to stream_enc_regs() in the array initializer. This means that valid indices for this array are 0\, 1\, 2\, and 3.  The error message 'stream_enc_regs' 4 <= 5 below\, is indicating that there is an attempt to access this array with an index of 5\, which is out of bounds. This could lead to undefined behavior  Here\, eng_id is used as an index to access the stream_enc_regs array. If eng_id is 5\, this would result in an out-of-bounds access on the stream_enc_regs array.  Thus fixing Buffer overflow error in dcn401_stream_encoder_create  Found by smatch: drivers/gpu/drm/amd/amdgpu/../display/dc/resource/dcn401/dcn401_resource.c:1209 dcn401_stream_encoder_create() error: buffer overflow 'stream_enc_regs' 4 <= 5",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56602,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: ieee802154: do not leave a dangling sk pointer in ieee802154_create()  sock_init_data() attaches the allocated sk object to the provided sock object. If ieee802154_create() fails later\, the allocated sk object is freed\, but the dangling pointer remains in the provided sock object\, which may allow use-after-free.  Clear the sk pointer in the sock object on error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56603,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: af_can: do not leave a dangling sk pointer in can_create()  On error can_create() frees the allocated sk object\, but sock_init_data() has already attached it to the provided sock object. This will leave a dangling sk pointer in the sock object and may cause use-after-free later.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50029,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: hci_conn: Fix UAF in hci_enhanced_setup_sync  This checks if the ACL connection remains valid as it could be destroyed while hci_enhanced_setup_sync is pending on cmd_sync leading to the following trace:  BUG: KASAN: slab-use-after-free in hci_enhanced_setup_sync+0x91b/0xa60 Read of size 1 at addr ffff888002328ffd by task kworker/u5:2/37  CPU: 0 UID: 0 PID: 37 Comm: kworker/u5:2 Not tainted 6.11.0-rc6-01300-g810be445d8d6 #7099 Hardware name: QEMU Standard PC (Q35 + ICH9\, 2009)\, BIOS 1.16.3-2.fc40 04/01/2014 Workqueue: hci0 hci_cmd_sync_work Call Trace:  <TASK>  dump_stack_lvl+0x5d/0x80  ? hci_enhanced_setup_sync+0x91b/0xa60  print_report+0x152/0x4c0  ? hci_enhanced_setup_sync+0x91b/0xa60  ? __virt_addr_valid+0x1fa/0x420  ? hci_enhanced_setup_sync+0x91b/0xa60  kasan_report+0xda/0x1b0  ? hci_enhanced_setup_sync+0x91b/0xa60  hci_enhanced_setup_sync+0x91b/0xa60  ? __pfx_hci_enhanced_setup_sync+0x10/0x10  ? __pfx___mutex_lock+0x10/0x10  hci_cmd_sync_work+0x1c2/0x330  process_one_work+0x7d9/0x1360  ? __pfx_lock_acquire+0x10/0x10  ? __pfx_process_one_work+0x10/0x10  ? assign_work+0x167/0x240  worker_thread+0x5b7/0xf60  ? __kthread_parkme+0xac/0x1c0  ? __pfx_worker_thread+0x10/0x10  ? __pfx_worker_thread+0x10/0x10  kthread+0x293/0x360  ? __pfx_kthread+0x10/0x10  ret_from_fork+0x2f/0x70  ? __pfx_kthread+0x10/0x10  ret_from_fork_asm+0x1a/0x30  </TASK>  Allocated by task 34:  kasan_save_stack+0x30/0x50  kasan_save_track+0x14/0x30  __kasan_kmalloc+0x8f/0xa0  __hci_conn_add+0x187/0x17d0  hci_connect_sco+0x2e1/0xb90  sco_sock_connect+0x2a2/0xb80  __sys_connect+0x227/0x2a0  __x64_sys_connect+0x6d/0xb0  do_syscall_64+0x71/0x140  entry_SYSCALL_64_after_hwframe+0x76/0x7e  Freed by task 37:  kasan_save_stack+0x30/0x50  kasan_save_track+0x14/0x30  kasan_save_free_info+0x3b/0x60  __kasan_slab_free+0x101/0x160  kfree+0xd0/0x250  device_release+0x9a/0x210  kobject_put+0x151/0x280  hci_conn_del+0x448/0xbf0  hci_abort_conn_sync+0x46f/0x980  hci_cmd_sync_work+0x1c2/0x330  process_one_work+0x7d9/0x1360  worker_thread+0x5b7/0xf60  kthread+0x293/0x360  ret_from_fork+0x2f/0x70  ret_from_fork_asm+0x1a/0x30",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-13176,libssl3,MEDIUM,3.0.15-1~deb12u1,N/A,"Issue summary: A timing side-channel which could potentially allow recovering the private key exists in the ECDSA signature computation.  Impact summary: A timing side-channel in ECDSA signature computations could allow recovering the private key by an attacker. However\, measuring the timing would require either local access to the signing application or a very fast network connection with low latency.  There is a timing signal of around 300 nanoseconds when the top word of the inverted ECDSA nonce value is zero. This can happen with significant probability only for some of the supported elliptic curves. In particular the NIST P-521 curve is affected. To be able to measure this leak\, the attacker process must either be located in the same physical computer or must have a very fast network connection with low latency. For that reason the severity of this vulnerability is Low.  The FIPS modules in 3.4\, 3.3\, 3.2\, 3.1 and 3.0 are affected by this issue.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-49972,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Deallocate DML memory if allocation fails  [Why] When DC state create DML memory allocation fails\, memory is not deallocated subsequently\, resulting in uninitialized structure that is not NULL.  [How] Deallocate memory if DML memory allocation fails.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56600,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: inet6: do not leave a dangling sk pointer in inet6_create()  sock_init_data() attaches the allocated sk pointer to the provided sock object. If inet6_create() fails later\, the sk object is released\, but the sock object retains the dangling sk pointer\, which may cause use-after-free later.  Clear the sock sk pointer on error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56601,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: inet: do not leave a dangling sk pointer in inet_create()  sock_init_data() attaches the allocated sk object to the provided sock object. If inet_create() fails later\, the sk object is freed\, but the sock object retains the dangling pointer\, which may create use-after-free later.  Clear the sk pointer in the sock object on error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44955,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Don't refer to dc_sink in is_dsc_need_re_compute  [Why] When unplug one of monitors connected after mst hub\, encounter null pointer dereference.  It's due to dc_sink get released immediately in early_unregister() or detect_ctx(). When commit new state which directly referring to info stored in dc_sink will cause null pointer dereference.  [how] Remove redundant checking condition. Relevant condition should already be covered by checking if dsc_aux is null or not. Also reset dsc_aux to NULL when the connector is disconnected.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44957,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  xen: privcmd: Switch from mutex to spinlock for irqfds  irqfd_wakeup() gets EPOLLHUP\, when it is called by eventfd_release() by way of wake_up_poll(&ctx->wqh\, EPOLLHUP)\, which gets called under spin_lock_irqsave(). We can't use a mutex here as it will lead to a deadlock.  Fix it by switching over to a spin lock.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2016-9580,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"An integer overflow vulnerability was found in tiftoimage function in openjpeg 2.1.2\, resulting in heap buffer overflow.",|tykio/midsommar|
CVE-2016-9581,libopenjp2-7,LOW,2.5.0-2+deb12u1,N/A,"An infinite loop vulnerability in tiftoimage that results in heap buffer overflow in convert_32s_C1P1 was found in openjpeg 2.1.2.",|tykio/midsommar|
CVE-2024-44951,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  serial: sc16is7xx: fix TX fifo corruption  Sometimes\, when a packet is received on channel A at almost the same time as a packet is about to be transmitted on channel B\, we observe with a logic analyzer that the received packet on channel A is transmitted on channel B. In other words\, the Tx buffer data on channel B is corrupted with data from channel A.  The problem appeared since commit 4409df5866b7 (""serial: sc16is7xx: change EFR lock to operate on each channels"")\, which changed the EFR locking to operate on each channel instead of chip-wise.  This commit has introduced a regression\, because the EFR lock is used not only to protect the EFR registers access\, but also\, in a very obscure and undocumented way\, to protect access to the data buffer\, which is shared by the Tx and Rx handlers\, but also by each channel of the IC.  Fix this regression first by switching to kfifo_out_linear_ptr() in sc16is7xx_handle_tx() to eliminate the need for a shared Rx/Tx buffer.  Secondly\, replace the chip-wise Rx buffer with a separate Rx buffer for each channel.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-44950,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  serial: sc16is7xx: fix invalid FIFO access with special register set  When enabling access to the special register set\, Receiver time-out and RHR interrupts can happen. In this case\, the IRQ handler will try to read from the FIFO thru the RHR register at address 0x00\, but address 0x00 is mapped to DLL register\, resulting in erroneous FIFO reading.  Call graph example:     sc16is7xx_startup(): entry     sc16is7xx_ms_proc(): entry     sc16is7xx_set_termios(): entry     sc16is7xx_set_baud(): DLH/DLL = $009C --> access special register set     sc16is7xx_port_irq() entry            --> IIR is 0x0C     sc16is7xx_handle_rx() entry     sc16is7xx_fifo_read(): --> unable to access FIFO (RHR) because it is                                mapped to DLL (LCR=LCR_CONF_MODE_A)     sc16is7xx_set_baud(): exit --> Restore access to general register set  Fix the problem by claiming the efr_lock mutex when accessing the Special register set.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56608,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix out-of-bounds access in 'dcn21_link_encoder_create'  An issue was identified in the dcn21_link_encoder_create function where an out-of-bounds access could occur when the hpd_source index was used to reference the link_enc_hpd_regs array. This array has a fixed size and the index was not being checked against the array's bounds before accessing it.  This fix adds a conditional check to ensure that the hpd_source index is within the valid range of the link_enc_hpd_regs array. If the index is out of bounds\, the function now returns NULL to prevent undefined behavior.  References:  [   65.920507] ------------[ cut here ]------------ [   65.920510] UBSAN: array-index-out-of-bounds in drivers/gpu/drm/amd/amdgpu/../display/dc/resource/dcn21/dcn21_resource.c:1312:29 [   65.920519] index 7 is out of range for type 'dcn10_link_enc_hpd_registers [5]' [   65.920523] CPU: 3 PID: 1178 Comm: modprobe Tainted: G           OE      6.8.0-cleanershaderfeatureresetasdntipmi200nv2132 #13 [   65.920525] Hardware name: AMD Majolica-RN/Majolica-RN\, BIOS WMJ0429N_Weekly_20_04_2 04/29/2020 [   65.920527] Call Trace: [   65.920529]  <TASK> [   65.920532]  dump_stack_lvl+0x48/0x70 [   65.920541]  dump_stack+0x10/0x20 [   65.920543]  __ubsan_handle_out_of_bounds+0xa2/0xe0 [   65.920549]  dcn21_link_encoder_create+0xd9/0x140 [amdgpu] [   65.921009]  link_create+0x6d3/0xed0 [amdgpu] [   65.921355]  create_links+0x18a/0x4e0 [amdgpu] [   65.921679]  dc_create+0x360/0x720 [amdgpu] [   65.921999]  ? dmi_matches+0xa0/0x220 [   65.922004]  amdgpu_dm_init+0x2b6/0x2c90 [amdgpu] [   65.922342]  ? console_unlock+0x77/0x120 [   65.922348]  ? dev_printk_emit+0x86/0xb0 [   65.922354]  dm_hw_init+0x15/0x40 [amdgpu] [   65.922686]  amdgpu_device_init+0x26a8/0x33a0 [amdgpu] [   65.922921]  amdgpu_driver_load_kms+0x1b/0xa0 [amdgpu] [   65.923087]  amdgpu_pci_probe+0x1b7/0x630 [amdgpu] [   65.923087]  local_pci_probe+0x4b/0xb0 [   65.923087]  pci_device_probe+0xc8/0x280 [   65.923087]  really_probe+0x187/0x300 [   65.923087]  __driver_probe_device+0x85/0x130 [   65.923087]  driver_probe_device+0x24/0x110 [   65.923087]  __driver_attach+0xac/0x1d0 [   65.923087]  ? __pfx___driver_attach+0x10/0x10 [   65.923087]  bus_for_each_dev+0x7d/0xd0 [   65.923087]  driver_attach+0x1e/0x30 [   65.923087]  bus_add_driver+0xf2/0x200 [   65.923087]  driver_register+0x64/0x130 [   65.923087]  ? __pfx_amdgpu_init+0x10/0x10 [amdgpu] [   65.923087]  __pci_register_driver+0x61/0x70 [   65.923087]  amdgpu_init+0x7d/0xff0 [amdgpu] [   65.923087]  do_one_initcall+0x49/0x310 [   65.923087]  ? kmalloc_trace+0x136/0x360 [   65.923087]  do_init_module+0x6a/0x270 [   65.923087]  load_module+0x1fce/0x23a0 [   65.923087]  init_module_from_file+0x9c/0xe0 [   65.923087]  ? init_module_from_file+0x9c/0xe0 [   65.923087]  idempotent_init_module+0x179/0x230 [   65.923087]  __x64_sys_finit_module+0x5d/0xa0 [   65.923087]  do_syscall_64+0x76/0x120 [   65.923087]  entry_SYSCALL_64_after_hwframe+0x6e/0x76 [   65.923087] RIP: 0033:0x7f2d80f1e88d [   65.923087] Code: 5b 41 5c c3 66 0f 1f 84 00 00 00 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 73 b5 0f 00 f7 d8 64 89 01 48 [   65.923087] RSP: 002b:00007ffc7bc1aa78 EFLAGS: 00000246 ORIG_RAX: 0000000000000139 [   65.923087] RAX: ffffffffffffffda RBX: 0000564c9c1db130 RCX: 00007f2d80f1e88d [   65.923087] RDX: 0000000000000000 RSI: 0000564c9c1e5480 RDI: 000000000000000f [   65.923087] RBP: 0000000000040000 R08: 0000000000000000 R09: 0000000000000002 [   65.923087] R10: 000000000000000f R11: 0000000000000246 R12: 0000564c9c1e5480 [   65.923087] R13: 0000564c9c1db260 R14: 0000000000000000 R15: 0000564c9c1e54b0 [   65.923087]  </TASK> [   65.923927] ---[ end trace ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56609,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: rtw88: use ieee80211_purge_tx_queue() to purge TX skb  When removing kernel modules by:    rmmod rtw88_8723cs rtw88_8703b rtw88_8723x rtw88_sdio rtw88_core  Driver uses skb_queue_purge() to purge TX skb\, but not report tx status causing ""Have pending ack frames!"" warning. Use ieee80211_purge_tx_queue() to correct this.  Since ieee80211_purge_tx_queue() doesn't take locks\, to prevent racing between TX work and purge TX queue\, flush and destroy TX work in advance.     wlan0: deauthenticating from aa:f5:fd:60:4c:a8 by local      choice (Reason: 3=DEAUTH_LEAVING)    ------------[ cut here ]------------    Have pending ack frames!    WARNING: CPU: 3 PID: 9232 at net/mac80211/main.c:1691        ieee80211_free_ack_frame+0x5c/0x90 [mac80211]    CPU: 3 PID: 9232 Comm: rmmod Tainted: G         C        6.10.1-200.fc40.aarch64 #1    Hardware name: pine64 Pine64 PinePhone Braveheart       (1.1)/Pine64 PinePhone Braveheart (1.1)\, BIOS 2024.01 01/01/2024    pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)    pc : ieee80211_free_ack_frame+0x5c/0x90 [mac80211]    lr : ieee80211_free_ack_frame+0x5c/0x90 [mac80211]    sp : ffff80008c1b37b0    x29: ffff80008c1b37b0 x28: ffff000003be8000 x27: 0000000000000000    x26: 0000000000000000 x25: ffff000003dc14b8 x24: ffff80008c1b37d0    x23: ffff000000ff9f80 x22: 0000000000000000 x21: 000000007fffffff    x20: ffff80007c7e93d8 x19: ffff00006e66f400 x18: 0000000000000000    x17: ffff7ffffd2b3000 x16: ffff800083fc0000 x15: 0000000000000000    x14: 0000000000000000 x13: 2173656d61726620 x12: 6b636120676e6964    x11: 0000000000000000 x10: 000000000000005d x9 : ffff8000802af2b0    x8 : ffff80008c1b3430 x7 : 0000000000000001 x6 : 0000000000000001    x5 : 0000000000000000 x4 : 0000000000000000 x3 : 0000000000000000    x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff000003be8000    Call trace:     ieee80211_free_ack_frame+0x5c/0x90 [mac80211]     idr_for_each+0x74/0x110     ieee80211_free_hw+0x44/0xe8 [mac80211]     rtw_sdio_remove+0x9c/0xc0 [rtw88_sdio]     sdio_bus_remove+0x44/0x180     device_remove+0x54/0x90     device_release_driver_internal+0x1d4/0x238     driver_detach+0x54/0xc0     bus_remove_driver+0x78/0x108     driver_unregister+0x38/0x78     sdio_unregister_driver+0x2c/0x40     rtw_8723cs_driver_exit+0x18/0x1000 [rtw88_8723cs]     __do_sys_delete_module.isra.0+0x190/0x338     __arm64_sys_delete_module+0x1c/0x30     invoke_syscall+0x74/0x100     el0_svc_common.constprop.0+0x48/0xf0     do_el0_svc+0x24/0x38     el0_svc+0x3c/0x158     el0t_64_sync_handler+0x120/0x138     el0t_64_sync+0x194/0x198    ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-4134,linux-libc-dev,LOW,6.1.115-1,N/A,"A use-after-free vulnerability was found in the cyttsp4_core driver in the Linux kernel. This issue occurs in the device cleanup routine due to a possible rearming of the watchdog_timer from the workqueue. This could allow a local user to crash the system\, causing a denial of service.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21671,linux-libc-dev,HIGH,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  zram: fix potential UAF of zram table  If zram_meta_alloc failed early\, it frees allocated zram->table without setting it NULL.  Which will potentially cause zram_meta_free to access the table if user reset an failed and uninitialized device.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21673,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  smb: client: fix double free of TCP_Server_Info::hostname  When shutting down the server in cifs_put_tcp_session()\, cifsd thread might be reconnecting to multiple DFS targets before it realizes it should exit the loop\, so @server->hostname can't be freed as long as cifsd thread isn't done.  Otherwise the following can happen:    RIP: 0010:__slab_free+0x223/0x3c0   Code: 5e 41 5f c3 cc cc cc cc 4c 89 de 4c 89 cf 44 89 44 24 08 4c 89   1c 24 e8 fb cf 8e 00 44 8b 44 24 08 4c 8b 1c 24 e9 5f fe ff ff <0f>   0b 41 f7 45 08 00 0d 21 00 0f 85 2d ff ff ff e9 1f ff ff ff 80   RSP: 0018:ffffb26180dbfd08 EFLAGS: 00010246   RAX: ffff8ea34728e510 RBX: ffff8ea34728e500 RCX: 0000000000800068   RDX: 0000000000800068 RSI: 0000000000000000 RDI: ffff8ea340042400   RBP: ffffe112041ca380 R08: 0000000000000001 R09: 0000000000000000   R10: 6170732e31303000 R11: 70726f632e786563 R12: ffff8ea34728e500   R13: ffff8ea340042400 R14: ffff8ea34728e500 R15: 0000000000800068   FS: 0000000000000000(0000) GS:ffff8ea66fd80000(0000)   000000   CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033   CR2: 00007ffc25376080 CR3: 000000012a2ba001 CR4:   PKRU: 55555554   Call Trace:    <TASK>    ? show_trace_log_lvl+0x1c4/0x2df    ? show_trace_log_lvl+0x1c4/0x2df    ? __reconnect_target_unlocked+0x3e/0x160 [cifs]    ? __die_body.cold+0x8/0xd    ? die+0x2b/0x50    ? do_trap+0xce/0x120    ? __slab_free+0x223/0x3c0    ? do_error_trap+0x65/0x80    ? __slab_free+0x223/0x3c0    ? exc_invalid_op+0x4e/0x70    ? __slab_free+0x223/0x3c0    ? asm_exc_invalid_op+0x16/0x20    ? __slab_free+0x223/0x3c0    ? extract_hostname+0x5c/0xa0 [cifs]    ? extract_hostname+0x5c/0xa0 [cifs]    ? __kmalloc+0x4b/0x140    __reconnect_target_unlocked+0x3e/0x160 [cifs]    reconnect_dfs_server+0x145/0x430 [cifs]    cifs_handle_standard+0x1ad/0x1d0 [cifs]    cifs_demultiplex_thread+0x592/0x730 [cifs]    ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]    kthread+0xdd/0x100    ? __pfx_kthread+0x10/0x10    ret_from_fork+0x29/0x50    </TASK>",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56718,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/smc: protect link down work from execute after lgr freed  link down work may be scheduled before lgr freed but execute after lgr freed\, which may result in crash. So it is need to hold a reference before shedule link down work\, and put the reference after work executed or canceled.  The relevant crash call stack as follows:  list_del corruption. prev->next should be ffffb638c9c0fe20\,     but was 0000000000000000  ------------[ cut here ]------------  kernel BUG at lib/list_debug.c:51!  invalid opcode: 0000 [#1] SMP NOPTI  CPU: 6 PID: 978112 Comm: kworker/6:119 Kdump: loaded Tainted: G #1  Hardware name: Alibaba Cloud Alibaba Cloud ECS\, BIOS 2221b89 04/01/2014  Workqueue: events smc_link_down_work [smc]  RIP: 0010:__list_del_entry_valid.cold+0x31/0x47  RSP: 0018:ffffb638c9c0fdd8 EFLAGS: 00010086  RAX: 0000000000000054 RBX: ffff942fb75e5128 RCX: 0000000000000000  RDX: ffff943520930aa0 RSI: ffff94352091fc80 RDI: ffff94352091fc80  RBP: 0000000000000000 R08: 0000000000000000 R09: ffffb638c9c0fc38  R10: ffffb638c9c0fc30 R11: ffffffffa015eb28 R12: 0000000000000002  R13: ffffb638c9c0fe20 R14: 0000000000000001 R15: ffff942f9cd051c0  FS:  0000000000000000(0000) GS:ffff943520900000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007f4f25214000 CR3: 000000025fbae004 CR4: 00000000007706e0  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400  PKRU: 55555554  Call Trace:   rwsem_down_write_slowpath+0x17e/0x470   smc_link_down_work+0x3c/0x60 [smc]   process_one_work+0x1ac/0x350   worker_thread+0x49/0x2f0   ? rescuer_thread+0x360/0x360   kthread+0x118/0x140   ? __kthread_bind_mask+0x60/0x60   ret_from_fork+0x1f/0x30",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2022-1247,linux-libc-dev,LOW,6.1.115-1,N/A,"An issue found in linux-kernel that leads to a race condition in rose_connect(). The rose driver uses rose_neigh->use to represent how many objects are using the rose_neigh. When a user wants to delete a rose_route via rose_ioctl()\, the rose driver calls rose_del_node() and removes neighbours only if their “count” and “use” are zero.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21675,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/mlx5: Clear port select structure when fail to create  Clear the port select structure on error so no stale values left after definers are destroyed. That's because the mlx5_lag_destroy_definers() always try to destroy all lag definers in the tt_map\, so in the flow below lag definers get double-destroyed and cause kernel crash:    mlx5_lag_port_sel_create()     mlx5_lag_create_definers()       mlx5_lag_create_definer()     <- Failed on tt 1         mlx5_lag_destroy_definers() <- definers[tt=0] gets destroyed   mlx5_lag_port_sel_create()     mlx5_lag_create_definers()       mlx5_lag_create_definer()     <- Failed on tt 0         mlx5_lag_destroy_definers() <- definers[tt=0] gets double-destroyed   Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008  Mem abort info:    ESR = 0x0000000096000005    EC = 0x25: DABT (current EL)\, IL = 32 bits    SET = 0\, FnV = 0    EA = 0\, S1PTW = 0    FSC = 0x05: level 1 translation fault  Data abort info:    ISV = 0\, ISS = 0x00000005\, ISS2 = 0x00000000    CM = 0\, WnR = 0\, TnD = 0\, TagAccess = 0    GCS = 0\, Overlay = 0\, DirtyBit = 0\, Xs = 0  user pgtable: 64k pages\, 48-bit VAs\, pgdp=0000000112ce2e00  [0000000000000008] pgd=0000000000000000\, p4d=0000000000000000\, pud=0000000000000000  Internal error: Oops: 0000000096000005 [#1] PREEMPT SMP  Modules linked in: iptable_raw bonding ip_gre ip6_gre gre ip6_tunnel tunnel6 geneve ip6_udp_tunnel udp_tunnel ipip tunnel4 ip_tunnel rdma_ucm(OE) rdma_cm(OE) iw_cm(OE) ib_ipoib(OE) ib_cm(OE) ib_umad(OE) mlx5_ib(OE) ib_uverbs(OE) mlx5_fwctl(OE) fwctl(OE) mlx5_core(OE) mlxdevm(OE) ib_core(OE) mlxfw(OE) memtrack(OE) mlx_compat(OE) openvswitch nsh nf_conncount psample xt_conntrack xt_MASQUERADE nf_conntrack_netlink nfnetlink xfrm_user xfrm_algo xt_addrtype iptable_filter iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 br_netfilter bridge stp llc netconsole overlay efi_pstore sch_fq_codel zram ip_tables crct10dif_ce qemu_fw_cfg fuse ipv6 crc_ccitt [last unloaded: mlx_compat(OE)]   CPU: 3 UID: 0 PID: 217 Comm: kworker/u53:2 Tainted: G           OE      6.11.0+ #2   Tainted: [O]=OOT_MODULE\, [E]=UNSIGNED_MODULE   Hardware name: QEMU KVM Virtual Machine\, BIOS 0.0.0 02/06/2015   Workqueue: mlx5_lag mlx5_do_bond_work [mlx5_core]   pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)   pc : mlx5_del_flow_rules+0x24/0x2c0 [mlx5_core]   lr : mlx5_lag_destroy_definer+0x54/0x100 [mlx5_core]   sp : ffff800085fafb00   x29: ffff800085fafb00 x28: ffff0000da0c8000 x27: 0000000000000000   x26: ffff0000da0c8000 x25: ffff0000da0c8000 x24: ffff0000da0c8000   x23: ffff0000c31f81a0 x22: 0400000000000000 x21: ffff0000da0c8000   x20: 0000000000000000 x19: 0000000000000001 x18: 0000000000000000   x17: 0000000000000000 x16: 0000000000000000 x15: 0000ffff8b0c9350   x14: 0000000000000000 x13: ffff800081390d18 x12: ffff800081dc3cc0   x11: 0000000000000001 x10: 0000000000000b10 x9 : ffff80007ab7304c   x8 : ffff0000d00711f0 x7 : 0000000000000004 x6 : 0000000000000190   x5 : ffff00027edb3010 x4 : 0000000000000000 x3 : 0000000000000000   x2 : ffff0000d39b8000 x1 : ffff0000d39b8000 x0 : 0400000000000000   Call trace:    mlx5_del_flow_rules+0x24/0x2c0 [mlx5_core]    mlx5_lag_destroy_definer+0x54/0x100 [mlx5_core]    mlx5_lag_destroy_definers+0xa0/0x108 [mlx5_core]    mlx5_lag_port_sel_create+0x2d4/0x6f8 [mlx5_core]    mlx5_activate_lag+0x60c/0x6f8 [mlx5_core]    mlx5_do_bond_work+0x284/0x5c8 [mlx5_core]    process_one_work+0x170/0x3e0    worker_thread+0x2d8/0x3e0    kthread+0x11c/0x128    ret_from_fork+0x10/0x20   Code: a9025bf5 aa0003f6 a90363f7 f90023f9 (f9400400)   ---[ end trace 0000000000000000 ]---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56719,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: stmmac: fix TSO DMA API usage causing oops  Commit 66600fac7a98 (""net: stmmac: TSO: Fix unbalanced DMA map/unmap for non-paged SKB data"") moved the assignment of tx_skbuff_dma[]'s members to be later in stmmac_tso_xmit().  The buf (dma cookie) and len stored in this structure are passed to dma_unmap_single() by stmmac_tx_clean(). The DMA API requires that the dma cookie passed to dma_unmap_single() is the same as the value returned from dma_map_single(). However\, by moving the assignment later\, this is not the case when priv->dma_cap.addr64 > 32 as ""des"" is offset by proto_hdr_len.  This causes problems such as:    dwc-eth-dwmac 2490000.ethernet eth0: Tx DMA map failed  and with DMA_API_DEBUG enabled:    DMA-API: dwc-eth-dwmac 2490000.ethernet: device driver tries to +free DMA memory it has not allocated [device address=0x000000ffffcf65c0] [size=66 bytes]  Fix this by maintaining ""des"" as the original DMA cookie\, and use tso_des to pass the offset DMA cookie to stmmac_tso_allocator().  Full details of the crashes can be found at: https://lore.kernel.org/all/d8112193-0386-4e14-b516-37c2d838171a@nvidia.com/ https://lore.kernel.org/all/klkzp5yn5kq5efgtrow6wbvnc46bcqfxs65nz3qy77ujr5turc@bwwhelz2l4dw/",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21676,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net: fec: handle page_pool_dev_alloc_pages error  The fec_enet_update_cbd function calls page_pool_dev_alloc_pages but did not handle the case when it returned NULL. There was a WARN_ON(!new_page) but it would still proceed to use the NULL pointer and then crash.  This case does seem somewhat rare but when the system is under memory pressure it can happen. One case where I can duplicate this with some frequency is when writing over a smbd share to a SATA HDD attached to an imx6q.  Setting /proc/sys/vm/min_free_kbytes to higher values also seems to solve the problem for my test case. But it still seems wrong that the fec driver ignores the memory allocation error and can crash.  This commit handles the allocation error by dropping the current packet.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56326,Jinja2,MEDIUM,3.1.4,3.1.5,"Jinja is an extensible templating engine. Prior to 3.1.5\, An oversight in how the Jinja sandboxed environment detects calls to str.format allows an attacker that controls the content of a template to execute arbitrary Python code. To exploit the vulnerability\, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates. Jinja's sandbox does catch calls to str.format and ensures they don't escape the sandbox. However\, it's possible to store a reference to a malicious string's format method\, then pass that to a filter that calls it. No such filters are built-in to Jinja\, but could be present through custom filters in an application. After the fix\, such indirect calls are also handled by the sandbox. This vulnerability is fixed in 3.1.5.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-4133,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"A use-after-free vulnerability was found in the cxgb4 driver in the Linux kernel. The bug occurs when the cxgb4 device is detaching due to a possible rearming of the flower_stats_timer from the work queue. This flaw allows a local user to crash the system\, causing a denial of service condition.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21678,linux-libc-dev,MEDIUM,6.1.115-1,6.1.128-1,"In the Linux kernel\, the following vulnerability has been resolved:  gtp: Destroy device along with udp socket's netns dismantle.  gtp_newlink() links the device to a list in dev_net(dev) instead of src_net\, where a udp tunnel socket is created.  Even when src_net is removed\, the device stays alive on dev_net(dev). Then\, removing src_net triggers the splat below. [0]  In this example\, gtp0 is created in ns2\, and the udp socket is created in ns1.    ip netns add ns1   ip netns add ns2   ip -n ns1 link add netns ns2 name gtp0 type gtp role sgsn   ip netns del ns1  Let's link the device to the socket's netns instead.  Now\, gtp_net_exit_batch_rtnl() needs another netdev iteration to remove all gtp devices in the netns.  [0]: ref_tracker: net notrefcnt@000000003d6e7d05 has 1/2 users at      sk_alloc (./include/net/net_namespace.h:345 net/core/sock.c:2236)      inet_create (net/ipv4/af_inet.c:326 net/ipv4/af_inet.c:252)      __sock_create (net/socket.c:1558)      udp_sock_create4 (net/ipv4/udp_tunnel_core.c:18)      gtp_create_sock (./include/net/udp_tunnel.h:59 drivers/net/gtp.c:1423)      gtp_create_sockets (drivers/net/gtp.c:1447)      gtp_newlink (drivers/net/gtp.c:1507)      rtnl_newlink (net/core/rtnetlink.c:3786 net/core/rtnetlink.c:3897 net/core/rtnetlink.c:4012)      rtnetlink_rcv_msg (net/core/rtnetlink.c:6922)      netlink_rcv_skb (net/netlink/af_netlink.c:2542)      netlink_unicast (net/netlink/af_netlink.c:1321 net/netlink/af_netlink.c:1347)      netlink_sendmsg (net/netlink/af_netlink.c:1891)      ____sys_sendmsg (net/socket.c:711 net/socket.c:726 net/socket.c:2583)      ___sys_sendmsg (net/socket.c:2639)      __sys_sendmsg (net/socket.c:2669)      do_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)  WARNING: CPU: 1 PID: 60 at lib/ref_tracker.c:179 ref_tracker_dir_exit (lib/ref_tracker.c:179) Modules linked in: CPU: 1 UID: 0 PID: 60 Comm: kworker/u16:2 Not tainted 6.13.0-rc5-00147-g4c1224501e9d #5 Hardware name: QEMU Standard PC (i440FX + PIIX\, 1996)\, BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014 Workqueue: netns cleanup_net RIP: 0010:ref_tracker_dir_exit (lib/ref_tracker.c:179) Code: 00 00 00 fc ff df 4d 8b 26 49 bd 00 01 00 00 00 00 ad de 4c 39 f5 0f 85 df 00 00 00 48 8b 74 24 08 48 89 df e8 a5 cc 12 02 90 <0f> 0b 90 48 8d 6b 44 be 04 00 00 00 48 89 ef e8 80 de 67 ff 48 89 RSP: 0018:ff11000009a07b60 EFLAGS: 00010286 RAX: 0000000000002bd3 RBX: ff1100000f4e1aa0 RCX: 1ffffffff0e40ac6 RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff8423ee3c RBP: ff1100000f4e1af0 R08: 0000000000000001 R09: fffffbfff0e395ae R10: 0000000000000001 R11: 0000000000036001 R12: ff1100000f4e1af0 R13: dead000000000100 R14: ff1100000f4e1af0 R15: dffffc0000000000 FS:  0000000000000000(0000) GS:ff1100006ce80000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007f9b2464bd98 CR3: 0000000005286005 CR4: 0000000000771ef0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe07f0 DR7: 0000000000000400 PKRU: 55555554 Call Trace:  <TASK>  ? __warn (kernel/panic.c:748)  ? ref_tracker_dir_exit (lib/ref_tracker.c:179)  ? report_bug (lib/bug.c:201 lib/bug.c:219)  ? handle_bug (arch/x86/kernel/traps.c:285)  ? exc_invalid_op (arch/x86/kernel/traps.c:309 (discriminator 1))  ? asm_exc_invalid_op (./arch/x86/include/asm/idtentry.h:621)  ? _raw_spin_unlock_irqrestore (./arch/x86/include/asm/irqflags.h:42 ./arch/x86/include/asm/irqflags.h:97 ./arch/x86/include/asm/irqflags.h:155 ./include/linux/spinlock_api_smp.h:151 kernel/locking/spinlock.c:194)  ? ref_tracker_dir_exit (lib/ref_tracker.c:179)  ? __pfx_ref_tracker_dir_exit (lib/ref_tracker.c:158)  ? kfree (mm/slub.c:4613 mm/slub.c:4761)  net_free (net/core/net_namespace.c:476 net/core/net_namespace.c:467)  cleanup_net (net/core/net_namespace.c:664 (discriminator 3))  process_one_work (kernel/workqueue.c:3229)  worker_thread (kernel/workqueue.c:3304 kernel/workqueue.c:3391 ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2021-32256,binutils,LOW,2.40-2,N/A,"An issue was discovered in GNU libiberty\, as distributed in GNU Binutils 2.36. It is a stack-overflow issue in demangle_type in rust-demangle.c.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56715,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ionic: Fix netdev notifier unregister on failure  If register_netdev() fails\, then the driver leaks the netdev notifier. Fix this by calling ionic_lif_unregister() on register_netdev() failure. This will also call ionic_lif_unregister_phc() if it has already been registered.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56716,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netdevsim: prevent bad user input in nsim_dev_health_break_write()  If either a zero count or a large one is provided\, kernel can crash.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56717,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: mscc: ocelot: fix incorrect IFH SRC_PORT field in ocelot_ifh_set_basic()  Packets injected by the CPU should have a SRC_PORT field equal to the CPU port module index in the Analyzer block (ocelot->num_phys_ports).  The blamed commit copied the ocelot_ifh_set_basic() call incorrectly from ocelot_xmit_common() in net/dsa/tag_ocelot.c. Instead of calling with ""x""\, it calls with BIT_ULL(x)\, but the field is not a port mask\, but rather a single port index.  [ side note: this is the technical debt of code duplication :( ]  The error used to be silent and doesn't appear to have other user-visible manifestations\, but with new changes in the packing library\, it now fails loudly as follows:  ------------[ cut here ]------------ Cannot store 0x40 inside bits 46-43 - will truncate sja1105 spi2.0: xmit timed out WARNING: CPU: 1 PID: 102 at lib/packing.c:98 __pack+0x90/0x198 sja1105 spi2.0: timed out polling for tstamp CPU: 1 UID: 0 PID: 102 Comm: felix_xmit Tainted: G        W        N 6.13.0-rc1-00372-gf706b85d972d-dirty #2605 Call trace:  __pack+0x90/0x198 (P)  __pack+0x90/0x198 (L)  packing+0x78/0x98  ocelot_ifh_set_basic+0x260/0x368  ocelot_port_inject_frame+0xa8/0x250  felix_port_deferred_xmit+0x14c/0x258  kthread_worker_fn+0x134/0x350  kthread+0x114/0x138  The code path pertains to the ocelot switchdev driver and to the felix secondary DSA tag protocol\, ocelot-8021q. Here seen with ocelot-8021q.  The messenger (packing) is not really to blame\, so fix the original commit instead.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2020-36694,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"An issue was discovered in netfilter in the Linux kernel before 5.10. There can be a use-after-free in the packet processing context\, because the per-CPU sequence count is mishandled during concurrent iptables rules replacement. This could be exploited with the CAP_NET_ADMIN capability in an unprivileged namespace. NOTE: cc00bca was reverted in 5.12.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-38637,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  net_sched: skbprio: Remove overly strict queue assertions  In the current implementation\, skbprio enqueue/dequeue contains an assertion that fails under certain conditions when SKBPRIO is used as a child qdisc under TBF with specific parameters. The failure occurs because TBF sometimes peeks at packets in the child qdisc without actually dequeuing them when tokens are unavailable.  This peek operation creates a discrepancy between the parent and child qdisc queue length counters. When TBF later receives a high-priority packet\, SKBPRIO's queue length may show a different value than what's reflected in its internal priority queue tracking\, triggering the assertion.  The fix removes this overly strict assertions in SKBPRIO\, they are not necessary at all.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56712,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  udmabuf: fix memory leak on last export_udmabuf() error path  In export_udmabuf()\, if dma_buf_fd() fails because the FD table is full\, a dma_buf owning the udmabuf has already been created; but the error handling in udmabuf_create() will tear down the udmabuf without doing anything about the containing dma_buf.  This leaves a dma_buf in memory that contains a dangling pointer; though that doesn't seem to lead to anything bad except a memory leak.  Fix it by moving the dma_buf_fd() call out of export_udmabuf() so that we can give it different error handling.  Note that the shape of this code changed a lot in commit 5e72b2b41a21 (""udmabuf: convert udmabuf driver to use folios""); but the memory leak seems to have existed since the introduction of udmabuf.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21960,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  eth: bnxt: do not update checksum in bnxt_xdp_build_skb()  The bnxt_rx_pkt() updates ip_summed value at the end if checksum offload is enabled. When the XDP-MB program is attached and it returns XDP_PASS\, the bnxt_xdp_build_skb() is called to update skb_shared_info. The main purpose of bnxt_xdp_build_skb() is to update skb_shared_info\, but it updates ip_summed value too if checksum offload is enabled. This is actually duplicate work.  When the bnxt_rx_pkt() updates ip_summed value\, it checks if ip_summed is CHECKSUM_NONE or not. It means that ip_summed should be CHECKSUM_NONE at this moment. But ip_summed may already be updated to CHECKSUM_UNNECESSARY in the XDP-MB-PASS path. So the by skb_checksum_none_assert() WARNS about it.  This is duplicate work and updating ip_summed in the bnxt_xdp_build_skb() is not needed.  Splat looks like: WARNING: CPU: 3 PID: 5782 at ./include/linux/skbuff.h:5155 bnxt_rx_pkt+0x479b/0x7610 [bnxt_en] Modules linked in: bnxt_re bnxt_en rdma_ucm rdma_cm iw_cm ib_cm ib_uverbs veth xt_nat xt_tcpudp xt_conntrack nft_chain_nat xt_MASQUERADE nf_] CPU: 3 UID: 0 PID: 5782 Comm: socat Tainted: G        W          6.14.0-rc4+ #27 Tainted: [W]=WARN Hardware name: ASUS System Product Name/PRIME Z690-P D4\, BIOS 0603 11/01/2021 RIP: 0010:bnxt_rx_pkt+0x479b/0x7610 [bnxt_en] Code: 54 24 0c 4c 89 f1 4c 89 ff c1 ea 1f ff d3 0f 1f 00 49 89 c6 48 85 c0 0f 84 4c e5 ff ff 48 89 c7 e8 ca 3d a0 c8 e9 8f f4 ff ff <0f> 0b f RSP: 0018:ffff88881ba09928 EFLAGS: 00010202 RAX: 0000000000000000 RBX: 00000000c7590303 RCX: 0000000000000000 RDX: 1ffff1104e7d1610 RSI: 0000000000000001 RDI: ffff8881c91300b8 RBP: ffff88881ba09b28 R08: ffff888273e8b0d0 R09: ffff888273e8b070 R10: ffff888273e8b010 R11: ffff888278b0f000 R12: ffff888273e8b080 R13: ffff8881c9130e00 R14: ffff8881505d3800 R15: ffff888273e8b000 FS:  00007f5a2e7be080(0000) GS:ffff88881ba00000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 00007fff2e708ff8 CR3: 000000013e3b0000 CR4: 00000000007506f0 PKRU: 55555554 Call Trace:  <IRQ>  ? __warn+0xcd/0x2f0  ? bnxt_rx_pkt+0x479b/0x7610  ? report_bug+0x326/0x3c0  ? handle_bug+0x53/0xa0  ? exc_invalid_op+0x14/0x50  ? asm_exc_invalid_op+0x16/0x20  ? bnxt_rx_pkt+0x479b/0x7610  ? bnxt_rx_pkt+0x3e41/0x7610  ? __pfx_bnxt_rx_pkt+0x10/0x10  ? napi_complete_done+0x2cf/0x7d0  __bnxt_poll_work+0x4e8/0x1220  ? __pfx___bnxt_poll_work+0x10/0x10  ? __pfx_mark_lock.part.0+0x10/0x10  bnxt_poll_p5+0x36a/0xfa0  ? __pfx_bnxt_poll_p5+0x10/0x10  __napi_poll.constprop.0+0xa0/0x440  net_rx_action+0x899/0xd00 ...  Following ping.py patch adds xdp-mb-pass case. so ping.py is going to be able to reproduce this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53058,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: stmmac: TSO: Fix unbalanced DMA map/unmap for non-paged SKB data  In case the non-paged data of a SKB carries protocol header and protocol payload to be transmitted on a certain platform that the DMA AXI address width is configured to 40-bit/48-bit\, or the size of the non-paged data is bigger than TSO_MAX_BUFF_SIZE on a certain platform that the DMA AXI address width is configured to 32-bit\, then this SKB requires at least two DMA transmit descriptors to serve it.  For example\, three descriptors are allocated to split one DMA buffer mapped from one piece of non-paged data:     dma_desc[N + 0]\,     dma_desc[N + 1]\,     dma_desc[N + 2]. Then three elements of tx_q->tx_skbuff_dma[] will be allocated to hold extra information to be reused in stmmac_tx_clean():     tx_q->tx_skbuff_dma[N + 0]\,     tx_q->tx_skbuff_dma[N + 1]\,     tx_q->tx_skbuff_dma[N + 2]. Now we focus on tx_q->tx_skbuff_dma[entry].buf\, which is the DMA buffer address returned by DMA mapping call. stmmac_tx_clean() will try to unmap the DMA buffer _ONLY_IF_ tx_q->tx_skbuff_dma[entry].buf is a valid buffer address.  The expected behavior that saves DMA buffer address of this non-paged data to tx_q->tx_skbuff_dma[entry].buf is:     tx_q->tx_skbuff_dma[N + 0].buf = NULL;     tx_q->tx_skbuff_dma[N + 1].buf = NULL;     tx_q->tx_skbuff_dma[N + 2].buf = dma_map_single(); Unfortunately\, the current code misbehaves like this:     tx_q->tx_skbuff_dma[N + 0].buf = dma_map_single();     tx_q->tx_skbuff_dma[N + 1].buf = NULL;     tx_q->tx_skbuff_dma[N + 2].buf = NULL;  On the stmmac_tx_clean() side\, when dma_desc[N + 0] is closed by the DMA engine\, tx_q->tx_skbuff_dma[N + 0].buf is a valid buffer address obviously\, then the DMA buffer will be unmapped immediately. There may be a rare case that the DMA engine does not finish the pending dma_desc[N + 1]\, dma_desc[N + 2] yet. Now things will go horribly wrong\, DMA is going to access a unmapped/unreferenced memory region\, corrupted data will be transmited or iommu fault will be triggered :(  In contrast\, the for-loop that maps SKB fragments behaves perfectly as expected\, and that is how the driver should do for both non-paged data and paged frags actually.  This patch corrects DMA map/unmap sequences by fixing the array index for tx_q->tx_skbuff_dma[entry].buf when assigning DMA buffer address.  Tested and verified on DWXGMAC CORE 3.20a",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21961,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  eth: bnxt: fix truesize for mb-xdp-pass case  When mb-xdp is set and return is XDP_PASS\, packet is converted from xdp_buff to sk_buff with xdp_update_skb_shared_info() in bnxt_xdp_build_skb(). bnxt_xdp_build_skb() passes incorrect truesize argument to xdp_update_skb_shared_info(). The truesize is calculated as BNXT_RX_PAGE_SIZE * sinfo->nr_frags but the skb_shared_info was wiped by napi_build_skb() before. So it stores sinfo->nr_frags before bnxt_xdp_build_skb() and use it instead of getting skb_shared_info from xdp_get_shared_info_from_buff().  Splat looks like:  ------------[ cut here ]------------  WARNING: CPU: 2 PID: 0 at net/core/skbuff.c:6072 skb_try_coalesce+0x504/0x590  Modules linked in: xt_nat xt_tcpudp veth af_packet xt_conntrack nft_chain_nat xt_MASQUERADE nf_conntrack_netlink xfrm_user xt_addrtype nft_coms  CPU: 2 UID: 0 PID: 0 Comm: swapper/2 Not tainted 6.14.0-rc2+ #3  RIP: 0010:skb_try_coalesce+0x504/0x590  Code: 4b fd ff ff 49 8b 34 24 40 80 e6 40 0f 84 3d fd ff ff 49 8b 74 24 48 40 f6 c6 01 0f 84 2e fd ff ff 48 8d 4e ff e9 25 fd ff ff <0f> 0b e99  RSP: 0018:ffffb62c4120caa8 EFLAGS: 00010287  RAX: 0000000000000003 RBX: ffffb62c4120cb14 RCX: 0000000000000ec0  RDX: 0000000000001000 RSI: ffffa06e5d7dc000 RDI: 0000000000000003  RBP: ffffa06e5d7ddec0 R08: ffffa06e6120a800 R09: ffffa06e7a119900  R10: 0000000000002310 R11: ffffa06e5d7dcec0 R12: ffffe4360575f740  R13: ffffe43600000000 R14: 0000000000000002 R15: 0000000000000002  FS:  0000000000000000(0000) GS:ffffa0755f700000(0000) knlGS:0000000000000000  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033  CR2: 00007f147b76b0f8 CR3: 00000001615d4000 CR4: 00000000007506f0  PKRU: 55555554  Call Trace:   <IRQ>   ? __warn+0x84/0x130   ? skb_try_coalesce+0x504/0x590   ? report_bug+0x18a/0x1a0   ? handle_bug+0x53/0x90   ? exc_invalid_op+0x14/0x70   ? asm_exc_invalid_op+0x16/0x20   ? skb_try_coalesce+0x504/0x590   inet_frag_reasm_finish+0x11f/0x2e0   ip_defrag+0x37a/0x900   ip_local_deliver+0x51/0x120   ip_sublist_rcv_finish+0x64/0x70   ip_sublist_rcv+0x179/0x210   ip_list_rcv+0xf9/0x130  How to reproduce: <Node A> ip link set $interface1 xdp obj xdp_pass.o ip link set $interface1 mtu 9000 up ip a a 10.0.0.1/24 dev $interface1 <Node B> ip link set $interfac2 mtu 9000 up ip a a 10.0.0.2/24 dev $interface2 ping 10.0.0.1 -s 65000  Following ping.py patch adds xdp-mb-pass case. so ping.py is going to be able to reproduce this issue.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53059,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: Fix response handling in iwl_mvm_send_recovery_cmd()  1. The size of the response packet is not validated. 2. The response buffer is not freed.  Resolve these issues by switching to iwl_mvm_send_cmd_status()\, which handles both size validation and frees the buffer.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21962,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  cifs: Fix integer overflow while processing closetimeo mount option  User-provided mount parameter closetimeo of type u32 is intended to have an upper limit\, but before it is validated\, the value is converted from seconds to jiffies which can lead to an integer overflow.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56657,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ALSA: control: Avoid WARN() for symlink errors  Using WARN() for showing the error of symlink creations don't give more information than telling that something goes wrong\, since the usual code path is a lregister callback from each control element creation.  More badly\, the use of WARN() rather confuses fuzzer as if it were serious issues.  This patch downgrades the warning messages to use the normal dev_err() instead of WARN().  For making it clearer\, add the function name to the prefix\, too.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21963,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  cifs: Fix integer overflow while processing acdirmax mount option  User-provided mount parameter acdirmax of type u32 is intended to have an upper limit\, but before it is validated\, the value is converted from seconds to jiffies which can lead to an integer overflow.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21964,linux-libc-dev,MEDIUM,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  cifs: Fix integer overflow while processing acregmax mount option  User-provided mount parameter acregmax of type u32 is intended to have an upper limit\, but before it is validated\, the value is converted from seconds to jiffies which can lead to an integer overflow.  Found by Linux Verification Center (linuxtesting.org) with SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50248,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  ntfs3: Add bounds checking to mi_enum_attr()  Added bounds checking to make sure that every attr don't stray beyond valid memory region.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-43824,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  PCI: endpoint: pci-epf-test: Make use of cached 'epc_features' in pci_epf_test_core_init()  Instead of getting the epc_features from pci_epc_get_features() API\, use the cached pci_epf_test::epc_features value to avoid the NULL check. Since the NULL check is already performed in pci_epf_test_bind()\, having one more check in pci_epf_test_core_init() is redundant and it is not possible to hit the NULL pointer dereference.  Also with commit a01e7214bef9 (""PCI: endpoint: Remove ""core_init_notifier"" flag"")\, 'epc_features' got dereferenced without the NULL check\, leading to the following false positive Smatch warning:    drivers/pci/endpoint/functions/pci-epf-test.c:784 pci_epf_test_core_init() error: we previously assumed 'epc_features' could be null (see line 747)  Thus\, remove the redundant NULL check and also use the epc_features:: {msix_capable/msi_capable} flags directly to avoid local variables.  [kwilczynski: commit log]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-36244,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: taprio: extend minimum interval restriction to entire cycle too  It is possible for syzbot to side-step the restriction imposed by the blamed commit in the Fixes: tag\, because the taprio UAPI permits a cycle-time different from (and potentially shorter than) the sum of entry intervals.  We need one more restriction\, which is that the cycle time itself must be larger than N * ETH_ZLEN bit times\, where N is the number of schedule entries. This restriction needs to apply regardless of whether the cycle time came from the user or was the implicit\, auto-calculated value\, so we move the existing ""cycle == 0"" check outside the ""if ""(!new->cycle_time)"" branch. This way covers both conditions and scenarios.  Add a selftest which illustrates the issue triggered by syzbot.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56651,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  can: hi311x: hi3110_can_ist(): fix potential use-after-free  The commit a22bd630cfff (""can: hi311x: do not report txerr and rxerr during bus-off"") removed the reporting of rxerr and txerr even in case of correct operation (i. e. not bus-off).  The error count information added to the CAN frame after netif_rx() is a potential use after free\, since there is no guarantee that the skb is in the same state. It might be freed or reused.  Fix the issue by postponing the netif_rx() call in case of txerr and rxerr reporting.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50249,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  ACPI: CPPC: Make rmw_lock a raw_spin_lock  The following BUG was triggered:  ============================= [ BUG: Invalid wait context ] 6.12.0-rc2-XXX #406 Not tainted ----------------------------- kworker/1:1/62 is trying to lock: ffffff8801593030 (&cpc_ptr->rmw_lock){+.+.}-{3:3}\, at: cpc_write+0xcc/0x370 other info that might help us debug this: context-{5:5} 2 locks held by kworker/1:1/62:   #0: ffffff897ef5ec98 (&rq->__lock){-.-.}-{2:2}\, at: raw_spin_rq_lock_nested+0x2c/0x50   #1: ffffff880154e238 (&sg_policy->update_lock){....}-{2:2}\, at: sugov_update_shared+0x3c/0x280 stack backtrace: CPU: 1 UID: 0 PID: 62 Comm: kworker/1:1 Not tainted 6.12.0-rc2-g9654bd3e8806 #406 Workqueue:  0x0 (events) Call trace:   dump_backtrace+0xa4/0x130   show_stack+0x20/0x38   dump_stack_lvl+0x90/0xd0   dump_stack+0x18/0x28   __lock_acquire+0x480/0x1ad8   lock_acquire+0x114/0x310   _raw_spin_lock+0x50/0x70   cpc_write+0xcc/0x370   cppc_set_perf+0xa0/0x3a8   cppc_cpufreq_fast_switch+0x40/0xc0   cpufreq_driver_fast_switch+0x4c/0x218   sugov_update_shared+0x234/0x280   update_load_avg+0x6ec/0x7b8   dequeue_entities+0x108/0x830   dequeue_task_fair+0x58/0x408   __schedule+0x4f0/0x1070   schedule+0x54/0x130   worker_thread+0xc0/0x2e8   kthread+0x130/0x148   ret_from_fork+0x10/0x20  sugov_update_shared() locks a raw_spinlock while cpc_write() locks a spinlock.  To have a correct wait-type order\, update rmw_lock to a raw spinlock and ensure that interrupts will be disabled on the CPU holding it.  [ rjw: Changelog edits ]",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27041,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: fix NULL checks for adev->dm.dc in amdgpu_dm_fini()  Since 'adev->dm.dc' in amdgpu_dm_fini() might turn out to be NULL before the call to dc_enable_dmub_notifications()\, check beforehand to ensure there will not be a possible NULL-ptr-deref there.  Also\, since commit 1e88eb1b2c25 (""drm/amd/display: Drop CONFIG_DRM_AMD_DC_HDCP"") there are two separate checks for NULL in 'adev->dm.dc' before dc_deinit_callbacks() and dc_dmub_srv_destroy(). Clean up by combining them all under one 'if'.  Found by Linux Verification Center (linuxtesting.org) with static analysis tool SVACE.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56650,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  netfilter: x_tables: fix LED ID check in led_tg_check()  Syzbot has reported the following BUG detected by KASAN:  BUG: KASAN: slab-out-of-bounds in strlen+0x58/0x70 Read of size 1 at addr ffff8881022da0c8 by task repro/5879 ... Call Trace:  <TASK>  dump_stack_lvl+0x241/0x360  ? __pfx_dump_stack_lvl+0x10/0x10  ? __pfx__printk+0x10/0x10  ? _printk+0xd5/0x120  ? __virt_addr_valid+0x183/0x530  ? __virt_addr_valid+0x183/0x530  print_report+0x169/0x550  ? __virt_addr_valid+0x183/0x530  ? __virt_addr_valid+0x183/0x530  ? __virt_addr_valid+0x45f/0x530  ? __phys_addr+0xba/0x170  ? strlen+0x58/0x70  kasan_report+0x143/0x180  ? strlen+0x58/0x70  strlen+0x58/0x70  kstrdup+0x20/0x80  led_tg_check+0x18b/0x3c0  xt_check_target+0x3bb/0xa40  ? __pfx_xt_check_target+0x10/0x10  ? stack_depot_save_flags+0x6e4/0x830  ? nft_target_init+0x174/0xc30  nft_target_init+0x82d/0xc30  ? __pfx_nft_target_init+0x10/0x10  ? nf_tables_newrule+0x1609/0x2980  ? nf_tables_newrule+0x1609/0x2980  ? rcu_is_watching+0x15/0xb0  ? nf_tables_newrule+0x1609/0x2980  ? nf_tables_newrule+0x1609/0x2980  ? __kmalloc_noprof+0x21a/0x400  nf_tables_newrule+0x1860/0x2980  ? __pfx_nf_tables_newrule+0x10/0x10  ? __nla_parse+0x40/0x60  nfnetlink_rcv+0x14e5/0x2ab0  ? __pfx_validate_chain+0x10/0x10  ? __pfx_nfnetlink_rcv+0x10/0x10  ? __lock_acquire+0x1384/0x2050  ? netlink_deliver_tap+0x2e/0x1b0  ? __pfx_lock_release+0x10/0x10  ? netlink_deliver_tap+0x2e/0x1b0  netlink_unicast+0x7f8/0x990  ? __pfx_netlink_unicast+0x10/0x10  ? __virt_addr_valid+0x183/0x530  ? __check_object_size+0x48e/0x900  netlink_sendmsg+0x8e4/0xcb0  ? __pfx_netlink_sendmsg+0x10/0x10  ? aa_sock_msg_perm+0x91/0x160  ? __pfx_netlink_sendmsg+0x10/0x10  __sock_sendmsg+0x223/0x270  ____sys_sendmsg+0x52a/0x7e0  ? __pfx_____sys_sendmsg+0x10/0x10  __sys_sendmsg+0x292/0x380  ? __pfx___sys_sendmsg+0x10/0x10  ? lockdep_hardirqs_on_prepare+0x43d/0x780  ? __pfx_lockdep_hardirqs_on_prepare+0x10/0x10  ? exc_page_fault+0x590/0x8c0  ? do_syscall_64+0xb6/0x230  do_syscall_64+0xf3/0x230  entry_SYSCALL_64_after_hwframe+0x77/0x7f ...  </TASK>  Since an invalid (without '\\0' byte at all) byte sequence may be passed from userspace\, add an extra check to ensure that such a sequence is rejected as possible ID and so never passed to 'kstrdup()' and further.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2010-4563,linux-libc-dev,LOW,6.1.115-1,N/A,"The Linux kernel\, when using IPv6\, allows remote attackers to determine whether a host is sniffing the network by sending an ICMPv6 Echo Request to a multicast address and determining whether an Echo Reply is sent\, as demonstrated by thcping.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-27042,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amdgpu: Fix potential out-of-bounds access in 'amdgpu_discovery_reg_base_init()'  The issue arises when the array 'adev->vcn.vcn_config' is accessed before checking if the index 'adev->vcn.num_vcn_inst' is within the bounds of the array.  The fix involves moving the bounds check before the array access. This ensures that 'adev->vcn.num_vcn_inst' is within the bounds of the array before it is used as an index.  Fixes the below: drivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c:1289 amdgpu_discovery_reg_base_init() error: testing array offset 'adev->vcn.num_vcn_inst' after use.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21967,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  ksmbd: fix use-after-free in ksmbd_free_work_struct  ->interim_entry of ksmbd_work could be deleted after oplock is freed. We don't need to manage it with linked list. The interim request could be immediately sent whenever a oplock break wait is needed.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53050,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/i915/hdcp: Add encoder check in hdcp2_get_capability  Add encoder check in intel_hdcp2_get_capability to avoid null pointer error.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50244,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Additional check in ni_clear()  Checking of NTFS_FLAGS_LOG_REPLAYING added to prevent access to uninitialized bitmap during replay process.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21968,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  drm/amd/display: Fix slab-use-after-free on hdcp_work  [Why] A slab-use-after-free is reported when HDCP is destroyed but the property_validate_dwork queue is still running.  [How] Cancel the delayed work when destroying workqueue.  (cherry picked from commit 725a04ba5a95e89c89633d4322430cfbca7ce128)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53051,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/i915/hdcp: Add encoder check in intel_hdcp_get_capability  Sometimes during hotplug scenario or suspend/resume scenario encoder is not always initialized when intel_hdcp_get_capability add a check to avoid kernel null pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50245,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Fix possible deadlock in mi_read  Mutex lock with another subclass used in ni_lock_dir().",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-21969,linux-libc-dev,HIGH,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  Bluetooth: L2CAP: Fix slab-use-after-free Read in l2cap_send_cmd  After the hci sync command releases l2cap_conn\, the hci receive data work queue references the released l2cap_conn when sending to the upper layer. Add hci dev lock to the hci receive data work queue to synchronize the two.  [1] BUG: KASAN: slab-use-after-free in l2cap_send_cmd+0x187/0x8d0 net/bluetooth/l2cap_core.c:954 Read of size 8 at addr ffff8880271a4000 by task kworker/u9:2/5837  CPU: 0 UID: 0 PID: 5837 Comm: kworker/u9:2 Not tainted 6.13.0-rc5-syzkaller-00163-gab75170520d4 #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 09/13/2024 Workqueue: hci1 hci_rx_work Call Trace:  <TASK>  __dump_stack lib/dump_stack.c:94 [inline]  dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120  print_address_description mm/kasan/report.c:378 [inline]  print_report+0x169/0x550 mm/kasan/report.c:489  kasan_report+0x143/0x180 mm/kasan/report.c:602  l2cap_build_cmd net/bluetooth/l2cap_core.c:2964 [inline]  l2cap_send_cmd+0x187/0x8d0 net/bluetooth/l2cap_core.c:954  l2cap_sig_send_rej net/bluetooth/l2cap_core.c:5502 [inline]  l2cap_sig_channel net/bluetooth/l2cap_core.c:5538 [inline]  l2cap_recv_frame+0x221f/0x10db0 net/bluetooth/l2cap_core.c:6817  hci_acldata_packet net/bluetooth/hci_core.c:3797 [inline]  hci_rx_work+0x508/0xdb0 net/bluetooth/hci_core.c:4040  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f0/0x390 kernel/kthread.c:389  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  </TASK>  Allocated by task 5837:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  poison_kmalloc_redzone mm/kasan/common.c:377 [inline]  __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:394  kasan_kmalloc include/linux/kasan.h:260 [inline]  __kmalloc_cache_noprof+0x243/0x390 mm/slub.c:4329  kmalloc_noprof include/linux/slab.h:901 [inline]  kzalloc_noprof include/linux/slab.h:1037 [inline]  l2cap_conn_add+0xa9/0x8e0 net/bluetooth/l2cap_core.c:6860  l2cap_connect_cfm+0x115/0x1090 net/bluetooth/l2cap_core.c:7239  hci_connect_cfm include/net/bluetooth/hci_core.h:2057 [inline]  hci_remote_features_evt+0x68e/0xac0 net/bluetooth/hci_event.c:3726  hci_event_func net/bluetooth/hci_event.c:7473 [inline]  hci_event_packet+0xac2/0x1540 net/bluetooth/hci_event.c:7525  hci_rx_work+0x3f3/0xdb0 net/bluetooth/hci_core.c:4035  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f0/0x390 kernel/kthread.c:389  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  Freed by task 54:  kasan_save_stack mm/kasan/common.c:47 [inline]  kasan_save_track+0x3f/0x80 mm/kasan/common.c:68  kasan_save_free_info+0x40/0x50 mm/kasan/generic.c:582  poison_slab_object mm/kasan/common.c:247 [inline]  __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264  kasan_slab_free include/linux/kasan.h:233 [inline]  slab_free_hook mm/slub.c:2353 [inline]  slab_free mm/slub.c:4613 [inline]  kfree+0x196/0x430 mm/slub.c:4761  l2cap_connect_cfm+0xcc/0x1090 net/bluetooth/l2cap_core.c:7235  hci_connect_cfm include/net/bluetooth/hci_core.h:2057 [inline]  hci_conn_failed+0x287/0x400 net/bluetooth/hci_conn.c:1266  hci_abort_conn_sync+0x56c/0x11f0 net/bluetooth/hci_sync.c:5603  hci_cmd_sync_work+0x22b/0x400 net/bluetooth/hci_sync.c:332  process_one_work kernel/workqueue.c:3229 [inline]  process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3310  worker_thread+0x870/0xd30 kernel/workqueue.c:3391  kthread+0x2f0/0x390 kernel/kthread.c:389  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entr ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53052,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  io_uring/rw: fix missing NOWAIT check for O_DIRECT start write  When io_uring starts a write\, it'll call kiocb_start_write() to bump the super block rwsem\, preventing any freezes from happening while that write is in-flight. The freeze side will grab that rwsem for writing\, excluding any new writers from happening and waiting for existing writes to finish. But io_uring unconditionally uses kiocb_start_write()\, which will block if someone is currently attempting to freeze the mount point. This causes a deadlock where freeze is waiting for previous writes to complete\, but the previous writes cannot complete\, as the task that is supposed to complete them is blocked waiting on starting a new write. This results in the following stuck trace showing that dependency with the write blocked starting a new write:  task:fio             state:D stack:0     pid:886   tgid:886   ppid:876 Call trace:  __switch_to+0x1d8/0x348  __schedule+0x8e8/0x2248  schedule+0x110/0x3f0  percpu_rwsem_wait+0x1e8/0x3f8  __percpu_down_read+0xe8/0x500  io_write+0xbb8/0xff8  io_issue_sqe+0x10c/0x1020  io_submit_sqes+0x614/0x2110  __arm64_sys_io_uring_enter+0x524/0x1038  invoke_syscall+0x74/0x268  el0_svc_common.constprop.0+0x160/0x238  do_el0_svc+0x44/0x60  el0_svc+0x44/0xb0  el0t_64_sync_handler+0x118/0x128  el0t_64_sync+0x168/0x170 INFO: task fsfreeze:7364 blocked for more than 15 seconds.       Not tainted 6.12.0-rc5-00063-g76aaf945701c #7963  with the attempting freezer stuck trying to grab the rwsem:  task:fsfreeze        state:D stack:0     pid:7364  tgid:7364  ppid:995 Call trace:  __switch_to+0x1d8/0x348  __schedule+0x8e8/0x2248  schedule+0x110/0x3f0  percpu_down_write+0x2b0/0x680  freeze_super+0x248/0x8a8  do_vfs_ioctl+0x149c/0x1b18  __arm64_sys_ioctl+0xd0/0x1a0  invoke_syscall+0x74/0x268  el0_svc_common.constprop.0+0x160/0x238  do_el0_svc+0x44/0x60  el0_svc+0x44/0xb0  el0t_64_sync_handler+0x118/0x128  el0t_64_sync+0x168/0x170  Fix this by having the io_uring side honor IOCB_NOWAIT\, and only attempt a blocking grab of the super block rwsem if it isn't set. For normal issue where IOCB_NOWAIT would always be set\, this returns -EAGAIN which will have io_uring core issue a blocking attempt of the write. That will in turn also get completions run\, ensuring forward progress.  Since freezing requires CAP_SYS_ADMIN in the first place\, this isn't something that can be triggered by a regular user.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2023-23005,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel before 6.2\, mm/memory-tiers.c misinterprets the alloc_memory_type return value (expects it to be NULL in the error case\, whereas it is actually an error pointer). NOTE: this is disputed by third parties because there are no realistic cases in which a user can cause the alloc_memory_type error case to be reached.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50246,linux-libc-dev,HIGH,6.1.115-1,6.1.133-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Add rough attr alloc_size check",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50247,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Check if more than chunk-size bytes are written  A incorrectly formatted chunk may decompress into more than LZNT_CHUNK_SIZE bytes and a index out of bounds will occur in s_max_off.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53589,binutils,LOW,2.40-2,N/A,"GNU objdump 2.43 is vulnerable to Buffer Overflow in the BFD (Binary File Descriptor) library's handling of tekhex format files.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56659,linux-libc-dev,MEDIUM,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: lapb: increase LAPB_HEADER_LEN  It is unclear if net/lapb code is supposed to be ready for 8021q.  We can at least avoid crashes like the following :  skbuff: skb_under_panic: text:ffffffff8aabe1f6 len:24 put:20 head:ffff88802824a400 data:ffff88802824a3fe tail:0x16 end:0x140 dev:nr0.2 ------------[ cut here ]------------  kernel BUG at net/core/skbuff.c:206 ! Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI CPU: 1 UID: 0 PID: 5508 Comm: dhcpcd Not tainted 6.12.0-rc7-syzkaller-00144-g66418447d27b #0 Hardware name: Google Google Compute Engine/Google Compute Engine\, BIOS Google 10/30/2024  RIP: 0010:skb_panic net/core/skbuff.c:206 [inline]  RIP: 0010:skb_under_panic+0x14b/0x150 net/core/skbuff.c:216 Code: 0d 8d 48 c7 c6 2e 9e 29 8e 48 8b 54 24 08 8b 0c 24 44 8b 44 24 04 4d 89 e9 50 41 54 41 57 41 56 e8 1a 6f 37 02 48 83 c4 20 90 <0f> 0b 0f 1f 00 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 RSP: 0018:ffffc90002ddf638 EFLAGS: 00010282 RAX: 0000000000000086 RBX: dffffc0000000000 RCX: 7a24750e538ff600 RDX: 0000000000000000 RSI: 0000000000000201 RDI: 0000000000000000 RBP: ffff888034a86650 R08: ffffffff8174b13c R09: 1ffff920005bbe60 R10: dffffc0000000000 R11: fffff520005bbe61 R12: 0000000000000140 R13: ffff88802824a400 R14: ffff88802824a3fe R15: 0000000000000016 FS:  00007f2a5990d740(0000) GS:ffff8880b8700000(0000) knlGS:0000000000000000 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 CR2: 000000110c2631fd CR3: 0000000029504000 CR4: 00000000003526f0 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400 Call Trace:  <TASK>   skb_push+0xe5/0x100 net/core/skbuff.c:2636   nr_header+0x36/0x320 net/netrom/nr_dev.c:69   dev_hard_header include/linux/netdevice.h:3148 [inline]   vlan_dev_hard_header+0x359/0x480 net/8021q/vlan_dev.c:83   dev_hard_header include/linux/netdevice.h:3148 [inline]   lapbeth_data_transmit+0x1f6/0x2a0 drivers/net/wan/lapbether.c:257   lapb_data_transmit+0x91/0xb0 net/lapb/lapb_iface.c:447   lapb_transmit_buffer+0x168/0x1f0 net/lapb/lapb_out.c:149  lapb_establish_data_link+0x84/0xd0  lapb_device_event+0x4e0/0x670   notifier_call_chain+0x19f/0x3e0 kernel/notifier.c:93  __dev_notify_flags+0x207/0x400   dev_change_flags+0xf0/0x1a0 net/core/dev.c:8922   devinet_ioctl+0xa4e/0x1aa0 net/ipv4/devinet.c:1188   inet_ioctl+0x3d7/0x4f0 net/ipv4/af_inet.c:1003   sock_do_ioctl+0x158/0x460 net/socket.c:1227   sock_ioctl+0x626/0x8e0 net/socket.c:1346   vfs_ioctl fs/ioctl.c:51 [inline]   __do_sys_ioctl fs/ioctl.c:907 [inline]   __se_sys_ioctl+0xf9/0x170 fs/ioctl.c:893   do_syscall_x64 arch/x86/entry/common.c:52 [inline]   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1153,binutils,LOW,2.40-2,N/A,"A vulnerability classified as problematic was found in GNU Binutils 2.43/2.44. Affected by this vulnerability is the function bfd_set_format of the file format.c. The manipulation leads to memory corruption. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 2.45 is able to address this issue. The identifier of the patch is 8d97c1a53f3dc9fd8e1ccdb039b8a33d50133150. It is recommended to upgrade the affected component.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53055,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: fix 6 GHz scan construction  If more than 255 colocated APs exist for the set of all APs found during 2.4/5 GHz scanning\, then the 6 GHz scan construction will loop forever since the loop variable has type u8\, which can never reach the number found when that's bigger than 255\, and is stored in a u32 variable. Also move it into the loops to have a smaller scope.  Using a u32 there is fine\, we limit the number of APs in the scan list and each has a limit on the number of RNR entries due to the frame size. With a limit of 1000 scan results\, a frame size upper bound of 4096 (really it's more like ~2300) and a TBTT entry size of at least 11\, we get an upper bound for the number of ~372k\, well in the bounds of a u32.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-56658,linux-libc-dev,HIGH,6.1.115-1,6.1.123-1,"In the Linux kernel\, the following vulnerability has been resolved:  net: defer final 'struct net' free in netns dismantle  Ilya reported a slab-use-after-free in dst_destroy [1]  Issue is in xfrm6_net_init() and xfrm4_net_init() :  They copy xfrm[46]_dst_ops_template into net->xfrm.xfrm[46]_dst_ops.  But net structure might be freed before all the dst callbacks are called. So when dst_destroy() calls later :  if (dst->ops->destroy)     dst->ops->destroy(dst);  dst->ops points to the old net->xfrm.xfrm[46]_dst_ops\, which has been freed.  See a relevant issue fixed in :  ac888d58869b (""net: do not delay dst_entries_add() in dst_release()"")  A fix is to queue the 'struct net' to be freed after one another cleanup_net() round (and existing rcu_barrier())  [1]  BUG: KASAN: slab-use-after-free in dst_destroy (net/core/dst.c:112) Read of size 8 at addr ffff8882137ccab0 by task swapper/37/0 Dec 03 05:46:18 kernel: CPU: 37 UID: 0 PID: 0 Comm: swapper/37 Kdump: loaded Not tainted 6.12.0 #67 Hardware name: Red Hat KVM/RHEL\, BIOS 1.16.1-1.el9 04/01/2014 Call Trace:  <IRQ> dump_stack_lvl (lib/dump_stack.c:124) print_address_description.constprop.0 (mm/kasan/report.c:378) ? dst_destroy (net/core/dst.c:112) print_report (mm/kasan/report.c:489) ? dst_destroy (net/core/dst.c:112) ? kasan_addr_to_slab (mm/kasan/common.c:37) kasan_report (mm/kasan/report.c:603) ? dst_destroy (net/core/dst.c:112) ? rcu_do_batch (kernel/rcu/tree.c:2567) dst_destroy (net/core/dst.c:112) rcu_do_batch (kernel/rcu/tree.c:2567) ? __pfx_rcu_do_batch (kernel/rcu/tree.c:2491) ? lockdep_hardirqs_on_prepare (kernel/locking/lockdep.c:4339 kernel/locking/lockdep.c:4406) rcu_core (kernel/rcu/tree.c:2825) handle_softirqs (kernel/softirq.c:554) __irq_exit_rcu (kernel/softirq.c:589 kernel/softirq.c:428 kernel/softirq.c:637) irq_exit_rcu (kernel/softirq.c:651) sysvec_apic_timer_interrupt (arch/x86/kernel/apic/apic.c:1049 arch/x86/kernel/apic/apic.c:1049)  </IRQ>  <TASK> asm_sysvec_apic_timer_interrupt (./arch/x86/include/asm/idtentry.h:702) RIP: 0010:default_idle (./arch/x86/include/asm/irqflags.h:37 ./arch/x86/include/asm/irqflags.h:92 arch/x86/kernel/process.c:743) Code: 00 4d 29 c8 4c 01 c7 4c 29 c2 e9 6e ff ff ff 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 66 90 0f 00 2d c7 c9 27 00 fb f4 <fa> c3 cc cc cc cc 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 90 RSP: 0018:ffff888100d2fe00 EFLAGS: 00000246 RAX: 00000000001870ed RBX: 1ffff110201a5fc2 RCX: ffffffffb61a3e46 RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffffb3d4d123 RBP: 0000000000000000 R08: 0000000000000001 R09: ffffed11c7e1835d R10: ffff888e3f0c1aeb R11: 0000000000000000 R12: 0000000000000000 R13: ffff888100d20000 R14: dffffc0000000000 R15: 0000000000000000 ? ct_kernel_exit.constprop.0 (kernel/context_tracking.c:148) ? cpuidle_idle_call (kernel/sched/idle.c:186) default_idle_call (./include/linux/cpuidle.h:143 kernel/sched/idle.c:118) cpuidle_idle_call (kernel/sched/idle.c:186) ? __pfx_cpuidle_idle_call (kernel/sched/idle.c:168) ? lock_release (kernel/locking/lockdep.c:467 kernel/locking/lockdep.c:5848) ? lockdep_hardirqs_on_prepare (kernel/locking/lockdep.c:4347 kernel/locking/lockdep.c:4406) ? tsc_verify_tsc_adjust (arch/x86/kernel/tsc_sync.c:59) do_idle (kernel/sched/idle.c:326) cpu_startup_entry (kernel/sched/idle.c:423 (discriminator 1)) start_secondary (arch/x86/kernel/smpboot.c:202 arch/x86/kernel/smpboot.c:282) ? __pfx_start_secondary (arch/x86/kernel/smpboot.c:232) ? soft_restart_cpu (arch/x86/kernel/head_64.S:452) common_startup_64 (arch/x86/kernel/head_64.S:414)  </TASK> Dec 03 05:46:18 kernel: Allocated by task 12184: kasan_save_stack (mm/kasan/common.c:48) kasan_save_track (./arch/x86/include/asm/current.h:49 mm/kasan/common.c:60 mm/kasan/common.c:69) __kasan_slab_alloc (mm/kasan/common.c:319 mm/kasan/common.c:345) kmem_cache_alloc_noprof (mm/slub.c:4085 mm/slub.c:4134 mm/slub.c:4141) copy_net_ns (net/core/net_namespace.c:421 net/core/net_namespace.c:480) create_new_namespaces ---truncated---",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1152,binutils,LOW,2.40-2,N/A,"A vulnerability classified as problematic has been found in GNU Binutils 2.43. Affected is the function xstrdup of the file xstrdup.c of the component ld. The manipulation leads to memory leak. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The code maintainer explains: ""I'm not going to commit some of the leak fixes I've been working on to the 2.44 branch due to concern that would destabilise ld. All of the reported leaks in this bugzilla have been fixed on binutils master.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53056,linux-libc-dev,MEDIUM,6.1.115-1,N/A,"In the Linux kernel\, the following vulnerability has been resolved:  drm/mediatek: Fix potential NULL dereference in mtk_crtc_destroy()  In mtk_crtc_create()\, if the call to mbox_request_channel() fails then we set the ""mtk_crtc->cmdq_client.chan"" pointer to NULL.  In that situation\, we do not call cmdq_pkt_create().  During the cleanup\, we need to check if the ""mtk_crtc->cmdq_client.chan"" is NULL first before calling cmdq_pkt_destroy().  Calling cmdq_pkt_destroy() is unnecessary if we didn't call cmdq_pkt_create() and it will result in a NULL pointer dereference.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-50242,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Additional check in ntfs_file_release",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1151,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43. It has been rated as problematic. This issue affects the function xmemdup of the file xmemdup.c of the component ld. The manipulation leads to memory leak. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The code maintainer explains: ""I'm not going to commit some of the leak fixes I've been working on to the 2.44 branch due to concern that would destabilise ld. All of the reported leaks in this bugzilla have been fixed on binutils master.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2018-10126,libtiff6,LOW,4.5.0-6+deb12u2,N/A,"ijg-libjpeg before 9d\, as used in tiff2pdf (from LibTIFF) and other products\, does not check for a NULL pointer at a certain place in jpeg_fdct_16x16 in jfdctint.c.",|tykio/midsommar||tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-32364,libpoppler126,MEDIUM,22.12.0-2+b1,N/A,"A floating-point exception in the PSStack::roll function of Poppler before 25.04.0 can cause an application to crash when handling malformed inputs associated with INT_MIN.",|tykio/midsommar|
CVE-2024-50243,linux-libc-dev,MEDIUM,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  fs/ntfs3: Fix general protection fault in run_is_mapped_full  Fixed deleating of a non-resident attribute in ntfs_create_inode() rollback.",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2024-53057,linux-libc-dev,HIGH,6.1.115-1,6.1.119-1,"In the Linux kernel\, the following vulnerability has been resolved:  net/sched: stop qdisc_tree_reduce_backlog on TC_H_ROOT  In qdisc_tree_reduce_backlog\, Qdiscs with major handle ffff: are assumed to be either root or ingress. This assumption is bogus since it's valid to create egress qdiscs with major handle ffff: Budimir Markovic found that for qdiscs like DRR that maintain an active class list\, it will cause a UAF with a dangling class pointer.  In 066a3b5b2346\, the concern was to avoid iterating over the ingress qdisc since its parent is itself. The proper fix is to stop when parent TC_H_ROOT is reached because the only way to retrieve ingress is when a hierarchy which does not contain a ffff: major handle call into qdisc_lookup with TC_H_MAJ(TC_H_ROOT).  In the scenario where major ffff: is an egress qdisc in any of the tree levels\, the updates will also propagate to TC_H_ROOT\, which then the iteration must stop.    net/sched/sch_api.c | 2 +-  1 file changed\, 1 insertion(+)\, 1 deletion(-)",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-1150,binutils,LOW,2.40-2,N/A,"A vulnerability was found in GNU Binutils 2.43. It has been declared as problematic. This vulnerability affects the function bfd_malloc of the file libbfd.c of the component ld. The manipulation leads to memory leak. The attack can be initiated remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The code maintainer explains: ""I'm not going to commit some of the leak fixes I've been working on to the 2.44 branch due to concern that would destabilise ld. All of the reported leaks in this bugzilla have been fixed on binutils master.""",|tykio/ner-redact||tykio/smart-ner-redact|
CVE-2025-32365,libpoppler126,MEDIUM,22.12.0-2+b1,N/A,"Poppler before 25.04.0 allows crafted input files to trigger out-of-bounds reads in the JBIG2Bitmap::combine function in JBIG2Stream.cc because of a misplaced isOk check.",|tykio/midsommar|
